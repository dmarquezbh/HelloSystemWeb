// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DADOS.Models;

#nullable disable

namespace DADOS.Data
{
    public partial class HospitaleDbContext : DbContext
    {
        public HospitaleDbContext()
        {
        }

        public HospitaleDbContext(DbContextOptions<HospitaleDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcatoConjunto> AcatoConjunto { get; set; }
        public virtual DbSet<AcompanhamentoGuias> AcompanhamentoGuias { get; set; }
        public virtual DbSet<AcompanhamentoGuiasStatus> AcompanhamentoGuiasStatus { get; set; }
        public virtual DbSet<Acompanhante> Acompanhante { get; set; }
        public virtual DbSet<Acrescimos> Acrescimos { get; set; }
        public virtual DbSet<AcrescimosFechamentoItemValorLiberado> AcrescimosFechamentoItemValorLiberado { get; set; }
        public virtual DbSet<AcrescimosHistorico> AcrescimosHistorico { get; set; }
        public virtual DbSet<AdequacaoCodigo> AdequacaoCodigo { get; set; }
        public virtual DbSet<AditivoAnexo> AditivoAnexo { get; set; }
        public virtual DbSet<AditivoAnexoAditivoAnexo> AditivoAnexoAditivoAnexo { get; set; }
        public virtual DbSet<AditivoAnexoImagem> AditivoAnexoImagem { get; set; }
        public virtual DbSet<AgProntuarioEletronico> AgProntuarioEletronico { get; set; }
        public virtual DbSet<Agencia> Agencia { get; set; }
        public virtual DbSet<AgenciaTelefone> AgenciaTelefone { get; set; }
        public virtual DbSet<AgendaCc> AgendaCc { get; set; }
        public virtual DbSet<AgendaCcServico> AgendaCcServico { get; set; }
        public virtual DbSet<AgendaCgi> AgendaCgi { get; set; }
        public virtual DbSet<AgendaFarmacia> AgendaFarmacia { get; set; }
        public virtual DbSet<AgendaFarmaciaPeriodoAtendido> AgendaFarmaciaPeriodoAtendido { get; set; }
        public virtual DbSet<AgendaFarmaciaUnidadeOrganizacional> AgendaFarmaciaUnidadeOrganizacional { get; set; }
        public virtual DbSet<AgendaFarmaciaUnidadeOrganizacionalHistorico> AgendaFarmaciaUnidadeOrganizacionalHistorico { get; set; }
        public virtual DbSet<AgendaHd> AgendaHd { get; set; }
        public virtual DbSet<AgendaHdCorpoClinico> AgendaHdCorpoClinico { get; set; }
        public virtual DbSet<AgendaHdServico> AgendaHdServico { get; set; }
        public virtual DbSet<AgendaHorariosSadt> AgendaHorariosSadt { get; set; }
        public virtual DbSet<AgendaProfissionalSaudeBloqueioOperadoraHorario> AgendaProfissionalSaudeBloqueioOperadoraHorario { get; set; }
        public virtual DbSet<AgendaProfissionalSaudeOperadora> AgendaProfissionalSaudeOperadora { get; set; }
        public virtual DbSet<AgendaProfissionalSaudeOperadoraHorario> AgendaProfissionalSaudeOperadoraHorario { get; set; }
        public virtual DbSet<AgendaSadt> AgendaSadt { get; set; }
        public virtual DbSet<AgendaSadtBloqueioPaciente> AgendaSadtBloqueioPaciente { get; set; }
        public virtual DbSet<AgendaSadtServico> AgendaSadtServico { get; set; }
        public virtual DbSet<Agendaatul> Agendaatul { get; set; }
        public virtual DbSet<AgendaccEquipamento> AgendaccEquipamento { get; set; }
        public virtual DbSet<AgendamentoPagamento> AgendamentoPagamento { get; set; }
        public virtual DbSet<AgrupamentoMaterial> AgrupamentoMaterial { get; set; }
        public virtual DbSet<AgrupamentoMaterialHistorico> AgrupamentoMaterialHistorico { get; set; }
        public virtual DbSet<AgrupamentoMaterialProduto> AgrupamentoMaterialProduto { get; set; }
        public virtual DbSet<AgrupamentoMaterialProdutoHistorico> AgrupamentoMaterialProdutoHistorico { get; set; }
        public virtual DbSet<AgrupamentoMaterialUnidadeOrganizacional> AgrupamentoMaterialUnidadeOrganizacional { get; set; }
        public virtual DbSet<AjustePmd> AjustePmd { get; set; }
        public virtual DbSet<AjusteProcedimentoLinhaDadosTransporte> AjusteProcedimentoLinhaDadosTransporte { get; set; }
        public virtual DbSet<AjusteProcedimentoTransporte> AjusteProcedimentoTransporte { get; set; }
        public virtual DbSet<Alimento> Alimento { get; set; }
        public virtual DbSet<AlimentoNutriente> AlimentoNutriente { get; set; }
        public virtual DbSet<AlimentoRefeicao> AlimentoRefeicao { get; set; }
        public virtual DbSet<AltaMedica> AltaMedica { get; set; }
        public virtual DbSet<Alvara> Alvara { get; set; }
        public virtual DbSet<AmilAutorizacao> AmilAutorizacao { get; set; }
        public virtual DbSet<Amostra> Amostra { get; set; }
        public virtual DbSet<AmostraOrdemServicoExame> AmostraOrdemServicoExame { get; set; }
        public virtual DbSet<Analisador> Analisador { get; set; }
        public virtual DbSet<AnaliseBffg> AnaliseBffg { get; set; }
        public virtual DbSet<AnaliseCritica> AnaliseCritica { get; set; }
        public virtual DbSet<AnaliseDiariaSus> AnaliseDiariaSus { get; set; }
        public virtual DbSet<AnaliseUnimed> AnaliseUnimed { get; set; }
        public virtual DbSet<AnoMesBi> AnoMesBi { get; set; }
        public virtual DbSet<AntecipacaoEntrega> AntecipacaoEntrega { get; set; }
        public virtual DbSet<AntecipacaoEntregaProduto> AntecipacaoEntregaProduto { get; set; }
        public virtual DbSet<Antibiotico> Antibiotico { get; set; }
        public virtual DbSet<AntimicrobianoAtendimentoProdutoDetalhe> AntimicrobianoAtendimentoProdutoDetalhe { get; set; }
        public virtual DbSet<AntimicrobianoPedido> AntimicrobianoPedido { get; set; }
        public virtual DbSet<AntimicrobianoPedidoExameMicrobiologicoTipo> AntimicrobianoPedidoExameMicrobiologicoTipo { get; set; }
        public virtual DbSet<AntimicrobianoPedidoItem> AntimicrobianoPedidoItem { get; set; }
        public virtual DbSet<AntimicrobianoPedidoItemSolicitacaoPdEnfermagem> AntimicrobianoPedidoItemSolicitacaoPdEnfermagem { get; set; }
        public virtual DbSet<AntimicrobianoPedidoItemSolicitacaoPdEnfermagemAjuste2020> AntimicrobianoPedidoItemSolicitacaoPdEnfermagemAjuste2020 { get; set; }
        public virtual DbSet<AntimicrobianoPedidoMicroorganismoIsolado> AntimicrobianoPedidoMicroorganismoIsolado { get; set; }
        public virtual DbSet<Aplicativo> Aplicativo { get; set; }
        public virtual DbSet<ApresentacaoMedicamento> ApresentacaoMedicamento { get; set; }
        public virtual DbSet<ApuracaoContabil> ApuracaoContabil { get; set; }
        public virtual DbSet<Arquivo> Arquivo { get; set; }
        public virtual DbSet<ArquivoContabil> ArquivoContabil { get; set; }
        public virtual DbSet<ArquivoContabilGerado> ArquivoContabilGerado { get; set; }
        public virtual DbSet<ArquivoContabilHistoricoPadrao> ArquivoContabilHistoricoPadrao { get; set; }
        public virtual DbSet<ArquivoContabilItem> ArquivoContabilItem { get; set; }
        public virtual DbSet<ArquivoRemessa> ArquivoRemessa { get; set; }
        public virtual DbSet<ArquivoRemessaLayout> ArquivoRemessaLayout { get; set; }
        public virtual DbSet<ArquivoRemessaLayoutOperadora> ArquivoRemessaLayoutOperadora { get; set; }
        public virtual DbSet<ArquivoUnimed> ArquivoUnimed { get; set; }
        public virtual DbSet<AssitenteSocial> AssitenteSocial { get; set; }
        public virtual DbSet<AtendeCc> AtendeCc { get; set; }
        public virtual DbSet<AtendeSadt> AtendeSadt { get; set; }
        public virtual DbSet<Atendimento> Atendimento { get; set; }
        public virtual DbSet<AtendimentoAltaAdministrativa> AtendimentoAltaAdministrativa { get; set; }
        public virtual DbSet<AtendimentoArquivo> AtendimentoArquivo { get; set; }
        public virtual DbSet<AtendimentoCancelado> AtendimentoCancelado { get; set; }
        public virtual DbSet<AtendimentoCid> AtendimentoCid { get; set; }
        public virtual DbSet<AtendimentoClassificacaoRisco> AtendimentoClassificacaoRisco { get; set; }
        public virtual DbSet<AtendimentoComplemento> AtendimentoComplemento { get; set; }
        public virtual DbSet<AtendimentoContrato> AtendimentoContrato { get; set; }
        public virtual DbSet<AtendimentoContratoUnidadeOrganzacional> AtendimentoContratoUnidadeOrganzacional { get; set; }
        public virtual DbSet<AtendimentoDataAtual> AtendimentoDataAtual { get; set; }
        public virtual DbSet<AtendimentoDecisao> AtendimentoDecisao { get; set; }
        public virtual DbSet<AtendimentoDocumento> AtendimentoDocumento { get; set; }
        public virtual DbSet<AtendimentoDrg> AtendimentoDrg { get; set; }
        public virtual DbSet<AtendimentoExameAcidente> AtendimentoExameAcidente { get; set; }
        public virtual DbSet<AtendimentoHistoricoMedico> AtendimentoHistoricoMedico { get; set; }
        public virtual DbSet<AtendimentoIntegracaoSistemaLegado> AtendimentoIntegracaoSistemaLegado { get; set; }
        public virtual DbSet<AtendimentoLeito> AtendimentoLeito { get; set; }
        public virtual DbSet<AtendimentoMedico> AtendimentoMedico { get; set; }
        public virtual DbSet<AtendimentoMedicoCancelado> AtendimentoMedicoCancelado { get; set; }
        public virtual DbSet<AtendimentoObservacao> AtendimentoObservacao { get; set; }
        public virtual DbSet<AtendimentoOsLegado> AtendimentoOsLegado { get; set; }
        public virtual DbSet<AtendimentoPlanoOperadora> AtendimentoPlanoOperadora { get; set; }
        public virtual DbSet<AtendimentoProcedimento> AtendimentoProcedimento { get; set; }
        public virtual DbSet<AtendimentoProcedimentoPrincipal> AtendimentoProcedimentoPrincipal { get; set; }
        public virtual DbSet<AtendimentoProcedimentoPrincipalNova> AtendimentoProcedimentoPrincipalNova { get; set; }
        public virtual DbSet<AtendimentoProcedimentoPrincipalProcessados> AtendimentoProcedimentoPrincipalProcessados { get; set; }
        public virtual DbSet<AtendimentoServico> AtendimentoServico { get; set; }
        public virtual DbSet<AtendimentoSus> AtendimentoSus { get; set; }
        public virtual DbSet<AtendimentoUsuario> AtendimentoUsuario { get; set; }
        public virtual DbSet<AtendimentosTrackSale> AtendimentosTrackSale { get; set; }
        public virtual DbSet<Atividades> Atividades { get; set; }
        public virtual DbSet<Atributo> Atributo { get; set; }
        public virtual DbSet<AtributoDependente> AtributoDependente { get; set; }
        public virtual DbSet<AtributoFaixaValorPessoa> AtributoFaixaValorPessoa { get; set; }
        public virtual DbSet<AtributoTipoDiversosTipoTabela> AtributoTipoDiversosTipoTabela { get; set; }
        public virtual DbSet<Audiencia> Audiencia { get; set; }
        public virtual DbSet<AuditoriaExterna> AuditoriaExterna { get; set; }
        public virtual DbSet<AvaliacaoCompressao> AvaliacaoCompressao { get; set; }
        public virtual DbSet<Bacteria> Bacteria { get; set; }
        public virtual DbSet<Bairro> Bairro { get; set; }
        public virtual DbSet<Banco> Banco { get; set; }
        public virtual DbSet<BancoHsfinanceiro> BancoHsfinanceiro { get; set; }
        public virtual DbSet<BancoHsfinanceiroTeste> BancoHsfinanceiroTeste { get; set; }
        public virtual DbSet<BancoSangueLegado> BancoSangueLegado { get; set; }
        public virtual DbSet<BiAtdDmOperadora> BiAtdDmOperadora { get; set; }
        public virtual DbSet<BiCustosAjustefracionados> BiCustosAjustefracionados { get; set; }
        public virtual DbSet<BiProntuarioEletronicoHorm> BiProntuarioEletronicoHorm { get; set; }
        public virtual DbSet<BiTbMargemLucro> BiTbMargemLucro { get; set; }
        public virtual DbSet<BiTbMargemLucro2> BiTbMargemLucro2 { get; set; }
        public virtual DbSet<Biomedico> Biomedico { get; set; }
        public virtual DbSet<BionexoEsquema> BionexoEsquema { get; set; }
        public virtual DbSet<BkInventario2270emaior> BkInventario2270emaior { get; set; }
        public virtual DbSet<BkInventario2273> BkInventario2273 { get; set; }
        public virtual DbSet<BkPrecomedioRecalculo> BkPrecomedioRecalculo { get; set; }
        public virtual DbSet<BkpCons99> BkpCons99 { get; set; }
        public virtual DbSet<BkpEf124> BkpEf124 { get; set; }
        public virtual DbSet<BkpFechConsigJunh2017> BkpFechConsigJunh2017 { get; set; }
        public virtual DbSet<BkpFechJunh2017> BkpFechJunh2017 { get; set; }
        public virtual DbSet<BkpPrecomedio03082017> BkpPrecomedio03082017 { get; set; }
        public virtual DbSet<Blocktable> Blocktable { get; set; }
        public virtual DbSet<BoletoCobranca> BoletoCobranca { get; set; }
        public virtual DbSet<BookProdutividadeFaturamentoReport> BookProdutividadeFaturamentoReport { get; set; }
        public virtual DbSet<Bordero> Bordero { get; set; }
        public virtual DbSet<BorderoLog> BorderoLog { get; set; }
        public virtual DbSet<BorderoParcelaContaPagarBaixaHistorico> BorderoParcelaContaPagarBaixaHistorico { get; set; }
        public virtual DbSet<BpaSpdata> BpaSpdata { get; set; }
        public virtual DbSet<BrasMatHmt> BrasMatHmt { get; set; }
        public virtual DbSet<BrasindiceTuss> BrasindiceTuss { get; set; }
        public virtual DbSet<BularioAnvisa> BularioAnvisa { get; set; }
        public virtual DbSet<Caixa> Caixa { get; set; }
        public virtual DbSet<CaixaMovimento> CaixaMovimento { get; set; }
        public virtual DbSet<CaixaUsuario> CaixaUsuario { get; set; }
        public virtual DbSet<CaraterSolicitacao> CaraterSolicitacao { get; set; }
        public virtual DbSet<Carencia> Carencia { get; set; }
        public virtual DbSet<CarenciaHistorico> CarenciaHistorico { get; set; }
        public virtual DbSet<CarenciaPaciente> CarenciaPaciente { get; set; }
        public virtual DbSet<CargaAtualizacao> CargaAtualizacao { get; set; }
        public virtual DbSet<CargaHistoricoCepSus> CargaHistoricoCepSus { get; set; }
        public virtual DbSet<CargaHonorarioApartamentoAsaspe2009> CargaHonorarioApartamentoAsaspe2009 { get; set; }
        public virtual DbSet<CargaHonorarioApartamentoTussAsaspe> CargaHonorarioApartamentoTussAsaspe { get; set; }
        public virtual DbSet<CargaMedicosSus> CargaMedicosSus { get; set; }
        public virtual DbSet<CargaMedio> CargaMedio { get; set; }
        public virtual DbSet<CargaProcedimentoMedico> CargaProcedimentoMedico { get; set; }
        public virtual DbSet<CargaProdutodetalheinventario> CargaProdutodetalheinventario { get; set; }
        public virtual DbSet<CargaServicoCaracteristica> CargaServicoCaracteristica { get; set; }
        public virtual DbSet<CargaTaxaDiaria> CargaTaxaDiaria { get; set; }
        public virtual DbSet<CargaTaxas> CargaTaxas { get; set; }
        public virtual DbSet<CartaRecurso> CartaRecurso { get; set; }
        public virtual DbSet<CartaRecursoHistoricoFechamento> CartaRecursoHistoricoFechamento { get; set; }
        public virtual DbSet<CartaRecursoMovimentacaoContaParcela> CartaRecursoMovimentacaoContaParcela { get; set; }
        public virtual DbSet<CartaRecursoParcelaContaReceber> CartaRecursoParcelaContaReceber { get; set; }
        public virtual DbSet<CartaRecursoRecurso> CartaRecursoRecurso { get; set; }
        public virtual DbSet<CartaRecursoRecursoReenvio> CartaRecursoRecursoReenvio { get; set; }
        public virtual DbSet<CartaRecursoRecusoGlosaGenerica> CartaRecursoRecusoGlosaGenerica { get; set; }
        public virtual DbSet<CartaRecursoRecusoGlosaGenericaReenvio> CartaRecursoRecusoGlosaGenericaReenvio { get; set; }
        public virtual DbSet<Cassi> Cassi { get; set; }
        public virtual DbSet<CategoriaDespesa> CategoriaDespesa { get; set; }
        public virtual DbSet<CategoriaDespesaUnidadeOrganizacional> CategoriaDespesaUnidadeOrganizacional { get; set; }
        public virtual DbSet<CensoDiario> CensoDiario { get; set; }
        public virtual DbSet<CensoDiarioAjusteHmt> CensoDiarioAjusteHmt { get; set; }
        public virtual DbSet<CensoDiarioNovo> CensoDiarioNovo { get; set; }
        public virtual DbSet<CensoSinteticoIpmmi> CensoSinteticoIpmmi { get; set; }
        public virtual DbSet<CentroCusto> CentroCusto { get; set; }
        public virtual DbSet<Cep> Cep { get; set; }
        public virtual DbSet<CepSus> CepSus { get; set; }
        public virtual DbSet<CheckinEnfermagem> CheckinEnfermagem { get; set; }
        public virtual DbSet<CheckinEnfermagemExclusao> CheckinEnfermagemExclusao { get; set; }
        public virtual DbSet<Cheque> Cheque { get; set; }
        public virtual DbSet<ChequeCliente> ChequeCliente { get; set; }
        public virtual DbSet<ChequeClienteEvento> ChequeClienteEvento { get; set; }
        public virtual DbSet<ChequeEvento> ChequeEvento { get; set; }
        public virtual DbSet<ChequeEventoLog> ChequeEventoLog { get; set; }
        public virtual DbSet<ChequeLog> ChequeLog { get; set; }
        public virtual DbSet<ChequeParametrosImpressao> ChequeParametrosImpressao { get; set; }
        public virtual DbSet<Cid> Cid { get; set; }
        public virtual DbSet<CidAgrupamento> CidAgrupamento { get; set; }
        public virtual DbSet<Cidade> Cidade { get; set; }
        public virtual DbSet<CirurgiaFuncaoTipo> CirurgiaFuncaoTipo { get; set; }
        public virtual DbSet<ClassConv> ClassConv { get; set; }
        public virtual DbSet<ClassificacaoChamada> ClassificacaoChamada { get; set; }
        public virtual DbSet<ClassificacaoContabil> ClassificacaoContabil { get; set; }
        public virtual DbSet<ClassificacaoFila> ClassificacaoFila { get; set; }
        public virtual DbSet<ClassificacaoFluxo> ClassificacaoFluxo { get; set; }
        public virtual DbSet<ClassificacaoLocal> ClassificacaoLocal { get; set; }
        public virtual DbSet<ClassificacaoLocalStatusSenha> ClassificacaoLocalStatusSenha { get; set; }
        public virtual DbSet<ClassificacaoPeso> ClassificacaoPeso { get; set; }
        public virtual DbSet<ClassificacaoProduto> ClassificacaoProduto { get; set; }
        public virtual DbSet<ClassificacaoProdutoAtributo> ClassificacaoProdutoAtributo { get; set; }
        public virtual DbSet<ClassificacaoProdutoClassificacaoProduto> ClassificacaoProdutoClassificacaoProduto { get; set; }
        public virtual DbSet<ClassificacaoProdutoPlanoContaContabil> ClassificacaoProdutoPlanoContaContabil { get; set; }
        public virtual DbSet<ClassificacaoSenha> ClassificacaoSenha { get; set; }
        public virtual DbSet<ClassificacaoSenhaHistorico> ClassificacaoSenhaHistorico { get; set; }
        public virtual DbSet<ClienteComputador> ClienteComputador { get; set; }
        public virtual DbSet<ClientePagina> ClientePagina { get; set; }
        public virtual DbSet<Clinica> Clinica { get; set; }
        public virtual DbSet<ClinicaIi> ClinicaIi { get; set; }
        public virtual DbSet<ClinicaMedicoLancamentoAvulso> ClinicaMedicoLancamentoAvulso { get; set; }
        public virtual DbSet<ClinicaUnidadeOrganizacionalMedico> ClinicaUnidadeOrganizacionalMedico { get; set; }
        public virtual DbSet<ClinicaUnidadeOrganizacionalMedicoVigencia> ClinicaUnidadeOrganizacionalMedicoVigencia { get; set; }
        public virtual DbSet<ClinicaUnidadeOrganizacionalMedicoVigenciaClassificacaoProduto> ClinicaUnidadeOrganizacionalMedicoVigenciaClassificacaoProduto { get; set; }
        public virtual DbSet<ClinicaUnidadeOrganizacionalMedicoVigenciaTaxa> ClinicaUnidadeOrganizacionalMedicoVigenciaTaxa { get; set; }
        public virtual DbSet<CobrancaJudicial> CobrancaJudicial { get; set; }
        public virtual DbSet<CobrancaTerceirizada> CobrancaTerceirizada { get; set; }
        public virtual DbSet<CobrancaTipoEnfermagem> CobrancaTipoEnfermagem { get; set; }
        public virtual DbSet<ColaboradorCobranca> ColaboradorCobranca { get; set; }
        public virtual DbSet<ColetaDadosPaciente> ColetaDadosPaciente { get; set; }
        public virtual DbSet<ComplementoDietetico> ComplementoDietetico { get; set; }
        public virtual DbSet<ComposicaoItem> ComposicaoItem { get; set; }
        public virtual DbSet<ComposicaoItemCarga> ComposicaoItemCarga { get; set; }
        public virtual DbSet<ComposicaoItemProduto> ComposicaoItemProduto { get; set; }
        public virtual DbSet<ComposicaoItemProdutoExcecao> ComposicaoItemProdutoExcecao { get; set; }
        public virtual DbSet<ComposicaoItemServico> ComposicaoItemServico { get; set; }
        public virtual DbSet<ComposicaoItemServicoExcecao> ComposicaoItemServicoExcecao { get; set; }
        public virtual DbSet<ConcentracaoPrincipioAtivo> ConcentracaoPrincipioAtivo { get; set; }
        public virtual DbSet<ConciliacaoCobranca> ConciliacaoCobranca { get; set; }
        public virtual DbSet<ConciliacaoHistorico> ConciliacaoHistorico { get; set; }
        public virtual DbSet<ConciliacaoUnimed> ConciliacaoUnimed { get; set; }
        public virtual DbSet<CondicaoPagamento> CondicaoPagamento { get; set; }
        public virtual DbSet<CondicaoPagamentoBionexo> CondicaoPagamentoBionexo { get; set; }
        public virtual DbSet<ConfiguracaoMaquina> ConfiguracaoMaquina { get; set; }
        public virtual DbSet<ConfirmacaoDevolucao> ConfirmacaoDevolucao { get; set; }
        public virtual DbSet<ConsignadoPendenteNota> ConsignadoPendenteNota { get; set; }
        public virtual DbSet<ConsignadoPendenteNotaHistorico> ConsignadoPendenteNotaHistorico { get; set; }
        public virtual DbSet<Conta> Conta { get; set; }
        public virtual DbSet<ContaAuditoria> ContaAuditoria { get; set; }
        public virtual DbSet<ContaBancaria> ContaBancaria { get; set; }
        public virtual DbSet<ContaBancariaLog> ContaBancariaLog { get; set; }
        public virtual DbSet<ContaBancariaPerfil> ContaBancariaPerfil { get; set; }
        public virtual DbSet<ContaCaixa> ContaCaixa { get; set; }
        public virtual DbSet<ContaCobranca> ContaCobranca { get; set; }
        public virtual DbSet<ContaCobrancaComplemento> ContaCobrancaComplemento { get; set; }
        public virtual DbSet<ContaCobrancaComplementoHistorico> ContaCobrancaComplementoHistorico { get; set; }
        public virtual DbSet<ContaCobrancaItem> ContaCobrancaItem { get; set; }
        public virtual DbSet<ContaComplemento> ContaComplemento { get; set; }
        public virtual DbSet<ContaConciliacao> ContaConciliacao { get; set; }
        public virtual DbSet<ContaConciliacaoLote> ContaConciliacaoLote { get; set; }
        public virtual DbSet<ContaConciliacaoSituacaoTipo> ContaConciliacaoSituacaoTipo { get; set; }
        public virtual DbSet<ContaCorrente> ContaCorrente { get; set; }
        public virtual DbSet<ContaCorrenteLog> ContaCorrenteLog { get; set; }
        public virtual DbSet<ContaDespesaReceita> ContaDespesaReceita { get; set; }
        public virtual DbSet<ContaDtLiberacao> ContaDtLiberacao { get; set; }
        public virtual DbSet<ContaDtLiberacaoTab> ContaDtLiberacaoTab { get; set; }
        public virtual DbSet<ContaFechamento> ContaFechamento { get; set; }
        public virtual DbSet<ContaFechamentoPermanencia> ContaFechamentoPermanencia { get; set; }
        public virtual DbSet<ContaHemodinamica> ContaHemodinamica { get; set; }
        public virtual DbSet<ContaHistorico> ContaHistorico { get; set; }
        public virtual DbSet<ContaItem> ContaItem { get; set; }
        public virtual DbSet<ContaItemCh> ContaItemCh { get; set; }
        public virtual DbSet<ContaItemComposicao> ContaItemComposicao { get; set; }
        public virtual DbSet<ContaItemComposicaoNaoFaturada> ContaItemComposicaoNaoFaturada { get; set; }
        public virtual DbSet<ContaItemExtras> ContaItemExtras { get; set; }
        public virtual DbSet<ContaItemFechamentoItem> ContaItemFechamentoItem { get; set; }
        public virtual DbSet<ContaItemFechamentoItemContaCorrente> ContaItemFechamentoItemContaCorrente { get; set; }
        public virtual DbSet<ContaItemFechamentoItemRepasse> ContaItemFechamentoItemRepasse { get; set; }
        public virtual DbSet<ContaItemHistorico> ContaItemHistorico { get; set; }
        public virtual DbSet<ContaItemOcorrencia> ContaItemOcorrencia { get; set; }
        public virtual DbSet<ContaItemProduto> ContaItemProduto { get; set; }
        public virtual DbSet<ContaItemProdutoDispensacaoEnfermagem> ContaItemProdutoDispensacaoEnfermagem { get; set; }
        public virtual DbSet<ContaItemProdutoNotaEntradaSus> ContaItemProdutoNotaEntradaSus { get; set; }
        public virtual DbSet<ContaItemProdutoSolicitacaoEnfermagem> ContaItemProdutoSolicitacaoEnfermagem { get; set; }
        public virtual DbSet<ContaItemServico> ContaItemServico { get; set; }
        public virtual DbSet<ContaItemServicoAtendimentoServico> ContaItemServicoAtendimentoServico { get; set; }
        public virtual DbSet<ContaItemServicoComplemento> ContaItemServicoComplemento { get; set; }
        public virtual DbSet<ContaItemServicoContaItemProduto> ContaItemServicoContaItemProduto { get; set; }
        public virtual DbSet<ContaItemServicoDependente> ContaItemServicoDependente { get; set; }
        public virtual DbSet<ContaItemServicoMedicoExecutante> ContaItemServicoMedicoExecutante { get; set; }
        public virtual DbSet<ContaItemServicoProcedimentoSecundarioFolhaDeSala> ContaItemServicoProcedimentoSecundarioFolhaDeSala { get; set; }
        public virtual DbSet<ContaItemServicoRadiofarmaco> ContaItemServicoRadiofarmaco { get; set; }
        public virtual DbSet<ContaItemServicoRefeicaoConsumo> ContaItemServicoRefeicaoConsumo { get; set; }
        public virtual DbSet<ContaItemServicoRelacionado> ContaItemServicoRelacionado { get; set; }
        public virtual DbSet<ContaItemServicoServicoCheckinEnfermagem> ContaItemServicoServicoCheckinEnfermagem { get; set; }
        public virtual DbSet<ContaItemServicoTaxaFolhadeSala> ContaItemServicoTaxaFolhadeSala { get; set; }
        public virtual DbSet<ContaItemServicoUnidadeOrganizacional> ContaItemServicoUnidadeOrganizacional { get; set; }
        public virtual DbSet<ContaOrdemUnidadeOrganizacional> ContaOrdemUnidadeOrganizacional { get; set; }
        public virtual DbSet<ContaPagar> ContaPagar { get; set; }
        public virtual DbSet<ContaPagarAcrescimo> ContaPagarAcrescimo { get; set; }
        public virtual DbSet<ContaPagarAcrescimoLog> ContaPagarAcrescimoLog { get; set; }
        public virtual DbSet<ContaPagarDes> ContaPagarDes { get; set; }
        public virtual DbSet<ContaPagarDesconto> ContaPagarDesconto { get; set; }
        public virtual DbSet<ContaPagarDescontoLog> ContaPagarDescontoLog { get; set; }
        public virtual DbSet<ContaPagarImpostoRetido> ContaPagarImpostoRetido { get; set; }
        public virtual DbSet<ContaPagarImpostoRetidoLog> ContaPagarImpostoRetidoLog { get; set; }
        public virtual DbSet<ContaPagarLog> ContaPagarLog { get; set; }
        public virtual DbSet<ContaPagarRateio> ContaPagarRateio { get; set; }
        public virtual DbSet<ContaPagarTributoAliquota> ContaPagarTributoAliquota { get; set; }
        public virtual DbSet<ContaPagarUnidadeOrganizacional> ContaPagarUnidadeOrganizacional { get; set; }
        public virtual DbSet<ContaPlano> ContaPlano { get; set; }
        public virtual DbSet<ContaPreview> ContaPreview { get; set; }
        public virtual DbSet<ContaPreviewHonorarioCooperado> ContaPreviewHonorarioCooperado { get; set; }
        public virtual DbSet<ContaReceber> ContaReceber { get; set; }
        public virtual DbSet<ContaReceberAcrescimo> ContaReceberAcrescimo { get; set; }
        public virtual DbSet<ContaReceberAcrescimoLog> ContaReceberAcrescimoLog { get; set; }
        public virtual DbSet<ContaReceberArquivoOrigem> ContaReceberArquivoOrigem { get; set; }
        public virtual DbSet<ContaReceberArquivoOrigemDetalhe> ContaReceberArquivoOrigemDetalhe { get; set; }
        public virtual DbSet<ContaReceberDesconto> ContaReceberDesconto { get; set; }
        public virtual DbSet<ContaReceberDescontoLog> ContaReceberDescontoLog { get; set; }
        public virtual DbSet<ContaReceberImpostoRetido> ContaReceberImpostoRetido { get; set; }
        public virtual DbSet<ContaReceberLog> ContaReceberLog { get; set; }
        public virtual DbSet<ContaReceberPrevisao> ContaReceberPrevisao { get; set; }
        public virtual DbSet<ContaRegistro> ContaRegistro { get; set; }
        public virtual DbSet<ContaReprocessada> ContaReprocessada { get; set; }
        public virtual DbSet<ContaReprocessadaBkp> ContaReprocessadaBkp { get; set; }
        public virtual DbSet<ContaReprocessamento> ContaReprocessamento { get; set; }
        public virtual DbSet<ContaSelNota> ContaSelNota { get; set; }
        public virtual DbSet<ContaSelNotaReversao> ContaSelNotaReversao { get; set; }
        public virtual DbSet<ContaTotais> ContaTotais { get; set; }
        public virtual DbSet<ContaTotais2> ContaTotais2 { get; set; }
        public virtual DbSet<ContaTotaisAcrescimos> ContaTotaisAcrescimos { get; set; }
        public virtual DbSet<ContaTotaisCreditoEstorno> ContaTotaisCreditoEstorno { get; set; }
        public virtual DbSet<ContaTotaisFi> ContaTotaisFi { get; set; }
        public virtual DbSet<ContaTotaisGlosa> ContaTotaisGlosa { get; set; }
        public virtual DbSet<ContaTotaisGlosaAcatada> ContaTotaisGlosaAcatada { get; set; }
        public virtual DbSet<ContaTotaisGlosaAcatadaComRecurso> ContaTotaisGlosaAcatadaComRecurso { get; set; }
        public virtual DbSet<ContaTotaisGlosaAcatadaParcialComRecurso> ContaTotaisGlosaAcatadaParcialComRecurso { get; set; }
        public virtual DbSet<ContaTotaisGlosaAcatadaParcialSemRecurso> ContaTotaisGlosaAcatadaParcialSemRecurso { get; set; }
        public virtual DbSet<ContaTotaisGlosaAcatadaSemRecurso> ContaTotaisGlosaAcatadaSemRecurso { get; set; }
        public virtual DbSet<ContaTotaisGlosaGenericaAcatada> ContaTotaisGlosaGenericaAcatada { get; set; }
        public virtual DbSet<ContaTotaisGlosaGenericaAcatadaComRecurso> ContaTotaisGlosaGenericaAcatadaComRecurso { get; set; }
        public virtual DbSet<ContaTotaisGlosaGenericaAcatadaSemRecurso> ContaTotaisGlosaGenericaAcatadaSemRecurso { get; set; }
        public virtual DbSet<ContaTotaisRecebido> ContaTotaisRecebido { get; set; }
        public virtual DbSet<ContaTotaisRecurso> ContaTotaisRecurso { get; set; }
        public virtual DbSet<ContaTotaisRecursoGenerico> ContaTotaisRecursoGenerico { get; set; }
        public virtual DbSet<ContaTotaisReversao> ContaTotaisReversao { get; set; }
        public virtual DbSet<ContaTotaisReversaoGenerica> ContaTotaisReversaoGenerica { get; set; }
        public virtual DbSet<ContaTotaisReversaoSemRecurso> ContaTotaisReversaoSemRecurso { get; set; }
        public virtual DbSet<ContagemEstoque> ContagemEstoque { get; set; }
        public virtual DbSet<ContagemEstoqueLoteProdutoItem> ContagemEstoqueLoteProdutoItem { get; set; }
        public virtual DbSet<Contaitemcorrecao> Contaitemcorrecao { get; set; }
        public virtual DbSet<Contas> Contas { get; set; }
        public virtual DbSet<ContasAguardandoConciliacaoSimplificada> ContasAguardandoConciliacaoSimplificada { get; set; }
        public virtual DbSet<ContasPagasRepasse> ContasPagasRepasse { get; set; }
        public virtual DbSet<ContasPendentes> ContasPendentes { get; set; }
        public virtual DbSet<Contato> Contato { get; set; }
        public virtual DbSet<ContatoDependente> ContatoDependente { get; set; }
        public virtual DbSet<Controle> Controle { get; set; }
        public virtual DbSet<ControleDependencia> ControleDependencia { get; set; }
        public virtual DbSet<ControleQuantidadeAcesso> ControleQuantidadeAcesso { get; set; }
        public virtual DbSet<ControleVisitantes> ControleVisitantes { get; set; }
        public virtual DbSet<ControleVisitantesHistorico> ControleVisitantesHistorico { get; set; }
        public virtual DbSet<Convenios> Convenios { get; set; }
        public virtual DbSet<CorreioEletronico> CorreioEletronico { get; set; }
        public virtual DbSet<CorreioEletronicoAplicativo> CorreioEletronicoAplicativo { get; set; }
        public virtual DbSet<CorteEstoque> CorteEstoque { get; set; }
        public virtual DbSet<Cotacao> Cotacao { get; set; }
        public virtual DbSet<CotacaoFornecedor> CotacaoFornecedor { get; set; }
        public virtual DbSet<CotacaoFornecedorProdutoDetalhe> CotacaoFornecedorProdutoDetalhe { get; set; }
        public virtual DbSet<CotacaoFornecedorProdutoDetalheHistorico> CotacaoFornecedorProdutoDetalheHistorico { get; set; }
        public virtual DbSet<CotacaoProduto> CotacaoProduto { get; set; }
        public virtual DbSet<CotacaoProdutoDetalhe> CotacaoProdutoDetalhe { get; set; }
        public virtual DbSet<CreditoEstorno> CreditoEstorno { get; set; }
        public virtual DbSet<CreditosLiberadosConvenioParaRepasse> CreditosLiberadosConvenioParaRepasse { get; set; }
        public virtual DbSet<CronogramaConta> CronogramaConta { get; set; }
        public virtual DbSet<CronogramaRecebimentoConta> CronogramaRecebimentoConta { get; set; }
        public virtual DbSet<CronogramaRecebimentoContaDetalhe> CronogramaRecebimentoContaDetalhe { get; set; }
        public virtual DbSet<CustosFatRentabilidade> CustosFatRentabilidade { get; set; }
        public virtual DbSet<DadosHospital> DadosHospital { get; set; }
        public virtual DbSet<DefaultContabil> DefaultContabil { get; set; }
        public virtual DbSet<DefaultContabilTipo> DefaultContabilTipo { get; set; }
        public virtual DbSet<DescontoFinanceiro> DescontoFinanceiro { get; set; }
        public virtual DbSet<DespesaRepasse> DespesaRepasse { get; set; }
        public virtual DbSet<DevolucaoChecagem> DevolucaoChecagem { get; set; }
        public virtual DbSet<DevolucaoChecagemSolicitacaoPdEnfermagemHorarioAdministracao> DevolucaoChecagemSolicitacaoPdEnfermagemHorarioAdministracao { get; set; }
        public virtual DbSet<DevolucaoProdutoPendenteConfirmacao> DevolucaoProdutoPendenteConfirmacao { get; set; }
        public virtual DbSet<DiaSolicitacao> DiaSolicitacao { get; set; }
        public virtual DbSet<DiaSolicitacaoUsuario> DiaSolicitacaoUsuario { get; set; }
        public virtual DbSet<DiagnosticoSecundarioSus> DiagnosticoSecundarioSus { get; set; }
        public virtual DbSet<DietaPadronizada> DietaPadronizada { get; set; }
        public virtual DbSet<DietaPadronizadaMedicamento> DietaPadronizadaMedicamento { get; set; }
        public virtual DbSet<DietaPadronizadaMedicamentoOperadora> DietaPadronizadaMedicamentoOperadora { get; set; }
        public virtual DbSet<DietaPadronizadaMedicamentoUnidadeOrganizacional> DietaPadronizadaMedicamentoUnidadeOrganizacional { get; set; }
        public virtual DbSet<DietaRestricao> DietaRestricao { get; set; }
        public virtual DbSet<DimMedico> DimMedico { get; set; }
        public virtual DbSet<DimOperadora> DimOperadora { get; set; }
        public virtual DbSet<DimRecurso> DimRecurso { get; set; }
        public virtual DbSet<DimTempo> DimTempo { get; set; }
        public virtual DbSet<DimUnidadeOrganizacional> DimUnidadeOrganizacional { get; set; }
        public virtual DbSet<DimUsuario> DimUsuario { get; set; }
        public virtual DbSet<DispensacaoCusto> DispensacaoCusto { get; set; }
        public virtual DbSet<DispensacaoEnfermagem> DispensacaoEnfermagem { get; set; }
        public virtual DbSet<DispensacaoEnfermagemHistorico> DispensacaoEnfermagemHistorico { get; set; }
        public virtual DbSet<Dmed> Dmed { get; set; }
        public virtual DbSet<Documento> Documento { get; set; }
        public virtual DbSet<DocumentoEmprestimo> DocumentoEmprestimo { get; set; }
        public virtual DbSet<DocumentoEmprestimoHistorico> DocumentoEmprestimoHistorico { get; set; }
        public virtual DbSet<DocumentoEvento> DocumentoEvento { get; set; }
        public virtual DbSet<DocumentoExigido> DocumentoExigido { get; set; }
        public virtual DbSet<DocumentoExigidoRegistroEletronicoModelo> DocumentoExigidoRegistroEletronicoModelo { get; set; }
        public virtual DbSet<DocumentoExigidoUnidadeOrganizacional> DocumentoExigidoUnidadeOrganizacional { get; set; }
        public virtual DbSet<DocumentoFinalidade> DocumentoFinalidade { get; set; }
        public virtual DbSet<DocumentoFluxo> DocumentoFluxo { get; set; }
        public virtual DbSet<DocumentoFluxoDocumentoFinalidade> DocumentoFluxoDocumentoFinalidade { get; set; }
        public virtual DbSet<DocumentoFluxoDocumentoFluxoEtapa> DocumentoFluxoDocumentoFluxoEtapa { get; set; }
        public virtual DbSet<DocumentoFluxoEtapa> DocumentoFluxoEtapa { get; set; }
        public virtual DbSet<DocumentoFluxoUnidade> DocumentoFluxoUnidade { get; set; }
        public virtual DbSet<DocumentoGerado> DocumentoGerado { get; set; }
        public virtual DbSet<DocumentoGeradoHistorico> DocumentoGeradoHistorico { get; set; }
        public virtual DbSet<DocumentoGeradoVersao> DocumentoGeradoVersao { get; set; }
        public virtual DbSet<DocumentoGeral> DocumentoGeral { get; set; }
        public virtual DbSet<DocumentoHistorico> DocumentoHistorico { get; set; }
        public virtual DbSet<DocumentoLote> DocumentoLote { get; set; }
        public virtual DbSet<DocumentoLoteAuditado> DocumentoLoteAuditado { get; set; }
        public virtual DbSet<DocumentoLoteAuditoria> DocumentoLoteAuditoria { get; set; }
        public virtual DbSet<DocumentoLoteMedico> DocumentoLoteMedico { get; set; }
        public virtual DbSet<DocumentoProtocolo> DocumentoProtocolo { get; set; }
        public virtual DbSet<DocumentoProtocoloDocumentoExigido> DocumentoProtocoloDocumentoExigido { get; set; }
        public virtual DbSet<DocumentoProtocoloMotivoDevolucao> DocumentoProtocoloMotivoDevolucao { get; set; }
        public virtual DbSet<DocumentoRemessa> DocumentoRemessa { get; set; }
        public virtual DbSet<DocumentoRemessaHistorico> DocumentoRemessaHistorico { get; set; }
        public virtual DbSet<DocumentoRemessaLoteSituacao> DocumentoRemessaLoteSituacao { get; set; }
        public virtual DbSet<DocumentoRemessaRecusado> DocumentoRemessaRecusado { get; set; }
        public virtual DbSet<DocumentoexigidoOperadora> DocumentoexigidoOperadora { get; set; }
        public virtual DbSet<Documentos> Documentos { get; set; }
        public virtual DbSet<DrgAltaAdministrativa> DrgAltaAdministrativa { get; set; }
        public virtual DbSet<DrgBeneficiario> DrgBeneficiario { get; set; }
        public virtual DbSet<DrgCidSecundario> DrgCidSecundario { get; set; }
        public virtual DbSet<DrgInternacao> DrgInternacao { get; set; }
        public virtual DbSet<DrgMedico> DrgMedico { get; set; }
        public virtual DbSet<DrgOperadora> DrgOperadora { get; set; }
        public virtual DbSet<DrgProcedimento> DrgProcedimento { get; set; }
        public virtual DbSet<DrgProcedimentoMedico> DrgProcedimentoMedico { get; set; }
        public virtual DbSet<DuracaoEventoLeitoSituacao> DuracaoEventoLeitoSituacao { get; set; }
        public virtual DbSet<Efd> Efd { get; set; }
        public virtual DbSet<Embalagem> Embalagem { get; set; }
        public virtual DbSet<EmbalagemEmbalagem> EmbalagemEmbalagem { get; set; }
        public virtual DbSet<EmbalagemProdutoDetalhe> EmbalagemProdutoDetalhe { get; set; }
        public virtual DbSet<Emprestimo> Emprestimo { get; set; }
        public virtual DbSet<EmprestimoLoteProdutoItem> EmprestimoLoteProdutoItem { get; set; }
        public virtual DbSet<EmprestimoPagamento> EmprestimoPagamento { get; set; }
        public virtual DbSet<EmprestimoProdutoDetalhe> EmprestimoProdutoDetalhe { get; set; }
        public virtual DbSet<Endereco> Endereco { get; set; }
        public virtual DbSet<EnderecoGeo> EnderecoGeo { get; set; }
        public virtual DbSet<EnderecoPessoaRelatorio> EnderecoPessoaRelatorio { get; set; }
        public virtual DbSet<EnderecoPessoaRelatorioBi> EnderecoPessoaRelatorioBi { get; set; }
        public virtual DbSet<EnderecoPessoaRelatorioSemComplemento> EnderecoPessoaRelatorioSemComplemento { get; set; }
        public virtual DbSet<EnderecosTipo> EnderecosTipo { get; set; }
        public virtual DbSet<Enfermeiro> Enfermeiro { get; set; }
        public virtual DbSet<Envio> Envio { get; set; }
        public virtual DbSet<Envioagenda> Envioagenda { get; set; }
        public virtual DbSet<EquipeResponsavel> EquipeResponsavel { get; set; }
        public virtual DbSet<ErroArquivoRetorno> ErroArquivoRetorno { get; set; }
        public virtual DbSet<EscoreFarmacia> EscoreFarmacia { get; set; }
        public virtual DbSet<EspecialidadeLeitoHistorico> EspecialidadeLeitoHistorico { get; set; }
        public virtual DbSet<Estado> Estado { get; set; }
        public virtual DbSet<Estatistica> Estatistica { get; set; }
        public virtual DbSet<EstatisticaBck> EstatisticaBck { get; set; }
        public virtual DbSet<EstoqueEnfermagemCc> EstoqueEnfermagemCc { get; set; }
        public virtual DbSet<EstoqueFechamentoMensal> EstoqueFechamentoMensal { get; set; }
        public virtual DbSet<EstoqueFechamentoMensalConsignado> EstoqueFechamentoMensalConsignado { get; set; }
        public virtual DbSet<EstoqueFechamentoParametro> EstoqueFechamentoParametro { get; set; }
        public virtual DbSet<EstoqueLocaliza> EstoqueLocaliza { get; set; }
        public virtual DbSet<EstoqueLocalizaConcorrencia> EstoqueLocalizaConcorrencia { get; set; }
        public virtual DbSet<EstoqueLocalizaDiario> EstoqueLocalizaDiario { get; set; }
        public virtual DbSet<EstoqueLocalizaHistorico> EstoqueLocalizaHistorico { get; set; }
        public virtual DbSet<EtiquetasAtendimento> EtiquetasAtendimento { get; set; }
        public virtual DbSet<EventoIntegracao> EventoIntegracao { get; set; }
        public virtual DbSet<EventoIntegracaoExcecao> EventoIntegracaoExcecao { get; set; }
        public virtual DbSet<EventoIntegracaoLog> EventoIntegracaoLog { get; set; }
        public virtual DbSet<EventoLeito> EventoLeito { get; set; }
        public virtual DbSet<EventoLeitoAssociacao> EventoLeitoAssociacao { get; set; }
        public virtual DbSet<EventoLeitoEventoLeito> EventoLeitoEventoLeito { get; set; }
        public virtual DbSet<Exame> Exame { get; set; }
        public virtual DbSet<ExameAcidente> ExameAcidente { get; set; }
        public virtual DbSet<ExameAcidenteExame> ExameAcidenteExame { get; set; }
        public virtual DbSet<ExameEtapaTempo> ExameEtapaTempo { get; set; }
        public virtual DbSet<ExameExame> ExameExame { get; set; }
        public virtual DbSet<ExameExameAmostra> ExameExameAmostra { get; set; }
        public virtual DbSet<ExameItemColeta> ExameItemColeta { get; set; }
        public virtual DbSet<ExameItemExame> ExameItemExame { get; set; }
        public virtual DbSet<ExameItemExameTipoTabela> ExameItemExameTipoTabela { get; set; }
        public virtual DbSet<ExameItemMaterial> ExameItemMaterial { get; set; }
        public virtual DbSet<ExameItemMaterialPlanilha> ExameItemMaterialPlanilha { get; set; }
        public virtual DbSet<ExameMaterialColeta> ExameMaterialColeta { get; set; }
        public virtual DbSet<ExameMaterialMetodoAnalisador> ExameMaterialMetodoAnalisador { get; set; }
        public virtual DbSet<ExameMaterialMetodoMeioColeta> ExameMaterialMetodoMeioColeta { get; set; }
        public virtual DbSet<ExamePessoaEntidade> ExamePessoaEntidade { get; set; }
        public virtual DbSet<ExamePrioridade> ExamePrioridade { get; set; }
        public virtual DbSet<ExameServico> ExameServico { get; set; }
        public virtual DbSet<ExameTempoLiberacao> ExameTempoLiberacao { get; set; }
        public virtual DbSet<ExameTempoLiberacaoHistorico> ExameTempoLiberacaoHistorico { get; set; }
        public virtual DbSet<ExamesAnteriores> ExamesAnteriores { get; set; }
        public virtual DbSet<ExcecaoServicoCompatibilidade> ExcecaoServicoCompatibilidade { get; set; }
        public virtual DbSet<Fabricante> Fabricante { get; set; }
        public virtual DbSet<FaixaEtaria> FaixaEtaria { get; set; }
        public virtual DbSet<FaltaLancamento> FaltaLancamento { get; set; }
        public virtual DbSet<Farmaceutico> Farmaceutico { get; set; }
        public virtual DbSet<FatoFaturamentoTeste> FatoFaturamentoTeste { get; set; }
        public virtual DbSet<FaturaFinanceira> FaturaFinanceira { get; set; }
        public virtual DbSet<FaturaFinanceiraLog> FaturaFinanceiraLog { get; set; }
        public virtual DbSet<FaturamentoBaixaGrupo> FaturamentoBaixaGrupo { get; set; }
        public virtual DbSet<FaturamentoBaixaGrupoLog> FaturamentoBaixaGrupoLog { get; set; }
        public virtual DbSet<FaturamentoConta> FaturamentoConta { get; set; }
        public virtual DbSet<FaturamentoContaTipo> FaturamentoContaTipo { get; set; }
        public virtual DbSet<FaturamentoContaTiss> FaturamentoContaTiss { get; set; }
        public virtual DbSet<FaturamentoContasDiarioReport> FaturamentoContasDiarioReport { get; set; }
        public virtual DbSet<FaturamentoContasHistorico> FaturamentoContasHistorico { get; set; }
        public virtual DbSet<FaturamentoContasParadasDiarioReport> FaturamentoContasParadasDiarioReport { get; set; }
        public virtual DbSet<FaturamentoDiarioReport> FaturamentoDiarioReport { get; set; }
        public virtual DbSet<FaturamentoIndevido> FaturamentoIndevido { get; set; }
        public virtual DbSet<FaturamentoIndevidoHistorico> FaturamentoIndevidoHistorico { get; set; }
        public virtual DbSet<FaturamentoPerda> FaturamentoPerda { get; set; }
        public virtual DbSet<FaturamentoPerdaLog> FaturamentoPerdaLog { get; set; }
        public virtual DbSet<FechamentoItem> FechamentoItem { get; set; }
        public virtual DbSet<FechamentoItemContaCorrente> FechamentoItemContaCorrente { get; set; }
        public virtual DbSet<FechamentoItemCustos> FechamentoItemCustos { get; set; }
        public virtual DbSet<FechamentoItemHonorarioCooperado> FechamentoItemHonorarioCooperado { get; set; }
        public virtual DbSet<FechamentoItemRepasse> FechamentoItemRepasse { get; set; }
        public virtual DbSet<FechamentoItemTk98834> FechamentoItemTk98834 { get; set; }
        public virtual DbSet<FechamentoItemValorLiberado> FechamentoItemValorLiberado { get; set; }
        public virtual DbSet<FechamentoMensalInventario> FechamentoMensalInventario { get; set; }
        public virtual DbSet<Feriado> Feriado { get; set; }
        public virtual DbSet<FeriadoData> FeriadoData { get; set; }
        public virtual DbSet<FilaConta> FilaConta { get; set; }
        public virtual DbSet<FilaContaAcaoTipo> FilaContaAcaoTipo { get; set; }
        public virtual DbSet<FilaContaHistorico> FilaContaHistorico { get; set; }
        public virtual DbSet<FilaContaTipo> FilaContaTipo { get; set; }
        public virtual DbSet<FilaPa> FilaPa { get; set; }
        public virtual DbSet<Filme> Filme { get; set; }
        public virtual DbSet<FinalidaderecursoGlosa> FinalidaderecursoGlosa { get; set; }
        public virtual DbSet<FinalizacaoRefeicaoEspecial> FinalizacaoRefeicaoEspecial { get; set; }
        public virtual DbSet<FinanciamentoSusHistorico> FinanciamentoSusHistorico { get; set; }
        public virtual DbSet<FisioterapeutaETerapeutaOcupacional> FisioterapeutaETerapeutaOcupacional { get; set; }
        public virtual DbSet<Fluxo> Fluxo { get; set; }
        public virtual DbSet<FluxoEtapa> FluxoEtapa { get; set; }
        public virtual DbSet<Folhadesala> Folhadesala { get; set; }
        public virtual DbSet<FolhadesalaPedidoSangue> FolhadesalaPedidoSangue { get; set; }
        public virtual DbSet<Fonoaudiologo> Fonoaudiologo { get; set; }
        public virtual DbSet<FormaPagamento> FormaPagamento { get; set; }
        public virtual DbSet<Fornecedor> Fornecedor { get; set; }
        public virtual DbSet<FornecedorAnvisaSus> FornecedorAnvisaSus { get; set; }
        public virtual DbSet<FornecedorContaDespesaReceita> FornecedorContaDespesaReceita { get; set; }
        public virtual DbSet<FornecedorMarcus> FornecedorMarcus { get; set; }
        public virtual DbSet<FornecedorTributoAliquota> FornecedorTributoAliquota { get; set; }
        public virtual DbSet<FtAgenda> FtAgenda { get; set; }
        public virtual DbSet<FtAnaliseMapa> FtAnaliseMapa { get; set; }
        public virtual DbSet<GabaritoTransporte> GabaritoTransporte { get; set; }
        public virtual DbSet<GeraProntuario> GeraProntuario { get; set; }
        public virtual DbSet<GeracaoAjusteServicoHistorico> GeracaoAjusteServicoHistorico { get; set; }
        public virtual DbSet<GiroEstoqueMediaMensal> GiroEstoqueMediaMensal { get; set; }
        public virtual DbSet<Glosa> Glosa { get; set; }
        public virtual DbSet<GlosaAcatada> GlosaAcatada { get; set; }
        public virtual DbSet<GlosaAcatadaLog> GlosaAcatadaLog { get; set; }
        public virtual DbSet<GlosaAcatadaParcial> GlosaAcatadaParcial { get; set; }
        public virtual DbSet<GlosaAcatadaParcialLog> GlosaAcatadaParcialLog { get; set; }
        public virtual DbSet<GlosaAcatadaTotal> GlosaAcatadaTotal { get; set; }
        public virtual DbSet<GlosaFechamentoItemValorLiberado> GlosaFechamentoItemValorLiberado { get; set; }
        public virtual DbSet<GlosaGenericaAcatada> GlosaGenericaAcatada { get; set; }
        public virtual DbSet<GlosaGenericaAcatadaLog> GlosaGenericaAcatadaLog { get; set; }
        public virtual DbSet<GlosaHistorico> GlosaHistorico { get; set; }
        public virtual DbSet<GlosaJustificativaSecundaria> GlosaJustificativaSecundaria { get; set; }
        public virtual DbSet<GrupoBacteria> GrupoBacteria { get; set; }
        public virtual DbSet<GrupoBacteriaAntibiotico> GrupoBacteriaAntibiotico { get; set; }
        public virtual DbSet<GrupoBacteriaBacteria> GrupoBacteriaBacteria { get; set; }
        public virtual DbSet<GrupoExame> GrupoExame { get; set; }
        public virtual DbSet<GrupoFaixaEtaria> GrupoFaixaEtaria { get; set; }
        public virtual DbSet<GrupoHabilitacaoSus> GrupoHabilitacaoSus { get; set; }
        public virtual DbSet<GrupoHorarioHorarioDiaSemana> GrupoHorarioHorarioDiaSemana { get; set; }
        public virtual DbSet<GrupoImposto> GrupoImposto { get; set; }
        public virtual DbSet<GrupoImpostoHistorico> GrupoImpostoHistorico { get; set; }
        public virtual DbSet<GrupoInspecaoRecebimento> GrupoInspecaoRecebimento { get; set; }
        public virtual DbSet<Guia> Guia { get; set; }
        public virtual DbSet<GuiaAtendimento> GuiaAtendimento { get; set; }
        public virtual DbSet<GuiaFaixaNumeracao> GuiaFaixaNumeracao { get; set; }
        public virtual DbSet<GuiaFiscal> GuiaFiscal { get; set; }
        public virtual DbSet<GuiaFiscalContaPagarTributoAliquota> GuiaFiscalContaPagarTributoAliquota { get; set; }
        public virtual DbSet<GuiaFiscalContaPagarTributoAliquotaLog> GuiaFiscalContaPagarTributoAliquotaLog { get; set; }
        public virtual DbSet<GuiaFiscalImposto> GuiaFiscalImposto { get; set; }
        public virtual DbSet<GuiaFiscalLog> GuiaFiscalLog { get; set; }
        public virtual DbSet<HabilitacaoSusCredenciada> HabilitacaoSusCredenciada { get; set; }
        public virtual DbSet<HabilitacaoSusHistorico> HabilitacaoSusHistorico { get; set; }
        public virtual DbSet<HemoProcedimento> HemoProcedimento { get; set; }
        public virtual DbSet<HorarioDiaSemana> HorarioDiaSemana { get; set; }
        public virtual DbSet<HorarioHemodinamica> HorarioHemodinamica { get; set; }
        public virtual DbSet<HorarioLaboratorio> HorarioLaboratorio { get; set; }
        public virtual DbSet<HorarioLaboratorioDiaSemana> HorarioLaboratorioDiaSemana { get; set; }
        public virtual DbSet<HorarioPlantao> HorarioPlantao { get; set; }
        public virtual DbSet<HospitalarAtendimentoTeste> HospitalarAtendimentoTeste { get; set; }
        public virtual DbSet<HospitalarSolicitacaoSuprimentos> HospitalarSolicitacaoSuprimentos { get; set; }
        public virtual DbSet<HospitaleBionexoTraducao> HospitaleBionexoTraducao { get; set; }
        public virtual DbSet<HospitaleLogScript> HospitaleLogScript { get; set; }
        public virtual DbSet<Imagem> Imagem { get; set; }
        public virtual DbSet<ImovelTipo> ImovelTipo { get; set; }
        public virtual DbSet<Importacao> Importacao { get; set; }
        public virtual DbSet<ImportacaoBionexo> ImportacaoBionexo { get; set; }
        public virtual DbSet<ImportacaoBionexoBackup> ImportacaoBionexoBackup { get; set; }
        public virtual DbSet<ImportacaoDesativarProdutoDetalhe> ImportacaoDesativarProdutoDetalhe { get; set; }
        public virtual DbSet<ImportacaoDespadronizarProdutoDetalhe> ImportacaoDespadronizarProdutoDetalhe { get; set; }
        public virtual DbSet<ImportacaoNotaFiscal> ImportacaoNotaFiscal { get; set; }
        public virtual DbSet<Imposto> Imposto { get; set; }
        public virtual DbSet<ImpostoRetido> ImpostoRetido { get; set; }
        public virtual DbSet<ImpressaoEtiqueta> ImpressaoEtiqueta { get; set; }
        public virtual DbSet<ImpressoraUnidadeOrganizacional> ImpressoraUnidadeOrganizacional { get; set; }
        public virtual DbSet<IndicadorEconomico> IndicadorEconomico { get; set; }
        public virtual DbSet<InspecaoRecebimento> InspecaoRecebimento { get; set; }
        public virtual DbSet<InspecaoRecebimentoOrdemCompra> InspecaoRecebimentoOrdemCompra { get; set; }
        public virtual DbSet<InspecaoRecebimentoParametroAvaliacao> InspecaoRecebimentoParametroAvaliacao { get; set; }
        public virtual DbSet<IntegraSistemaLegado> IntegraSistemaLegado { get; set; }
        public virtual DbSet<IntegracaoAgendaAgendamentos> IntegracaoAgendaAgendamentos { get; set; }
        public virtual DbSet<IntegracaoAgendaAtendimentosPaciente> IntegracaoAgendaAtendimentosPaciente { get; set; }
        public virtual DbSet<IntegracaoAgendaHorarios> IntegracaoAgendaHorarios { get; set; }
        public virtual DbSet<IntegracaoAgendaHorariosChatBot> IntegracaoAgendaHorariosChatBot { get; set; }
        public virtual DbSet<IntegracaoAgendaHorariosChatBotTeste> IntegracaoAgendaHorariosChatBotTeste { get; set; }
        public virtual DbSet<IntegracaoAgendaHorariosTeste> IntegracaoAgendaHorariosTeste { get; set; }
        public virtual DbSet<IntegracaoAgendaMarcacoesPaciente> IntegracaoAgendaMarcacoesPaciente { get; set; }
        public virtual DbSet<IntegracaoAgendaMedico> IntegracaoAgendaMedico { get; set; }
        public virtual DbSet<IntegracaoAgendaMedicoRecurso> IntegracaoAgendaMedicoRecurso { get; set; }
        public virtual DbSet<IntegracaoAgendaOperadora> IntegracaoAgendaOperadora { get; set; }
        public virtual DbSet<IntegracaoAgendaPaciente> IntegracaoAgendaPaciente { get; set; }
        public virtual DbSet<IntegracaoAgendaPlano> IntegracaoAgendaPlano { get; set; }
        public virtual DbSet<IntegracaoAgendaProcedimento> IntegracaoAgendaProcedimento { get; set; }
        public virtual DbSet<IntegracaoAgendaProcedimentoUnidadeOperadora> IntegracaoAgendaProcedimentoUnidadeOperadora { get; set; }
        public virtual DbSet<IntegracaoAgendaUnidade> IntegracaoAgendaUnidade { get; set; }
        public virtual DbSet<IntegracaoConnect> IntegracaoConnect { get; set; }
        public virtual DbSet<IntegracaoRecursoAgenda> IntegracaoRecursoAgenda { get; set; }
        public virtual DbSet<InteracaoMedicamentosa> InteracaoMedicamentosa { get; set; }
        public virtual DbSet<InteracaoMedicamentosaPrincipioAtivo> InteracaoMedicamentosaPrincipioAtivo { get; set; }
        public virtual DbSet<Interconsulta> Interconsulta { get; set; }
        public virtual DbSet<InterconsultaHistorico> InterconsultaHistorico { get; set; }
        public virtual DbSet<Interface> Interface { get; set; }
        public virtual DbSet<IntervaloAplicacaoMedicamento> IntervaloAplicacaoMedicamento { get; set; }
        public virtual DbSet<Inventario> Inventario { get; set; }
        public virtual DbSet<InventarioAtualizacao> InventarioAtualizacao { get; set; }
        public virtual DbSet<InventarioProdutoDetalhe> InventarioProdutoDetalhe { get; set; }
        public virtual DbSet<InventarioProdutoDetalheLoteProdutoItem> InventarioProdutoDetalheLoteProdutoItem { get; set; }
        public virtual DbSet<Iss> Iss { get; set; }
        public virtual DbSet<IssInternoExterno> IssInternoExterno { get; set; }
        public virtual DbSet<ItemClassificacao> ItemClassificacao { get; set; }
        public virtual DbSet<ItemExame> ItemExame { get; set; }
        public virtual DbSet<JanusAlta> JanusAlta { get; set; }
        public virtual DbSet<JanusAntibiograma> JanusAntibiograma { get; set; }
        public virtual DbSet<JanusInternacao> JanusInternacao { get; set; }
        public virtual DbSet<JanusInternacaoNova> JanusInternacaoNova { get; set; }
        public virtual DbSet<JanusUsoAntibiotico> JanusUsoAntibiotico { get; set; }
        public virtual DbSet<JustificativaAcato> JustificativaAcato { get; set; }
        public virtual DbSet<JustificativaBloqueio> JustificativaBloqueio { get; set; }
        public virtual DbSet<JustificativaCancelamento> JustificativaCancelamento { get; set; }
        public virtual DbSet<JustificativaGlosaFi> JustificativaGlosaFi { get; set; }
        public virtual DbSet<JustificativaGlosaFiComplementar> JustificativaGlosaFiComplementar { get; set; }
        public virtual DbSet<JustificativaGlosaUnimed> JustificativaGlosaUnimed { get; set; }
        public virtual DbSet<JustificativaOcorrenciaCti> JustificativaOcorrenciaCti { get; set; }
        public virtual DbSet<JustificativaRecurso> JustificativaRecurso { get; set; }
        public virtual DbSet<Kit> Kit { get; set; }
        public virtual DbSet<KitComposicaoKit> KitComposicaoKit { get; set; }
        public virtual DbSet<KitComposicaoProduto> KitComposicaoProduto { get; set; }
        public virtual DbSet<KitHistorico> KitHistorico { get; set; }
        public virtual DbSet<KitLoteProdutoItem> KitLoteProdutoItem { get; set; }
        public virtual DbSet<KitMontagem> KitMontagem { get; set; }
        public virtual DbSet<KitMontagemHistorico> KitMontagemHistorico { get; set; }
        public virtual DbSet<KitProcedimentoServico> KitProcedimentoServico { get; set; }
        public virtual DbSet<KitProduto> KitProduto { get; set; }
        public virtual DbSet<KitServico> KitServico { get; set; }
        public virtual DbSet<KitTaxasGases> KitTaxasGases { get; set; }
        public virtual DbSet<KitTaxasGasesOperadora> KitTaxasGasesOperadora { get; set; }
        public virtual DbSet<KitTaxasGasesProcedimento> KitTaxasGasesProcedimento { get; set; }
        public virtual DbSet<KitTaxasGasesUnidadeOrganizacional> KitTaxasGasesUnidadeOrganizacional { get; set; }
        public virtual DbSet<KitUnidadeOrganizacional> KitUnidadeOrganizacional { get; set; }
        public virtual DbSet<LaboratorioHemocultura> LaboratorioHemocultura { get; set; }
        public virtual DbSet<LaboratorioLote> LaboratorioLote { get; set; }
        public virtual DbSet<LaboratorioMaterial> LaboratorioMaterial { get; set; }
        public virtual DbSet<LaboratorioMetodo> LaboratorioMetodo { get; set; }
        public virtual DbSet<LaboratorioMetodoEquipamento> LaboratorioMetodoEquipamento { get; set; }
        public virtual DbSet<LaboratorioPedido> LaboratorioPedido { get; set; }
        public virtual DbSet<LaboratorioPedidoColeta> LaboratorioPedidoColeta { get; set; }
        public virtual DbSet<LaboratorioPedidoColetaEnfermagem> LaboratorioPedidoColetaEnfermagem { get; set; }
        public virtual DbSet<LaboratorioPedidoColetaItem> LaboratorioPedidoColetaItem { get; set; }
        public virtual DbSet<LaboratorioPedidoColetaItemOld> LaboratorioPedidoColetaItemOld { get; set; }
        public virtual DbSet<LaboratorioPedidoColetaObservacao> LaboratorioPedidoColetaObservacao { get; set; }
        public virtual DbSet<LaboratorioPedidoColetaRestricaoAmostra> LaboratorioPedidoColetaRestricaoAmostra { get; set; }
        public virtual DbSet<LaboratorioPedidoHistorico> LaboratorioPedidoHistorico { get; set; }
        public virtual DbSet<LaboratorioPedidoImpedimentoColeta> LaboratorioPedidoImpedimentoColeta { get; set; }
        public virtual DbSet<LaboratorioPedidoItem> LaboratorioPedidoItem { get; set; }
        public virtual DbSet<LaboratorioPedidoItemContaItem> LaboratorioPedidoItemContaItem { get; set; }
        public virtual DbSet<LaboratorioPedidoItemHistorico> LaboratorioPedidoItemHistorico { get; set; }
        public virtual DbSet<LaboratorioPedidoItemInterfaceamentoHistorico> LaboratorioPedidoItemInterfaceamentoHistorico { get; set; }
        public virtual DbSet<LaboratorioPedidoItemObservacao> LaboratorioPedidoItemObservacao { get; set; }
        public virtual DbSet<LaboratorioPedidoLaudo> LaboratorioPedidoLaudo { get; set; }
        public virtual DbSet<LaboratorioPedidoResultado> LaboratorioPedidoResultado { get; set; }
        public virtual DbSet<LaboratorioPedidoResultadoAgrupado> LaboratorioPedidoResultadoAgrupado { get; set; }
        public virtual DbSet<LaboratorioPedidoResultadoAntibiotico> LaboratorioPedidoResultadoAntibiotico { get; set; }
        public virtual DbSet<LaboratorioPedidoResultadoGermes> LaboratorioPedidoResultadoGermes { get; set; }
        public virtual DbSet<LaboratorioPedidoResultadoItem> LaboratorioPedidoResultadoItem { get; set; }
        public virtual DbSet<LaboratorioPedidoResultadoItemHistorico> LaboratorioPedidoResultadoItemHistorico { get; set; }
        public virtual DbSet<LaboratorioPedidoResultadoRepeticao> LaboratorioPedidoResultadoRepeticao { get; set; }
        public virtual DbSet<LaboratorioUnidadeSolicitante> LaboratorioUnidadeSolicitante { get; set; }
        public virtual DbSet<LaboratorioUnidadeSolicitanteExcecao> LaboratorioUnidadeSolicitanteExcecao { get; set; }
        public virtual DbSet<Laboratoriopedidoitemhistoricoamostra> Laboratoriopedidoitemhistoricoamostra { get; set; }
        public virtual DbSet<Laboratoriopedidoresultadohistorico> Laboratoriopedidoresultadohistorico { get; set; }
        public virtual DbSet<LancamentoBancario> LancamentoBancario { get; set; }
        public virtual DbSet<LancamentoBancarioComplemento> LancamentoBancarioComplemento { get; set; }
        public virtual DbSet<LancamentoBancarioConciliacao> LancamentoBancarioConciliacao { get; set; }
        public virtual DbSet<LancamentoBancarioConciliacaoNotaEmitida> LancamentoBancarioConciliacaoNotaEmitida { get; set; }
        public virtual DbSet<LancamentoBancarioContaPagar> LancamentoBancarioContaPagar { get; set; }
        public virtual DbSet<LancamentoBancarioLog> LancamentoBancarioLog { get; set; }
        public virtual DbSet<LancamentoBancárioTeste> LancamentoBancárioTeste { get; set; }
        public virtual DbSet<Laudo> Laudo { get; set; }
        public virtual DbSet<LaudoLaboratorioIntegracaoConnect> LaudoLaboratorioIntegracaoConnect { get; set; }
        public virtual DbSet<LaudoSadt> LaudoSadt { get; set; }
        public virtual DbSet<LaudoSadtIntegracaoConnect> LaudoSadtIntegracaoConnect { get; set; }
        public virtual DbSet<LaudoSadthistorico> LaudoSadthistorico { get; set; }
        public virtual DbSet<Leito> Leito { get; set; }
        public virtual DbSet<LeitoCaracteristica> LeitoCaracteristica { get; set; }
        public virtual DbSet<LeitoCnesAcomodacao> LeitoCnesAcomodacao { get; set; }
        public virtual DbSet<LeitoEventoLeito> LeitoEventoLeito { get; set; }
        public virtual DbSet<LeitoReserva> LeitoReserva { get; set; }
        public virtual DbSet<LeitoSolicitacao> LeitoSolicitacao { get; set; }
        public virtual DbSet<LeitoSolicitacaoHistorico> LeitoSolicitacaoHistorico { get; set; }
        public virtual DbSet<LeitoSusCnes> LeitoSusCnes { get; set; }
        public virtual DbSet<LeitoUnidadeFluxo> LeitoUnidadeFluxo { get; set; }
        public virtual DbSet<LgpdLog> LgpdLog { get; set; }
        public virtual DbSet<LinhaArquivoRetorno> LinhaArquivoRetorno { get; set; }
        public virtual DbSet<LinhaRetornoUnimed> LinhaRetornoUnimed { get; set; }
        public virtual DbSet<LinhaRetornoUnimedConta> LinhaRetornoUnimedConta { get; set; }
        public virtual DbSet<LinhaRetornoUnimedErro> LinhaRetornoUnimedErro { get; set; }
        public virtual DbSet<LinhaRetornoUnimedItem> LinhaRetornoUnimedItem { get; set; }
        public virtual DbSet<LinhaRetornoUnimedItemAdequacao> LinhaRetornoUnimedItemAdequacao { get; set; }
        public virtual DbSet<LinhaRetornoUnimedItemCreditoEstorno> LinhaRetornoUnimedItemCreditoEstorno { get; set; }
        public virtual DbSet<LinhaRetornoUnimedItemErro> LinhaRetornoUnimedItemErro { get; set; }
        public virtual DbSet<ListaCid> ListaCid { get; set; }
        public virtual DbSet<ListaMateriais> ListaMateriais { get; set; }
        public virtual DbSet<ListaMateriaisCadastrados> ListaMateriaisCadastrados { get; set; }
        public virtual DbSet<ListaMedicamento> ListaMedicamento { get; set; }
        public virtual DbSet<ListaMedicamentoCadastrado> ListaMedicamentoCadastrado { get; set; }
        public virtual DbSet<ListaMedicamentoControlado> ListaMedicamentoControlado { get; set; }
        public virtual DbSet<ListaMedicamentoResumida> ListaMedicamentoResumida { get; set; }
        public virtual DbSet<ListaMedicoResumida> ListaMedicoResumida { get; set; }
        public virtual DbSet<ListaPadraoRequisicao> ListaPadraoRequisicao { get; set; }
        public virtual DbSet<ListaTecnicoEnfermagemResumida> ListaTecnicoEnfermagemResumida { get; set; }
        public virtual DbSet<LocalidadeAtualizacao> LocalidadeAtualizacao { get; set; }
        public virtual DbSet<LogBairro> LogBairro { get; set; }
        public virtual DbSet<LogCpc> LogCpc { get; set; }
        public virtual DbSet<LogEnvioSms> LogEnvioSms { get; set; }
        public virtual DbSet<LogErroLoteConta> LogErroLoteConta { get; set; }
        public virtual DbSet<LogFaixaBairro> LogFaixaBairro { get; set; }
        public virtual DbSet<LogFaixaCpc> LogFaixaCpc { get; set; }
        public virtual DbSet<LogFaixaLocalidade> LogFaixaLocalidade { get; set; }
        public virtual DbSet<LogFaixaUf> LogFaixaUf { get; set; }
        public virtual DbSet<LogGrandeUsuario> LogGrandeUsuario { get; set; }
        public virtual DbSet<LogImportaArquivoUnimed> LogImportaArquivoUnimed { get; set; }
        public virtual DbSet<LogImpressao> LogImpressao { get; set; }
        public virtual DbSet<LogLocalidade> LogLocalidade { get; set; }
        public virtual DbSet<LogLogradouro> LogLogradouro { get; set; }
        public virtual DbSet<LogNumSec> LogNumSec { get; set; }
        public virtual DbSet<LogSmsenviadoPaciente> LogSmsenviadoPaciente { get; set; }
        public virtual DbSet<LogVarBai> LogVarBai { get; set; }
        public virtual DbSet<LogVarLoc> LogVarLoc { get; set; }
        public virtual DbSet<LogVarLog> LogVarLog { get; set; }
        public virtual DbSet<LogWebServices> LogWebServices { get; set; }
        public virtual DbSet<LogradourosTipo> LogradourosTipo { get; set; }
        public virtual DbSet<LoteCobranca> LoteCobranca { get; set; }
        public virtual DbSet<LoteConta> LoteConta { get; set; }
        public virtual DbSet<LoteContaComplemento> LoteContaComplemento { get; set; }
        public virtual DbSet<LoteContaMapa> LoteContaMapa { get; set; }
        public virtual DbSet<LotePrescricao> LotePrescricao { get; set; }
        public virtual DbSet<LotePrescricaoRegistroAlergiaPrincipioAtivo> LotePrescricaoRegistroAlergiaPrincipioAtivo { get; set; }
        public virtual DbSet<LotePrescricaoRegistroInteracao> LotePrescricaoRegistroInteracao { get; set; }
        public virtual DbSet<LotePrescricaoRegistroRiscoTev> LotePrescricaoRegistroRiscoTev { get; set; }
        public virtual DbSet<LoteProduto> LoteProduto { get; set; }
        public virtual DbSet<LoteProdutoItem> LoteProdutoItem { get; set; }
        public virtual DbSet<LoteProdutoItemHistoricoStatus> LoteProdutoItemHistoricoStatus { get; set; }
        public virtual DbSet<LoteProdutoItemImpressao> LoteProdutoItemImpressao { get; set; }
        public virtual DbSet<LoteProdutoItemLiberacaoEtiqueta> LoteProdutoItemLiberacaoEtiqueta { get; set; }
        public virtual DbSet<LoteProdutoRelacionamento> LoteProdutoRelacionamento { get; set; }
        public virtual DbSet<MapaCancel> MapaCancel { get; set; }
        public virtual DbSet<MapaCc> MapaCc { get; set; }
        public virtual DbSet<MapaRecebimento> MapaRecebimento { get; set; }
        public virtual DbSet<MaquinaClienteUnidadeOrganizacional> MaquinaClienteUnidadeOrganizacional { get; set; }
        public virtual DbSet<MaquinaImpressoraPadrao> MaquinaImpressoraPadrao { get; set; }
        public virtual DbSet<MconnectAmostra> MconnectAmostra { get; set; }
        public virtual DbSet<MconnectExame> MconnectExame { get; set; }
        public virtual DbSet<MconnectFlag> MconnectFlag { get; set; }
        public virtual DbSet<MconnectOcorrencias> MconnectOcorrencias { get; set; }
        public virtual DbSet<MconnectResultado> MconnectResultado { get; set; }
        public virtual DbSet<Medicamento> Medicamento { get; set; }
        public virtual DbSet<MedicamentoNaoPadronizado> MedicamentoNaoPadronizado { get; set; }
        public virtual DbSet<MedicamentoNaoPadronizadoSolicitacaoPdenfermagem> MedicamentoNaoPadronizadoSolicitacaoPdenfermagem { get; set; }
        public virtual DbSet<MedicamentoPrincipioAtivo> MedicamentoPrincipioAtivo { get; set; }
        public virtual DbSet<MedicamentoReceituario> MedicamentoReceituario { get; set; }
        public virtual DbSet<MedicamentoReceituarioCondicao> MedicamentoReceituarioCondicao { get; set; }
        public virtual DbSet<MedicamentoTudo> MedicamentoTudo { get; set; }
        public virtual DbSet<MedicamentosAntibioticos> MedicamentosAntibioticos { get; set; }
        public virtual DbSet<MedicamentosTodosSemNomeComercial> MedicamentosTodosSemNomeComercial { get; set; }
        public virtual DbSet<Medico> Medico { get; set; }
        public virtual DbSet<Medico1> Medico1 { get; set; }
        public virtual DbSet<Medico3> Medico3 { get; set; }
        public virtual DbSet<MedicoEspecialidade> MedicoEspecialidade { get; set; }
        public virtual DbSet<MedicoExterno> MedicoExterno { get; set; }
        public virtual DbSet<MedicoExternoAtivo> MedicoExternoAtivo { get; set; }
        public virtual DbSet<MedicoInterno> MedicoInterno { get; set; }
        public virtual DbSet<MedicoProcedimento> MedicoProcedimento { get; set; }
        public virtual DbSet<MedicoRajacoop> MedicoRajacoop { get; set; }
        public virtual DbSet<MeioColeta> MeioColeta { get; set; }
        public virtual DbSet<Mensagem> Mensagem { get; set; }
        public virtual DbSet<MensagemBackup> MensagemBackup { get; set; }
        public virtual DbSet<MensagemNovoControle> MensagemNovoControle { get; set; }
        public virtual DbSet<MensagemNovoControleBackup> MensagemNovoControleBackup { get; set; }
        public virtual DbSet<MensagemPerfil> MensagemPerfil { get; set; }
        public virtual DbSet<MensagemPerfilBackup> MensagemPerfilBackup { get; set; }
        public virtual DbSet<MensagemPerfilEnvioPerfil> MensagemPerfilEnvioPerfil { get; set; }
        public virtual DbSet<MensagemSolicitacao> MensagemSolicitacao { get; set; }
        public virtual DbSet<MensagemSolicitacaoBackup> MensagemSolicitacaoBackup { get; set; }
        public virtual DbSet<MensagemTipo> MensagemTipo { get; set; }
        public virtual DbSet<MensagemTipoPerfil> MensagemTipoPerfil { get; set; }
        public virtual DbSet<MensagemUnidadeOrganizacional> MensagemUnidadeOrganizacional { get; set; }
        public virtual DbSet<MensagemUsuario> MensagemUsuario { get; set; }
        public virtual DbSet<MensagemUsuarioBackup> MensagemUsuarioBackup { get; set; }
        public virtual DbSet<MlisAmostra> MlisAmostra { get; set; }
        public virtual DbSet<MlisAtributo> MlisAtributo { get; set; }
        public virtual DbSet<MlisExame> MlisExame { get; set; }
        public virtual DbSet<MlisPaciente> MlisPaciente { get; set; }
        public virtual DbSet<ModeloLaudo> ModeloLaudo { get; set; }
        public virtual DbSet<ModeloLaudoSadt> ModeloLaudoSadt { get; set; }
        public virtual DbSet<ModeloLaudoSadtIm0> ModeloLaudoSadtIm0 { get; set; }
        public virtual DbSet<ModeloLaudoSadtTeste> ModeloLaudoSadtTeste { get; set; }
        public virtual DbSet<ModeloLaudoSadtTextoModeloLaudoSadt> ModeloLaudoSadtTextoModeloLaudoSadt { get; set; }
        public virtual DbSet<ModeloLaudoSadthistorico> ModeloLaudoSadthistorico { get; set; }
        public virtual DbSet<Modulo> Modulo { get; set; }
        public virtual DbSet<ModuloDigitoVerificador> ModuloDigitoVerificador { get; set; }
        public virtual DbSet<Monitor> Monitor { get; set; }
        public virtual DbSet<MonitoramentoLote> MonitoramentoLote { get; set; }
        public virtual DbSet<MotivoUpgrade> MotivoUpgrade { get; set; }
        public virtual DbSet<Motivosglosa> Motivosglosa { get; set; }
        public virtual DbSet<MovimentacaoProduto> MovimentacaoProduto { get; set; }
        public virtual DbSet<NaturezaOcupacao> NaturezaOcupacao { get; set; }
        public virtual DbSet<NotaDevolucao> NotaDevolucao { get; set; }
        public virtual DbSet<NotaDevolucaoExcluida> NotaDevolucaoExcluida { get; set; }
        public virtual DbSet<NotaDevolucaoNotaEntradaProdutoDetalhe> NotaDevolucaoNotaEntradaProdutoDetalhe { get; set; }
        public virtual DbSet<NotaDevolucaoNotaEntradaProdutoDetalheLoteProdutoItem> NotaDevolucaoNotaEntradaProdutoDetalheLoteProdutoItem { get; set; }
        public virtual DbSet<NotaEmitida> NotaEmitida { get; set; }
        public virtual DbSet<NotaEmitidaComplemento> NotaEmitidaComplemento { get; set; }
        public virtual DbSet<NotaEmitidaConta> NotaEmitidaConta { get; set; }
        public virtual DbSet<NotaEmitidaContaLog> NotaEmitidaContaLog { get; set; }
        public virtual DbSet<NotaEmitidaFormaPagamento> NotaEmitidaFormaPagamento { get; set; }
        public virtual DbSet<NotaEmitidaHistorico> NotaEmitidaHistorico { get; set; }
        public virtual DbSet<NotaEmitidaImposto> NotaEmitidaImposto { get; set; }
        public virtual DbSet<NotaEmitidaSituacao> NotaEmitidaSituacao { get; set; }
        public virtual DbSet<NotaEmitidaTemporaria> NotaEmitidaTemporaria { get; set; }
        public virtual DbSet<NotaEntrada> NotaEntrada { get; set; }
        public virtual DbSet<NotaEntradaHistorico> NotaEntradaHistorico { get; set; }
        public virtual DbSet<NotaEntradaProdutoDetalhe> NotaEntradaProdutoDetalhe { get; set; }
        public virtual DbSet<NotaExcluida> NotaExcluida { get; set; }
        public virtual DbSet<NotaExcluidaProdutoDetalhe> NotaExcluidaProdutoDetalhe { get; set; }
        public virtual DbSet<NotaFiscalEletronica> NotaFiscalEletronica { get; set; }
        public virtual DbSet<NotaFiscalEletronicaLog> NotaFiscalEletronicaLog { get; set; }
        public virtual DbSet<NotaFiscalEletronicaRetorno> NotaFiscalEletronicaRetorno { get; set; }
        public virtual DbSet<NotaentradaBiTeste> NotaentradaBiTeste { get; set; }
        public virtual DbSet<NotificacaoPendencia> NotificacaoPendencia { get; set; }
        public virtual DbSet<NovoControle> NovoControle { get; set; }
        public virtual DbSet<NovoControleAtributoAtributoCaracteristica> NovoControleAtributoAtributoCaracteristica { get; set; }
        public virtual DbSet<NovoControlePerfil> NovoControlePerfil { get; set; }
        public virtual DbSet<Nutricionista> Nutricionista { get; set; }
        public virtual DbSet<Nutriente> Nutriente { get; set; }
        public virtual DbSet<ObservacaoAgendacc> ObservacaoAgendacc { get; set; }
        public virtual DbSet<ObservacaoAgendasadt> ObservacaoAgendasadt { get; set; }
        public virtual DbSet<ObservacaoNutricional> ObservacaoNutricional { get; set; }
        public virtual DbSet<Ocupacao> Ocupacao { get; set; }
        public virtual DbSet<OcupacaoAgrupamento> OcupacaoAgrupamento { get; set; }
        public virtual DbSet<Odontologista> Odontologista { get; set; }
        public virtual DbSet<Operador> Operador { get; set; }
        public virtual DbSet<OperadorAtributoTipo> OperadorAtributoTipo { get; set; }
        public virtual DbSet<Operadora> Operadora { get; set; }
        public virtual DbSet<OperadoraCodigoHospital> OperadoraCodigoHospital { get; set; }
        public virtual DbSet<OperadoraEmpresaConveniada> OperadoraEmpresaConveniada { get; set; }
        public virtual DbSet<OperadoraEmpresaPagante> OperadoraEmpresaPagante { get; set; }
        public virtual DbSet<OperadoraEspecialidade> OperadoraEspecialidade { get; set; }
        public virtual DbSet<OperadoraEspecialidadeHistorico> OperadoraEspecialidadeHistorico { get; set; }
        public virtual DbSet<OperadoraHistorico> OperadoraHistorico { get; set; }
        public virtual DbSet<OperadoraIss> OperadoraIss { get; set; }
        public virtual DbSet<OperadoraModuloDigitoVerificador> OperadoraModuloDigitoVerificador { get; set; }
        public virtual DbSet<OperadoraParametro> OperadoraParametro { get; set; }
        public virtual DbSet<OperadoraParametroHistorico> OperadoraParametroHistorico { get; set; }
        public virtual DbSet<OperadoraPlano> OperadoraPlano { get; set; }
        public virtual DbSet<OperadoraPlanoComVigencia> OperadoraPlanoComVigencia { get; set; }
        public virtual DbSet<OperadoraPlanoTesteDba> OperadoraPlanoTesteDba { get; set; }
        public virtual DbSet<OperadoraRecebimento> OperadoraRecebimento { get; set; }
        public virtual DbSet<OperadoraRecebimentoLancamentoBancario> OperadoraRecebimentoLancamentoBancario { get; set; }
        public virtual DbSet<OperadoraRecebimentoParcelaSemConciliacao> OperadoraRecebimentoParcelaSemConciliacao { get; set; }
        public virtual DbSet<OperadoraRecebimentoRetornoArquivo> OperadoraRecebimentoRetornoArquivo { get; set; }
        public virtual DbSet<OperadoraTributoCobranca> OperadoraTributoCobranca { get; set; }
        public virtual DbSet<OperadoraUnidadeOrganizacionalChHistorico> OperadoraUnidadeOrganizacionalChHistorico { get; set; }
        public virtual DbSet<OperadoraUnidadeOrganizacionalCredenciada> OperadoraUnidadeOrganizacionalCredenciada { get; set; }
        public virtual DbSet<OperadoraUnidadeOrganizacionalHistorico> OperadoraUnidadeOrganizacionalHistorico { get; set; }
        public virtual DbSet<OrcamentoOrcamento> OrcamentoOrcamento { get; set; }
        public virtual DbSet<OrcamentoProcedimento> OrcamentoProcedimento { get; set; }
        public virtual DbSet<OrcamentoProcedimentoServico> OrcamentoProcedimentoServico { get; set; }
        public virtual DbSet<OrcamentoSolicitacao> OrcamentoSolicitacao { get; set; }
        public virtual DbSet<OrcamentoSolicitacaoHotelaria> OrcamentoSolicitacaoHotelaria { get; set; }
        public virtual DbSet<OrcamentoSolicitacaoOpme> OrcamentoSolicitacaoOpme { get; set; }
        public virtual DbSet<OrcamentoValoresHotelaria> OrcamentoValoresHotelaria { get; set; }
        public virtual DbSet<OrcamentoValoresOpme> OrcamentoValoresOpme { get; set; }
        public virtual DbSet<OrcamentoValoresOutrosItens> OrcamentoValoresOutrosItens { get; set; }
        public virtual DbSet<OrdemCompra> OrdemCompra { get; set; }
        public virtual DbSet<OrdemCompraAdiantamento> OrdemCompraAdiantamento { get; set; }
        public virtual DbSet<OrdemCompraCaracteristica> OrdemCompraCaracteristica { get; set; }
        public virtual DbSet<OrdemCompraNotaEntrada> OrdemCompraNotaEntrada { get; set; }
        public virtual DbSet<OrdemCompraProdutoDetalhe> OrdemCompraProdutoDetalhe { get; set; }
        public virtual DbSet<OrdemServico> OrdemServico { get; set; }
        public virtual DbSet<OrdemServicoCaracteristica> OrdemServicoCaracteristica { get; set; }
        public virtual DbSet<OrdemServicoExame> OrdemServicoExame { get; set; }
        public virtual DbSet<OrdemServicoExameAntibiotico> OrdemServicoExameAntibiotico { get; set; }
        public virtual DbSet<OrdemServicoExameCancelamento> OrdemServicoExameCancelamento { get; set; }
        public virtual DbSet<OrdemServicoExameCancelamentoAprovacao> OrdemServicoExameCancelamentoAprovacao { get; set; }
        public virtual DbSet<OrdemServicoExameExamePrioridadeEtapa> OrdemServicoExameExamePrioridadeEtapa { get; set; }
        public virtual DbSet<OrdemServicoExameItemExame> OrdemServicoExameItemExame { get; set; }
        public virtual DbSet<OrdemServicoExameItemExameHistorico> OrdemServicoExameItemExameHistorico { get; set; }
        public virtual DbSet<OrdemServicoExameObservacao> OrdemServicoExameObservacao { get; set; }
        public virtual DbSet<OrdemServicoServico> OrdemServicoServico { get; set; }
        public virtual DbSet<OrdemServicoServicoExecutado> OrdemServicoServicoExecutado { get; set; }
        public virtual DbSet<OrdemServicoTipoServico> OrdemServicoTipoServico { get; set; }
        public virtual DbSet<OrdemcompraHistorico> OrdemcompraHistorico { get; set; }
        public virtual DbSet<OrdemcompraProdutodetalheHistorico> OrdemcompraProdutodetalheHistorico { get; set; }
        public virtual DbSet<OrgaoEmissor> OrgaoEmissor { get; set; }
        public virtual DbSet<OutrosConselhos> OutrosConselhos { get; set; }
        public virtual DbSet<Paciente> Paciente { get; set; }
        public virtual DbSet<Paciente2> Paciente2 { get; set; }
        public virtual DbSet<PacienteIntegracaoSistemaLegado> PacienteIntegracaoSistemaLegado { get; set; }
        public virtual DbSet<PacientePlanoConta> PacientePlanoConta { get; set; }
        public virtual DbSet<PacienteRegistroEletronico> PacienteRegistroEletronico { get; set; }
        public virtual DbSet<PacienteSimples> PacienteSimples { get; set; }
        public virtual DbSet<PacientesUti> PacientesUti { get; set; }
        public virtual DbSet<PacoteExame> PacoteExame { get; set; }
        public virtual DbSet<PacoteExameExame> PacoteExameExame { get; set; }
        public virtual DbSet<PacoteFaturamento> PacoteFaturamento { get; set; }
        public virtual DbSet<PacoteTransporte> PacoteTransporte { get; set; }
        public virtual DbSet<PacoteUnimedTransporte> PacoteUnimedTransporte { get; set; }
        public virtual DbSet<Pagina> Pagina { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<ParNotaEmitida> ParNotaEmitida { get; set; }
        public virtual DbSet<ParametrizacaoSistema> ParametrizacaoSistema { get; set; }
        public virtual DbSet<ParametrizacaoSistemaHistorico> ParametrizacaoSistemaHistorico { get; set; }
        public virtual DbSet<ParametroAvaliacaoRecebimento> ParametroAvaliacaoRecebimento { get; set; }
        public virtual DbSet<ParametroUf> ParametroUf { get; set; }
        public virtual DbSet<ParcelaCondicaoPagamento> ParcelaCondicaoPagamento { get; set; }
        public virtual DbSet<ParcelaCondicaoPagamentoLog> ParcelaCondicaoPagamentoLog { get; set; }
        public virtual DbSet<ParcelaContaPagar> ParcelaContaPagar { get; set; }
        public virtual DbSet<ParcelaContaPagarAcrescimo> ParcelaContaPagarAcrescimo { get; set; }
        public virtual DbSet<ParcelaContaPagarBaixa> ParcelaContaPagarBaixa { get; set; }
        public virtual DbSet<ParcelaContaPagarBaixaAcrescimo> ParcelaContaPagarBaixaAcrescimo { get; set; }
        public virtual DbSet<ParcelaContaPagarBaixaContaPagarTributoAliquota> ParcelaContaPagarBaixaContaPagarTributoAliquota { get; set; }
        public virtual DbSet<ParcelaContaPagarBaixaContaPagarTributoAliquotaLog> ParcelaContaPagarBaixaContaPagarTributoAliquotaLog { get; set; }
        public virtual DbSet<ParcelaContaPagarBaixaDesconto> ParcelaContaPagarBaixaDesconto { get; set; }
        public virtual DbSet<ParcelaContaPagarBaixaLog> ParcelaContaPagarBaixaLog { get; set; }
        public virtual DbSet<ParcelaContaPagarDesconto> ParcelaContaPagarDesconto { get; set; }
        public virtual DbSet<ParcelaContaPagarHistorico> ParcelaContaPagarHistorico { get; set; }
        public virtual DbSet<ParcelaContaPagarLog> ParcelaContaPagarLog { get; set; }
        public virtual DbSet<ParcelaContaReceber> ParcelaContaReceber { get; set; }
        public virtual DbSet<ParcelaContaReceberAcrescimo> ParcelaContaReceberAcrescimo { get; set; }
        public virtual DbSet<ParcelaContaReceberBaixa> ParcelaContaReceberBaixa { get; set; }
        public virtual DbSet<ParcelaContaReceberBaixaAcrescimo> ParcelaContaReceberBaixaAcrescimo { get; set; }
        public virtual DbSet<ParcelaContaReceberBaixaDesconto> ParcelaContaReceberBaixaDesconto { get; set; }
        public virtual DbSet<ParcelaContaReceberBaixaLog> ParcelaContaReceberBaixaLog { get; set; }
        public virtual DbSet<ParcelaContaReceberDesconto> ParcelaContaReceberDesconto { get; set; }
        public virtual DbSet<ParcelaContaReceberHistorico> ParcelaContaReceberHistorico { get; set; }
        public virtual DbSet<ParcelaContaReceberLog> ParcelaContaReceberLog { get; set; }
        public virtual DbSet<ParcelasContaParticular> ParcelasContaParticular { get; set; }
        public virtual DbSet<PdrProdemge> PdrProdemge { get; set; }
        public virtual DbSet<PedidoDeSangueHemoplus> PedidoDeSangueHemoplus { get; set; }
        public virtual DbSet<PedidoDeSangueHemoplusItem> PedidoDeSangueHemoplusItem { get; set; }
        public virtual DbSet<PedidoDeSangueHemoplusItemLog> PedidoDeSangueHemoplusItemLog { get; set; }
        public virtual DbSet<PedidoDeSangueHemoplusLog> PedidoDeSangueHemoplusLog { get; set; }
        public virtual DbSet<Pendencia> Pendencia { get; set; }
        public virtual DbSet<PerdaProduto> PerdaProduto { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<PerfilAgenda> PerfilAgenda { get; set; }
        public virtual DbSet<PerfilClassificacaoProduto> PerfilClassificacaoProduto { get; set; }
        public virtual DbSet<PerfilLaboratorio> PerfilLaboratorio { get; set; }
        public virtual DbSet<PerfilUnidadeOrganizacional> PerfilUnidadeOrganizacional { get; set; }
        public virtual DbSet<PerfilUsuario> PerfilUsuario { get; set; }
        public virtual DbSet<Perfilorcamento> Perfilorcamento { get; set; }
        public virtual DbSet<PeriodoPermanencia> PeriodoPermanencia { get; set; }
        public virtual DbSet<Permanencia> Permanencia { get; set; }
        public virtual DbSet<PermissaoPerfilControle> PermissaoPerfilControle { get; set; }
        public virtual DbSet<PesquisaPessoa> PesquisaPessoa { get; set; }
        public virtual DbSet<Pessoa> Pessoa { get; set; }
        public virtual DbSet<PessoaCaracteristica> PessoaCaracteristica { get; set; }
        public virtual DbSet<PessoaCaracteristicaHistorico> PessoaCaracteristicaHistorico { get; set; }
        public virtual DbSet<PessoaCorreioEletronico> PessoaCorreioEletronico { get; set; }
        public virtual DbSet<PessoaCorreioEletronicoHistoricoNaoRegistro> PessoaCorreioEletronicoHistoricoNaoRegistro { get; set; }
        public virtual DbSet<PessoaDocumentoGeral> PessoaDocumentoGeral { get; set; }
        public virtual DbSet<PessoaEndereco> PessoaEndereco { get; set; }
        public virtual DbSet<PessoaEnderecoFinalidade> PessoaEnderecoFinalidade { get; set; }
        public virtual DbSet<PessoaEntidade> PessoaEntidade { get; set; }
        public virtual DbSet<PessoaEntidadePessoaAtributo> PessoaEntidadePessoaAtributo { get; set; }
        public virtual DbSet<PessoaEntidadePessoaEntidade> PessoaEntidadePessoaEntidade { get; set; }
        public virtual DbSet<PessoaFisica> PessoaFisica { get; set; }
        public virtual DbSet<PessoaFisicaIi> PessoaFisicaIi { get; set; }
        public virtual DbSet<PessoaHistorico> PessoaHistorico { get; set; }
        public virtual DbSet<PessoaImagem> PessoaImagem { get; set; }
        public virtual DbSet<PessoaJuridica> PessoaJuridica { get; set; }
        public virtual DbSet<PessoaPessoa> PessoaPessoa { get; set; }
        public virtual DbSet<PessoaPlano> PessoaPlano { get; set; }
        public virtual DbSet<PessoaPlanoContas> PessoaPlanoContas { get; set; }
        public virtual DbSet<PessoaRelacionamento> PessoaRelacionamento { get; set; }
        public virtual DbSet<PessoaTelefone> PessoaTelefone { get; set; }
        public virtual DbSet<PessoaTelefoneHorario> PessoaTelefoneHorario { get; set; }
        public virtual DbSet<PessoaUrl> PessoaUrl { get; set; }
        public virtual DbSet<Plano> Plano { get; set; }
        public virtual DbSet<PlanoContas> PlanoContas { get; set; }
        public virtual DbSet<PlanoDeContasFinanceiro> PlanoDeContasFinanceiro { get; set; }
        public virtual DbSet<PlanoEmpresaConveniada> PlanoEmpresaConveniada { get; set; }
        public virtual DbSet<PlanoEspecialidade> PlanoEspecialidade { get; set; }
        public virtual DbSet<PlanoEspecialidadeHistorico> PlanoEspecialidadeHistorico { get; set; }
        public virtual DbSet<PlanoHistorico> PlanoHistorico { get; set; }
        public virtual DbSet<PlanoOperadoraCategoria> PlanoOperadoraCategoria { get; set; }
        public virtual DbSet<PlanoPadrao> PlanoPadrao { get; set; }
        public virtual DbSet<PlanoRede> PlanoRede { get; set; }
        public virtual DbSet<PlanoTratamentoOncologia> PlanoTratamentoOncologia { get; set; }
        public virtual DbSet<PlanoTratamentoOncologiaProtocolo> PlanoTratamentoOncologiaProtocolo { get; set; }
        public virtual DbSet<PlanoUnidadeOrganizacionalCredenciada> PlanoUnidadeOrganizacionalCredenciada { get; set; }
        public virtual DbSet<PlanoUnidadeOrganizacionalHistorico> PlanoUnidadeOrganizacionalHistorico { get; set; }
        public virtual DbSet<PlanoUnidadeOrganizacionalHistoricoCh> PlanoUnidadeOrganizacionalHistoricoCh { get; set; }
        public virtual DbSet<PontoAtendimento> PontoAtendimento { get; set; }
        public virtual DbSet<PontoAtendimentoUsuario> PontoAtendimentoUsuario { get; set; }
        public virtual DbSet<PontoRessuprimento> PontoRessuprimento { get; set; }
        public virtual DbSet<Porte> Porte { get; set; }
        public virtual DbSet<PorteAnestesicoBi> PorteAnestesicoBi { get; set; }
        public virtual DbSet<PorteHistorico> PorteHistorico { get; set; }
        public virtual DbSet<PorteTabela> PorteTabela { get; set; }
        public virtual DbSet<Posologia> Posologia { get; set; }
        public virtual DbSet<PrecoMedio> PrecoMedio { get; set; }
        public virtual DbSet<PrecoMedioHistorico> PrecoMedioHistorico { get; set; }
        public virtual DbSet<PrecoProduto> PrecoProduto { get; set; }
        public virtual DbSet<PrecoProdutoCargaHistorico> PrecoProdutoCargaHistorico { get; set; }
        public virtual DbSet<PrecoProdutoCargaLog> PrecoProdutoCargaLog { get; set; }
        public virtual DbSet<PrecoProdutoDiretorioArquivo> PrecoProdutoDiretorioArquivo { get; set; }
        public virtual DbSet<PrecoProdutoLinhaDadosTransporteA> PrecoProdutoLinhaDadosTransporteA { get; set; }
        public virtual DbSet<PrecoProdutoLinhaDadosTransporteBteste> PrecoProdutoLinhaDadosTransporteBteste { get; set; }
        public virtual DbSet<PrecoProdutoTabela> PrecoProdutoTabela { get; set; }
        public virtual DbSet<PrecoProdutoTabelaSus> PrecoProdutoTabelaSus { get; set; }
        public virtual DbSet<PrecoProdutoTrabalho> PrecoProdutoTrabalho { get; set; }
        public virtual DbSet<PrecoProdutoTransporte> PrecoProdutoTransporte { get; set; }
        public virtual DbSet<PrecoProdutoTransporteTeste> PrecoProdutoTransporteTeste { get; set; }
        public virtual DbSet<Precoprodutounicoretorno> Precoprodutounicoretorno { get; set; }
        public virtual DbSet<Preparo> Preparo { get; set; }
        public virtual DbSet<PrescricaoAnalise> PrescricaoAnalise { get; set; }
        public virtual DbSet<PrescricaoAnaliseItem> PrescricaoAnaliseItem { get; set; }
        public virtual DbSet<PrescricaoAnaliseItemHistorico> PrescricaoAnaliseItemHistorico { get; set; }
        public virtual DbSet<PrescricaoImportacaoUsuario> PrescricaoImportacaoUsuario { get; set; }
        public virtual DbSet<PrescricaoPadrao> PrescricaoPadrao { get; set; }
        public virtual DbSet<PrestadorServico> PrestadorServico { get; set; }
        public virtual DbSet<PrincipioAtivo> PrincipioAtivo { get; set; }
        public virtual DbSet<ProcDmInternoExterno> ProcDmInternoExterno { get; set; }
        public virtual DbSet<ProcedimentoCalculado> ProcedimentoCalculado { get; set; }
        public virtual DbSet<ProcedimentoCihagenerico> ProcedimentoCihagenerico { get; set; }
        public virtual DbSet<ProcedimentoMedico> ProcedimentoMedico { get; set; }
        public virtual DbSet<ProcedimentoMedicoAgrupamento> ProcedimentoMedicoAgrupamento { get; set; }
        public virtual DbSet<ProcedimentoMedicoAgrupamentoAjuste> ProcedimentoMedicoAgrupamentoAjuste { get; set; }
        public virtual DbSet<ProcedimentoMedicoBi> ProcedimentoMedicoBi { get; set; }
        public virtual DbSet<ProcedimentoMedicoSus> ProcedimentoMedicoSus { get; set; }
        public virtual DbSet<ProcedimentoPedido> ProcedimentoPedido { get; set; }
        public virtual DbSet<ProcedimentoPedidoHistorico> ProcedimentoPedidoHistorico { get; set; }
        public virtual DbSet<ProcedimentoPedidoProcedimentos> ProcedimentoPedidoProcedimentos { get; set; }
        public virtual DbSet<ProcedimentoPedidoProcedimentosHistorico> ProcedimentoPedidoProcedimentosHistorico { get; set; }
        public virtual DbSet<ProcedimentoSecundarioFolhaDeSala> ProcedimentoSecundarioFolhaDeSala { get; set; }
        public virtual DbSet<Procedimentos> Procedimentos { get; set; }
        public virtual DbSet<ProcedimentosComRepasse> ProcedimentosComRepasse { get; set; }
        public virtual DbSet<ProcedimentosRecurso> ProcedimentosRecurso { get; set; }
        public virtual DbSet<ProcedimentosRegiaoAplicacao> ProcedimentosRegiaoAplicacao { get; set; }
        public virtual DbSet<ProcedimentosServico> ProcedimentosServico { get; set; }
        public virtual DbSet<ProcedimentosUnidadeTraducao> ProcedimentosUnidadeTraducao { get; set; }
        public virtual DbSet<ProcessamentoArquivo> ProcessamentoArquivo { get; set; }
        public virtual DbSet<ProcessamentoMedio> ProcessamentoMedio { get; set; }
        public virtual DbSet<ProcsThatExecute> ProcsThatExecute { get; set; }
        public virtual DbSet<Produto> Produto { get; set; }
        public virtual DbSet<ProdutoClassificacaoContabilPlanoContaContabil> ProdutoClassificacaoContabilPlanoContaContabil { get; set; }
        public virtual DbSet<ProdutoClassificacaoProduto> ProdutoClassificacaoProduto { get; set; }
        public virtual DbSet<ProdutoDescricao> ProdutoDescricao { get; set; }
        public virtual DbSet<ProdutoDescricaoTudo> ProdutoDescricaoTudo { get; set; }
        public virtual DbSet<ProdutoDetalhe> ProdutoDetalhe { get; set; }
        public virtual DbSet<ProdutoDetalheAtributo> ProdutoDetalheAtributo { get; set; }
        public virtual DbSet<ProdutoDetalheAtributoLog> ProdutoDetalheAtributoLog { get; set; }
        public virtual DbSet<ProdutoDetalheBarreiraHorario> ProdutoDetalheBarreiraHorario { get; set; }
        public virtual DbSet<ProdutoDetalheFabricante> ProdutoDetalheFabricante { get; set; }
        public virtual DbSet<ProdutoDetalheFabricanteCodigoBarras> ProdutoDetalheFabricanteCodigoBarras { get; set; }
        public virtual DbSet<ProdutoDetalheFabricanteServicoProdutoTabela> ProdutoDetalheFabricanteServicoProdutoTabela { get; set; }
        public virtual DbSet<ProdutoDetalheFabricanteServicoProdutoTabelaOperadora> ProdutoDetalheFabricanteServicoProdutoTabelaOperadora { get; set; }
        public virtual DbSet<ProdutoDetalheFabricanteServicoProdutoTabelaPlano> ProdutoDetalheFabricanteServicoProdutoTabelaPlano { get; set; }
        public virtual DbSet<ProdutoDetalheHistorio> ProdutoDetalheHistorio { get; set; }
        public virtual DbSet<ProdutoDetalheImportacao> ProdutoDetalheImportacao { get; set; }
        public virtual DbSet<ProdutoDetalheInstrucaoEspecial> ProdutoDetalheInstrucaoEspecial { get; set; }
        public virtual DbSet<ProdutoDetalheOperadoraServicoCaracteristicaTipo> ProdutoDetalheOperadoraServicoCaracteristicaTipo { get; set; }
        public virtual DbSet<ProdutoDetalheViaAdministracao> ProdutoDetalheViaAdministracao { get; set; }
        public virtual DbSet<ProdutoDocumentoExigido> ProdutoDocumentoExigido { get; set; }
        public virtual DbSet<ProdutoFabricante> ProdutoFabricante { get; set; }
        public virtual DbSet<ProdutoFabricanteTodos> ProdutoFabricanteTodos { get; set; }
        public virtual DbSet<ProdutoFornecedor> ProdutoFornecedor { get; set; }
        public virtual DbSet<ProdutoGeral> ProdutoGeral { get; set; }
        public virtual DbSet<ProdutoGeral1> ProdutoGeral1 { get; set; }
        public virtual DbSet<ProdutoGeralMaterialized> ProdutoGeralMaterialized { get; set; }
        public virtual DbSet<ProdutoGeralOld> ProdutoGeralOld { get; set; }
        public virtual DbSet<ProdutoGeralTeste> ProdutoGeralTeste { get; set; }
        public virtual DbSet<ProdutoGeralTodo> ProdutoGeralTodo { get; set; }
        public virtual DbSet<ProdutoGeralTodoMaterialized> ProdutoGeralTodoMaterialized { get; set; }
        public virtual DbSet<ProdutoGeralTodoOld> ProdutoGeralTodoOld { get; set; }
        public virtual DbSet<ProdutoGeralView> ProdutoGeralView { get; set; }
        public virtual DbSet<ProdutoImportacao> ProdutoImportacao { get; set; }
        public virtual DbSet<ProdutoIntegracaoSistemaLegado> ProdutoIntegracaoSistemaLegado { get; set; }
        public virtual DbSet<ProdutoIntegracaoSistemaLegadoCodigoInterno> ProdutoIntegracaoSistemaLegadoCodigoInterno { get; set; }
        public virtual DbSet<ProdutoLocalAlteracaoDados> ProdutoLocalAlteracaoDados { get; set; }
        public virtual DbSet<ProdutoLocalizacao> ProdutoLocalizacao { get; set; }
        public virtual DbSet<ProdutoNaoCoberto> ProdutoNaoCoberto { get; set; }
        public virtual DbSet<ProdutoNaoCobrado> ProdutoNaoCobrado { get; set; }
        public virtual DbSet<ProdutoPreco> ProdutoPreco { get; set; }
        public virtual DbSet<ProdutoProduto> ProdutoProduto { get; set; }
        public virtual DbSet<ProdutoQtdeAutorizada> ProdutoQtdeAutorizada { get; set; }
        public virtual DbSet<ProdutoQuimioterapico> ProdutoQuimioterapico { get; set; }
        public virtual DbSet<ProdutoQuimioterapicoItem> ProdutoQuimioterapicoItem { get; set; }
        public virtual DbSet<ProdutoTraducaoTeste> ProdutoTraducaoTeste { get; set; }
        public virtual DbSet<ProdutoUnidadeMedidaConversao> ProdutoUnidadeMedidaConversao { get; set; }
        public virtual DbSet<ProdutoUnidadeMedidaConversaoHistorico> ProdutoUnidadeMedidaConversaoHistorico { get; set; }
        public virtual DbSet<ProfissionalSaude> ProfissionalSaude { get; set; }
        public virtual DbSet<ProfissionalSaudeCbo> ProfissionalSaudeCbo { get; set; }
        public virtual DbSet<ProfissionalSaudeCredenciadoSus> ProfissionalSaudeCredenciadoSus { get; set; }
        public virtual DbSet<ProfissionalSaudeIi> ProfissionalSaudeIi { get; set; }
        public virtual DbSet<ProfissionalSaudeOperadora> ProfissionalSaudeOperadora { get; set; }
        public virtual DbSet<Protocolo> Protocolo { get; set; }
        public virtual DbSet<ProtocoloAplicacao> ProtocoloAplicacao { get; set; }
        public virtual DbSet<ProtocoloAplicacaoAtendimento> ProtocoloAplicacaoAtendimento { get; set; }
        public virtual DbSet<ProtocoloAplicacaoAtendimentoDispensacaoEnfermagem> ProtocoloAplicacaoAtendimentoDispensacaoEnfermagem { get; set; }
        public virtual DbSet<ProtocoloAplicacaoAtendimentoPrescricaoHorario> ProtocoloAplicacaoAtendimentoPrescricaoHorario { get; set; }
        public virtual DbSet<ProtocoloAplicacaoHistorico> ProtocoloAplicacaoHistorico { get; set; }
        public virtual DbSet<ProtocoloAtendimento> ProtocoloAtendimento { get; set; }
        public virtual DbSet<ProtocoloAtendimentoHistorico> ProtocoloAtendimentoHistorico { get; set; }
        public virtual DbSet<ProtocoloBloqueioAgendaSadt> ProtocoloBloqueioAgendaSadt { get; set; }
        public virtual DbSet<ProtocoloClassificacao> ProtocoloClassificacao { get; set; }
        public virtual DbSet<ProtocoloHistorico> ProtocoloHistorico { get; set; }
        public virtual DbSet<ProtocoloItem> ProtocoloItem { get; set; }
        public virtual DbSet<ProtocoloItemHistorico> ProtocoloItemHistorico { get; set; }
        public virtual DbSet<ProtocoloOncologico> ProtocoloOncologico { get; set; }
        public virtual DbSet<ProtocoloOncologicoCid> ProtocoloOncologicoCid { get; set; }
        public virtual DbSet<ProtocoloOncologicoItem> ProtocoloOncologicoItem { get; set; }
        public virtual DbSet<ProtocoloSame> ProtocoloSame { get; set; }
        public virtual DbSet<ProtocoloServico> ProtocoloServico { get; set; }
        public virtual DbSet<ProximoCodigoPacote> ProximoCodigoPacote { get; set; }
        public virtual DbSet<Psicologo> Psicologo { get; set; }
        public virtual DbSet<Rastreamento> Rastreamento { get; set; }
        public virtual DbSet<RecemNascido> RecemNascido { get; set; }
        public virtual DbSet<Recomendacao> Recomendacao { get; set; }
        public virtual DbSet<Recurso> Recurso { get; set; }
        public virtual DbSet<RecursoGlosa> RecursoGlosa { get; set; }
        public virtual DbSet<RecursoGlosa1> RecursoGlosa1 { get; set; }
        public virtual DbSet<RecursoGlosaAnalitico> RecursoGlosaAnalitico { get; set; }
        public virtual DbSet<RecursoGlosaAnaliticoSimplificado> RecursoGlosaAnaliticoSimplificado { get; set; }
        public virtual DbSet<RecursoGlosaGenerica> RecursoGlosaGenerica { get; set; }
        public virtual DbSet<RecursoGlosaHistorico> RecursoGlosaHistorico { get; set; }
        public virtual DbSet<RecursoGlosaReenvio> RecursoGlosaReenvio { get; set; }
        public virtual DbSet<RecursoServico> RecursoServico { get; set; }
        public virtual DbSet<RecursoUsuario> RecursoUsuario { get; set; }
        public virtual DbSet<RecusaMaterial> RecusaMaterial { get; set; }
        public virtual DbSet<Refeicao> Refeicao { get; set; }
        public virtual DbSet<RefeicaoConsumo> RefeicaoConsumo { get; set; }
        public virtual DbSet<RefeicaoConsumoAcompanhante> RefeicaoConsumoAcompanhante { get; set; }
        public virtual DbSet<RefeicaoConsumoHistorico> RefeicaoConsumoHistorico { get; set; }
        public virtual DbSet<RefeicaoUnidadeOrganizacional> RefeicaoUnidadeOrganizacional { get; set; }
        public virtual DbSet<RefeicaoUnidadeOrganizacionalTipoRefeicao> RefeicaoUnidadeOrganizacionalTipoRefeicao { get; set; }
        public virtual DbSet<RegistroEletronico> RegistroEletronico { get; set; }
        public virtual DbSet<RegistroEletronicoAlerta> RegistroEletronicoAlerta { get; set; }
        public virtual DbSet<RegistroEletronicoArquivo> RegistroEletronicoArquivo { get; set; }
        public virtual DbSet<RegistroEletronicoDeclaracao> RegistroEletronicoDeclaracao { get; set; }
        public virtual DbSet<RegistroEletronicoHistorico> RegistroEletronicoHistorico { get; set; }
        public virtual DbSet<RegistroEletronicoImpressao> RegistroEletronicoImpressao { get; set; }
        public virtual DbSet<RegistroEletronicoItem> RegistroEletronicoItem { get; set; }
        public virtual DbSet<RegistroEletronicoItemAtributo> RegistroEletronicoItemAtributo { get; set; }
        public virtual DbSet<RegistroEletronicoItemAtributoHistorico> RegistroEletronicoItemAtributoHistorico { get; set; }
        public virtual DbSet<RegistroEletronicoItemHistorico> RegistroEletronicoItemHistorico { get; set; }
        public virtual DbSet<RegistroEletronicoItemModelo> RegistroEletronicoItemModelo { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributo> RegistroEletronicoItemModeloAtributo { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributoEspecialidade> RegistroEletronicoItemModeloAtributoEspecialidade { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributoGrupoFaixaEtaria> RegistroEletronicoItemModeloAtributoGrupoFaixaEtaria { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributoHistorico> RegistroEletronicoItemModeloAtributoHistorico { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributoPerfil> RegistroEletronicoItemModeloAtributoPerfil { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributoPessoaEntidade> RegistroEletronicoItemModeloAtributoPessoaEntidade { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributoSexo> RegistroEletronicoItemModeloAtributoSexo { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloAtributoUnidadeOrganizacional> RegistroEletronicoItemModeloAtributoUnidadeOrganizacional { get; set; }
        public virtual DbSet<RegistroEletronicoItemModeloHistorico> RegistroEletronicoItemModeloHistorico { get; set; }
        public virtual DbSet<RegistroEletronicoItemTipoServico> RegistroEletronicoItemTipoServico { get; set; }
        public virtual DbSet<RegistroEletronicoModelo> RegistroEletronicoModelo { get; set; }
        public virtual DbSet<RegistroEletronicoModeloDeclaracao> RegistroEletronicoModeloDeclaracao { get; set; }
        public virtual DbSet<RegistroEletronicoModeloExigido> RegistroEletronicoModeloExigido { get; set; }
        public virtual DbSet<RegistroEletronicoModeloHistorico> RegistroEletronicoModeloHistorico { get; set; }
        public virtual DbSet<RegistroEletronicoModeloPessoaEntidade> RegistroEletronicoModeloPessoaEntidade { get; set; }
        public virtual DbSet<RegistroEletronicoModeloServico> RegistroEletronicoModeloServico { get; set; }
        public virtual DbSet<RegistroEletronicoModeloUnidadeOrganizacional> RegistroEletronicoModeloUnidadeOrganizacional { get; set; }
        public virtual DbSet<RegistroEletronicoTipoPessoaEntidade> RegistroEletronicoTipoPessoaEntidade { get; set; }
        public virtual DbSet<RegraAtributo> RegraAtributo { get; set; }
        public virtual DbSet<RegraAtributoAssociacao> RegraAtributoAssociacao { get; set; }
        public virtual DbSet<RelAtendimentoPs> RelAtendimentoPs { get; set; }
        public virtual DbSet<Relacionamento> Relacionamento { get; set; }
        public virtual DbSet<RelacionamentoOcorrenciaTipo> RelacionamentoOcorrenciaTipo { get; set; }
        public virtual DbSet<RelacionamentoTipoOcorrencia> RelacionamentoTipoOcorrencia { get; set; }
        public virtual DbSet<RelatorioGlosa> RelatorioGlosa { get; set; }
        public virtual DbSet<RelatorioGlosaConciliada> RelatorioGlosaConciliada { get; set; }
        public virtual DbSet<RelatorioProfilatico> RelatorioProfilatico { get; set; }
        public virtual DbSet<RelatorioSetor> RelatorioSetor { get; set; }
        public virtual DbSet<RemuneracaoServico> RemuneracaoServico { get; set; }
        public virtual DbSet<RemuneracaoServicoHistorico> RemuneracaoServicoHistorico { get; set; }
        public virtual DbSet<RemuneracaoServicoPlano> RemuneracaoServicoPlano { get; set; }
        public virtual DbSet<RemuneracaoServicoPlanoHistorico> RemuneracaoServicoPlanoHistorico { get; set; }
        public virtual DbSet<RepasseAuxilio> RepasseAuxilio { get; set; }
        public virtual DbSet<RepasseConvenio> RepasseConvenio { get; set; }
        public virtual DbSet<RepasseCustoOperacionalPacote> RepasseCustoOperacionalPacote { get; set; }
        public virtual DbSet<RepasseDuplicadoteste> RepasseDuplicadoteste { get; set; }
        public virtual DbSet<RepasseExcecao> RepasseExcecao { get; set; }
        public virtual DbSet<RepasseExcecaoHistorico> RepasseExcecaoHistorico { get; set; }
        public virtual DbSet<RepasseExcecaoSus> RepasseExcecaoSus { get; set; }
        public virtual DbSet<RepasseExcecaoUnidadeOrganizacional> RepasseExcecaoUnidadeOrganizacional { get; set; }
        public virtual DbSet<RepasseMedico> RepasseMedico { get; set; }
        public virtual DbSet<RepasseMedicoAlternativa> RepasseMedicoAlternativa { get; set; }
        public virtual DbSet<RepasseMedicoCargaPacoteSemPercentual> RepasseMedicoCargaPacoteSemPercentual { get; set; }
        public virtual DbSet<RepasseMedicoCargaPercentualPacote> RepasseMedicoCargaPercentualPacote { get; set; }
        public virtual DbSet<RepasseMedicoConvenio> RepasseMedicoConvenio { get; set; }
        public virtual DbSet<RepasseMedicoExecutante> RepasseMedicoExecutante { get; set; }
        public virtual DbSet<RepasseMedicoHistorico> RepasseMedicoHistorico { get; set; }
        public virtual DbSet<RepasseMedicoLote> RepasseMedicoLote { get; set; }
        public virtual DbSet<RepasseMedicoParticular> RepasseMedicoParticular { get; set; }
        public virtual DbSet<RepasseMedicoPrevia> RepasseMedicoPrevia { get; set; }
        public virtual DbSet<RepasseMedicoPreviaLog> RepasseMedicoPreviaLog { get; set; }
        public virtual DbSet<RepasseMedicoTransporte> RepasseMedicoTransporte { get; set; }
        public virtual DbSet<RepasseOperadoraUnidadeOrganizacionalServico> RepasseOperadoraUnidadeOrganizacionalServico { get; set; }
        public virtual DbSet<RepassePorClinica> RepassePorClinica { get; set; }
        public virtual DbSet<RepassePorClinicaUnidade> RepassePorClinicaUnidade { get; set; }
        public virtual DbSet<RepassePorMedicoClinicaUnidade> RepassePorMedicoClinicaUnidade { get; set; }
        public virtual DbSet<RepasseServicoUnidadeRepasse> RepasseServicoUnidadeRepasse { get; set; }
        public virtual DbSet<RepasseUnidadeOrganizacional> RepasseUnidadeOrganizacional { get; set; }
        public virtual DbSet<ReservaHorarioSadt> ReservaHorarioSadt { get; set; }
        public virtual DbSet<ReservaLeito> ReservaLeito { get; set; }
        public virtual DbSet<RespostaAnaliseUnimed> RespostaAnaliseUnimed { get; set; }
        public virtual DbSet<RestoIngestao> RestoIngestao { get; set; }
        public virtual DbSet<RestricaoKit> RestricaoKit { get; set; }
        public virtual DbSet<RestricaoKitValor> RestricaoKitValor { get; set; }
        public virtual DbSet<RestricaoPdvalor> RestricaoPdvalor { get; set; }
        public virtual DbSet<RestricaoProdutoDetalhe> RestricaoProdutoDetalhe { get; set; }
        public virtual DbSet<RestricaoServico> RestricaoServico { get; set; }
        public virtual DbSet<ResultadoCotacao> ResultadoCotacao { get; set; }
        public virtual DbSet<Results> Results { get; set; }
        public virtual DbSet<ResumoLogWebServices> ResumoLogWebServices { get; set; }
        public virtual DbSet<RetencaoTecnica> RetencaoTecnica { get; set; }
        public virtual DbSet<RetencaoTecnicaLiberacao> RetencaoTecnicaLiberacao { get; set; }
        public virtual DbSet<RetornoArquivo> RetornoArquivo { get; set; }
        public virtual DbSet<RetornoArquivoGuia> RetornoArquivoGuia { get; set; }
        public virtual DbSet<RetornoArquivoItemGuia> RetornoArquivoItemGuia { get; set; }
        public virtual DbSet<RetornoArquivoProcessamento> RetornoArquivoProcessamento { get; set; }
        public virtual DbSet<RetornoArquivoProtocolo> RetornoArquivoProtocolo { get; set; }
        public virtual DbSet<RetornoArquivoTotalGeral> RetornoArquivoTotalGeral { get; set; }
        public virtual DbSet<RetornoFnIdentificaFchItemUnimed> RetornoFnIdentificaFchItemUnimed { get; set; }
        public virtual DbSet<RetornoUnimedTxt> RetornoUnimedTxt { get; set; }
        public virtual DbSet<ReversaoGlosa> ReversaoGlosa { get; set; }
        public virtual DbSet<ReversaoGlosaGenerica> ReversaoGlosaGenerica { get; set; }
        public virtual DbSet<ReversaoGlosaHistorico> ReversaoGlosaHistorico { get; set; }
        public virtual DbSet<ReversaoGlosaParcial> ReversaoGlosaParcial { get; set; }
        public virtual DbSet<ReversaoGlosaParcialLog> ReversaoGlosaParcialLog { get; set; }
        public virtual DbSet<RmvCirurgia> RmvCirurgia { get; set; }
        public virtual DbSet<RmvCirurgioes> RmvCirurgioes { get; set; }
        public virtual DbSet<RmvInterAlta> RmvInterAlta { get; set; }
        public virtual DbSet<RmvMovimentacao> RmvMovimentacao { get; set; }
        public virtual DbSet<RmvProcedimentos> RmvProcedimentos { get; set; }
        public virtual DbSet<SacOcorrencia> SacOcorrencia { get; set; }
        public virtual DbSet<SacTipoOcorrencia> SacTipoOcorrencia { get; set; }
        public virtual DbSet<Servico> Servico { get; set; }
        public virtual DbSet<ServicoAcomodacaoTipo> ServicoAcomodacaoTipo { get; set; }
        public virtual DbSet<ServicoAgenda> ServicoAgenda { get; set; }
        public virtual DbSet<ServicoAgendaEtapa> ServicoAgendaEtapa { get; set; }
        public virtual DbSet<ServicoAgendaLog> ServicoAgendaLog { get; set; }
        public virtual DbSet<ServicoAgrupamento> ServicoAgrupamento { get; set; }
        public virtual DbSet<ServicoAgrupamento1> ServicoAgrupamento1 { get; set; }
        public virtual DbSet<ServicoCaracteristicaSus> ServicoCaracteristicaSus { get; set; }
        public virtual DbSet<ServicoCargaHistorico> ServicoCargaHistorico { get; set; }
        public virtual DbSet<ServicoCargaHistoricoTestelog> ServicoCargaHistoricoTestelog { get; set; }
        public virtual DbSet<ServicoCargaLog> ServicoCargaLog { get; set; }
        public virtual DbSet<ServicoCheckinEnfermagem> ServicoCheckinEnfermagem { get; set; }
        public virtual DbSet<ServicoCid> ServicoCid { get; set; }
        public virtual DbSet<ServicoClassificacaoHospitalSus> ServicoClassificacaoHospitalSus { get; set; }
        public virtual DbSet<ServicoClassificacaoTipo> ServicoClassificacaoTipo { get; set; }
        public virtual DbSet<ServicoCompativel> ServicoCompativel { get; set; }
        public virtual DbSet<ServicoDependente> ServicoDependente { get; set; }
        public virtual DbSet<ServicoDiariaLeitoTipo> ServicoDiariaLeitoTipo { get; set; }
        public virtual DbSet<ServicoEspecialidade> ServicoEspecialidade { get; set; }
        public virtual DbSet<ServicoEspecialidadeTipo> ServicoEspecialidadeTipo { get; set; }
        public virtual DbSet<ServicoExcecao> ServicoExcecao { get; set; }
        public virtual DbSet<ServicoExcecaoHistoricoCh> ServicoExcecaoHistoricoCh { get; set; }
        public virtual DbSet<ServicoExcecaoHistoricoValor> ServicoExcecaoHistoricoValor { get; set; }
        public virtual DbSet<ServicoExcecaoPlano> ServicoExcecaoPlano { get; set; }
        public virtual DbSet<ServicoExcecaoPlanoHistoricoCh> ServicoExcecaoPlanoHistoricoCh { get; set; }
        public virtual DbSet<ServicoExcecaoPlanoHistoricoValor> ServicoExcecaoPlanoHistoricoValor { get; set; }
        public virtual DbSet<ServicoExcecaoPlanoServicoIncidencia> ServicoExcecaoPlanoServicoIncidencia { get; set; }
        public virtual DbSet<ServicoExcecaoServicoIncidencia> ServicoExcecaoServicoIncidencia { get; set; }
        public virtual DbSet<ServicoFilmeIncidenciaAdicional> ServicoFilmeIncidenciaAdicional { get; set; }
        public virtual DbSet<ServicoGuia> ServicoGuia { get; set; }
        public virtual DbSet<ServicoGuiaArquivo> ServicoGuiaArquivo { get; set; }
        public virtual DbSet<ServicoGuiaExcluido> ServicoGuiaExcluido { get; set; }
        public virtual DbSet<ServicoHabilitacaoSus> ServicoHabilitacaoSus { get; set; }
        public virtual DbSet<ServicoHabilitacaoSusHistorico> ServicoHabilitacaoSusHistorico { get; set; }
        public virtual DbSet<ServicoHistorico> ServicoHistorico { get; set; }
        public virtual DbSet<ServicoIdentificadores> ServicoIdentificadores { get; set; }
        public virtual DbSet<ServicoImagem> ServicoImagem { get; set; }
        public virtual DbSet<ServicoIncidencia> ServicoIncidencia { get; set; }
        public virtual DbSet<ServicoIncidenciaCategoria> ServicoIncidenciaCategoria { get; set; }
        public virtual DbSet<ServicoKitTaxasGasesServico> ServicoKitTaxasGasesServico { get; set; }
        public virtual DbSet<ServicoModalidadeTipo> ServicoModalidadeTipo { get; set; }
        public virtual DbSet<ServicoOperadora> ServicoOperadora { get; set; }
        public virtual DbSet<ServicoOperadoraPlanoServicoCaracteristicaTipo> ServicoOperadoraPlanoServicoCaracteristicaTipo { get; set; }
        public virtual DbSet<ServicoOperadoraServicoCaracteristicaTipo> ServicoOperadoraServicoCaracteristicaTipo { get; set; }
        public virtual DbSet<ServicoOperadoraServicoProdutoTabela> ServicoOperadoraServicoProdutoTabela { get; set; }
        public virtual DbSet<ServicoOperadoraServicoProdutoTabelaHistorico> ServicoOperadoraServicoProdutoTabelaHistorico { get; set; }
        public virtual DbSet<ServicoOperadoraServicoProdutoTabelaHistoricoServico> ServicoOperadoraServicoProdutoTabelaHistoricoServico { get; set; }
        public virtual DbSet<ServicoOperadoraServicoProdutoTabelaPlano> ServicoOperadoraServicoProdutoTabelaPlano { get; set; }
        public virtual DbSet<ServicoOperadoraServicoProdutoTabelaPlanoHistorico> ServicoOperadoraServicoProdutoTabelaPlanoHistorico { get; set; }
        public virtual DbSet<ServicoOperadoraServicoProdutoTabelaPlanoHistoricoServico> ServicoOperadoraServicoProdutoTabelaPlanoHistoricoServico { get; set; }
        public virtual DbSet<ServicoOrdem> ServicoOrdem { get; set; }
        public virtual DbSet<ServicoPessoaEntidade> ServicoPessoaEntidade { get; set; }
        public virtual DbSet<ServicoPlano> ServicoPlano { get; set; }
        public virtual DbSet<ServicoPlanoHistorico> ServicoPlanoHistorico { get; set; }
        public virtual DbSet<ServicoPreco> ServicoPreco { get; set; }
        public virtual DbSet<ServicoPrecoSus> ServicoPrecoSus { get; set; }
        public virtual DbSet<ServicoPreparo> ServicoPreparo { get; set; }
        public virtual DbSet<ServicoPrestado> ServicoPrestado { get; set; }
        public virtual DbSet<ServicoProdutoCategoria> ServicoProdutoCategoria { get; set; }
        public virtual DbSet<ServicoProdutoCategoriaServicoProdutoCategoria> ServicoProdutoCategoriaServicoProdutoCategoria { get; set; }
        public virtual DbSet<ServicoProdutoTabela> ServicoProdutoTabela { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadora> ServicoProdutoTabelaOperadora { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraClassificacaoProduto> ServicoProdutoTabelaOperadoraClassificacaoProduto { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativa> ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativa { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistorico> ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupo> ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupo { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistorico> ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraClassificacaoProdutoHistorico> ServicoProdutoTabelaOperadoraClassificacaoProdutoHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraClassificacaoProdutoMargens> ServicoProdutoTabelaOperadoraClassificacaoProdutoMargens { get; set; }
        public virtual DbSet<ServicoProdutoTabelaOperadoraHistorico> ServicoProdutoTabelaOperadoraHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlano> ServicoProdutoTabelaPlano { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoClassificacaoProduto> ServicoProdutoTabelaPlanoClassificacaoProduto { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativa> ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativa { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistorico> ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoClassificacaoProdutoGrupo> ServicoProdutoTabelaPlanoClassificacaoProdutoGrupo { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistorico> ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoClassificacaoProdutoHistorico> ServicoProdutoTabelaPlanoClassificacaoProdutoHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoClassificacaoProdutoMargens> ServicoProdutoTabelaPlanoClassificacaoProdutoMargens { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPlanoHistorico> ServicoProdutoTabelaPlanoHistorico { get; set; }
        public virtual DbSet<ServicoProdutoTabelaPorteTabela> ServicoProdutoTabelaPorteTabela { get; set; }
        public virtual DbSet<ServicoQuantidadeAutorizada> ServicoQuantidadeAutorizada { get; set; }
        public virtual DbSet<ServicoReducaoAcrescimo> ServicoReducaoAcrescimo { get; set; }
        public virtual DbSet<ServicoRegiaoAplicacao> ServicoRegiaoAplicacao { get; set; }
        public virtual DbSet<ServicoRegistroTipo> ServicoRegistroTipo { get; set; }
        public virtual DbSet<ServicoServicoProdutoTabela> ServicoServicoProdutoTabela { get; set; }
        public virtual DbSet<ServicoServicoProdutoTabelaOperadora> ServicoServicoProdutoTabelaOperadora { get; set; }
        public virtual DbSet<ServicoServicoProdutoTabelaServicoIncidencia> ServicoServicoProdutoTabelaServicoIncidencia { get; set; }
        public virtual DbSet<ServicoTraducao> ServicoTraducao { get; set; }
        public virtual DbSet<ServicoTraducaoAuxilio> ServicoTraducaoAuxilio { get; set; }
        public virtual DbSet<ServicoTraducaoBasica> ServicoTraducaoBasica { get; set; }
        public virtual DbSet<ServicoTraducaoBasicaI> ServicoTraducaoBasicaI { get; set; }
        public virtual DbSet<ServicoTraducaoBasicaIi> ServicoTraducaoBasicaIi { get; set; }
        public virtual DbSet<ServicoTraducaoHistorico> ServicoTraducaoHistorico { get; set; }
        public virtual DbSet<ServicoTraducaoSusGenerico> ServicoTraducaoSusGenerico { get; set; }
        public virtual DbSet<ServicoTraducaoSusGenericoCiha> ServicoTraducaoSusGenericoCiha { get; set; }
        public virtual DbSet<ServicoTraducaoVigencia> ServicoTraducaoVigencia { get; set; }
        public virtual DbSet<ServicoTransporte> ServicoTransporte { get; set; }
        public virtual DbSet<ServicoUnicoAtendimento> ServicoUnicoAtendimento { get; set; }
        public virtual DbSet<ServicoUnidadeRepasse> ServicoUnidadeRepasse { get; set; }
        public virtual DbSet<ServiçosPorUnidades> ServiçosPorUnidades { get; set; }
        public virtual DbSet<Sessao> Sessao { get; set; }
        public virtual DbSet<SessaoOncologia> SessaoOncologia { get; set; }
        public virtual DbSet<SessaoOncologiaHistorico> SessaoOncologiaHistorico { get; set; }
        public virtual DbSet<SessaoOncologiaItem> SessaoOncologiaItem { get; set; }
        public virtual DbSet<SessaoPortal> SessaoPortal { get; set; }
        public virtual DbSet<SimproTuss> SimproTuss { get; set; }
        public virtual DbSet<SismamaCargaHistorico> SismamaCargaHistorico { get; set; }
        public virtual DbSet<SismamaCargaLog> SismamaCargaLog { get; set; }
        public virtual DbSet<SituacaoAprovacaoItemOpme> SituacaoAprovacaoItemOpme { get; set; }
        public virtual DbSet<SituacaoConta> SituacaoConta { get; set; }
        public virtual DbSet<SituacaoDaConta> SituacaoDaConta { get; set; }
        public virtual DbSet<SituacaoDaContaHistorico> SituacaoDaContaHistorico { get; set; }
        public virtual DbSet<SituacaoLote> SituacaoLote { get; set; }
        public virtual DbSet<Solicitacao> Solicitacao { get; set; }
        public virtual DbSet<SolicitacaoEntidadeItem> SolicitacaoEntidadeItem { get; set; }
        public virtual DbSet<SolicitacaoHistorico> SolicitacaoHistorico { get; set; }
        public virtual DbSet<SolicitacaoImpressao> SolicitacaoImpressao { get; set; }
        public virtual DbSet<SolicitacaoIntegracaoSistemaLegado> SolicitacaoIntegracaoSistemaLegado { get; set; }
        public virtual DbSet<SolicitacaoInternacaoHistorico> SolicitacaoInternacaoHistorico { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagem> SolicitacaoPdEnfermagem { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracao> SolicitacaoPdEnfermagemHorarioAdministracao { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracaoAjuste2020> SolicitacaoPdEnfermagemHorarioAdministracaoAjuste2020 { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracaoAjuste20202> SolicitacaoPdEnfermagemHorarioAdministracaoAjuste20202 { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracaoHistorico> SolicitacaoPdEnfermagemHorarioAdministracaoHistorico { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracaoHistoricoAjuste2020> SolicitacaoPdEnfermagemHorarioAdministracaoHistoricoAjuste2020 { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracaoHistoricoAjuste20202> SolicitacaoPdEnfermagemHorarioAdministracaoHistoricoAjuste20202 { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItem> SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItem { get; set; }
        public virtual DbSet<SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItemHistorico> SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItemHistorico { get; set; }
        public virtual DbSet<SolicitacaoProdutoCota> SolicitacaoProdutoCota { get; set; }
        public virtual DbSet<SolicitacaoProdutoDetalhe> SolicitacaoProdutoDetalhe { get; set; }
        public virtual DbSet<SolicitacaoProdutoDetalheEntregue> SolicitacaoProdutoDetalheEntregue { get; set; }
        public virtual DbSet<SolicitacaoProdutoDetalheEntregueLoteProdutoItem> SolicitacaoProdutoDetalheEntregueLoteProdutoItem { get; set; }
        public virtual DbSet<SolicitacaoRefeicaoEspecial> SolicitacaoRefeicaoEspecial { get; set; }
        public virtual DbSet<SolicitacaoVigencia> SolicitacaoVigencia { get; set; }
        public virtual DbSet<SptAlteraDataHoraAlta> SptAlteraDataHoraAlta { get; set; }
        public virtual DbSet<SptAlteraPrecoIncidencias> SptAlteraPrecoIncidencias { get; set; }
        public virtual DbSet<SptCartaRemessaLoteConta> SptCartaRemessaLoteConta { get; set; }
        public virtual DbSet<SptConfiguraCaracteristicas> SptConfiguraCaracteristicas { get; set; }
        public virtual DbSet<SptConsultaRemessa> SptConsultaRemessa { get; set; }
        public virtual DbSet<SptContaitemhistorico> SptContaitemhistorico { get; set; }
        public virtual DbSet<SptExameEtapaLaboratorio> SptExameEtapaLaboratorio { get; set; }
        public virtual DbSet<SptLabExameReferencia> SptLabExameReferencia { get; set; }
        public virtual DbSet<SptRetornoAlta> SptRetornoAlta { get; set; }
        public virtual DbSet<SptServico> SptServico { get; set; }
        public virtual DbSet<SptTabela> SptTabela { get; set; }
        public virtual DbSet<SptTaxasSemReferencia> SptTaxasSemReferencia { get; set; }
        public virtual DbSet<SptTemporaria> SptTemporaria { get; set; }
        public virtual DbSet<SptTrocaTabela> SptTrocaTabela { get; set; }
        public virtual DbSet<SptValorExcecao> SptValorExcecao { get; set; }
        public virtual DbSet<StatusEsperaCc> StatusEsperaCc { get; set; }
        public virtual DbSet<StatusInventario> StatusInventario { get; set; }
        public virtual DbSet<StatusInventarioProdutoDetalhe> StatusInventarioProdutoDetalhe { get; set; }
        public virtual DbSet<StatusLeitoEvento> StatusLeitoEvento { get; set; }
        public virtual DbSet<SubEspecialidadeMedica> SubEspecialidadeMedica { get; set; }
        public virtual DbSet<SuprimentosMovimentacao> SuprimentosMovimentacao { get; set; }
        public virtual DbSet<SuprimentosMovimentacaoPerda> SuprimentosMovimentacaoPerda { get; set; }
        public virtual DbSet<SusArquivoGerado> SusArquivoGerado { get; set; }
        public virtual DbSet<TabelaCargaProcedimentoMedico> TabelaCargaProcedimentoMedico { get; set; }
        public virtual DbSet<TabelaClassificacao> TabelaClassificacao { get; set; }
        public virtual DbSet<TabelaExcecao> TabelaExcecao { get; set; }
        public virtual DbSet<TabelaProcedimentoMedicoAgrupamento> TabelaProcedimentoMedicoAgrupamento { get; set; }
        public virtual DbSet<TabelaProcedimentoMedicoBasica> TabelaProcedimentoMedicoBasica { get; set; }
        public virtual DbSet<TabelaReferencia> TabelaReferencia { get; set; }
        public virtual DbSet<TabelaSul> TabelaSul { get; set; }
        public virtual DbSet<TabelaTeste> TabelaTeste { get; set; }
        public virtual DbSet<TarifacaoTelefone> TarifacaoTelefone { get; set; }
        public virtual DbSet<TarifacaoTelefoneTransporte> TarifacaoTelefoneTransporte { get; set; }
        public virtual DbSet<TaxaAcrescimoHistorico> TaxaAcrescimoHistorico { get; set; }
        public virtual DbSet<TaxaDiaria> TaxaDiaria { get; set; }
        public virtual DbSet<TaxaDiariaAgrupamento> TaxaDiariaAgrupamento { get; set; }
        public virtual DbSet<TaxaDiariaImportacao> TaxaDiariaImportacao { get; set; }
        public virtual DbSet<TaxaEnfermagemUnidadeOrganizacional> TaxaEnfermagemUnidadeOrganizacional { get; set; }
        public virtual DbSet<TaxaFolhaDeSala> TaxaFolhaDeSala { get; set; }
        public virtual DbSet<TecnicoEnfermagem> TecnicoEnfermagem { get; set; }
        public virtual DbSet<Telefone> Telefone { get; set; }
        public virtual DbSet<TelefoneGeral> TelefoneGeral { get; set; }
        public virtual DbSet<TelefonePessoaRelatorio> TelefonePessoaRelatorio { get; set; }
        public virtual DbSet<TempoMedioAtendimentoDiarioReport> TempoMedioAtendimentoDiarioReport { get; set; }
        public virtual DbSet<TempoReposicao> TempoReposicao { get; set; }
        public virtual DbSet<TextoModeloLaudoSadt> TextoModeloLaudoSadt { get; set; }
        public virtual DbSet<TextoModeloLaudoSadthistorico> TextoModeloLaudoSadthistorico { get; set; }
        public virtual DbSet<TextoPadrao> TextoPadrao { get; set; }
        public virtual DbSet<TextoPadraoPrescricaoItemTipo> TextoPadraoPrescricaoItemTipo { get; set; }
        public virtual DbSet<TextoPadraoProdutoDetalhe> TextoPadraoProdutoDetalhe { get; set; }
        public virtual DbSet<TipoAlta> TipoAlta { get; set; }
        public virtual DbSet<TipoAltaSus> TipoAltaSus { get; set; }
        public virtual DbSet<TipoAltaSusTipoAltaSusdetalhe> TipoAltaSusTipoAltaSusdetalhe { get; set; }
        public virtual DbSet<TipoAltaSusdetalhe> TipoAltaSusdetalhe { get; set; }
        public virtual DbSet<TipoContaReceberImposto> TipoContaReceberImposto { get; set; }
        public virtual DbSet<TipoContaReceberPerfil> TipoContaReceberPerfil { get; set; }
        public virtual DbSet<TipoDiversos> TipoDiversos { get; set; }
        public virtual DbSet<TipoDiversosCaracteristica> TipoDiversosCaracteristica { get; set; }
        public virtual DbSet<TipoDiversosConversao> TipoDiversosConversao { get; set; }
        public virtual DbSet<TipoDiversosTipoDiversos> TipoDiversosTipoDiversos { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumento { get; set; }
        public virtual DbSet<TipoDocumentoPessoaEntidade> TipoDocumentoPessoaEntidade { get; set; }
        public virtual DbSet<TipoEsperaCc> TipoEsperaCc { get; set; }
        public virtual DbSet<TipoInventario> TipoInventario { get; set; }
        public virtual DbSet<TipoLancamentoBancario> TipoLancamentoBancario { get; set; }
        public virtual DbSet<TipoLogradouroSus> TipoLogradouroSus { get; set; }
        public virtual DbSet<TipoNovoControle> TipoNovoControle { get; set; }
        public virtual DbSet<TipoParametro> TipoParametro { get; set; }
        public virtual DbSet<TipoPendencia> TipoPendencia { get; set; }
        public virtual DbSet<TipoTabela> TipoTabela { get; set; }
        public virtual DbSet<TipoTabelaTipoTabela> TipoTabelaTipoTabela { get; set; }
        public virtual DbSet<TissOutrasDespesas> TissOutrasDespesas { get; set; }
        public virtual DbSet<TissProcedimentosExecutados> TissProcedimentosExecutados { get; set; }
        public virtual DbSet<TissProcedimentosExecutadosUnimedBh> TissProcedimentosExecutadosUnimedBh { get; set; }
        public virtual DbSet<TissTipoDiversos> TissTipoDiversos { get; set; }
        public virtual DbSet<TissarquivoGerado> TissarquivoGerado { get; set; }
        public virtual DbSet<TissarquivoGeradoRecurso> TissarquivoGeradoRecurso { get; set; }
        public virtual DbSet<TisscabecalhoCarta> TisscabecalhoCarta { get; set; }
        public virtual DbSet<TisscabecalhoLote> TisscabecalhoLote { get; set; }
        public virtual DbSet<TisscabecalhoLote3> TisscabecalhoLote3 { get; set; }
        public virtual DbSet<TisscabecalhoLote3MedicinaNuclear> TisscabecalhoLote3MedicinaNuclear { get; set; }
        public virtual DbSet<Tisscarta> Tisscarta { get; set; }
        public virtual DbSet<TisscartaItens> TisscartaItens { get; set; }
        public virtual DbSet<TissdePara> TissdePara { get; set; }
        public virtual DbSet<TissdiferencasomatorioitensXmlConta> TissdiferencasomatorioitensXmlConta { get; set; }
        public virtual DbSet<TissdiferencasomatoriototalXmlConta> TissdiferencasomatoriototalXmlConta { get; set; }
        public virtual DbSet<TissequipeResponsavel> TissequipeResponsavel { get; set; }
        public virtual DbSet<TissequipeResponsavel3> TissequipeResponsavel3 { get; set; }
        public virtual DbSet<Tissesquema> Tissesquema { get; set; }
        public virtual DbSet<Tissfinalidade> Tissfinalidade { get; set; }
        public virtual DbSet<TissfinalidadeCampoValor> TissfinalidadeCampoValor { get; set; }
        public virtual DbSet<TissfinalidadeOperadora> TissfinalidadeOperadora { get; set; }
        public virtual DbSet<TissfonteDados> TissfonteDados { get; set; }
        public virtual DbSet<TissfonteDadosRelacionamento> TissfonteDadosRelacionamento { get; set; }
        public virtual DbSet<TissguiasCarta> TissguiasCarta { get; set; }
        public virtual DbSet<TissguiasLote> TissguiasLote { get; set; }
        public virtual DbSet<TissguiasLote3> TissguiasLote3 { get; set; }
        public virtual DbSet<TissguiasLote3Guia> TissguiasLote3Guia { get; set; }
        public virtual DbSet<TissguiasLote3Teste> TissguiasLote3Teste { get; set; }
        public virtual DbSet<TissguiasLote3Tk98834> TissguiasLote3Tk98834 { get; set; }
        public virtual DbSet<TissguiasLoteConsulta> TissguiasLoteConsulta { get; set; }
        public virtual DbSet<TissguiasLoteConsulta3> TissguiasLoteConsulta3 { get; set; }
        public virtual DbSet<TissguiasLoteHonorarioCooperado> TissguiasLoteHonorarioCooperado { get; set; }
        public virtual DbSet<Tisshospital> Tisshospital { get; set; }
        public virtual DbSet<Tisshospital3> Tisshospital3 { get; set; }
        public virtual DbSet<Tisslog> Tisslog { get; set; }
        public virtual DbSet<Tisslote> Tisslote { get; set; }
        public virtual DbSet<Tisslote3> Tisslote3 { get; set; }
        public virtual DbSet<Tissmensagem> Tissmensagem { get; set; }
        public virtual DbSet<Tissopm> Tissopm { get; set; }
        public virtual DbSet<Tissopmcore> Tissopmcore { get; set; }
        public virtual DbSet<TissopmmedicinaNuclear> TissopmmedicinaNuclear { get; set; }
        public virtual DbSet<TissoutrasDespesas1> TissoutrasDespesas1 { get; set; }
        public virtual DbSet<TissoutrasDespesas3> TissoutrasDespesas3 { get; set; }
        public virtual DbSet<TissoutrasDespesas3MedicinaNuclear> TissoutrasDespesas3MedicinaNuclear { get; set; }
        public virtual DbSet<TissoutrasDespesas3Teste> TissoutrasDespesas3Teste { get; set; }
        public virtual DbSet<TissoutrasDespesas3Tk98834> TissoutrasDespesas3Tk98834 { get; set; }
        public virtual DbSet<TissoutrasDespesasCore> TissoutrasDespesasCore { get; set; }
        public virtual DbSet<TissoutrasDespesasUnimed> TissoutrasDespesasUnimed { get; set; }
        public virtual DbSet<TissoutrasDespesasUnimedCore> TissoutrasDespesasUnimedCore { get; set; }
        public virtual DbSet<TissoutrasDespesasUnimedMedicinaNuclear> TissoutrasDespesasUnimedMedicinaNuclear { get; set; }
        public virtual DbSet<TissoutrasDespesasUnimedMedicinaNuclearCore> TissoutrasDespesasUnimedMedicinaNuclearCore { get; set; }
        public virtual DbSet<Tissprocedimentos> Tissprocedimentos { get; set; }
        public virtual DbSet<Tissprocedimentos3> Tissprocedimentos3 { get; set; }
        public virtual DbSet<Tissprocedimentos3Teste> Tissprocedimentos3Teste { get; set; }
        public virtual DbSet<Tissprocedimentos3Tk98834> Tissprocedimentos3Tk98834 { get; set; }
        public virtual DbSet<TissprocedimentosComEquipe> TissprocedimentosComEquipe { get; set; }
        public virtual DbSet<TissprocedimentosComEquipe3> TissprocedimentosComEquipe3 { get; set; }
        public virtual DbSet<TissprocedimentosComEquipe3MedicinaNuclear> TissprocedimentosComEquipe3MedicinaNuclear { get; set; }
        public virtual DbSet<TissprocedimentosComEquipe3Teste> TissprocedimentosComEquipe3Teste { get; set; }
        public virtual DbSet<TissprocedimentosComEquipeGuia3> TissprocedimentosComEquipeGuia3 { get; set; }
        public virtual DbSet<TissprocedimentosComEquipeGuia3Tk98834> TissprocedimentosComEquipeGuia3Tk98834 { get; set; }
        public virtual DbSet<TissprocedimentosMedicoCooperado> TissprocedimentosMedicoCooperado { get; set; }
        public virtual DbSet<TissprocedimentosUnimed> TissprocedimentosUnimed { get; set; }
        public virtual DbSet<TissprocedimentosUnimed3> TissprocedimentosUnimed3 { get; set; }
        public virtual DbSet<TissprocedimentosUnimed3MedicinaNuclear> TissprocedimentosUnimed3MedicinaNuclear { get; set; }
        public virtual DbSet<TissprocedimentosUnimed3Socor> TissprocedimentosUnimed3Socor { get; set; }
        public virtual DbSet<TissprocedimentosUnimed3Teste> TissprocedimentosUnimed3Teste { get; set; }
        public virtual DbSet<TissprocedimentosUnimedMedicinaNuclear> TissprocedimentosUnimedMedicinaNuclear { get; set; }
        public virtual DbSet<TissprocedimentosUnimedSocor> TissprocedimentosUnimedSocor { get; set; }
        public virtual DbSet<TissprocedimentosUnimedTeste> TissprocedimentosUnimedTeste { get; set; }
        public virtual DbSet<TissprofissionalSolicitante> TissprofissionalSolicitante { get; set; }
        public virtual DbSet<TissprofissionalSolicitante3> TissprofissionalSolicitante3 { get; set; }
        public virtual DbSet<Tisstipo> Tisstipo { get; set; }
        public virtual DbSet<TisstipoItem> TisstipoItem { get; set; }
        public virtual DbSet<TisstotalDiarias> TisstotalDiarias { get; set; }
        public virtual DbSet<TisstotalGases> TisstotalGases { get; set; }
        public virtual DbSet<TisstotalGeral> TisstotalGeral { get; set; }
        public virtual DbSet<TisstotalMateriais> TisstotalMateriais { get; set; }
        public virtual DbSet<TisstotalMedicamentos> TisstotalMedicamentos { get; set; }
        public virtual DbSet<TisstotalOutrasDespesas> TisstotalOutrasDespesas { get; set; }
        public virtual DbSet<TisstotalServicosExecutados> TisstotalServicosExecutados { get; set; }
        public virtual DbSet<TisstotalTaxas> TisstotalTaxas { get; set; }
        public virtual DbSet<Tissversao> Tissversao { get; set; }
        public virtual DbSet<TodosPlanos> TodosPlanos { get; set; }
        public virtual DbSet<TradLaboratorio> TradLaboratorio { get; set; }
        public virtual DbSet<TraducaoPm> TraducaoPm { get; set; }
        public virtual DbSet<TraducaoSus> TraducaoSus { get; set; }
        public virtual DbSet<TraducaoUnimed> TraducaoUnimed { get; set; }
        public virtual DbSet<TransferenciaFisica> TransferenciaFisica { get; set; }
        public virtual DbSet<TransferenciaFisicaItem> TransferenciaFisicaItem { get; set; }
        public virtual DbSet<Transportadora> Transportadora { get; set; }
        public virtual DbSet<Tributo> Tributo { get; set; }
        public virtual DbSet<TributoAliquota> TributoAliquota { get; set; }
        public virtual DbSet<TussAllianz> TussAllianz { get; set; }
        public virtual DbSet<TussCapitulo> TussCapitulo { get; set; }
        public virtual DbSet<TussCbhpm3> TussCbhpm3 { get; set; }
        public virtual DbSet<TussEspecialidade> TussEspecialidade { get; set; }
        public virtual DbSet<TussGolden> TussGolden { get; set; }
        public virtual DbSet<TussProcedimento> TussProcedimento { get; set; }
        public virtual DbSet<TussSosaude> TussSosaude { get; set; }
        public virtual DbSet<TussSubEspecialidade> TussSubEspecialidade { get; set; }
        public virtual DbSet<TussSulamerica> TussSulamerica { get; set; }
        public virtual DbSet<TussUnimed> TussUnimed { get; set; }
        public virtual DbSet<TussdiariasTaxasReferencia> TussdiariasTaxasReferencia { get; set; }
        public virtual DbSet<Tussdtsunimed> Tussdtsunimed { get; set; }
        public virtual DbSet<TussmatMedUnimed> TussmatMedUnimed { get; set; }
        public virtual DbSet<Tussmateriais> Tussmateriais { get; set; }
        public virtual DbSet<TussmateriaisAnvisa> TussmateriaisAnvisa { get; set; }
        public virtual DbSet<Tussmedicamentos> Tussmedicamentos { get; set; }
        public virtual DbSet<TussmedicamentosAnvisa> TussmedicamentosAnvisa { get; set; }
        public virtual DbSet<TxUr> TxUr { get; set; }
        public virtual DbSet<Uf> Uf { get; set; }
        public virtual DbSet<Uniarqre> Uniarqre { get; set; }
        public virtual DbSet<Uniconer> Uniconer { get; set; }
        public virtual DbSet<Uniconit> Uniconit { get; set; }
        public virtual DbSet<Uniconta> Uniconta { get; set; }
        public virtual DbSet<UnidadeFisica> UnidadeFisica { get; set; }
        public virtual DbSet<UnidadeFisicaAtendimento> UnidadeFisicaAtendimento { get; set; }
        public virtual DbSet<UnidadeLogica> UnidadeLogica { get; set; }
        public virtual DbSet<UnidadeOrganizacional> UnidadeOrganizacional { get; set; }
        public virtual DbSet<UnidadeOrganizacionalAgrupamentoDocumentos> UnidadeOrganizacionalAgrupamentoDocumentos { get; set; }
        public virtual DbSet<UnidadeOrganizacionalAtividade> UnidadeOrganizacionalAtividade { get; set; }
        public virtual DbSet<UnidadeOrganizacionalBem> UnidadeOrganizacionalBem { get; set; }
        public virtual DbSet<UnidadeOrganizacionalCentroCusto> UnidadeOrganizacionalCentroCusto { get; set; }
        public virtual DbSet<UnidadeOrganizacionalColaborador> UnidadeOrganizacionalColaborador { get; set; }
        public virtual DbSet<UnidadeOrganizacionalColaboradorHorario> UnidadeOrganizacionalColaboradorHorario { get; set; }
        public virtual DbSet<UnidadeOrganizacionalColaboradorTurno> UnidadeOrganizacionalColaboradorTurno { get; set; }
        public virtual DbSet<UnidadeOrganizacionalCorreioEletronico> UnidadeOrganizacionalCorreioEletronico { get; set; }
        public virtual DbSet<UnidadeOrganizacionalEndereco> UnidadeOrganizacionalEndereco { get; set; }
        public virtual DbSet<UnidadeOrganizacionalEnderecoFinalidade> UnidadeOrganizacionalEnderecoFinalidade { get; set; }
        public virtual DbSet<UnidadeOrganizacionalEnderecoRelatorio> UnidadeOrganizacionalEnderecoRelatorio { get; set; }
        public virtual DbSet<UnidadeOrganizacionalEnviaRecebe> UnidadeOrganizacionalEnviaRecebe { get; set; }
        public virtual DbSet<UnidadeOrganizacionalEventoLeito> UnidadeOrganizacionalEventoLeito { get; set; }
        public virtual DbSet<UnidadeOrganizacionalHorario> UnidadeOrganizacionalHorario { get; set; }
        public virtual DbSet<UnidadeOrganizacionalHorarioAgenda> UnidadeOrganizacionalHorarioAgenda { get; set; }
        public virtual DbSet<UnidadeOrganizacionalHorarioAgendaBaseAgenda> UnidadeOrganizacionalHorarioAgendaBaseAgenda { get; set; }
        public virtual DbSet<UnidadeOrganizacionalHorarioAgendaMarcacao> UnidadeOrganizacionalHorarioAgendaMarcacao { get; set; }
        public virtual DbSet<UnidadeOrganizacionalHorarioAgendaReserva> UnidadeOrganizacionalHorarioAgendaReserva { get; set; }
        public virtual DbSet<UnidadeOrganizacionalLeitoTipo> UnidadeOrganizacionalLeitoTipo { get; set; }
        public virtual DbSet<UnidadeOrganizacionalOperadoraPlanoServicoAutomatico> UnidadeOrganizacionalOperadoraPlanoServicoAutomatico { get; set; }
        public virtual DbSet<UnidadeOrganizacionalParametro> UnidadeOrganizacionalParametro { get; set; }
        public virtual DbSet<UnidadeOrganizacionalPessoaEntidade> UnidadeOrganizacionalPessoaEntidade { get; set; }
        public virtual DbSet<UnidadeOrganizacionalProduto> UnidadeOrganizacionalProduto { get; set; }
        public virtual DbSet<UnidadeOrganizacionalRecurso> UnidadeOrganizacionalRecurso { get; set; }
        public virtual DbSet<UnidadeOrganizacionalServico> UnidadeOrganizacionalServico { get; set; }
        public virtual DbSet<UnidadeOrganizacionalServicoAutomatico> UnidadeOrganizacionalServicoAutomatico { get; set; }
        public virtual DbSet<UnidadeOrganizacionalServicoClinico> UnidadeOrganizacionalServicoClinico { get; set; }
        public virtual DbSet<UnidadeOrganizacionalTelefone> UnidadeOrganizacionalTelefone { get; set; }
        public virtual DbSet<UnidadeOrganizacionalTelefoneHorario> UnidadeOrganizacionalTelefoneHorario { get; set; }
        public virtual DbSet<UnidadeOrganizacionalUnidadeFisica> UnidadeOrganizacionalUnidadeFisica { get; set; }
        public virtual DbSet<UnidadeOrganizacionalUnidadeOrganizacional> UnidadeOrganizacionalUnidadeOrganizacional { get; set; }
        public virtual DbSet<UnidadeOrganizacionalUnidadeOrganizacionalOcorrenciaTipo> UnidadeOrganizacionalUnidadeOrganizacionalOcorrenciaTipo { get; set; }
        public virtual DbSet<UnidadeorganizacionalLeitotipoVisitantes> UnidadeorganizacionalLeitotipoVisitantes { get; set; }
        public virtual DbSet<UnidadesRepasse> UnidadesRepasse { get; set; }
        public virtual DbSet<UnidadesServiços> UnidadesServiços { get; set; }
        public virtual DbSet<Uniitead> Uniitead { get; set; }
        public virtual DbSet<Uniitece> Uniitece { get; set; }
        public virtual DbSet<Uniiteer> Uniiteer { get; set; }
        public virtual DbSet<UnimedPc> UnimedPc { get; set; }
        public virtual DbSet<UnimedTransporte> UnimedTransporte { get; set; }
        public virtual DbSet<UnimedTransporteArquivo> UnimedTransporteArquivo { get; set; }
        public virtual DbSet<UnimedTransporteDiretorioArquivo> UnimedTransporteDiretorioArquivo { get; set; }
        public virtual DbSet<UnimedsConserto> UnimedsConserto { get; set; }
        public virtual DbSet<Url> Url { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<UsuarioOperadora> UsuarioOperadora { get; set; }
        public virtual DbSet<UsuarioTipoContaReceber> UsuarioTipoContaReceber { get; set; }
        public virtual DbSet<ValorFinal> ValorFinal { get; set; }
        public virtual DbSet<ValorReferencia> ValorReferencia { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AcatoConjunto>(entity =>
            {
                entity.HasKey(e => e.IdAcatoConjunto);

                entity.Property(e => e.IdAcatoConjunto).HasColumnName("ID_ACATO_CONJUNTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VlTotalAcatado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_ACATADO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AcatoConjunto)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AcatoConjunto_Usuario");
            });

            modelBuilder.Entity<AcompanhamentoGuias>(entity =>
            {
                entity.HasKey(e => e.IdAcompanhamentoGuia)
                    .HasName("AcompanhamentoGuias_PK");

                entity.HasIndex(e => e.IdAtendimento, "INDICE_ID_ATENDIMENTO");

                entity.Property(e => e.IdAcompanhamentoGuia).HasColumnName("ID_ACOMPANHAMENTO_GUIA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmAtendente)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATENDENTE");

                entity.Property(e => e.NrTelefone)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NR_TELEFONE");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AcompanhamentoGuias)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_AcompanhamentoGuias_FK1");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.AcompanhamentoGuias)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AcompanhamentoGuiasStatus_AcompanhamentoGuias_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AcompanhamentoGuias)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_AcompanhamentoGuias_FK1");
            });

            modelBuilder.Entity<AcompanhamentoGuiasStatus>(entity =>
            {
                entity.HasKey(e => e.IdStatus)
                    .HasName("AcompanhamentoGuiasStatus_PK");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxDescStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_STATUS");
            });

            modelBuilder.Entity<Acompanhante>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdPessoa });

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdAcompanhanteTipo).HasColumnName("ID_ACOMPANHANTE_TIPO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAcompanhanteTipoNavigation)
                    .WithMany(p => p.Acompanhante)
                    .HasForeignKey(d => d.IdAcompanhanteTipo)
                    .HasConstraintName("TipoDiversos_Acompanhante_FK1");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.Acompanhante)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Acompanhante_Atendimento_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Acompanhante)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Acompanhante_FK1");
            });

            modelBuilder.Entity<Acrescimos>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.InRepassavel }, "IX_Acrescimo_K1_K2_K7_3_4")
                    .IsUnique()
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtAcrescimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACRESCIMO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdArquivoEletronico).HasColumnName("ID_ARQUIVO_ELETRONICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InRepassavel).HasColumnName("IN_REPASSAVEL");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Acrescimos)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Acrescimos_FK1");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.Acrescimos)
                    .HasForeignKey<Acrescimos>(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acrescimos_FechamentoItem");
            });

            modelBuilder.Entity<AcrescimosFechamentoItemValorLiberado>(entity =>
            {
                entity.HasKey(e => e.IdAcrescimosFechamentoItemValorLiberado)
                    .HasName("Acrescimos_FechamentoItemValorLiberado_PK");

                entity.ToTable("Acrescimos_FechamentoItemValorLiberado");

                entity.Property(e => e.IdAcrescimosFechamentoItemValorLiberado).HasColumnName("ID_ACRESCIMOS_FECHAMENTO_ITEM_VALOR_LIBERADO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFechamentoitemvalorliberado).HasColumnName("ID_FECHAMENTOITEMVALORLIBERADO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdFechamentoitemvalorliberadoNavigation)
                    .WithMany(p => p.AcrescimosFechamentoItemValorLiberado)
                    .HasForeignKey(d => d.IdFechamentoitemvalorliberado)
                    .HasConstraintName("FechamentoItemValorLiberado_Acrescimos_FechamentoItemValorLiberado_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AcrescimosFechamentoItemValorLiberado)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Acrescimos_FechamentoItemValorLiberado_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.AcrescimosFechamentoItemValorLiberado)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FechamentoItem_Acrescimos_FechamentoItemValorLiberado_FK1");
            });

            modelBuilder.Entity<AcrescimosHistorico>(entity =>
            {
                entity.HasKey(e => e.IdAcrescimosHistorico);

                entity.Property(e => e.IdAcrescimosHistorico).HasColumnName("ID_ACRESCIMOS_HISTORICO");

                entity.Property(e => e.DtAcrescimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACRESCIMO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdArquivoEletronico).HasColumnName("ID_ARQUIVO_ELETRONICO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InRepassavel).HasColumnName("IN_REPASSAVEL");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AcrescimosHistoricoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_AcrescimosHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.AcrescimosHistoricoIdUsuarioOperacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("Usuario_AcrescimosHistorico_FK2");
            });

            modelBuilder.Entity<AdequacaoCodigo>(entity =>
            {
                entity.HasKey(e => new { e.IdFechamentoItem, e.IdConta });

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.DtAdequacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ADEQUACAO");

                entity.Property(e => e.IdJustificativa)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.Observacao)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("OBSERVACAO");

                entity.Property(e => e.QuantidadePaga)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QUANTIDADE_PAGA");

                entity.Property(e => e.ValorPago)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VALOR_PAGO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.AdequacaoCodigo)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdequacaoCodigo_FechamentoItem");
            });

            modelBuilder.Entity<AditivoAnexo>(entity =>
            {
                entity.HasKey(e => e.IdAditivoAnexo)
                    .HasName("AditivoAnexo_PK");

                entity.Property(e => e.IdAditivoAnexo).HasColumnName("ID_ADITIVO_ANEXO");

                entity.Property(e => e.DtAssinatura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ASSINATURA");

                entity.Property(e => e.DtVigência)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGÊNCIA");

                entity.Property(e => e.IdAditivoSituacaoTipo).HasColumnName("ID_ADITIVO_SITUACAO_TIPO");

                entity.Property(e => e.IdContrato).HasColumnName("ID_CONTRATO");

                entity.Property(e => e.ImAditivoAnexo)
                    .HasColumnType("image")
                    .HasColumnName("IM_ADITIVO_ANEXO");

                entity.Property(e => e.InAditivo).HasColumnName("IN_ADITIVO");

                entity.Property(e => e.NrNumero).HasColumnName("NR_NUMERO");

                entity.Property(e => e.TxSinopse)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("TX_SINOPSE");

                entity.HasOne(d => d.IdAditivoSituacaoTipoNavigation)
                    .WithMany(p => p.AditivoAnexo)
                    .HasForeignKey(d => d.IdAditivoSituacaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AditivoAnexo_FK1");
            });

            modelBuilder.Entity<AditivoAnexoAditivoAnexo>(entity =>
            {
                entity.HasKey(e => new { e.IdAditivoAnexo, e.IdAditivoAnexoSubstituicao })
                    .HasName("AditivoAnexo_AditivoAnexo_PK");

                entity.ToTable("AditivoAnexo_AditivoAnexo");

                entity.Property(e => e.IdAditivoAnexo).HasColumnName("ID_ADITIVO_ANEXO");

                entity.Property(e => e.IdAditivoAnexoSubstituicao).HasColumnName("ID_ADITIVO_ANEXO_SUBSTITUICAO");

                entity.HasOne(d => d.IdAditivoAnexoNavigation)
                    .WithMany(p => p.AditivoAnexoAditivoAnexoIdAditivoAnexoNavigation)
                    .HasForeignKey(d => d.IdAditivoAnexo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AditivoAnexo_AditivoAnexo_AditivoAnexo_FK1");

                entity.HasOne(d => d.IdAditivoAnexoSubstituicaoNavigation)
                    .WithMany(p => p.AditivoAnexoAditivoAnexoIdAditivoAnexoSubstituicaoNavigation)
                    .HasForeignKey(d => d.IdAditivoAnexoSubstituicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AditivoAnexo_AditivoAnexo_AditivoAnexo_FK2");
            });

            modelBuilder.Entity<AditivoAnexoImagem>(entity =>
            {
                entity.HasKey(e => new { e.IdAditivoAnexo, e.NrPagina })
                    .HasName("AditivoAnexoImagem_PK");

                entity.Property(e => e.IdAditivoAnexo).HasColumnName("ID_ADITIVO_ANEXO");

                entity.Property(e => e.NrPagina).HasColumnName("NR_PAGINA");

                entity.Property(e => e.ImContrato)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("IM_CONTRATO");

                entity.HasOne(d => d.IdAditivoAnexoNavigation)
                    .WithMany(p => p.AditivoAnexoImagem)
                    .HasForeignKey(d => d.IdAditivoAnexo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AditivoAnexo_AditivoAnexoImagem_FK1");
            });

            modelBuilder.Entity<AgProntuarioEletronico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AG_PRONTUARIO_ELETRONICO");

                entity.Property(e => e.Cgi).HasColumnName("CGI");

                entity.Property(e => e.Crm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CRM");

                entity.Property(e => e.DataAgenda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DATA_AGENDA")
                    .IsFixedLength(true);

                entity.Property(e => e.HoraAgenda)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HORA_AGENDA")
                    .IsFixedLength(true);

                entity.Property(e => e.Medico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MEDICO");

                entity.Property(e => e.Operadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPERADORA");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PACIENTE");

                entity.Property(e => e.Uf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF");
            });

            modelBuilder.Entity<Agencia>(entity =>
            {
                entity.HasKey(e => e.IdAgencia)
                    .HasName("Agencia_PK");

                entity.Property(e => e.IdAgencia).HasColumnName("ID_AGENCIA");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.NmAgencia)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_AGENCIA");

                entity.Property(e => e.NrAgencia).HasColumnName("NR_AGENCIA");

                entity.Property(e => e.NrDigito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NR_DIGITO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.Agencia)
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Agencia_FK1");

                entity.HasOne(d => d.IdEnderecoNavigation)
                    .WithMany(p => p.Agencia)
                    .HasForeignKey(d => d.IdEndereco)
                    .HasConstraintName("Endereco_Agencia_FK1");
            });

            modelBuilder.Entity<AgenciaTelefone>(entity =>
            {
                entity.HasKey(e => e.IdAgenciaTelefone)
                    .HasName("Agencia_Telefone_PK");

                entity.ToTable("Agencia_Telefone");

                entity.HasIndex(e => new { e.IdAgencia, e.IdTelefone, e.NrRamal }, "IX_Agencia_Telefone_K2_k3_k5")
                    .IsUnique();

                entity.Property(e => e.IdAgenciaTelefone).HasColumnName("ID_AGENCIA_TELEFONE");

                entity.Property(e => e.IdAgencia).HasColumnName("ID_AGENCIA");

                entity.Property(e => e.IdTelefone).HasColumnName("ID_TELEFONE");

                entity.Property(e => e.IdTelefoneTipo).HasColumnName("ID_TELEFONE_TIPO");

                entity.Property(e => e.NmContato)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTATO");

                entity.Property(e => e.NrRamal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_RAMAL");

                entity.HasOne(d => d.IdAgenciaNavigation)
                    .WithMany(p => p.AgenciaTelefone)
                    .HasForeignKey(d => d.IdAgencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Agencia_Agencia_Telefone_FK1");

                entity.HasOne(d => d.IdTelefoneNavigation)
                    .WithMany(p => p.AgenciaTelefone)
                    .HasForeignKey(d => d.IdTelefone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Telefone_Agencia_Telefone_FK1");

                entity.HasOne(d => d.IdTelefoneTipoNavigation)
                    .WithMany(p => p.AgenciaTelefone)
                    .HasForeignKey(d => d.IdTelefoneTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Agencia_Telefone_TipoDiversos");
            });

            modelBuilder.Entity<AgendaCc>(entity =>
            {
                entity.HasKey(e => e.IdAgenda)
                    .HasName("PK__AgendaCC__1DF5257B")
                    .IsClustered(false);

                entity.ToTable("AgendaCC");

                entity.HasIndex(e => new { e.IdAtendimento, e.IdAgenda }, "IX_AGENDACC_ID_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.DtAgenda, e.InBloqueado }, "IX_AgendaCC_ID_UNIDADE_ORGANIZACIONAL_DT_AGENDA_IN_BLOQUEADO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.InBloqueado }, "IX_AgendaCC_ID_UNIDADE_ORGANIZACIONAL_IN_BLOQUEADO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.NmPaciente, e.DtAgenda }, "IX_AgendaCC_NM_PACIENTE_DT_AGENDA")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.DtAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDA");

                entity.Property(e => e.DtLimiteAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIMITE_AUTORIZACAO");

                entity.Property(e => e.DtMarcacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MARCACAO");

                entity.Property(e => e.IdAgendaPai).HasColumnName("ID_AGENDA_PAI");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdJustificativaBloqueio).HasColumnName("ID_JUSTIFICATIVA_BLOQUEIO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdMedicoCirurgia).HasColumnName("ID_MEDICO_CIRURGIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdRiscoTev).HasColumnName("ID_RISCO_TEV");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAlergia).HasColumnName("IN_ALERGIA");

                entity.Property(e => e.InAvulso).HasColumnName("IN_AVULSO");

                entity.Property(e => e.InBloqueado).HasColumnName("IN_BLOQUEADO");

                entity.Property(e => e.InCongelaPecaAnatomica).HasColumnName("IN_CONGELA_PECA_ANATOMICA");

                entity.Property(e => e.InConsultaPreAnestesia).HasColumnName("IN_CONSULTA_PRE_ANESTESIA");

                entity.Property(e => e.InCti).HasColumnName("IN_CTI");

                entity.Property(e => e.InDiabetes).HasColumnName("IN_DIABETES");

                entity.Property(e => e.InEncaixe).HasColumnName("IN_ENCAIXE");

                entity.Property(e => e.InLateralidade).HasColumnName("IN_LATERALIDADE");

                entity.Property(e => e.InPrecheckin).HasColumnName("IN_PRECHECKIN");

                entity.Property(e => e.InPrimeiraConsulta).HasColumnName("IN_PRIMEIRA_CONSULTA");

                entity.Property(e => e.InRemarcacao).HasColumnName("IN_REMARCACAO");

                entity.Property(e => e.InRetorno).HasColumnName("IN_RETORNO");

                entity.Property(e => e.InSangue).HasColumnName("IN_SANGUE");

                entity.Property(e => e.InStatusEmMarcacao).HasColumnName("IN_STATUS_EM_MARCACAO");

                entity.Property(e => e.InTermoConsentimento).HasColumnName("IN_TERMO_CONSENTIMENTO");

                entity.Property(e => e.InUrgencia)
                    .HasColumnName("IN_URGENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NmPaciente)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NrDuracaoCirurgia).HasColumnName("NR_DURACAO_CIRURGIA");

                entity.Property(e => e.NrIdade).HasColumnName("NR_IDADE");

                entity.Property(e => e.TxAlergia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ALERGIA");

                entity.Property(e => e.TxAnestesista)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ANESTESISTA");

                entity.Property(e => e.TxEquipamentoAdicional)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_EQUIPAMENTO_ADICIONAL");

                entity.Property(e => e.TxLadoLateralidade)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_LADO_LATERALIDADE")
                    .IsFixedLength(true);

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxObservacaoCancelamento)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_CANCELAMENTO");

                entity.Property(e => e.TxObservacaoSms)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_SMS");

                entity.Property(e => e.TxTelefone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.AgendaCc)
                    .HasForeignKey(d => d.IdPaciente)
                    .HasConstraintName("FK__AgendaCC__ID_PAC__10412A9F");
            });

            modelBuilder.Entity<AgendaCcServico>(entity =>
            {
                entity.HasKey(e => new { e.IdAgenda, e.IdServico })
                    .HasName("PK__AgendaCC_Servico__1FDD6DED");

                entity.ToTable("AgendaCC_Servico");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdRegiaoAplicacao).HasColumnName("ID_REGIAO_APLICACAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<AgendaCgi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Agenda_CGI");

                entity.Property(e => e.Cgi).HasColumnName("CGI");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");
            });

            modelBuilder.Entity<AgendaFarmacia>(entity =>
            {
                entity.HasKey(e => e.IdAgendaFarmacia)
                    .HasName("AgendaFarmacia_PK");

                entity.HasIndex(e => e.HrFimPeriodo, "IX_AGENDAFARMACIA_HR_FIM")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdAgendaFarmacia).HasColumnName("ID_AGENDA_FARMACIA");

                entity.Property(e => e.HrFimPeriodo)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM_PERIODO");

                entity.Property(e => e.HrInicioPeriodo)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO_PERIODO");
            });

            modelBuilder.Entity<AgendaFarmaciaPeriodoAtendido>(entity =>
            {
                entity.HasKey(e => new { e.DtPeriodoAtendido, e.IdUnidadeOrganizacional, e.IdAgendaFarmacia })
                    .HasName("AgendaFarmaciaPeriodoAtendido_PK");

                entity.HasIndex(e => e.IdAgendaFarmacia, "IX_AgendaFarmaciaPeriodoAtendido_ID_AGENDA_FARMACIA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.DtPeriodoAtendido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PERIODO_ATENDIDO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdAgendaFarmacia).HasColumnName("ID_AGENDA_FARMACIA");

                entity.HasOne(d => d.IdAgendaFarmaciaNavigation)
                    .WithMany(p => p.AgendaFarmaciaPeriodoAtendido)
                    .HasForeignKey(d => d.IdAgendaFarmacia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AgendaFarmacia_AgendaFarmaciaPeriodoAtendido_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.AgendaFarmaciaPeriodoAtendido)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_AgendaFarmaciaPeriodoAtendido_FK1");
            });

            modelBuilder.Entity<AgendaFarmaciaUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdAgendaFarmacia })
                    .HasName("AgendaFarmacia_UnidadeOrganizacional_PK");

                entity.ToTable("AgendaFarmacia_UnidadeOrganizacional");

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "AgendaFarmacia_UnidadeOrganizacional_ID_UNIDADE_ORGANIZACIONAL")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdAgendaFarmacia).HasColumnName("ID_AGENDA_FARMACIA");

                entity.Property(e => e.NrSequencia).HasColumnName("NR_SEQUENCIA");

                entity.HasOne(d => d.IdAgendaFarmaciaNavigation)
                    .WithMany(p => p.AgendaFarmaciaUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdAgendaFarmacia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AgendaFarmacia_AgendaFarmacia_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.AgendaFarmaciaUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_AgendaFarmacia_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<AgendaFarmaciaUnidadeOrganizacionalHistorico>(entity =>
            {
                entity.HasKey(e => e.IdAgendaFarmaciaUoHistorico);

                entity.ToTable("AgendaFarmacia_UnidadeOrganizacional_Historico");

                entity.Property(e => e.IdAgendaFarmaciaUoHistorico).HasColumnName("ID_AGENDA_FARMACIA_UO_HISTORICO");

                entity.Property(e => e.DataHora)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_HORA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InHabilitado).HasColumnName("IN_HABILITADO");
            });

            modelBuilder.Entity<AgendaHd>(entity =>
            {
                entity.HasKey(e => e.IdAgenda)
                    .HasName("AgendaHD_PK");

                entity.ToTable("AgendaHD");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.DtAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDA");

                entity.Property(e => e.IdAnestesia).HasColumnName("ID_ANESTESIA");

                entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdSala).HasColumnName("ID_SALA");

                entity.Property(e => e.IdStatusAgenda).HasColumnName("ID_STATUS_AGENDA");

                entity.Property(e => e.InPacienteInternado).HasColumnName("IN_PACIENTE_INTERNADO");

                entity.Property(e => e.NmPaciente)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NrIdade).HasColumnName("NR_IDADE");

                entity.Property(e => e.NrLeito).HasColumnName("NR_LEITO");

                entity.Property(e => e.NrTelefone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_TELEFONE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxExameNaoInformado)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_EXAME_NAO_INFORMADO");

                entity.Property(e => e.TxJustificativa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAnestesiaNavigation)
                    .WithMany(p => p.AgendaHd)
                    .HasForeignKey(d => d.IdAnestesia)
                    .HasConstraintName("TipoDiversos_AgendaHD_FK1");

                entity.HasOne(d => d.IdHorarioNavigation)
                    .WithMany(p => p.AgendaHd)
                    .HasForeignKey(d => d.IdHorario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("HorariosHemodinamica_AgendaHD_FK1");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.AgendaHdIdMedicoNavigation)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("Pessoa_AgendaHD_FK2");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.AgendaHdIdPacienteNavigation)
                    .HasForeignKey(d => d.IdPaciente)
                    .HasConstraintName("Pessoa_AgendaHD_FK1");

                entity.HasOne(d => d.IdSalaNavigation)
                    .WithMany(p => p.AgendaHd)
                    .HasForeignKey(d => d.IdSala)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_AgendaHD_FK1");
            });

            modelBuilder.Entity<AgendaHdCorpoClinico>(entity =>
            {
                entity.HasKey(e => new { e.IdAgenda, e.IdCorpoClinico })
                    .HasName("AgendaHD_CorpoClinico_PK");

                entity.ToTable("AgendaHD_CorpoClinico");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdCorpoClinico).HasColumnName("ID_CORPO_CLINICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAgendaNavigation)
                    .WithMany(p => p.AgendaHdCorpoClinico)
                    .HasForeignKey(d => d.IdAgenda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AgendaHD_AgendaHD_CorpoClinico_FK1");

                entity.HasOne(d => d.IdCorpoClinicoNavigation)
                    .WithMany(p => p.AgendaHdCorpoClinico)
                    .HasForeignKey(d => d.IdCorpoClinico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_AgendaHD_CorpoClinico_FK1");
            });

            modelBuilder.Entity<AgendaHdServico>(entity =>
            {
                entity.HasKey(e => new { e.IdAgenda, e.IdServico })
                    .HasName("AgendaHD_Servico_PK");

                entity.ToTable("AgendaHD_Servico");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAgendaNavigation)
                    .WithMany(p => p.AgendaHdServico)
                    .HasForeignKey(d => d.IdAgenda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AgendaHD_AgendaHD_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.AgendaHdServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_AgendaHD_Servico_FK1");
            });

            modelBuilder.Entity<AgendaHorariosSadt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("agenda_Horarios_SADT");

                entity.Property(e => e.Horario)
                    .HasColumnType("datetime")
                    .HasColumnName("horario");

                entity.Property(e => e.IdAgendaConfig).HasColumnName("id_agenda_config");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdRecurso).HasColumnName("id_recurso");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.NrDuracao).HasColumnName("nr_duracao");
            });

            modelBuilder.Entity<AgendaProfissionalSaudeBloqueioOperadoraHorario>(entity =>
            {
                entity.HasKey(e => e.IdConfigAgendaBloqueioProfissionalOperadora);

                entity.ToTable("AgendaProfissionalSaude_Bloqueio_Operadora_Horario");

                entity.Property(e => e.IdConfigAgendaBloqueioProfissionalOperadora).HasColumnName("ID_CONFIG_AGENDA_BLOQUEIO_PROFISSIONAL_OPERADORA");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdDiaSemana).HasColumnName("ID_DIA_SEMANA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProfissionalSaude).HasColumnName("ID_PROFISSIONAL_SAUDE");

                entity.HasOne(d => d.IdDiaSemanaNavigation)
                    .WithMany(p => p.AgendaProfissionalSaudeBloqueioOperadoraHorario)
                    .HasForeignKey(d => d.IdDiaSemana)
                    .HasConstraintName("FK_AgendaProfissionalSaude_Bloqueio_Operadora_Horario_TipoDiversos");
            });

            modelBuilder.Entity<AgendaProfissionalSaudeOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdProfissionalSaude });

                entity.ToTable("AgendaProfissionalSaude_Operadora");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProfissionalSaude).HasColumnName("ID_PROFISSIONAL_SAUDE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<AgendaProfissionalSaudeOperadoraHorario>(entity =>
            {
                entity.HasKey(e => e.IdConfigAgendaProfissionalOperadora);

                entity.ToTable("AgendaProfissionalSaude_Operadora_Horario");

                entity.Property(e => e.IdConfigAgendaProfissionalOperadora)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONFIG_AGENDA_PROFISSIONAL_OPERADORA");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdDiaSemana).HasColumnName("ID_DIA_SEMANA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProfissionalSaude).HasColumnName("ID_PROFISSIONAL_SAUDE");

                entity.HasOne(d => d.IdDiaSemanaNavigation)
                    .WithMany(p => p.AgendaProfissionalSaudeOperadoraHorario)
                    .HasForeignKey(d => d.IdDiaSemana)
                    .HasConstraintName("FK_AgendaProfissionalSaude_Operadora_Horario_TipoDiversos");

                entity.HasOne(d => d.IdProfissionalSaudeNavigation)
                    .WithMany(p => p.AgendaProfissionalSaudeOperadoraHorario)
                    .HasForeignKey(d => d.IdProfissionalSaude)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgendaProfissionalSaude_Operadora_Horario_Pessoa");
            });

            modelBuilder.Entity<AgendaSadt>(entity =>
            {
                entity.HasKey(e => e.IdAgenda);

                entity.ToTable("AgendaSADT");

                entity.HasIndex(e => e.DtAgenda, "IX_AgendaSADT_DT_AGENDA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.DtAgenda, e.NmPaciente }, "IX_AgendaSADT_DT_AGENDA_NM_PACIENTE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdAgendaPai, "IX_AgendaSADT_ID_AGENDA_PAI");

                entity.HasIndex(e => new { e.IdAtendimento, e.DtAgenda, e.IdOperadora }, "IX_AgendaSADT_ID_ATENDIMENTO_DT_AGENDA_ID_OPERADORA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdAtendimento, e.InBloqueado, e.DtAgenda, e.IdOperadora }, "IX_AgendaSADT_ID_ATENDIMENTO_IN_BLOQUEADO_DT_AGENDA_ID_OPERADORA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdMedico, e.IdAtendimento, e.InBloqueado, e.DtAgenda }, "IX_AgendaSADT_ID_MEDICO_ID_ATENDIMENTO_IN_BLOQUEADO_DT_AGENDA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdOperadora, "IX_AgendaSADT_ID_OPERADORA");

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.DtAgenda }, "IX_AgendaSADT_ID_UNIDADE_ORGANIZACIONAL_DT_AGENDA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdMedico, e.DtAgenda }, "IX_AgendaSADT_ID_UNIDADE_ORGANIZACIONAL_ID_MEDICO_DT_AGENDA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdMedico, e.IdRecurso, e.DtMarcacao }, "IX_AgendaSADT_ID_UNIDADE_ORGANIZACIONAL_ID_MEDICO_ID_RECURSO_DT_MARCACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InBloqueado, e.IdAgenda }, "IX_AgendaSADT_IN_BLOQUEADO_ID_AGENDA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.NmPaciente, "IX_AgendaSADT_NM_PACIENTE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdPaciente, e.DtAgenda }, "IX_DGA_PAC_AGEN")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.DtAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDA");

                entity.Property(e => e.DtMarcacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MARCACAO");

                entity.Property(e => e.IdAgendaPai).HasColumnName("ID_AGENDA_PAI");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdJustificativaBloqueio).HasColumnName("ID_JUSTIFICATIVA_BLOQUEIO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdOrigemCadastro).HasColumnName("ID_ORIGEM_CADASTRO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdProcedimentoPedido).HasColumnName("ID_PROCEDIMENTO_PEDIDO");

                entity.Property(e => e.IdProcedimentoPedidoProcedimento).HasColumnName("ID_PROCEDIMENTO_PEDIDO_PROCEDIMENTO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdResultado).HasColumnName("ID_RESULTADO");

                entity.Property(e => e.IdUnidadeFisica).HasColumnName("ID_UNIDADE_FISICA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAnestesista).HasColumnName("IN_ANESTESISTA");

                entity.Property(e => e.InAvulso).HasColumnName("IN_AVULSO");

                entity.Property(e => e.InBloqueado).HasColumnName("IN_BLOQUEADO");

                entity.Property(e => e.InEncaixe).HasColumnName("IN_ENCAIXE");

                entity.Property(e => e.InPrecheckin).HasColumnName("IN_PRECHECKIN");

                entity.Property(e => e.InPrimeiraConsulta).HasColumnName("IN_PRIMEIRA_CONSULTA");

                entity.Property(e => e.InRemarcacao).HasColumnName("IN_REMARCACAO");

                entity.Property(e => e.InRetorno).HasColumnName("IN_RETORNO");

                entity.Property(e => e.InStatusEmMarcacao).HasColumnName("IN_STATUS_EM_MARCACAO");

                entity.Property(e => e.InUrgencia)
                    .HasColumnName("IN_URGENCIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NmPaciente)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NrIdade).HasColumnName("NR_IDADE");

                entity.Property(e => e.QnPeso)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_PESO");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxObservacaoCancelamento)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_CANCELAMENTO");

                entity.Property(e => e.TxObservacaoSms)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_SMS");

                entity.Property(e => e.TxTelefone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE");

                entity.HasOne(d => d.IdAgendaPaiNavigation)
                    .WithMany(p => p.InverseIdAgendaPaiNavigation)
                    .HasForeignKey(d => d.IdAgendaPai)
                    .HasConstraintName("FK_AgendaSADT_AgendaSADT");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AgendaSadt)
                    .HasForeignKey(d => d.IdAtendimento)
                    .HasConstraintName("FK_AgendaSADT_Atendimento");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.AgendaSadtIdEspecialidadeNavigation)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_AgendaSADT_Especialidade");

                entity.HasOne(d => d.IdJustificativaBloqueioNavigation)
                    .WithMany(p => p.AgendaSadt)
                    .HasForeignKey(d => d.IdJustificativaBloqueio)
                    .HasConstraintName("FK_AgendaSADT_JustificativaBloqueio");

                entity.HasOne(d => d.IdJustificativaBloqueio1)
                    .WithMany(p => p.AgendaSadtIdJustificativaBloqueio1)
                    .HasForeignKey(d => d.IdJustificativaBloqueio)
                    .HasConstraintName("fk_agendasadt_tipodiversos");

                entity.HasOne(d => d.IdJustificativaCancelamentoNavigation)
                    .WithMany(p => p.AgendaSadt)
                    .HasForeignKey(d => d.IdJustificativaCancelamento)
                    .HasConstraintName("FK_AgendaSADT_JustificativaCancelamento");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.AgendaSadtIdMedicoNavigation)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_AgendaSADT_Pessoa1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.AgendaSadtIdOperadoraNavigation)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_AgendaSADT_Pessoa");

                entity.HasOne(d => d.IdOrigemCadastroNavigation)
                    .WithMany(p => p.AgendaSadtIdOrigemCadastroNavigation)
                    .HasForeignKey(d => d.IdOrigemCadastro)
                    .HasConstraintName("FK_AGENDASADT_TIPODIVERSOS_ORIGEM");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.AgendaSadtIdPacienteNavigation)
                    .HasForeignKey(d => d.IdPaciente)
                    .HasConstraintName("FK_AgendaSADT_Paciente");

                entity.HasOne(d => d.IdProcedimentoPedidoNavigation)
                    .WithMany(p => p.AgendaSadt)
                    .HasForeignKey(d => d.IdProcedimentoPedido)
                    .HasConstraintName("FK_AgendaSADT_ProcedimentoPedido");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.AgendaSadt)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("FK_AgendaSADT_Recurso");

                entity.HasOne(d => d.IdResultadoNavigation)
                    .WithMany(p => p.AgendaSadtIdResultadoNavigation)
                    .HasForeignKey(d => d.IdResultado)
                    .HasConstraintName("FK_AgendaSADT_TipoDiversos1");

                entity.HasOne(d => d.IdUnidadeFisicaNavigation)
                    .WithMany(p => p.AgendaSadtIdUnidadeFisicaNavigation)
                    .HasForeignKey(d => d.IdUnidadeFisica)
                    .HasConstraintName("FK_AgendaSADT_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.AgendaSadtIdUnidadeOrganizacionalNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_AgendaSADT_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AgendaSadt)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgendaSADT_Usuario");
            });

            modelBuilder.Entity<AgendaSadtBloqueioPaciente>(entity =>
            {
                entity.HasKey(e => new { e.IdMedico, e.IdPaciente });

                entity.ToTable("AgendaSADT_BloqueioPaciente");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdJustificativa).HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdJustificativaNavigation)
                    .WithMany(p => p.AgendaSadtBloqueioPaciente)
                    .HasForeignKey(d => d.IdJustificativa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgendaSADT_BloqueioPaciente_TipoDiversos");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.AgendaSadtBloqueioPacienteIdMedicoNavigation)
                    .HasForeignKey(d => d.IdMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgendaSADT_BloqueioPaciente_Medico");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.AgendaSadtBloqueioPacienteIdPacienteNavigation)
                    .HasForeignKey(d => d.IdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgendaSADT_BloqueioPaciente_Paciente");
            });

            modelBuilder.Entity<AgendaSadtServico>(entity =>
            {
                entity.HasKey(e => new { e.IdAgenda, e.IdServico });

                entity.ToTable("AgendaSADT_Servico");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdRegiaoAplicacao).HasColumnName("ID_REGIAO_APLICACAO");

                entity.Property(e => e.VlServico)
                    .HasColumnName("VL_SERVICO")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.AgendaSadtServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgendaSADT_Servico_Servico");
            });

            modelBuilder.Entity<Agendaatul>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AGENDAATUL");

                entity.Property(e => e.DtAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDA");

                entity.Property(e => e.DtMarcacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MARCACAO");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdJustificativaBloqueio).HasColumnName("ID_JUSTIFICATIVA_BLOQUEIO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAnestesista).HasColumnName("IN_ANESTESISTA");

                entity.Property(e => e.InAvulso).HasColumnName("IN_AVULSO");

                entity.Property(e => e.InBloqueado).HasColumnName("IN_BLOQUEADO");

                entity.Property(e => e.InEncaixe).HasColumnName("IN_ENCAIXE");

                entity.Property(e => e.InPrecheckin).HasColumnName("IN_PRECHECKIN");

                entity.Property(e => e.InPrimeiraConsulta).HasColumnName("IN_PRIMEIRA_CONSULTA");

                entity.Property(e => e.InRemarcacao).HasColumnName("IN_REMARCACAO");

                entity.Property(e => e.InRetorno).HasColumnName("IN_RETORNO");

                entity.Property(e => e.InStatusEmMarcacao).HasColumnName("IN_STATUS_EM_MARCACAO");

                entity.Property(e => e.NmPaciente)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NrIdade).HasColumnName("NR_IDADE");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxObservacaoCancelamento)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_CANCELAMENTO");

                entity.Property(e => e.TxTelefone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE");
            });

            modelBuilder.Entity<AgendaccEquipamento>(entity =>
            {
                entity.HasKey(e => e.IdIndex);

                entity.ToTable("AGENDACC_EQUIPAMENTO");

                entity.Property(e => e.IdIndex).HasColumnName("ID_INDEX");

                entity.Property(e => e.IdAgendacc).HasColumnName("ID_AGENDACC");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.AgendaccEquipamento)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("FK_AGENDACC_EQUIPAMENTO_Recurso");
            });

            modelBuilder.Entity<AgendamentoPagamento>(entity =>
            {
                entity.HasKey(e => e.IdAgendamentoPagamento)
                    .HasName("PK_AGENDAMENTO_PAGAMENTO");

                entity.ToTable("Agendamento_Pagamento");

                entity.Property(e => e.IdAgendamentoPagamento).HasColumnName("ID_AGENDAMENTO_PAGAMENTO");

                entity.Property(e => e.DataPagamento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATA_PAGAMENTO");

                entity.Property(e => e.IdAgenda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdIntegracao)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_INTEGRACAO");

                entity.Property(e => e.IdPagamento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_PAGAMENTO");

                entity.Property(e => e.Json)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("JSON");

                entity.Property(e => e.Link)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LINK");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Valor)
                    .HasColumnType("money")
                    .HasColumnName("VALOR");
            });

            modelBuilder.Entity<AgrupamentoMaterial>(entity =>
            {
                entity.HasKey(e => e.IdAgrupamentoMaterial);

                entity.Property(e => e.IdAgrupamentoMaterial).HasColumnName("ID_AGRUPAMENTO_MATERIAL");

                entity.Property(e => e.IdUsuarioResponsavel).HasColumnName("ID_USUARIO_RESPONSAVEL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmAgrupamentoMaterial)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_AGRUPAMENTO_MATERIAL");

                entity.HasOne(d => d.IdUsuarioResponsavelNavigation)
                    .WithMany(p => p.AgrupamentoMaterial)
                    .HasForeignKey(d => d.IdUsuarioResponsavel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterial_UsuarioResponsavel");
            });

            modelBuilder.Entity<AgrupamentoMaterialHistorico>(entity =>
            {
                entity.HasKey(e => e.IdAgrupamentoMaterialHistorico);

                entity.Property(e => e.IdAgrupamentoMaterialHistorico).HasColumnName("ID_AGRUPAMENTO_MATERIAL_HISTORICO");

                entity.Property(e => e.DtAcao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACAO");

                entity.Property(e => e.IdAcao).HasColumnName("ID_ACAO");

                entity.Property(e => e.IdAgrupamentoMaterial).HasColumnName("ID_AGRUPAMENTO_MATERIAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmAgrupamentoMaterial)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_AGRUPAMENTO_MATERIAL");

                entity.HasOne(d => d.IdAcaoNavigation)
                    .WithMany(p => p.AgrupamentoMaterialHistorico)
                    .HasForeignKey(d => d.IdAcao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialHistorico_Acao");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AgrupamentoMaterialHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialHistorico_Usuario");
            });

            modelBuilder.Entity<AgrupamentoMaterialProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdAgrupamentoMaterial, e.IdProdutoDetalhe });

                entity.Property(e => e.IdAgrupamentoMaterial).HasColumnName("ID_AGRUPAMENTO_MATERIAL");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeConsumo).HasColumnName("ID_UNIDADE_CONSUMO");

                entity.Property(e => e.InFracionado).HasColumnName("IN_FRACIONADO");

                entity.Property(e => e.QnMaterial).HasColumnName("QN_MATERIAL");

                entity.HasOne(d => d.IdAgrupamentoMaterialNavigation)
                    .WithMany(p => p.AgrupamentoMaterialProduto)
                    .HasForeignKey(d => d.IdAgrupamentoMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialProduto_AgrupamentoMaterial");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.AgrupamentoMaterialProduto)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialProduto_ProdutoDetalhe");

                entity.HasOne(d => d.IdUnidadeConsumoNavigation)
                    .WithMany(p => p.AgrupamentoMaterialProduto)
                    .HasForeignKey(d => d.IdUnidadeConsumo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialProduto_UnidadeConsumo");
            });

            modelBuilder.Entity<AgrupamentoMaterialProdutoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdAgrupamentoMaterialProdutoHistorico);

                entity.Property(e => e.IdAgrupamentoMaterialProdutoHistorico).HasColumnName("ID_AGRUPAMENTO_MATERIAL_PRODUTO_HISTORICO");

                entity.Property(e => e.DtAcao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACAO");

                entity.Property(e => e.IdAcao).HasColumnName("ID_ACAO");

                entity.Property(e => e.IdAgrupamentoMaterial).HasColumnName("ID_AGRUPAMENTO_MATERIAL");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeConsumo).HasColumnName("ID_UNIDADE_CONSUMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InFracionado).HasColumnName("IN_FRACIONADO");

                entity.Property(e => e.QnMaterial).HasColumnName("QN_MATERIAL");

                entity.HasOne(d => d.IdAcaoNavigation)
                    .WithMany(p => p.AgrupamentoMaterialProdutoHistoricoIdAcaoNavigation)
                    .HasForeignKey(d => d.IdAcao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialProdutoHistorico_Acao");

                entity.HasOne(d => d.IdUnidadeConsumoNavigation)
                    .WithMany(p => p.AgrupamentoMaterialProdutoHistoricoIdUnidadeConsumoNavigation)
                    .HasForeignKey(d => d.IdUnidadeConsumo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialProdutoHistorico_UnidadeConsumo");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AgrupamentoMaterialProdutoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialProdutoHistorico_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.AgrupamentoMaterialProdutoHistorico)
                    .HasForeignKey(d => new { d.IdAgrupamentoMaterial, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgrupamentoMaterialProdutoHistorico_AgrupamentoMaterialProduto");
            });

            modelBuilder.Entity<AgrupamentoMaterialUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdAgrupamentoMaterial, e.IdUnidadeOrganizacional })
                    .HasName("AgrupamentoMaterial_UnidadeOrganizacional_PK");

                entity.ToTable("AgrupamentoMaterial_UnidadeOrganizacional");

                entity.Property(e => e.IdAgrupamentoMaterial).HasColumnName("ID_AGRUPAMENTO_MATERIAL");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.HasOne(d => d.IdAgrupamentoMaterialNavigation)
                    .WithMany(p => p.AgrupamentoMaterialUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdAgrupamentoMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AgrupamentoMaterial_AgrupamentoMaterial_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.AgrupamentoMaterialUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_AgrupamentoMaterial_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<AjustePmd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AJUSTE_PMD");

                entity.Property(e => e.DtPreco)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PRECO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.VlPreco)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_PRECO");
            });

            modelBuilder.Entity<AjusteProcedimentoLinhaDadosTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TxLinhaDados1)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS1");

                entity.Property(e => e.TxLinhaDados10)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS10");

                entity.Property(e => e.TxLinhaDados2)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS2");

                entity.Property(e => e.TxLinhaDados3)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS3");

                entity.Property(e => e.TxLinhaDados4)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS4");

                entity.Property(e => e.TxLinhaDados5)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS5");

                entity.Property(e => e.TxLinhaDados6)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS6");

                entity.Property(e => e.TxLinhaDados7)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS7");

                entity.Property(e => e.TxLinhaDados8)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS8");

                entity.Property(e => e.TxLinhaDados9)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS9");
            });

            modelBuilder.Entity<AjusteProcedimentoTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.CdServico, "IX_AjusteProcedimentoTransporte_K2")
                    .IsClustered()
                    .HasFillFactor((byte)80);

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdPrecoprodutotransporte)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRECOPRODUTOTRANSPORTE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.InValorGeral).HasColumnName("IN_VALOR_GERAL");

                entity.Property(e => e.InValorMonetario).HasColumnName("IN_VALOR_MONETARIO");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlCustoOperacionalApartamento).HasColumnName("VL_CUSTO_OPERACIONAL_APARTAMENTO");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlHonorarioApartamento).HasColumnName("VL_HONORARIO_APARTAMENTO");

                entity.Property(e => e.VlHonorariosApartamentoHospitalDia).HasColumnName("VL_HONORARIOS_APARTAMENTO_HOSPITAL_DIA");
            });

            modelBuilder.Entity<Alimento>(entity =>
            {
                entity.HasKey(e => e.IdAlimento);

                entity.Property(e => e.IdAlimento).HasColumnName("ID_ALIMENTO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmAlimento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ALIMENTO");

                entity.Property(e => e.QnCentesimal)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_CENTESIMAL");

                entity.Property(e => e.QnKcalorias)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_KCALORIAS");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<AlimentoNutriente>(entity =>
            {
                entity.HasKey(e => new { e.IdAlimento, e.IdNutriente })
                    .HasName("Alimento_Nutriente_PK");

                entity.ToTable("Alimento_Nutriente");

                entity.Property(e => e.IdAlimento).HasColumnName("ID_ALIMENTO");

                entity.Property(e => e.IdNutriente).HasColumnName("ID_NUTRIENTE");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.QnNutriente)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_NUTRIENTE");

                entity.HasOne(d => d.IdNutrienteNavigation)
                    .WithMany(p => p.AlimentoNutriente)
                    .HasForeignKey(d => d.IdNutriente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Nutriente_Alimento_Nutriente_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AlimentoNutriente)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Alimento_Nutriente_FK1");
            });

            modelBuilder.Entity<AlimentoRefeicao>(entity =>
            {
                entity.HasKey(e => new { e.IdAlimento, e.IdRefeicao })
                    .HasName("Alimento_Refeicao_PK");

                entity.ToTable("Alimento_Refeicao");

                entity.Property(e => e.IdAlimento).HasColumnName("ID_ALIMENTO");

                entity.Property(e => e.IdRefeicao).HasColumnName("ID_REFEICAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.QnAlimento)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_ALIMENTO");

                entity.HasOne(d => d.IdRefeicaoNavigation)
                    .WithMany(p => p.AlimentoRefeicao)
                    .HasForeignKey(d => d.IdRefeicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Refeicao_Alimento_Refeicao_FK1");
            });

            modelBuilder.Entity<AltaMedica>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento);

                entity.HasIndex(e => new { e.DtAlta, e.IdTipoAlta }, "IX_AltaMedica_DT_ALTA_ID_TIPO_ALTA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdMedico, "IX_AltaMedica_ID_MEDICO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdTipoAlta, "IX_AltaMedica_ID_TIPO_ALTA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdAtendimento, "IX_AltaMedica_K1")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.DtAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdTipoAlta).HasColumnName("ID_TIPO_ALTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.AltaMedica)
                    .HasForeignKey<AltaMedica>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AltaMedica_Atendimento");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.AltaMedica)
                    .HasForeignKey(d => d.IdMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AltaMedica_Pessoa");

                entity.HasOne(d => d.IdTipoAltaNavigation)
                    .WithMany(p => p.AltaMedica)
                    .HasForeignKey(d => d.IdTipoAlta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AltaMedica_TipoAlta");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AltaMedica)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AltaMedica_Usuario");
            });

            modelBuilder.Entity<Alvara>(entity =>
            {
                entity.HasKey(e => e.IdAlvara);

                entity.Property(e => e.IdAlvara).HasColumnName("ID_ALVARA");

                entity.Property(e => e.ArDocumentoAlvara).HasColumnName("AR_DOCUMENTO_ALVARA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtFimValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VALIDADE");

                entity.Property(e => e.DtInicioValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VALIDADE");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdTipoAlvara).HasColumnName("ID_TIPO_ALVARA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioExcluiu).HasColumnName("ID_USUARIO_EXCLUIU");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmDocumentoAlvara)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_DOCUMENTO_ALVARA");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.Alvara)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Alvara_Pessoa");

                entity.HasOne(d => d.IdTipoAlvaraNavigation)
                    .WithMany(p => p.Alvara)
                    .HasForeignKey(d => d.IdTipoAlvara)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Alvara_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AlvaraIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Alvara_Usuario");

                entity.HasOne(d => d.IdUsuarioExcluiuNavigation)
                    .WithMany(p => p.AlvaraIdUsuarioExcluiuNavigation)
                    .HasForeignKey(d => d.IdUsuarioExcluiu)
                    .HasConstraintName("FK_Alvara_Usuario1");
            });

            modelBuilder.Entity<AmilAutorizacao>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TxLinhaDados1)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS1");

                entity.Property(e => e.TxLinhaDados2)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS2");

                entity.Property(e => e.TxLinhaDados3)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS3");

                entity.Property(e => e.TxLinhaDados4)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS4");

                entity.Property(e => e.TxLinhaDados5)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS5");
            });

            modelBuilder.Entity<Amostra>(entity =>
            {
                entity.HasKey(e => e.IdAmostra)
                    .HasName("Amostra_PK");

                entity.Property(e => e.IdAmostra).HasColumnName("ID_AMOSTRA");

                entity.Property(e => e.DtColeta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COLETA");

                entity.Property(e => e.IdMeioColeta).HasColumnName("ID_MEIO_COLETA");

                entity.Property(e => e.IdUsuarioColeta).HasColumnName("ID_USUARIO_COLETA");

                entity.HasOne(d => d.IdMeioColetaNavigation)
                    .WithMany(p => p.Amostra)
                    .HasForeignKey(d => d.IdMeioColeta)
                    .HasConstraintName("FK_Amostra_MeioColeta");

                entity.HasOne(d => d.IdUsuarioColetaNavigation)
                    .WithMany(p => p.Amostra)
                    .HasForeignKey(d => d.IdUsuarioColeta)
                    .HasConstraintName("Usuario_Amostra_FK1");
            });

            modelBuilder.Entity<AmostraOrdemServicoExame>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame, e.IdAmostra });

                entity.ToTable("Amostra_OrdemServicoExame");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdAmostra).HasColumnName("ID_AMOSTRA");

                entity.Property(e => e.InAnalisado).HasColumnName("IN_ANALISADO");

                entity.HasOne(d => d.IdAmostraNavigation)
                    .WithMany(p => p.AmostraOrdemServicoExame)
                    .HasForeignKey(d => d.IdAmostra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Amostra_Amostra_OrdemServicoExame_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.AmostraOrdemServicoExame)
                    .HasForeignKey(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Exame_Amostra_OrdemServicoExame_FK1");
            });

            modelBuilder.Entity<Analisador>(entity =>
            {
                entity.HasKey(e => e.IdAnalisador)
                    .HasName("Analisador_PK");

                entity.Property(e => e.IdAnalisador).HasColumnName("ID_ANALISADOR");

                entity.Property(e => e.IdInterface).HasColumnName("ID_INTERFACE");

                entity.Property(e => e.NmAnalisador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ANALISADOR");

                entity.Property(e => e.TxCodigoInterface)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_CODIGO_INTERFACE")
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdInterfaceNavigation)
                    .WithMany(p => p.Analisador)
                    .HasForeignKey(d => d.IdInterface)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Interface_Analisador_FK1");
            });

            modelBuilder.Entity<AnaliseBffg>(entity =>
            {
                entity.ToTable("analise_bffg");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Linhas).HasColumnName("linhas");

                entity.Property(e => e.Tabela)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("tabela");
            });

            modelBuilder.Entity<AnaliseCritica>(entity =>
            {
                entity.HasKey(e => e.IdAnaliseCritica)
                    .HasName("PK_Analista_Critica");

                entity.ToTable("Analise_Critica");

                entity.Property(e => e.IdAnaliseCritica).HasColumnName("ID_ANALISE_CRITICA");

                entity.Property(e => e.DtAnalise)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ANALISE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxAnaliseCritica)
                    .IsUnicode(false)
                    .HasColumnName("TX_ANALISE_CRITICA");

                entity.HasOne(d => d.IdLoteContaMapaNavigation)
                    .WithMany(p => p.AnaliseCritica)
                    .HasForeignKey(d => d.IdLoteContaMapa)
                    .HasConstraintName("FK_Analista_Critica_LoteContaMapa");
            });

            modelBuilder.Entity<AnaliseDiariaSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AnaliseDiariaSUS");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxMensagem)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_MENSAGEM");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<AnaliseUnimed>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.ToTable("Analise_Unimed");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtAnalise)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ANALISE");

                entity.Property(e => e.IdMapaRev).HasColumnName("ID_MAPA_REV");

                entity.Property(e => e.IdRespostaAnalise).HasColumnName("ID_RESPOSTA_ANALISE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InGlosaDevida).HasColumnName("IN_GLOSA_DEVIDA");

                entity.Property(e => e.QnCobrado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_COBRADO");

                entity.Property(e => e.QnGlosado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_GLOSADO");

                entity.Property(e => e.QtRevertida)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QT_REVERTIDA");

                entity.Property(e => e.TxObsRecursoUnimed)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_RECURSO_UNIMED");

                entity.Property(e => e.TxSrpm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_SRPM");

                entity.Property(e => e.VlCobrado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_COBRADO");

                entity.Property(e => e.VlGlosado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_GLOSADO");

                entity.HasOne(d => d.IdRespostaAnaliseNavigation)
                    .WithMany(p => p.AnaliseUnimed)
                    .HasForeignKey(d => d.IdRespostaAnalise)
                    .HasConstraintName("FK_Analise_Unimed_Resposta_Analise_Unimed");
            });

            modelBuilder.Entity<AnoMesBi>(entity =>
            {
                entity.HasKey(e => e.IdAnoMes);

                entity.ToTable("AnoMesBI");

                entity.Property(e => e.IdAnoMes)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ANO_MES");

                entity.Property(e => e.Ano).HasColumnName("ANO");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO")
                    .IsFixedLength(true);

                entity.Property(e => e.DescricaoAnoMes)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO_ANO_MES")
                    .IsFixedLength(true);

                entity.Property(e => e.Mes).HasColumnName("MES");
            });

            modelBuilder.Entity<AntecipacaoEntrega>(entity =>
            {
                entity.HasKey(e => e.IdAntecipacaoEntrega)
                    .HasName("AntecipacaoEntrega_PK");

                entity.Property(e => e.IdAntecipacaoEntrega).HasColumnName("ID_ANTECIPACAO_ENTREGA");

                entity.Property(e => e.DtEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTREGA");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.NrCupom).HasColumnName("NR_CUPOM");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.AntecipacaoEntrega)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_AntecipacaoEntrega_FK1");
            });

            modelBuilder.Entity<AntecipacaoEntregaProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdAntecipacaoEntrega, e.IdFabricante, e.IdProdutoDetalhe, e.NrLote });

                entity.ToTable("AntecipacaoEntrega_Produto");

                entity.Property(e => e.IdAntecipacaoEntrega).HasColumnName("ID_ANTECIPACAO_ENTREGA");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.NrLote)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdEmbalagem).HasColumnName("ID_EMBALAGEM");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.InProdutoEtiquetado).HasColumnName("IN_PRODUTO_ETIQUETADO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdAntecipacaoEntregaNavigation)
                    .WithMany(p => p.AntecipacaoEntregaProduto)
                    .HasForeignKey(d => d.IdAntecipacaoEntrega)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AntecipacaoEntrega_AntecipacaoEntrega_Produto_FK1");

                entity.HasOne(d => d.IdEmbalagemNavigation)
                    .WithMany(p => p.AntecipacaoEntregaProduto)
                    .HasForeignKey(d => d.IdEmbalagem)
                    .HasConstraintName("Embalagem_AntecipacaoEntrega_Produto_FK1");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithMany(p => p.AntecipacaoEntregaProduto)
                    .HasForeignKey(d => d.IdNotaEntrada)
                    .HasConstraintName("NotaEntrada_AntecipacaoEntrega_Produto_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.AntecipacaoEntregaProduto)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_AntecipacaoEntrega_Produto_FK1");
            });

            modelBuilder.Entity<Antibiotico>(entity =>
            {
                entity.HasKey(e => e.IdAntibiotico)
                    .HasName("Antibiotico_PK");

                entity.Property(e => e.IdAntibiotico).HasColumnName("ID_ANTIBIOTICO");

                entity.Property(e => e.NmAntibiotico)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_ANTIBIOTICO");
            });

            modelBuilder.Entity<AntimicrobianoAtendimentoProdutoDetalhe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AntimicrobianoAtendimentoProdutoDetalhe");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdPedidoAntimicrobiano).HasColumnName("ID_PEDIDO_ANTIMICROBIANO");

                entity.Property(e => e.IdPedidoAntimicrobianoItem).HasColumnName("ID_PEDIDO_ANTIMICROBIANO_ITEM");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");
            });

            modelBuilder.Entity<AntimicrobianoPedido>(entity =>
            {
                entity.HasKey(e => e.IdPedidoAntimicrobiano)
                    .HasName("AntimicrobianoPedido_PK");

                entity.HasIndex(e => e.DtPedido, "IX_AntimicrobianoPedido_DT_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdMedicoSolicitante, "IX_AntimicrobianoPedido_ID_MEDICO_SOLICITANTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdPedidoAntimicrobiano, e.IdStatus }, "IX_AntimicrobianoPedido_K1_K3_4_13")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdAtendimento, "IX_SOLICITACAO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPedidoAntimicrobiano).HasColumnName("ID_PEDIDO_ANTIMICROBIANO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtPedido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdExamesMicrobiologicosStatus).HasColumnName("ID_EXAMES_MICROBIOLOGICOS_STATUS");

                entity.Property(e => e.IdIndicacaoTipo).HasColumnName("ID_INDICACAO_TIPO");

                entity.Property(e => e.IdJustificativaTipo).HasColumnName("ID_JUSTIFICATIVA_TIPO");

                entity.Property(e => e.IdMedicoSolicitante).HasColumnName("ID_MEDICO_SOLICITANTE");

                entity.Property(e => e.IdProcedimentoCirurgico).HasColumnName("ID_PROCEDIMENTO_CIRURGICO");

                entity.Property(e => e.IdRegistroPrescricaoAntimicrobiano).HasColumnName("ID_REGISTRO_PRESCRICAO_ANTIMICROBIANO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdStatusAnterior).HasColumnName("ID_STATUS_ANTERIOR");

                entity.Property(e => e.InSuspeitaIra).HasColumnName("IN_SUSPEITA_IRA");

                entity.Property(e => e.TxDescalonamento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCALONAMENTO");

                entity.Property(e => e.TxEscalonamento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ESCALONAMENTO");

                entity.Property(e => e.TxJustificativa)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.TxObservacaoCcih)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_CCIH");

                entity.Property(e => e.TxRegistroPrescricaoAntimicrobiano)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_REGISTRO_PRESCRICAO_ANTIMICROBIANO");

                entity.Property(e => e.TxSequenciamentoOral)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_SEQUENCIAMENTO_ORAL");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AntimicrobianoPedido)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_AntimicrobianoPedido_FK1");

                entity.HasOne(d => d.IdExamesMicrobiologicosStatusNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoIdExamesMicrobiologicosStatusNavigation)
                    .HasForeignKey(d => d.IdExamesMicrobiologicosStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AntimicrobianoPedido_FK3");

                entity.HasOne(d => d.IdIndicacaoTipoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoIdIndicacaoTipoNavigation)
                    .HasForeignKey(d => d.IdIndicacaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AntimicrobianoPedido_FK2");

                entity.HasOne(d => d.IdJustificativaTipoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoIdJustificativaTipoNavigation)
                    .HasForeignKey(d => d.IdJustificativaTipo)
                    .HasConstraintName("TipoDiversos_AntimicrobianoPedido_FK4");

                entity.HasOne(d => d.IdMedicoSolicitanteNavigation)
                    .WithMany(p => p.AntimicrobianoPedido)
                    .HasForeignKey(d => d.IdMedicoSolicitante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_AntimicrobianoPedido_FK1");

                entity.HasOne(d => d.IdProcedimentoCirurgicoNavigation)
                    .WithMany(p => p.AntimicrobianoPedido)
                    .HasForeignKey(d => d.IdProcedimentoCirurgico)
                    .HasConstraintName("Servico_AntimicrobianoPedido_FK1");

                entity.HasOne(d => d.IdRegistroPrescricaoAntimicrobianoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoIdRegistroPrescricaoAntimicrobianoNavigation)
                    .HasForeignKey(d => d.IdRegistroPrescricaoAntimicrobiano)
                    .HasConstraintName("FK_AntimicrobianoPedido_TipoDiversos_Registro");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoIdStatusNavigation)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AntimicrobianoPedido_FK1");

                entity.HasOne(d => d.IdStatusAnteriorNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoIdStatusAnteriorNavigation)
                    .HasForeignKey(d => d.IdStatusAnterior)
                    .HasConstraintName("FK_AntimicrobianoPedido_TipoDiversos");
            });

            modelBuilder.Entity<AntimicrobianoPedidoExameMicrobiologicoTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdExameMicrobiologicoTipo, e.IdPedidoAntimicrobiano })
                    .HasName("AntimicrobianoPedidoExameMicrobiologicoTipo_PK");

                entity.HasIndex(e => e.IdPedidoAntimicrobiano, "IX_IDPEDIDOANTIMICROBIANO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdExameMicrobiologicoTipo).HasColumnName("ID_EXAME_MICROBIOLOGICO_TIPO");

                entity.Property(e => e.IdPedidoAntimicrobiano).HasColumnName("ID_PEDIDO_ANTIMICROBIANO");

                entity.HasOne(d => d.IdExameMicrobiologicoTipoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoExameMicrobiologicoTipo)
                    .HasForeignKey(d => d.IdExameMicrobiologicoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AntimicrobianoPedidoExameMicrobiologicoTipo_FK1");

                entity.HasOne(d => d.IdPedidoAntimicrobianoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoExameMicrobiologicoTipo)
                    .HasForeignKey(d => d.IdPedidoAntimicrobiano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AntimicrobianoPedido_AntimicrobianoPedidoExameMicrobiologicoTipo_FK1");
            });

            modelBuilder.Entity<AntimicrobianoPedidoItem>(entity =>
            {
                entity.HasKey(e => e.IdPedidoAntimicrobianoItem)
                    .HasName("AntimicrobianoPedidoItem_PK");

                entity.HasIndex(e => new { e.IdPedidoAntimicrobianoItem, e.NrDiasTratamento, e.IdPedidoAntimicrobiano }, "IX_AntimicrobianoPedidoItem_K1_K4_K2")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdPedidoAntimicrobiano, "_dta_index_AntimicrobianoPedidoItem_AntimicrobianoPedido")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPedidoAntimicrobianoItem).HasColumnName("ID_PEDIDO_ANTIMICROBIANO_ITEM");

                entity.Property(e => e.IdPedidoAntimicrobiano).HasColumnName("ID_PEDIDO_ANTIMICROBIANO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdStatusAnterior).HasColumnName("ID_STATUS_ANTERIOR");

                entity.Property(e => e.NrDiasTratamento).HasColumnName("NR_DIAS_TRATAMENTO");

                entity.Property(e => e.NrDosesAutorizadas).HasColumnName("NR_DOSES_AUTORIZADAS");

                entity.Property(e => e.QnPrescritaAutorizada)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("QN_PRESCRITA_AUTORIZADA")
                    .IsFixedLength(true);

                entity.Property(e => e.QnPrescritaPrescricao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_PRESCRITA_PRESCRICAO");

                entity.Property(e => e.TxObservacaoCcih)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_CCIH");

                entity.HasOne(d => d.IdPedidoAntimicrobianoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoItem)
                    .HasForeignKey(d => d.IdPedidoAntimicrobiano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AntimicrobianoPedido_AntimicrobianoPedidoItem_FK1");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoItemIdStatusNavigation)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AntimicrobianoPedidoItem_FK1");

                entity.HasOne(d => d.IdStatusAnteriorNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoItemIdStatusAnteriorNavigation)
                    .HasForeignKey(d => d.IdStatusAnterior)
                    .HasConstraintName("FK_AntimicrobianoPedidoItem_TipoDiversos");
            });

            modelBuilder.Entity<AntimicrobianoPedidoItemSolicitacaoPdEnfermagem>(entity =>
            {
                entity.HasKey(e => new { e.IdPedidoAntimicrobianoItem, e.IdSolicitacaoPdEnfermagem })
                    .HasName("AntimicrobianoPedidoItem_SolicitacaoPdEnfermagem_PK");

                entity.ToTable("AntimicrobianoPedidoItem_SolicitacaoPdEnfermagem");

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoInicial, "IX_AntimicrobianoPedidoItem_SolicitacaoPdEnfermagem_K4")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagem, "IX_SOLICITACAO_PD_ENFERMAGEM")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPedidoAntimicrobianoItem).HasColumnName("ID_PEDIDO_ANTIMICROBIANO_ITEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoInicial).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_INICIAL");

                entity.HasOne(d => d.IdPedidoAntimicrobianoItemNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoItemSolicitacaoPdEnfermagem)
                    .HasForeignKey(d => d.IdPedidoAntimicrobianoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AntimicrobianoPedidoItem_AntimicrobianoPedidoItem_SolicitacaoPdEnfermagem_FK1");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoItemSolicitacaoPdEnfermagem)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_PD_Enfermagem_AntimicrobianoPedidoItem_SolicitacaoPdEnfermagem_FK1");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoInicialNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoItemSolicitacaoPdEnfermagem)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoInicial)
                    .HasConstraintName("Solicitacao_PD_EnfermagemHorarioAdministracao_AntimicrobianoPedidoItem_SolicitacaoPdEnfermagem_FK1");
            });

            modelBuilder.Entity<AntimicrobianoPedidoItemSolicitacaoPdEnfermagemAjuste2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AntimicrobianoPedidoItem_SolicitacaoPdEnfermagem_Ajuste2020");

                entity.Property(e => e.IdPedidoAntimicrobianoItem).HasColumnName("ID_PEDIDO_ANTIMICROBIANO_ITEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoInicial).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_INICIAL");
            });

            modelBuilder.Entity<AntimicrobianoPedidoMicroorganismoIsolado>(entity =>
            {
                entity.HasKey(e => new { e.IdPedidoAntimicrobiano, e.IdMicroorganismoIsolado })
                    .HasName("AntimicrobianoPedidoMicroorganismoIsolado_PK");

                entity.Property(e => e.IdPedidoAntimicrobiano).HasColumnName("ID_PEDIDO_ANTIMICROBIANO");

                entity.Property(e => e.IdMicroorganismoIsolado).HasColumnName("ID_MICROORGANISMO_ISOLADO");

                entity.HasOne(d => d.IdMicroorganismoIsoladoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoMicroorganismoIsolado)
                    .HasForeignKey(d => d.IdMicroorganismoIsolado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AntimicrobianoPedidoMicroorganismoIsolado_FK1");

                entity.HasOne(d => d.IdPedidoAntimicrobianoNavigation)
                    .WithMany(p => p.AntimicrobianoPedidoMicroorganismoIsolado)
                    .HasForeignKey(d => d.IdPedidoAntimicrobiano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("AntimicrobianoPedido_AntimicrobianoPedidoMicroorganismoIsolado_FK1");
            });

            modelBuilder.Entity<Aplicativo>(entity =>
            {
                entity.HasKey(e => e.IdAplicativo);

                entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");

                entity.Property(e => e.IdModulo).HasColumnName("ID_MODULO");

                entity.Property(e => e.NmAplicativo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_APLICATIVO");

                entity.HasOne(d => d.IdModuloNavigation)
                    .WithMany(p => p.Aplicativo)
                    .HasForeignKey(d => d.IdModulo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Aplicativo_MODULO");
            });

            modelBuilder.Entity<ApresentacaoMedicamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApresentacaoMedicamento");

                entity.Property(e => e.Baseconcentracao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("BASECONCENTRACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdFormaFarmaceutica)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ID_FORMA_FARMACEUTICA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdMdConsumoMinimo).HasColumnName("ID_MD_CONSUMO_MINIMO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeBase)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_BASE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdUnidadeVolume)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_VOLUME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InBaseKit).HasColumnName("IN_BASE_KIT");

                entity.Property(e => e.InPadronizado).HasColumnName("IN_PADRONIZADO");

                entity.Property(e => e.NmFormaFarmaceutica)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NM_FORMA_FARMACEUTICA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnConsumoMinimo).HasColumnName("QN_CONSUMO_MINIMO");

                entity.Property(e => e.TxApresentacaoMedicamento)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO_MEDICAMENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.UnidadeBase)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_BASE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.UnidadeConsumoMinimo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_CONSUMO_MINIMO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.UnidadeVolume)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_VOLUME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Volume)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VOLUME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ApuracaoContabil>(entity =>
            {
                entity.HasKey(e => e.IdApuracaoContabil);

                entity.Property(e => e.IdApuracaoContabil).HasColumnName("ID_APURACAO_CONTABIL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.DtMinParaOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MIN_PARA_OCORRENCIA");

                entity.Property(e => e.IdTipoApuracao).HasColumnName("ID_TIPO_APURACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioCancelamento).HasColumnName("ID_USUARIO_CANCELAMENTO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.HasOne(d => d.IdTipoApuracaoNavigation)
                    .WithMany(p => p.ApuracaoContabil)
                    .HasForeignKey(d => d.IdTipoApuracao)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ApuracaoContabilIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioCancelamentoNavigation)
                    .WithMany(p => p.ApuracaoContabilIdUsuarioCancelamentoNavigation)
                    .HasForeignKey(d => d.IdUsuarioCancelamento);
            });

            modelBuilder.Entity<Arquivo>(entity =>
            {
                entity.HasKey(e => e.IdArquivo)
                    .HasName("PK__Arquivo__220C1B5F7E2BD0AE");

                entity.Property(e => e.IdArquivo).HasColumnName("ID_ARQUIVO");

                entity.Property(e => e.IdTipoObjeto).HasColumnName("ID_TIPO_OBJETO");

                entity.Property(e => e.IdTipoParametro).HasColumnName("ID_TIPO_PARAMETRO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmArquivo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.NmArquivoDownload)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_DOWNLOAD");

                entity.Property(e => e.NmObjeto)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_OBJETO");

                entity.Property(e => e.TxSqlQuery)
                    .IsUnicode(false)
                    .HasColumnName("TX_SQL_QUERY");

                entity.HasOne(d => d.IdTipoObjetoNavigation)
                    .WithMany(p => p.ArquivoIdTipoObjetoNavigation)
                    .HasForeignKey(d => d.IdTipoObjeto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Arquivo_TipoObjeto");

                entity.HasOne(d => d.IdTipoParametroNavigation)
                    .WithMany(p => p.ArquivoIdTipoParametroNavigation)
                    .HasForeignKey(d => d.IdTipoParametro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Arquivo_TipoParametro");
            });

            modelBuilder.Entity<ArquivoContabil>(entity =>
            {
                entity.HasKey(e => e.IdArquivoContabil)
                    .HasName("ArquivoContabil_PK");

                entity.Property(e => e.IdArquivoContabil).HasColumnName("ID_ARQUIVO_CONTABIL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmArquivoContabil)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_CONTABIL");

                entity.Property(e => e.NmParametrosProcedure)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_PARAMETROS_PROCEDURE");

                entity.Property(e => e.NmProcedureASerExecutada)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROCEDURE_A_SER_EXECUTADA");

                entity.Property(e => e.TxSqlOrder)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_SQL_ORDER");
            });

            modelBuilder.Entity<ArquivoContabilGerado>(entity =>
            {
                entity.HasKey(e => e.IdArquivoContabilGerado)
                    .HasName("ArquivoContabilGerado_PK");

                entity.Property(e => e.IdArquivoContabilGerado).HasColumnName("ID_ARQUIVO_CONTABIL_GERADO");

                entity.Property(e => e.DtGeracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO");

                entity.Property(e => e.IdArquivoContabil).HasColumnName("ID_ARQUIVO_CONTABIL");

                entity.Property(e => e.IdSituacao)
                    .HasColumnName("ID_SITUACAO")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmArquivo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.NmParametrosInformados)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NM_PARAMETROS_INFORMADOS");

                entity.Property(e => e.NrAno).HasColumnName("NR_ANO");

                entity.Property(e => e.NrMes).HasColumnName("NR_MES");

                entity.Property(e => e.TxArquivoGerado)
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO_GERADO");

                entity.Property(e => e.TxDiretorio)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_DIRETORIO");

                entity.HasOne(d => d.IdArquivoContabilNavigation)
                    .WithMany(p => p.ArquivoContabilGerado)
                    .HasForeignKey(d => d.IdArquivoContabil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ArquivoContabil_ArquivoContabilGerado_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ArquivoContabilGerado)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ArquivoContabilGerado_FK1");
            });

            modelBuilder.Entity<ArquivoContabilHistoricoPadrao>(entity =>
            {
                entity.HasKey(e => e.IdArquivoContabilHistoricoPadrao);

                entity.HasIndex(e => e.CdHistorico, "UK_ArquivoContabilHistoricoPadrao_CD_HISTORICO")
                    .IsUnique();

                entity.HasIndex(e => e.TxHistorico, "UK_ArquivoContabilHistoricoPadrao_TX_HISTORICO")
                    .IsUnique();

                entity.Property(e => e.IdArquivoContabilHistoricoPadrao).HasColumnName("ID_ARQUIVO_CONTABIL_HISTORICO_PADRAO");

                entity.Property(e => e.CdHistorico)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CD_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TxHistorico)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");
            });

            modelBuilder.Entity<ArquivoContabilItem>(entity =>
            {
                entity.HasKey(e => e.IdArquivoContabilItem);

                entity.Property(e => e.IdArquivoContabilItem).HasColumnName("ID_ARQUIVO_CONTABIL_ITEM");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdArquivoContabil).HasColumnName("ID_ARQUIVO_CONTABIL");

                entity.Property(e => e.IdArquivoContabilHistoricoPadrao).HasColumnName("ID_ARQUIVO_CONTABIL_HISTORICO_PADRAO");

                entity.Property(e => e.IdClassificacaoTipoContaContrapartida).HasColumnName("ID_CLASSIFICACAO_TIPO_CONTA_CONTRAPARTIDA");

                entity.Property(e => e.IdClassificacaoTipoContaCredito).HasColumnName("ID_CLASSIFICACAO_TIPO_CONTA_CREDITO");

                entity.Property(e => e.IdClassificacaoTipoContaDebito).HasColumnName("ID_CLASSIFICACAO_TIPO_CONTA_DEBITO");

                entity.Property(e => e.IdDefaultContabilTipoContaContrapartida).HasColumnName("ID_DEFAULT_CONTABIL_TIPO_CONTA_CONTRAPARTIDA");

                entity.Property(e => e.IdDefaultContabilTipoContaCredito).HasColumnName("ID_DEFAULT_CONTABIL_TIPO_CONTA_CREDITO");

                entity.Property(e => e.IdDefaultContabilTipoContaDebito).HasColumnName("ID_DEFAULT_CONTABIL_TIPO_CONTA_DEBITO");

                entity.Property(e => e.IdPlanoContasContaContrapartida).HasColumnName("ID_PLANO_CONTAS_CONTA_CONTRAPARTIDA");

                entity.Property(e => e.IdPlanoContasContaCredito).HasColumnName("ID_PLANO_CONTAS_CONTA_CREDITO");

                entity.Property(e => e.IdPlanoContasContaDebito).HasColumnName("ID_PLANO_CONTAS_CONTA_DEBITO");

                entity.Property(e => e.IdTipoFonteDados).HasColumnName("ID_TIPO_FONTE_DADOS");

                entity.Property(e => e.IdTipoOrigemContaContrapartida).HasColumnName("ID_TIPO_ORIGEM_CONTA_CONTRAPARTIDA");

                entity.Property(e => e.IdTipoOrigemContaCredito).HasColumnName("ID_TIPO_ORIGEM_CONTA_CREDITO");

                entity.Property(e => e.IdTipoOrigemContaDebito).HasColumnName("ID_TIPO_ORIGEM_CONTA_DEBITO");

                entity.Property(e => e.InDefaultDebitoContaContrapartida).HasColumnName("IN_DEFAULT_DEBITO_CONTA_CONTRAPARTIDA");

                entity.Property(e => e.InDefaultDebitoContaCredito).HasColumnName("IN_DEFAULT_DEBITO_CONTA_CREDITO");

                entity.Property(e => e.InDefaultDebitoContaDebito).HasColumnName("IN_DEFAULT_DEBITO_CONTA_DEBITO");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.PrCalculo)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_CALCULO");

                entity.Property(e => e.TxComplementoHistorico)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO_HISTORICO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxFormulaCalculoValor)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMULA_CALCULO_VALOR");

                entity.Property(e => e.TxSqlFiltro)
                    .IsUnicode(false)
                    .HasColumnName("TX_SQL_FILTRO");

                entity.HasOne(d => d.IdArquivoContabilNavigation)
                    .WithMany(p => p.ArquivoContabilItem)
                    .HasForeignKey(d => d.IdArquivoContabil)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdArquivoContabilHistoricoPadraoNavigation)
                    .WithMany(p => p.ArquivoContabilItem)
                    .HasForeignKey(d => d.IdArquivoContabilHistoricoPadrao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArquivoContabilItem_ArqContHistPdr_ID_ARQUIVO_CONTABIL_HISTORICO_PADRAO");

                entity.HasOne(d => d.IdClassificacaoTipoContaContrapartidaNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdClassificacaoTipoContaContrapartidaNavigation)
                    .HasForeignKey(d => d.IdClassificacaoTipoContaContrapartida);

                entity.HasOne(d => d.IdClassificacaoTipoContaCreditoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdClassificacaoTipoContaCreditoNavigation)
                    .HasForeignKey(d => d.IdClassificacaoTipoContaCredito);

                entity.HasOne(d => d.IdClassificacaoTipoContaDebitoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdClassificacaoTipoContaDebitoNavigation)
                    .HasForeignKey(d => d.IdClassificacaoTipoContaDebito);

                entity.HasOne(d => d.IdDefaultContabilTipoContaContrapartidaNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdDefaultContabilTipoContaContrapartidaNavigation)
                    .HasForeignKey(d => d.IdDefaultContabilTipoContaContrapartida);

                entity.HasOne(d => d.IdDefaultContabilTipoContaCreditoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdDefaultContabilTipoContaCreditoNavigation)
                    .HasForeignKey(d => d.IdDefaultContabilTipoContaCredito);

                entity.HasOne(d => d.IdDefaultContabilTipoContaDebitoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdDefaultContabilTipoContaDebitoNavigation)
                    .HasForeignKey(d => d.IdDefaultContabilTipoContaDebito);

                entity.HasOne(d => d.IdPlanoContasContaContrapartidaNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdPlanoContasContaContrapartidaNavigation)
                    .HasForeignKey(d => d.IdPlanoContasContaContrapartida);

                entity.HasOne(d => d.IdPlanoContasContaCreditoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdPlanoContasContaCreditoNavigation)
                    .HasForeignKey(d => d.IdPlanoContasContaCredito);

                entity.HasOne(d => d.IdPlanoContasContaDebitoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdPlanoContasContaDebitoNavigation)
                    .HasForeignKey(d => d.IdPlanoContasContaDebito);

                entity.HasOne(d => d.IdTipoFonteDadosNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdTipoFonteDadosNavigation)
                    .HasForeignKey(d => d.IdTipoFonteDados)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoOrigemContaContrapartidaNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdTipoOrigemContaContrapartidaNavigation)
                    .HasForeignKey(d => d.IdTipoOrigemContaContrapartida);

                entity.HasOne(d => d.IdTipoOrigemContaCreditoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdTipoOrigemContaCreditoNavigation)
                    .HasForeignKey(d => d.IdTipoOrigemContaCredito);

                entity.HasOne(d => d.IdTipoOrigemContaDebitoNavigation)
                    .WithMany(p => p.ArquivoContabilItemIdTipoOrigemContaDebitoNavigation)
                    .HasForeignKey(d => d.IdTipoOrigemContaDebito);
            });

            modelBuilder.Entity<ArquivoRemessa>(entity =>
            {
                entity.HasKey(e => e.IdPessoa);

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PESSOA");

                entity.Property(e => e.NRemessa).HasColumnName("N_REMESSA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithOne(p => p.ArquivoRemessa)
                    .HasForeignKey<ArquivoRemessa>(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArquivoRemessa_Pessoa");
            });

            modelBuilder.Entity<ArquivoRemessaLayout>(entity =>
            {
                entity.HasKey(e => e.IdArquivoRemessaLayout)
                    .HasName("ArquivoRemessaLayout_PK");

                entity.Property(e => e.IdArquivoRemessaLayout).HasColumnName("ID_ARQUIVO_REMESSA_LAYOUT");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmArquivoRemessaLayout)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_REMESSA_LAYOUT");
            });

            modelBuilder.Entity<ArquivoRemessaLayoutOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoRemessaLayout, e.IdPessoa })
                    .HasName("ArquivoRemessaLayout_Operadora_PK");

                entity.ToTable("ArquivoRemessaLayout_Operadora");

                entity.Property(e => e.IdArquivoRemessaLayout).HasColumnName("ID_ARQUIVO_REMESSA_LAYOUT");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.IdArquivoRemessaLayoutNavigation)
                    .WithMany(p => p.ArquivoRemessaLayoutOperadora)
                    .HasForeignKey(d => d.IdArquivoRemessaLayout)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ArquivoRemessaLayout_ArquivoRemessaLayout_Operadora_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.ArquivoRemessaLayoutOperadora)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ArquivoRemessaLayout_Operadora_FK1");
            });

            modelBuilder.Entity<ArquivoUnimed>(entity =>
            {
                entity.HasKey(e => e.IdArquivoUnimed);

                entity.ToTable("ARQUIVO_UNIMED");

                entity.HasIndex(e => e.DtLeitura, "IX_ARQUIVO_UNIMED_DT_LEITURA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.DtGravacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GRAVACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtLeitura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LEITURA");

                entity.Property(e => e.DtSobreposicao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOBREPOSICAO");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InProcessoRetorno).HasColumnName("IN_PROCESSO_RETORNO");

                entity.Property(e => e.InSobreposto).HasColumnName("IN_SOBREPOSTO");

                entity.Property(e => e.NmArquivoUnimed)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_UNIMED");

                entity.HasOne(d => d.IdOperadorarecebimentoNavigation)
                    .WithMany(p => p.ArquivoUnimed)
                    .HasForeignKey(d => d.IdOperadorarecebimento)
                    .HasConstraintName("FK_ARQUIVO_UNIMED_OperadoraRecebimento1");
            });

            modelBuilder.Entity<AssitenteSocial>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Assitente_Social");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<AtendeCc>(entity =>
            {
                entity.HasKey(e => e.IdAtende)
                    .HasName("PK__Atende_CC__23ADFED1")
                    .IsClustered(false);

                entity.ToTable("Atende_CC");

                entity.HasIndex(e => e.DtFimVigencia, "Atende_CC_Fim_Vigência")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.DtInicioVigencia, "IX_AtendeCC_DataInicio")
                    .IsClustered()
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdRecurso }, "IX_AtendeCC_K2_K3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdPessoa }, "IX_AtendeCC_K2_K4")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdAtende).HasColumnName("ID_ATENDE");

                entity.Property(e => e.DtFimVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.HrHoraFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORA_FIM");

                entity.Property(e => e.HrHoraInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORA_INICIO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdTipoDiaSemana).HasColumnName("ID_TIPO_DIA_SEMANA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrDuracao).HasColumnName("NR_DURACAO");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.AtendeCc)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("fk_atende_cc_recurso");
            });

            modelBuilder.Entity<AtendeSadt>(entity =>
            {
                entity.HasKey(e => e.IdAtende);

                entity.ToTable("Atende_SADT");

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdRecurso }, "IX_AtendeSADT_K2_K3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdPessoa }, "IX_AtendeSADT_K2_K4")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdTipoDiaSemana, "IX_Atende_SADT_TipoDiversos")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdAtende).HasColumnName("ID_ATENDE");

                entity.Property(e => e.DtFimVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.HrHoraFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORA_FIM");

                entity.Property(e => e.HrHoraInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORA_INICIO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdTipoDiaSemana).HasColumnName("ID_TIPO_DIA_SEMANA");

                entity.Property(e => e.IdUnidadeFisica).HasColumnName("ID_UNIDADE_FISICA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InEhPaciente).HasColumnName("IN_EH_PACIENTE");

                entity.Property(e => e.InOnline).HasColumnName("IN_ONLINE");

                entity.Property(e => e.InPresencial).HasColumnName("IN_PRESENCIAL");

                entity.Property(e => e.InPrimeiraConsulta).HasColumnName("IN_PRIMEIRA_CONSULTA");

                entity.Property(e => e.InRetorno).HasColumnName("IN_RETORNO");

                entity.Property(e => e.InTelemedicina).HasColumnName("IN_TELEMEDICINA");

                entity.Property(e => e.LocalAtende)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("LOCAL_ATENDE");

                entity.Property(e => e.NrDuracao).HasColumnName("NR_DURACAO");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.AtendeSadtIdEspecialidadeNavigation)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_Atende_SADT_Especialidade");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.AtendeSadt)
                    .HasForeignKey(d => d.IdPessoa)
                    .HasConstraintName("FK_Atende_SADT_Pessoa");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.AtendeSadt)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("FK_Atende_SADT_Recurso");

                entity.HasOne(d => d.IdTipoDiaSemanaNavigation)
                    .WithMany(p => p.AtendeSadtIdTipoDiaSemanaNavigation)
                    .HasForeignKey(d => d.IdTipoDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atende_SADT_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeFisicaNavigation)
                    .WithMany(p => p.AtendeSadt)
                    .HasForeignKey(d => d.IdUnidadeFisica)
                    .HasConstraintName("FK_Atende_SADT_UnidadeFisica");
            });

            modelBuilder.Entity<Atendimento>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdStatusAtendimento }, "IX_Atendimento_K10_K15_1_2_3_4_5_6_7_8_9_11_12_13_14_16_17_18_19_20_21_23_24")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.DtAtendimento, e.IdStatusAtendimento, e.IdAtendimento, e.IdPlano }, "IX_Atendimento_K10_K8_K15_K1_K3_2_9_14")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.DtAtendimento, e.IdStatusAtendimento, e.IdPlano, e.IdPessoa }, "IX_Atendimento_K10_K8_K15_K3_K2_4_5_6_7_9_11_12_13_14_16_17_18_19")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdTipoInternacaoPaciente, "IX_Atendimento_K12_1_2_3");

                entity.HasIndex(e => e.IdStatusAtendimento, "IX_Atendimento_K15_1_2_3_8_10")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdStatusAtendimento, e.IdPlano, e.IdPessoa, e.DtAtendimento }, "IX_Atendimento_K15_3_2_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdMedicoPrincipal, e.IdStatusAtendimento, e.IdPlano, e.IdPessoa }, "IX_Atendimento_K18_K15_K3_K2_5_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdAtendimento, "IX_Atendimento_K1_2")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdAtendimento, e.IdPessoa, e.DtAtendimento }, "IX_Atendimento_K1_K2_K8")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdPessoa, "IX_Atendimento_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdJustificativaCancelamento, e.IdUnidadeOrganizacional, e.IdPessoa }, "IX_Atendimento_K24_K10_K2_8_14")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdPlano, "IX_Atendimento_K3_1_2_10")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.NrMatricula, "IX_Atendimento_K5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.DtAtendimento, "IX_Atendimento_K8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DtAltaMedica, "IX_Atendimento_K9_1_2_3_10")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.DtAltaMedica)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA_MEDICA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtValidadeCartao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_CARTAO");

                entity.Property(e => e.DtVenccarenc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCCARENC");

                entity.Property(e => e.IdCidCiha).HasColumnName("ID_CID_CIHA");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdMedicoPrincipal).HasColumnName("ID_MEDICO_PRINCIPAL");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdProcedencia).HasColumnName("ID_PROCEDENCIA");

                entity.Property(e => e.IdProcedimentoCiha).HasColumnName("ID_PROCEDIMENTO_CIHA");

                entity.Property(e => e.IdStatusAtendimento).HasColumnName("ID_STATUS_ATENDIMENTO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoInternacao).HasColumnName("ID_TIPO_INTERNACAO");

                entity.Property(e => e.IdTipoInternacaoPaciente).HasColumnName("ID_TIPO_INTERNACAO_PACIENTE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InDescParticular).HasColumnName("IN_DESC_PARTICULAR");

                entity.Property(e => e.InSemOnus).HasColumnName("IN_SEM_ONUS");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrCartaoIdentificacao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTAO_IDENTIFICACAO");

                entity.Property(e => e.NrDrg).HasColumnName("NR_DRG");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.NrVia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_VIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxAutorizacaoSemOnus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_AUTORIZACAO_SEM_ONUS");

                entity.Property(e => e.TxCondicaoPgto)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONDICAO_PGTO");

                entity.Property(e => e.TxIntercambio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_INTERCAMBIO");

                entity.HasOne(d => d.IdJustificativaCancelamentoNavigation)
                    .WithMany(p => p.AtendimentoIdJustificativaCancelamentoNavigation)
                    .HasForeignKey(d => d.IdJustificativaCancelamento)
                    .HasConstraintName("TipoDiversos_Atendimento_FK6");

                entity.HasOne(d => d.IdMedicoPrincipalNavigation)
                    .WithMany(p => p.AtendimentoIdMedicoPrincipalNavigation)
                    .HasForeignKey(d => d.IdMedicoPrincipal)
                    .HasConstraintName("FK_Atendimento_Medico");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.AtendimentoIdPessoaNavigation)
                    .HasForeignKey(d => d.IdPessoa)
                    .HasConstraintName("Pessoa1_Atendimento_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.Atendimento)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano1_Atendimento_FK1");

                entity.HasOne(d => d.IdProcedenciaNavigation)
                    .WithMany(p => p.AtendimentoIdProcedenciaNavigation)
                    .HasForeignKey(d => d.IdProcedencia)
                    .HasConstraintName("TipoDiversos_Atendimento_FK2");

                entity.HasOne(d => d.IdStatusAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoIdStatusAtendimentoNavigation)
                    .HasForeignKey(d => d.IdStatusAtendimento)
                    .HasConstraintName("TipoDiversos_Atendimento_FK4");

                entity.HasOne(d => d.IdTipoAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoIdTipoAtendimentoNavigation)
                    .HasForeignKey(d => d.IdTipoAtendimento)
                    .HasConstraintName("TipoDiversos_Atendimento_FK3");

                entity.HasOne(d => d.IdTipoInternacaoNavigation)
                    .WithMany(p => p.AtendimentoIdTipoInternacaoNavigation)
                    .HasForeignKey(d => d.IdTipoInternacao)
                    .HasConstraintName("TipoDiversos_Atendimento_FK1");

                entity.HasOne(d => d.IdTipoInternacaoPacienteNavigation)
                    .WithMany(p => p.AtendimentoIdTipoInternacaoPacienteNavigation)
                    .HasForeignKey(d => d.IdTipoInternacaoPaciente)
                    .HasConstraintName("TipoDiversos_Atendimento_FK5");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.Atendimento)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Atendimento_UnidadeOrganizacional");
            });

            modelBuilder.Entity<AtendimentoAltaAdministrativa>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento)
                    .HasName("Atendimento_AltaAdministrativa_PK");

                entity.ToTable("Atendimento_AltaAdministrativa");

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.DtAltaAdministrativa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA_ADMINISTRATIVA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.AtendimentoAltaAdministrativa)
                    .HasForeignKey<AtendimentoAltaAdministrativa>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_Atendimento_AltaAdministrativa_FK1");
            });

            modelBuilder.Entity<AtendimentoArquivo>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoArquivo);

                entity.ToTable("Atendimento_Arquivo");

                entity.Property(e => e.IdAtendimentoArquivo).HasColumnName("ID_ATENDIMENTO_ARQUIVO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmArquivo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.TxArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoArquivo)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Arquivo_Atendimento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AtendimentoArquivo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Arquivo_Usuario");
            });

            modelBuilder.Entity<AtendimentoCancelado>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoCancelado)
                    .HasName("AtendimentoCancelado_PK");

                entity.Property(e => e.IdAtendimentoCancelado).HasColumnName("ID_ATENDIMENTO_CANCELADO");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdJustificativaCancelamentoPadrao).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO_PADRAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxComplementoJustificativa)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO_JUSTIFICATIVA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoCancelado)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_AtendimentoCancelado_FK1");

                entity.HasOne(d => d.IdJustificativaCancelamentoPadraoNavigation)
                    .WithMany(p => p.AtendimentoCancelado)
                    .HasForeignKey(d => d.IdJustificativaCancelamentoPadrao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AtendimentoCancelado_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AtendimentoCancelado)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_AtendimentoCancelado_FK1");
            });

            modelBuilder.Entity<AtendimentoCid>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdCid, e.InAtendimento })
                    .HasName("ATENDIMENTO_CID_PK");

                entity.ToTable("Atendimento_Cid");

                entity.HasIndex(e => e.InAtendimento, "IX_Atendimento_Cid_IN_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdAtendimento)
                    .HasColumnName("ID_ATENDIMENTO")
                    .HasComment("Identificador do atendimento de um paciente");

                entity.Property(e => e.IdCid)
                    .HasColumnName("ID_CID")
                    .HasComment("Identificador do CID de entrada de um paciente");

                entity.Property(e => e.InAtendimento)
                    .HasColumnName("IN_ATENDIMENTO")
                    .HasComment("Indica se o CID é de atendimento ou de Alta médica");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA")
                    .HasComment("Controla a versão da linha");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoCid)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_Atendimento_Cid_FK1");

                entity.HasOne(d => d.IdC)
                    .WithMany(p => p.AtendimentoCid)
                    .HasForeignKey(d => d.IdCid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_Cid_Cid_FK1");
            });

            modelBuilder.Entity<AtendimentoClassificacaoRisco>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoClassificacaoRisco)
                    .HasName("PK_ATENDIMENTO_CLASSIFICACAO_RISCO");

                entity.ToTable("Atendimento_Classificacao_Risco");

                entity.Property(e => e.IdAtendimentoClassificacaoRisco).HasColumnName("ID_ATENDIMENTO_CLASSIFICACAO_RISCO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdRiscoTipo).HasColumnName("ID_RISCO_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoClassificacaoRisco)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ATENDIMENTO_CLASSIFICACAO_RISCO_ATENDIMENTO");

                entity.HasOne(d => d.IdRiscoTipoNavigation)
                    .WithMany(p => p.AtendimentoClassificacaoRisco)
                    .HasForeignKey(d => d.IdRiscoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ATENDIMENTO_CLASSIFICACAO_RISCO_TIPODIVERSOS");
            });

            modelBuilder.Entity<AtendimentoComplemento>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento);

                entity.HasIndex(e => e.IdAtendimentopa, "IX_ATENDIMENTOPA");

                entity.HasIndex(e => e.IdClassificacaoSenha, "IX_AtendimentoComplemento_ID_CLASSIFICACAO_SENHA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdEspecialidadeMedicoPrincipal, "IX_AtendimentoComplemento_ID_ESPECIALIDADE_MEDICO_PRINCIPAL")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdSetorAtendimento, "IX_AtendimentoComplemento_ID_SETOR_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdTipoAtendimentoSolicitacao, "IX_AtendimentoComplemento_ID_TIPO_ATENDIMENTO_SOLICITACAO");

                entity.HasIndex(e => new { e.IdAtendimento, e.NrAlmocoJantar, e.NrLanche, e.InAlmocoJantarCob, e.InLancheCob }, "_dta_index_AtendimentoComplemento_5_570081417__K1_K21_K22_K27_K28")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.DtEntregaResultado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTREGA_RESULTADO");

                entity.Property(e => e.IdAtendimentopa).HasColumnName("ID_ATENDIMENTOPA");

                entity.Property(e => e.IdClassificacaoSenha).HasColumnName("ID_CLASSIFICACAO_SENHA");

                entity.Property(e => e.IdEspecialidadeMedicoPrincipal).HasColumnName("ID_ESPECIALIDADE_MEDICO_PRINCIPAL");

                entity.Property(e => e.IdHospitalOrigem)
                    .HasColumnName("ID_HOSPITAL_ORIGEM")
                    .HasComment("tipo tabela 418");

                entity.Property(e => e.IdIndicacaoDeAciende).HasColumnName("ID_INDICACAO_DE_ACIENDE");

                entity.Property(e => e.IdOperadoraAutorizada).HasColumnName("ID_OPERADORA_AUTORIZADA");

                entity.Property(e => e.IdOperadoraContratada).HasColumnName("ID_OPERADORA_CONTRATADA");

                entity.Property(e => e.IdPessoaContato1).HasColumnName("ID_PESSOA_CONTATO_1");

                entity.Property(e => e.IdPessoaContato2).HasColumnName("ID_PESSOA_CONTATO_2");

                entity.Property(e => e.IdPessoaContato3).HasColumnName("ID_PESSOA_CONTATO_3");

                entity.Property(e => e.IdPessoaResponsavel).HasColumnName("ID_PESSOA_RESPONSAVEL");

                entity.Property(e => e.IdSetorAtendimento).HasColumnName("ID_SETOR_ATENDIMENTO");

                entity.Property(e => e.IdTipoAtendimentoSolicitacao).HasColumnName("ID_TIPO_ATENDIMENTO_SOLICITACAO");

                entity.Property(e => e.IdTipoCaraterSolicitacao).HasColumnName("ID_TIPO_CARATER_SOLICITACAO");

                entity.Property(e => e.IdTipoDoenca).HasColumnName("ID_TIPO_DOENCA");

                entity.Property(e => e.IdTipoParentescoContato1).HasColumnName("ID_TIPO_PARENTESCO_CONTATO_1");

                entity.Property(e => e.IdTipoParentescoContato2).HasColumnName("ID_TIPO_PARENTESCO_CONTATO_2");

                entity.Property(e => e.IdTipoParentescoContato3).HasColumnName("ID_TIPO_PARENTESCO_CONTATO_3");

                entity.Property(e => e.IdTipoParentescoResponsavel).HasColumnName("ID_TIPO_PARENTESCO_RESPONSAVEL");

                entity.Property(e => e.IdUnidadeFisica).HasColumnName("ID_UNIDADE_FISICA");

                entity.Property(e => e.IdUnidadeTempoDoenca).HasColumnName("ID_UNIDADE_TEMPO_DOENCA");

                entity.Property(e => e.InAcidenteTrabalho)
                    .HasColumnName("IN_ACIDENTE_TRABALHO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InAlmocoJantarCob).HasColumnName("IN_ALMOCO_JANTAR_COB");

                entity.Property(e => e.InCirurgiaRealizadaHmt).HasColumnName("IN_CIRURGIA_REALIZADA_HMT");

                entity.Property(e => e.InDifAcomodacao).HasColumnName("IN_DIF_ACOMODACAO");

                entity.Property(e => e.InEntregaTerceiro).HasColumnName("IN_ENTREGA_TERCEIRO");

                entity.Property(e => e.InGeladeira).HasColumnName("IN_GELADEIRA");

                entity.Property(e => e.InLancheCob).HasColumnName("IN_LANCHE_COB");

                entity.Property(e => e.InPosoperatorio).HasColumnName("IN_POSOPERATORIO");

                entity.Property(e => e.InRetornoAmbulatorio).HasColumnName("IN_RETORNO_AMBULATORIO");

                entity.Property(e => e.InTelefone).HasColumnName("IN_TELEFONE");

                entity.Property(e => e.InTv).HasColumnName("IN_TV");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.NmPessoaContato1)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA_CONTATO_1");

                entity.Property(e => e.NmPessoaContato2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA_CONTATO_2");

                entity.Property(e => e.NmPessoaContato3)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA_CONTATO_3");

                entity.Property(e => e.NrAlmocoJantar).HasColumnName("NR_ALMOCO_JANTAR");

                entity.Property(e => e.NrCodseguranca)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODSEGURANCA");

                entity.Property(e => e.NrLanche).HasColumnName("NR_LANCHE");

                entity.Property(e => e.NrSenhaCdPainelEletronico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_SENHA_CD_PAINEL_ELETRONICO");

                entity.Property(e => e.QdTempo).HasColumnName("QD_TEMPO");

                entity.Property(e => e.TxDescObsResponsavel)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_OBS_RESPONSAVEL");

                entity.Property(e => e.TxDocumentoAutorizada)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_DOCUMENTO_AUTORIZADA");

                entity.Property(e => e.TxIndicacaoClinica)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_INDICACAO_CLINICA");

                entity.Property(e => e.TxObsDifAcomodacao)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_DIF_ACOMODACAO");

                entity.Property(e => e.TxObsGeladeira)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_GELADEIRA");

                entity.Property(e => e.TxObsLancheAcomp)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_LANCHE_ACOMP");

                entity.Property(e => e.TxObsOcupacao)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_OCUPACAO");

                entity.Property(e => e.TxObsRefeicaoAcomp)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_REFEICAO_ACOMP");

                entity.Property(e => e.TxObsTelefone)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_TELEFONE");

                entity.Property(e => e.TxObsTv)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_TV");

                entity.Property(e => e.TxObsVisitante)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_VISITANTE");

                entity.Property(e => e.TxObservacaoAdicional)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_ADICIONAL");

                entity.Property(e => e.TxObservacaoContato)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_CONTATO");

                entity.Property(e => e.TxPessoaAutorizada)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PESSOA_AUTORIZADA");

                entity.Property(e => e.TxReligiaoPaciente)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_RELIGIAO_PACIENTE");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.AtendimentoComplemento)
                    .HasForeignKey<AtendimentoComplemento>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoComplemento_AtendimentoComplemento");

                entity.HasOne(d => d.IdClassificacaoSenhaNavigation)
                    .WithMany(p => p.AtendimentoComplemento)
                    .HasForeignKey(d => d.IdClassificacaoSenha)
                    .HasConstraintName("FK_AtendimentoComplemento_ClassificacaoSenha");

                entity.HasOne(d => d.IdHospitalOrigemNavigation)
                    .WithMany(p => p.AtendimentoComplementoIdHospitalOrigemNavigation)
                    .HasForeignKey(d => d.IdHospitalOrigem)
                    .HasConstraintName("FK_AtendimentoComplemento_TipoDiversos");

                entity.HasOne(d => d.IdSetorAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoComplementoIdSetorAtendimentoNavigation)
                    .HasForeignKey(d => d.IdSetorAtendimento)
                    .HasConstraintName("FK_AtendimentoComplemento_TipoDiversos1");

                entity.HasOne(d => d.IdUnidadeFisicaNavigation)
                    .WithMany(p => p.AtendimentoComplemento)
                    .HasForeignKey(d => d.IdUnidadeFisica)
                    .HasConstraintName("FK_AtendimentoComplemento_UnidadeOrganizacional");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.AtendimentoComplemento)
                    .HasForeignKey(d => d.LocNu)
                    .HasConstraintName("FK_AtendimentoComplemento_Localidade");
            });

            modelBuilder.Entity<AtendimentoContrato>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoContrato);

                entity.Property(e => e.IdAtendimentoContrato)
                    .HasColumnName("ID_ATENDIMENTO_CONTRATO")
                    .HasComment("Identificador único da tabela AtendimentoContrato.");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipoContrato)
                    .HasColumnName("ID_TIPO_CONTRATO")
                    .HasDefaultValueSql("((8426))");

                entity.Property(e => e.IdUsuarioAssinatura).HasColumnName("ID_USUARIO_ASSINATURA");

                entity.Property(e => e.TituloContrato)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TITULO_CONTRATO")
                    .HasComment("Armazena o título (nome) do contrato.");

                entity.Property(e => e.TxContrato)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_CONTRATO")
                    .HasComment("Armazena o texto do contrato.");
            });

            modelBuilder.Entity<AtendimentoContratoUnidadeOrganzacional>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AtendimentoContrato_UnidadeOrganzacional");

                entity.HasIndex(e => new { e.IdAtendimentoContrato, e.IdUnidadeOrganizacional }, "UK_Atendimento_Contrato")
                    .IsUnique();

                entity.Property(e => e.IdAtendimentoContrato).HasColumnName("ID_ATENDIMENTO_CONTRATO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.HasOne(d => d.IdAtendimentoContratoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdAtendimentoContrato)
                    .HasConstraintName("FK_AtendimentoContrato_UnidadeOrganzacional_AtendimentoContrato");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoContrato_UnidadeOrganzacional_UnidadeOrganizacional");
            });

            modelBuilder.Entity<AtendimentoDataAtual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Atendimento_Data_atual");

                entity.Property(e => e.DtAltaMedica)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA_MEDICA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtValidadeCartao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_CARTAO");

                entity.Property(e => e.DtVenccarenc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCCARENC");

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdCidCiha).HasColumnName("ID_CID_CIHA");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdMedicoPrincipal).HasColumnName("ID_MEDICO_PRINCIPAL");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdProcedencia).HasColumnName("ID_PROCEDENCIA");

                entity.Property(e => e.IdProcedimentoCiha).HasColumnName("ID_PROCEDIMENTO_CIHA");

                entity.Property(e => e.IdStatusAtendimento).HasColumnName("ID_STATUS_ATENDIMENTO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoInternacao).HasColumnName("ID_TIPO_INTERNACAO");

                entity.Property(e => e.IdTipoInternacaoPaciente).HasColumnName("ID_TIPO_INTERNACAO_PACIENTE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InDescParticular).HasColumnName("IN_DESC_PARTICULAR");

                entity.Property(e => e.InSemOnus).HasColumnName("IN_SEM_ONUS");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrCartaoIdentificacao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTAO_IDENTIFICACAO");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxAutorizacaoSemOnus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_AUTORIZACAO_SEM_ONUS");

                entity.Property(e => e.TxCondicaoPgto)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONDICAO_PGTO");

                entity.Property(e => e.TxIntercambio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_INTERCAMBIO");
            });

            modelBuilder.Entity<AtendimentoDecisao>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoDecisao);

                entity.Property(e => e.IdAtendimentoDecisao).HasColumnName("ID_ATENDIMENTO_DECISAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdDecisaoEscolhida).HasColumnName("ID_DECISAO_ESCOLHIDA");

                entity.Property(e => e.IdTipoDecisao).HasColumnName("ID_TIPO_DECISAO");

                entity.Property(e => e.TxObservacao)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoDecisao)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoDecisao_Atendimento");

                entity.HasOne(d => d.IdDecisaoEscolhidaNavigation)
                    .WithMany(p => p.AtendimentoDecisao)
                    .HasForeignKey(d => d.IdDecisaoEscolhida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoDecisao_DecisaoEscolhida");

                entity.HasOne(d => d.IdTipoDecisaoNavigation)
                    .WithMany(p => p.AtendimentoDecisao)
                    .HasForeignKey(d => d.IdTipoDecisao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoDecisao_TipoDecisao");
            });

            modelBuilder.Entity<AtendimentoDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdDocumento })
                    .HasName("Atendimento_Documento_PK");

                entity.ToTable("Atendimento_Documento");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

                entity.Property(e => e.IdStatusDocumento).HasColumnName("ID_STATUS_DOCUMENTO");

                entity.HasOne(d => d.IdDocumentoNavigation)
                    .WithMany(p => p.AtendimentoDocumento)
                    .HasForeignKey(d => d.IdDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Documento_Atendimento_Documento_FK1");

                entity.HasOne(d => d.IdStatusDocumentoNavigation)
                    .WithMany(p => p.AtendimentoDocumento)
                    .HasForeignKey(d => d.IdStatusDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Atendimento_Documento_FK1");
            });

            modelBuilder.Entity<AtendimentoDrg>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento)
                    .HasName("PK_Atendimento_DRG_Atendimento");

                entity.ToTable("Atendimento_DRG");

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.CdDrg).HasColumnName("CD_DRG");

                entity.Property(e => e.DtAltaPrevista)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA_PREVISTA");

                entity.Property(e => e.TxDescricaoDrg)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_DRG");

                entity.Property(e => e.TxPermanenciaPrevista)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_PERMANENCIA_PREVISTA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.AtendimentoDrg)
                    .HasForeignKey<AtendimentoDrg>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_DRG_Atendimento");
            });

            modelBuilder.Entity<AtendimentoExameAcidente>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdExameAcidente });

                entity.ToTable("Atendimento_ExameAcidente");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdExameAcidente).HasColumnName("ID_EXAME_ACIDENTE");

                entity.Property(e => e.InResposta).HasColumnName("IN_RESPOSTA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoExameAcidente)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_ExameAcidente_Atendimento");

                entity.HasOne(d => d.IdExameAcidenteNavigation)
                    .WithMany(p => p.AtendimentoExameAcidente)
                    .HasForeignKey(d => d.IdExameAcidente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_ExameAcidente_ExameAcidente");
            });

            modelBuilder.Entity<AtendimentoHistoricoMedico>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoHistoricoMedico);

                entity.Property(e => e.IdAtendimentoHistoricoMedico).HasColumnName("ID_ATENDIMENTO_HISTORICO_MEDICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdMedicoAnterior).HasColumnName("ID_MEDICO_ANTERIOR");

                entity.Property(e => e.IdMedicoAtual).HasColumnName("ID_MEDICO_ATUAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoHistoricoMedico)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoHistoricoMedico_Atendimento");

                entity.HasOne(d => d.IdMedicoAnteriorNavigation)
                    .WithMany(p => p.AtendimentoHistoricoMedicoIdMedicoAnteriorNavigation)
                    .HasForeignKey(d => d.IdMedicoAnterior)
                    .HasConstraintName("FK_AtendimentoHistoricoMedico_Pessoa1");

                entity.HasOne(d => d.IdMedicoAtualNavigation)
                    .WithMany(p => p.AtendimentoHistoricoMedicoIdMedicoAtualNavigation)
                    .HasForeignKey(d => d.IdMedicoAtual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoHistoricoMedico_Pessoa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AtendimentoHistoricoMedico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtendimentoHistoricoMedico_Usuario");
            });

            modelBuilder.Entity<AtendimentoIntegracaoSistemaLegado>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdAtendimentoSistemaLegado });

                entity.HasIndex(e => e.IdAtendimento, "IX_AtendimentoIntegracaoSistemaLegado_K1")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdAtendimentoSistemaLegado, "IX_AtendimentoIntegracaoSistemaLegado_K2_1")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdAtendimentoSistemaLegado).HasColumnName("ID_ATENDIMENTO_SISTEMA_LEGADO");
            });

            modelBuilder.Entity<AtendimentoLeito>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdLeito, e.DtOcupacao })
                    .HasName("Atendimento_Leito_PK");

                entity.ToTable("Atendimento_Leito");

                entity.HasIndex(e => e.DtDesocupacao, "IX_Atendimento_Leito_DT_DESOCUPACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.DtOcupacao, "IX_Atendimento_Leito_DT_OCUPACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdLeito, "IX_Atendimento_Leito_ID_LEITO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLeito, e.DtOcupacao, e.DtDesocupacao }, "IX_Atendimento_Leito_ID_LEITO_DT_OCUPACAO_DT_DESOCUPACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLeito, e.InLeitoAtual }, "IX_Atendimento_Leito_ID_LEITO_IN_LEITO_ATUAL")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InLeitoAtual, "IX_Atendimento_Leito_IN_LEITO_ATUAL")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.DtOcupacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCUPACAO");

                entity.Property(e => e.DtDesocupacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESOCUPACAO");

                entity.Property(e => e.IdMotivoMovimentacao).HasColumnName("ID_MOTIVO_MOVIMENTACAO");

                entity.Property(e => e.IdMotivoUpgrade).HasColumnName("ID_MOTIVO_UPGRADE");

                entity.Property(e => e.IdTipoLeitoCobrado).HasColumnName("ID_TIPO_LEITO_COBRADO");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("armazena o usuário que realizou a movimentação");

                entity.Property(e => e.InLeitoAtual).HasColumnName("IN_LEITO_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoLeito)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Leito_Atendimento");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.AtendimentoLeito)
                    .HasForeignKey(d => d.IdLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Leito_Atendimento_Leito_FK1");

                entity.HasOne(d => d.IdMotivoMovimentacaoNavigation)
                    .WithMany(p => p.AtendimentoLeitoIdMotivoMovimentacaoNavigation)
                    .HasForeignKey(d => d.IdMotivoMovimentacao)
                    .HasConstraintName("FK_Atendimento_Leito_TipoDiversos");

                entity.HasOne(d => d.IdMotivoUpgradeNavigation)
                    .WithMany(p => p.AtendimentoLeitoIdMotivoUpgradeNavigation)
                    .HasForeignKey(d => d.IdMotivoUpgrade)
                    .HasConstraintName("FK_Atendimento_Leito_TipoDiversos1");

                entity.HasOne(d => d.IdTipoLeitoCobradoNavigation)
                    .WithMany(p => p.AtendimentoLeitoIdTipoLeitoCobradoNavigation)
                    .HasForeignKey(d => d.IdTipoLeitoCobrado)
                    .HasConstraintName("TipoDiversos_Atendimento_Leito_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AtendimentoLeito)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Atendimento_Leito_Usuario");
            });

            modelBuilder.Entity<AtendimentoMedico>(entity =>
            {
                entity.HasKey(e => new { e.IdMedico, e.IdAtendimento, e.DtAtendimento })
                    .HasName("Atendimento_Medico_PK");

                entity.ToTable("Atendimento_Medico");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.IdDocumentoLote).HasColumnName("ID_DOCUMENTO_LOTE");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdMotivoAtendimento).HasColumnName("ID_MOTIVO_ATENDIMENTO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.NrGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrSenha)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_SENHA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoMedico)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Medico_Atendimento");

                entity.HasOne(d => d.IdDocumentoLoteNavigation)
                    .WithMany(p => p.AtendimentoMedico)
                    .HasForeignKey(d => d.IdDocumentoLote)
                    .HasConstraintName("FK_Atendimento_Medico_DocumentoLote");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.AtendimentoMedicoIdEspecialidadeNavigation)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_Atendimento_Medico_TipoDiversos");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.AtendimentoMedico)
                    .HasForeignKey(d => d.IdMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Medico_Pessoa");

                entity.HasOne(d => d.IdMotivoAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoMedicoIdMotivoAtendimentoNavigation)
                    .HasForeignKey(d => d.IdMotivoAtendimento)
                    .HasConstraintName("FK_Atendimento_Medico_TipoDiversos1");

                entity.HasOne(d => d.IdTipoAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoMedicoIdTipoAtendimentoNavigation)
                    .HasForeignKey(d => d.IdTipoAtendimento)
                    .HasConstraintName("FK_Atendimento_Medico_TipoDiversos2");
            });

            modelBuilder.Entity<AtendimentoMedicoCancelado>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoMedicoCancelado)
                    .HasName("Atendimento_MedicoCancelado_PK");

                entity.ToTable("Atendimento_MedicoCancelado");

                entity.Property(e => e.IdAtendimentoMedicoCancelado).HasColumnName("ID_ATENDIMENTO_MEDICO_CANCELADO");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdDocumentoLote).HasColumnName("ID_DOCUMENTO_LOTE");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdJustificativaCancelamentoPadrao).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO_PADRAO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdMotivoAtendimento).HasColumnName("ID_MOTIVO_ATENDIMENTO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrSenha)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_SENHA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxComplementoJustificativa)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO_JUSTIFICATIVA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoMedicoCancelado)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_Atendimento_MedicoCancelado_FK1");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.AtendimentoMedicoCanceladoIdEspecialidadeNavigation)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("TipoDiversos_Atendimento_MedicoCancelado_FK4");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.AtendimentoMedicoCancelado)
                    .HasForeignKey(d => d.IdMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Atendimento_MedicoCancelado_FK1");

                entity.HasOne(d => d.IdMotivoAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoMedicoCanceladoIdMotivoAtendimentoNavigation)
                    .HasForeignKey(d => d.IdMotivoAtendimento)
                    .HasConstraintName("TipoDiversos_Atendimento_MedicoCancelado_FK2");

                entity.HasOne(d => d.IdTipoAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoMedicoCanceladoIdTipoAtendimentoNavigation)
                    .HasForeignKey(d => d.IdTipoAtendimento)
                    .HasConstraintName("TipoDiversos_Atendimento_MedicoCancelado_FK3");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AtendimentoMedicoCancelado)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Atendimento_MedicoCancelado_FK1");
            });

            modelBuilder.Entity<AtendimentoObservacao>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdObservacaoTipo })
                    .HasName("Atendimento_Observacao_PK");

                entity.ToTable("Atendimento_Observacao");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdObservacaoTipo).HasColumnName("ID_OBSERVACAO_TIPO");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoObservacao)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_Atendimento_Observacao_FK1");

                entity.HasOne(d => d.IdObservacaoTipoNavigation)
                    .WithMany(p => p.AtendimentoObservacao)
                    .HasForeignKey(d => d.IdObservacaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Atendimento_Observacao_FK1");
            });

            modelBuilder.Entity<AtendimentoOsLegado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Atendimento_OS_Legado");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.InAtualizou).HasColumnName("IN_ATUALIZOU");

                entity.Property(e => e.NrOs).HasColumnName("NR_OS");

                entity.Property(e => e.NrRecurso).HasColumnName("NR_RECURSO");
            });

            modelBuilder.Entity<AtendimentoPlanoOperadora>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AtendimentoPlanoOperadora");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtFinalAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_ATENDIMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPlano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");
            });

            modelBuilder.Entity<AtendimentoProcedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdProcedimento })
                    .HasName("Atendimento_Procedimento_PK");

                entity.ToTable("Atendimento_Procedimento");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.IdCid).HasColumnName("ID_CID");

                entity.Property(e => e.IdSituacaoProcedimento).HasColumnName("ID_SITUACAO_PROCEDIMENTO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.QnProcedimentoAutorizado).HasColumnName("QN_PROCEDIMENTO_AUTORIZADO");

                entity.Property(e => e.QnProcedimentoSolicitado).HasColumnName("QN_PROCEDIMENTO_SOLICITADO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoProcedimento)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Procedimento_Atendimento");

                entity.HasOne(d => d.IdProcedimentoNavigation)
                    .WithMany(p => p.AtendimentoProcedimento)
                    .HasForeignKey(d => d.IdProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Atendimento_Procedimento_FK1");

                entity.HasOne(d => d.IdSituacaoProcedimentoNavigation)
                    .WithMany(p => p.AtendimentoProcedimento)
                    .HasForeignKey(d => d.IdSituacaoProcedimento)
                    .HasConstraintName("TipoDiversos_Atendimento_Procedimento_FK1");
            });

            modelBuilder.Entity<AtendimentoProcedimentoPrincipal>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento)
                    .HasName("PK_ATENDIMENTO_PROCEDIMENTO_PRINCIPAL");

                entity.ToTable("Atendimento_Procedimento_Principal");

                entity.HasIndex(e => e.IdAtendimento, "IX_Atendimento_Procedimento_Principal_ID_ATENDIMENTO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");
            });

            modelBuilder.Entity<AtendimentoProcedimentoPrincipalNova>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Atendimento_Procedimento_Principal_Nova");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");
            });

            modelBuilder.Entity<AtendimentoProcedimentoPrincipalProcessados>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Atendimento_Procedimento_Principal_Processados");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");
            });

            modelBuilder.Entity<AtendimentoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdServico, e.DtUso });

                entity.ToTable("Atendimento_Servico");

                entity.HasIndex(e => new { e.IdServico, e.DtUso }, "IX_Atendimento_Servico_ID_SERVICO_DT_USO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_USO");

                entity.Property(e => e.DtFimUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_USO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdUsuarioExecutor).HasColumnName("ID_USUARIO_EXECUTOR");

                entity.Property(e => e.InExecutado).HasColumnName("IN_EXECUTADO");

                entity.Property(e => e.QnRealizado).HasColumnName("QN_REALIZADO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoServico)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Servico_Atendimento");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.AtendimentoServico)
                    .HasForeignKey(d => d.IdLeito)
                    .HasConstraintName("FK_Atendimento_Servico_Leito");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.AtendimentoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Servico_Servico");

                entity.HasOne(d => d.IdUsuarioExecutorNavigation)
                    .WithMany(p => p.AtendimentoServico)
                    .HasForeignKey(d => d.IdUsuarioExecutor)
                    .HasConstraintName("FK_Atendimento_Servico_Usuario");
            });

            modelBuilder.Entity<AtendimentoSus>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento);

                entity.ToTable("Atendimento_SUS");

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATENDIMENTO")
                    .HasComment("Identificador do atendimento de um paciente");

                entity.Property(e => e.IdCidComplementar)
                    .HasColumnName("ID_CID_COMPLEMENTAR")
                    .HasComment("Identificador do CID (Classificação Internacional de Doenças) complementar do atendimento de um paciente");

                entity.Property(e => e.IdCidSecundaria)
                    .HasColumnName("ID_CID_SECUNDARIA")
                    .HasComment("Identificador do CID (Classificação Internacional de Doenças) secundario do atendimento de um paciente");

                entity.Property(e => e.NrCnesExecutante)
                    .HasColumnName("NR_CNES_EXECUTANTE")
                    .HasComment("Número do CNES (Código nacional de estabelecimentos de saúde) da unidade que frá o atendimento do paciente");

                entity.Property(e => e.NrCnesSolicitante)
                    .HasColumnName("NR_CNES_SOLICITANTE")
                    .HasComment("Número informativo do CNES (Código nacional de estabelicimento de saúde) da unidade solicitante");

                entity.Property(e => e.NrConsultaW)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONSULTA_W");

                entity.Property(e => e.NrLaudo)
                    .HasColumnName("NR_LAUDO")
                    .HasComment("Número do laudo gerado pelo sistema do gestor para avaliação do médico autorizador");

                entity.Property(e => e.NrPedido)
                    .HasColumnName("NR_PEDIDO")
                    .HasComment("Número do pedido de autorização de uma procedimento");

                entity.Property(e => e.TxUnidadeExecutante)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_UNIDADE_EXECUTANTE")
                    .HasComment("Nome ou identificador da unidade que fará o atendimento do paciente");

                entity.Property(e => e.TxUnidadeSolicitante)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_UNIDADE_SOLICITANTE")
                    .HasComment("Nome ou identificação da unidade que solicitou o atendimento do paciente");

                entity.HasOne(d => d.IdCidComplementarNavigation)
                    .WithMany(p => p.AtendimentoSusIdCidComplementarNavigation)
                    .HasForeignKey(d => d.IdCidComplementar)
                    .HasConstraintName("Atendimento_SUS_Cid_Complementar_FK1");

                entity.HasOne(d => d.IdCidSecundariaNavigation)
                    .WithMany(p => p.AtendimentoSusIdCidSecundariaNavigation)
                    .HasForeignKey(d => d.IdCidSecundaria)
                    .HasConstraintName("Atendimento_SUS_Cid_Secundaria_FK1");
            });

            modelBuilder.Entity<AtendimentoUsuario>(entity =>
            {
                entity.HasKey(e => e.IdAtendimentoUsuario);

                entity.ToTable("Atendimento_Usuario");

                entity.HasIndex(e => e.IdAtendimento, "IX_ID_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdAtendimentoUsuario).HasColumnName("ID_ATENDIMENTO_USUARIO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxAlteracao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ALTERACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.AtendimentoUsuario)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Usuario_Atendimento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.AtendimentoUsuario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Atendimento_Usuario_Usuario");
            });

            modelBuilder.Entity<AtendimentosTrackSale>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtEnvio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");
            });

            modelBuilder.Entity<Atividades>(entity =>
            {
                entity.HasKey(e => e.IdAtividade)
                    .HasName("Atividades_PK");

                entity.Property(e => e.IdAtividade).HasColumnName("ID_ATIVIDADE");

                entity.Property(e => e.IdAtividadeTipo).HasColumnName("ID_ATIVIDADE_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescAtividade)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_ATIVIDADE");

                entity.HasOne(d => d.IdAtividadeTipoNavigation)
                    .WithMany(p => p.Atividades)
                    .HasForeignKey(d => d.IdAtividadeTipo)
                    .HasConstraintName("TipoDiversos_Atividades_FK1");
            });

            modelBuilder.Entity<Atributo>(entity =>
            {
                entity.HasKey(e => e.IdAtributo)
                    .HasName("PessoaAtributo_PK");

                entity.HasIndex(e => e.IdAtributo, "IX_Atributo_K1_2")
                    .IsUnique()
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.NmAtributo, "IX_Atributo_K2_1")
                    .IsUnique()
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdTipoTabela, "IX_Atributo_TipoTabela")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdAtributoTipo).HasColumnName("ID_ATRIBUTO_TIPO");

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.NmAtributo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO");

                entity.Property(e => e.NmAtributoApresentacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO_APRESENTACAO");

                entity.Property(e => e.NmAtributoGravacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO_GRAVACAO");

                entity.Property(e => e.NrTamanho).HasColumnName("NR_TAMANHO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxCodHl7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COD_HL7");

                entity.Property(e => e.TxRotulo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_ROTULO");

                entity.Property(e => e.TxTabela)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_TABELA");

                entity.Property(e => e.TxValorMaximo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_MAXIMO");

                entity.Property(e => e.TxValorMinimo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_MINIMO");

                entity.HasOne(d => d.IdAtributoTipoNavigation)
                    .WithMany(p => p.AtributoIdAtributoTipoNavigation)
                    .HasForeignKey(d => d.IdAtributoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Atributo_FK1");

                entity.HasOne(d => d.IdTipoTabelaNavigation)
                    .WithMany(p => p.Atributo)
                    .HasForeignKey(d => d.IdTipoTabela)
                    .HasConstraintName("FK_Atributo_TipoTabela");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.AtributoIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_Atributo_UnidadeMedida");
            });

            modelBuilder.Entity<AtributoDependente>(entity =>
            {
                entity.HasKey(e => new { e.IdAtributo, e.IdAtributoDependente })
                    .HasName("AtributoDependente_PK");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdAtributoDependente).HasColumnName("ID_ATRIBUTO_DEPENDENTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.AtributoDependenteIdAtributoNavigation)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_AtributoDependente_FK1");

                entity.HasOne(d => d.IdAtributoDependenteNavigation)
                    .WithMany(p => p.AtributoDependenteIdAtributoDependenteNavigation)
                    .HasForeignKey(d => d.IdAtributoDependente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_AtributoDependente_FK2");
            });

            modelBuilder.Entity<AtributoFaixaValorPessoa>(entity =>
            {
                entity.HasKey(e => e.IdAtributo)
                    .HasName("AtributoFaixaValorPessoa_PK");

                entity.Property(e => e.IdAtributo)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdTipoOperacao).HasColumnName("ID_TIPO_OPERACAO");

                entity.Property(e => e.TxValorMaximo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_MAXIMO");

                entity.Property(e => e.TxValorMinimo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_MINIMO");

                entity.Property(e => e.VlMargemErro).HasColumnName("VL_MARGEM_ERRO");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithOne(p => p.AtributoFaixaValorPessoa)
                    .HasForeignKey<AtributoFaixaValorPessoa>(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_AtributoFaixaValorPessoa_FK1");

                entity.HasOne(d => d.IdTipoOperacaoNavigation)
                    .WithMany(p => p.AtributoFaixaValorPessoa)
                    .HasForeignKey(d => d.IdTipoOperacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_AtributoFaixaValorPessoa_FK1");
            });

            modelBuilder.Entity<AtributoTipoDiversosTipoTabela>(entity =>
            {
                entity.HasKey(e => new { e.IdAtributo, e.IdTipoTabela });

                entity.ToTable("AtributoTipoDiversos_TipoTabela");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.AtributoTipoDiversosTipoTabela)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtributoTipoDiversos_TipoTabela_AtributoTipoDiversos");

                entity.HasOne(d => d.IdTipoTabelaNavigation)
                    .WithMany(p => p.AtributoTipoDiversosTipoTabela)
                    .HasForeignKey(d => d.IdTipoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AtributoTipoDiversos_TipoTabela_TipoTabela");
            });

            modelBuilder.Entity<Audiencia>(entity =>
            {
                entity.HasKey(e => e.IdAudiencia)
                    .HasName("Audiencia_PK");

                entity.Property(e => e.IdAudiencia)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_AUDIENCIA");

                entity.Property(e => e.DtAudiencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUDIENCIA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.TxObs)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.Audiencia)
                    .HasForeignKey(d => d.IdConta)
                    .HasConstraintName("CobrancaJudicial_Audiencia_FK1");
            });

            modelBuilder.Entity<AuditoriaExterna>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.QnItem).HasColumnName("QN_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<AvaliacaoCompressao>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("avaliacao_compressao");

                entity.Property(e => e.IndexId).HasColumnName("Index_ID");

                entity.Property(e => e.IndexName)
                    .HasMaxLength(128)
                    .HasColumnName("Index_Name");

                entity.Property(e => e.IndexType)
                    .HasMaxLength(60)
                    .HasColumnName("Index_Type")
                    .HasComment("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.PercentScan)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("Percent_Scan");

                entity.Property(e => e.PercentUpdate)
                    .HasColumnType("numeric(38, 15)")
                    .HasColumnName("Percent_Update");

                entity.Property(e => e.Rowcnt).HasColumnName("rowcnt");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("Table_Name");
            });

            modelBuilder.Entity<Bacteria>(entity =>
            {
                entity.HasKey(e => e.IdBacteria)
                    .HasName("Bacteria_PK");

                entity.Property(e => e.IdBacteria).HasColumnName("ID_BACTERIA");

                entity.Property(e => e.NmBacteria)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_BACTERIA");
            });

            modelBuilder.Entity<Bairro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Bairro");

                entity.Property(e => e.Abr)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ABR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Brr).ValueGeneratedOnAdd();

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Banco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Banco");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdInscricaoEstadual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_ESTADUAL");

                entity.Property(e => e.CdInscricaoMunicipal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_MUNICIPAL");

                entity.Property(e => e.DtInicioAtividade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_INICIO_ATIVIDADE");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmBanco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_BANCO");

                entity.Property(e => e.NrBanco)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_BANCO");

                entity.Property(e => e.TxEmpresaTipo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_EMPRESA_TIPO");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL");
            });

            modelBuilder.Entity<BancoHsfinanceiro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Banco_HSFinanceiro");

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NomeBanco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BancoHsfinanceiroTeste>(entity =>
            {
                entity.HasKey(e => e.BancoId)
                    .HasName("BancoHSFinanceiro_Teste_PK");

                entity.ToTable("BancoHSFinanceiro_Teste");

                entity.Property(e => e.BancoId).ValueGeneratedNever();

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NomeBanco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BancoSangueLegado>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.DataHora, "NonClusteredIndex-20140122-095722")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.Cc)
                    .IsUnicode(false)
                    .HasColumnName("CC");

                entity.Property(e => e.Cgi)
                    .IsUnicode(false)
                    .HasColumnName("CGI");

                entity.Property(e => e.Conv).IsUnicode(false);

                entity.Property(e => e.DataHora).HasColumnType("datetime");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.Medico).IsUnicode(false);

                entity.Property(e => e.NroBolsa)
                    .IsUnicode(false)
                    .HasColumnName("Nro_Bolsa");

                entity.Property(e => e.Os)
                    .IsUnicode(false)
                    .HasColumnName("OS");

                entity.Property(e => e.Proced1)
                    .IsUnicode(false)
                    .HasColumnName("Proced_1");

                entity.Property(e => e.Proced2)
                    .IsUnicode(false)
                    .HasColumnName("Proced_2");

                entity.Property(e => e.SgUf)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF");
            });

            modelBuilder.Entity<BiAtdDmOperadora>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BI_ATD_DM_OPERADORA");

                entity.Property(e => e.GrupooperadorasComercial)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GRUPOOPERADORAS_COMERCIAL");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdOperadoraEstrategica).HasColumnName("ID_OPERADORA_ESTRATEGICA");

                entity.Property(e => e.NmGrupoOperadora)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NM_GRUPO_OPERADORA");

                entity.Property(e => e.Operadora)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("OPERADORA");
            });

            modelBuilder.Entity<BiCustosAjustefracionados>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalhe)
                    .HasName("PK__BI_CUSTO__846DFC2E07D7987E");

                entity.ToTable("BI_CUSTOS_AJUSTEFRACIONADOS");

                entity.Property(e => e.IdProdutoDetalhe)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.QnFracionamento).HasColumnName("QN_FRACIONAMENTO");
            });

            modelBuilder.Entity<BiProntuarioEletronicoHorm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BI_PRONTUARIO_ELETRONICO_HORM");

                entity.Property(e => e.Data)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("DATA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdAtendimentoRegistroitem).HasColumnName("ID_ATENDIMENTO_REGISTROITEM");

                entity.Property(e => e.IdAtendimentoRegistromodelo).HasColumnName("ID_ATENDIMENTO_REGISTROMODELO");

                entity.Property(e => e.IdItem).HasColumnName("ID_ITEM");

                entity.Property(e => e.IdPreenchido).HasColumnName("ID_PREENCHIDO");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmCampoGravacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMPO_GRAVACAO");

                entity.Property(e => e.NmRegistroEletronicoModelo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.TxItem)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ITEM");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<BiTbMargemLucro>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem })
                    .HasName("PK__BI_TB_MA__6B7BF16D0312E361");

                entity.ToTable("BI_TB_MARGEM_LUCRO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdAnoMes).HasColumnName("ID_ANO_MES");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdClassificacaoPai).HasColumnName("ID_CLASSIFICACAO_PAI");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdUnidadeAtendimento).HasColumnName("ID_UNIDADE_ATENDIMENTO");

                entity.Property(e => e.IdUnidadeOrganizacionalLancamento).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_LANCAMENTO");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.UnidadeConsumoConta)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_CONSUMO_CONTA");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");
            });

            modelBuilder.Entity<BiTbMargemLucro2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BI_TB_MARGEM_LUCRO2");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("date")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdClassificacaoPai).HasColumnName("ID_CLASSIFICACAO_PAI");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdPossuiNotaEntrada).HasColumnName("ID_POSSUI_NOTA_ENTRADA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdStatusConsignadoPendente).HasColumnName("ID_STATUS_CONSIGNADO_PENDENTE");

                entity.Property(e => e.IdTipoDispensacao).HasColumnName("ID_TIPO_DISPENSACAO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InExtra).HasColumnName("IN_EXTRA");

                entity.Property(e => e.NrCheckinEnfermagem)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.NrPrescricao)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRESCRICAO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.VlTotalConsumido)
                    .HasColumnType("decimal(30, 2)")
                    .HasColumnName("VL_TOTAL_CONSUMIDO");
            });

            modelBuilder.Entity<Biomedico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Biomedico");

                entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<BionexoEsquema>(entity =>
            {
                entity.HasKey(e => e.IdBionexoEsquema);

                entity.Property(e => e.IdBionexoEsquema).HasColumnName("ID_BIONEXO_ESQUEMA");

                entity.Property(e => e.IdTipoEsquema).HasColumnName("ID_TIPO_ESQUEMA");

                entity.Property(e => e.NmArquivo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.XmArquivo)
                    .HasColumnType("text")
                    .HasColumnName("XM_ARQUIVO");

                entity.HasOne(d => d.IdTipoEsquemaNavigation)
                    .WithMany(p => p.BionexoEsquema)
                    .HasForeignKey(d => d.IdTipoEsquema)
                    .HasConstraintName("FK_BionexoEsquema_TipoDiversos");
            });

            modelBuilder.Entity<BkInventario2270emaior>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BK_Inventario_2270EMaior");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdInventario).HasColumnName("ID_INVENTARIO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.QnAtualizadaEntrada).HasColumnName("QN_ATUALIZADA_ENTRADA");

                entity.Property(e => e.QnAtualizadaSaida).HasColumnName("QN_ATUALIZADA_SAIDA");

                entity.Property(e => e.QnEstoqueAtual).HasColumnName("QN_ESTOQUE_ATUAL");
            });

            modelBuilder.Entity<BkInventario2273>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BK_Inventario_2273");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdInventario).HasColumnName("ID_INVENTARIO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.QnAtualizadaEntrada).HasColumnName("QN_ATUALIZADA_ENTRADA");

                entity.Property(e => e.QnAtualizadaSaida).HasColumnName("QN_ATUALIZADA_SAIDA");

                entity.Property(e => e.QnEstoqueAtual).HasColumnName("QN_ESTOQUE_ATUAL");
            });

            modelBuilder.Entity<BkPrecomedioRecalculo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BK_PRECOMEDIO_RECALCULO");

                entity.Property(e => e.Data)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA");

                entity.Property(e => e.IdPrecoMedio).HasColumnName("ID_PRECO_MEDIO");

                entity.Property(e => e.VlPrecoMedioAnterior)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_PRECO_MEDIO_ANTERIOR");

                entity.Property(e => e.VlPrecoMedioRecalculado)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_PRECO_MEDIO_RECALCULADO");
            });

            modelBuilder.Entity<BkpCons99>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BKP_CONS_99");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.QnCompra).HasColumnName("QN_COMPRA");

                entity.Property(e => e.QnDevolucao).HasColumnName("QN_DEVOLUCAO");

                entity.Property(e => e.QnDevolucaoNotaFiscal).HasColumnName("QN_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.QnDispensacao).HasColumnName("QN_DISPENSACAO");

                entity.Property(e => e.QnEmprestimoEmprestar).HasColumnName("QN_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.QnEmprestimoEmprestarRecebimento).HasColumnName("QN_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.QnEmprestimoPegarEmprestado).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.QnEmprestimoPegarEmprestadoPagamento).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.QnEstoqueFechamento).HasColumnName("QN_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.QnInventarioEntrada).HasColumnName("QN_INVENTARIO_ENTRADA");

                entity.Property(e => e.QnInventarioSaida).HasColumnName("QN_INVENTARIO_SAIDA");

                entity.Property(e => e.QnPerda).HasColumnName("QN_PERDA");

                entity.Property(e => e.VlCompra)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_COMPRA");

                entity.Property(e => e.VlDevolucao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DEVOLUCAO");

                entity.Property(e => e.VlDevolucaoNotaFiscal)
                    .HasColumnType("decimal(18, 7)")
                    .HasColumnName("VL_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.VlDispensacao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DISPENSACAO");

                entity.Property(e => e.VlEmprestimoEmprestar)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.VlEmprestimoEmprestarRecebimento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.VlEmprestimoPegarEmprestado)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.VlEmprestimoPegarEmprestadoPagamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.VlEstoqueFechamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.VlInventarioEntrada)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_ENTRADA");

                entity.Property(e => e.VlInventarioSaida)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_SAIDA");

                entity.Property(e => e.VlPerda)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_PERDA");
            });

            modelBuilder.Entity<BkpEf124>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bkp_ef_124");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.QnAjusteEntrada).HasColumnName("QN_AJUSTE_ENTRADA");

                entity.Property(e => e.QnAjusteSaida).HasColumnName("QN_AJUSTE_SAIDA");

                entity.Property(e => e.QnCompra).HasColumnName("QN_COMPRA");

                entity.Property(e => e.QnDevolucao).HasColumnName("QN_DEVOLUCAO");

                entity.Property(e => e.QnDevolucaoNotaFiscal).HasColumnName("QN_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.QnDispensacao).HasColumnName("QN_DISPENSACAO");

                entity.Property(e => e.QnEmprestimoEmprestar).HasColumnName("QN_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.QnEmprestimoEmprestarRecebimento).HasColumnName("QN_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.QnEmprestimoPegarEmprestado).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.QnEmprestimoPegarEmprestadoPagamento).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.QnEstoqueConsignado).HasColumnName("QN_ESTOQUE_CONSIGNADO");

                entity.Property(e => e.QnEstoqueFechamento).HasColumnName("QN_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.QnInventarioEntrada).HasColumnName("QN_INVENTARIO_ENTRADA");

                entity.Property(e => e.QnInventarioSaida).HasColumnName("QN_INVENTARIO_SAIDA");

                entity.Property(e => e.QnPerda).HasColumnName("QN_PERDA");

                entity.Property(e => e.VlAjusteEntrada)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_AJUSTE_ENTRADA");

                entity.Property(e => e.VlAjusteSaida)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_AJUSTE_SAIDA");

                entity.Property(e => e.VlCompra)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_COMPRA");

                entity.Property(e => e.VlDevolucao)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_DEVOLUCAO");

                entity.Property(e => e.VlDevolucaoNotaFiscal)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.VlDispensacao)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_DISPENSACAO");

                entity.Property(e => e.VlEmprestimoEmprestar)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.VlEmprestimoEmprestarRecebimento)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.VlEmprestimoPegarEmprestado)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.VlEmprestimoPegarEmprestadoPagamento)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.VlEstoqueConsignado)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_ESTOQUE_CONSIGNADO");

                entity.Property(e => e.VlEstoqueFechamento)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.VlInventarioEntrada)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_INVENTARIO_ENTRADA");

                entity.Property(e => e.VlInventarioSaida)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_INVENTARIO_SAIDA");

                entity.Property(e => e.VlPerda)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_PERDA");
            });

            modelBuilder.Entity<BkpFechConsigJunh2017>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BKP_FECH_CONSIG_JUNH_2017");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.QnCompra).HasColumnName("QN_COMPRA");

                entity.Property(e => e.QnDevolucao).HasColumnName("QN_DEVOLUCAO");

                entity.Property(e => e.QnDevolucaoNotaFiscal).HasColumnName("QN_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.QnDispensacao).HasColumnName("QN_DISPENSACAO");

                entity.Property(e => e.QnEmprestimoEmprestar).HasColumnName("QN_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.QnEmprestimoEmprestarRecebimento).HasColumnName("QN_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.QnEmprestimoPegarEmprestado).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.QnEmprestimoPegarEmprestadoPagamento).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.QnEstoqueFechamento).HasColumnName("QN_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.QnInventarioEntrada).HasColumnName("QN_INVENTARIO_ENTRADA");

                entity.Property(e => e.QnInventarioSaida).HasColumnName("QN_INVENTARIO_SAIDA");

                entity.Property(e => e.QnPerda).HasColumnName("QN_PERDA");

                entity.Property(e => e.VlCompra)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_COMPRA");

                entity.Property(e => e.VlDevolucao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DEVOLUCAO");

                entity.Property(e => e.VlDevolucaoNotaFiscal)
                    .HasColumnType("decimal(18, 7)")
                    .HasColumnName("VL_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.VlDispensacao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DISPENSACAO");

                entity.Property(e => e.VlEmprestimoEmprestar)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.VlEmprestimoEmprestarRecebimento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.VlEmprestimoPegarEmprestado)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.VlEmprestimoPegarEmprestadoPagamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.VlEstoqueFechamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.VlInventarioEntrada)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_ENTRADA");

                entity.Property(e => e.VlInventarioSaida)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_SAIDA");

                entity.Property(e => e.VlPerda)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_PERDA");
            });

            modelBuilder.Entity<BkpFechJunh2017>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BKP_FECH_JUNH_2017");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.QnCompra).HasColumnName("QN_COMPRA");

                entity.Property(e => e.QnDevolucao).HasColumnName("QN_DEVOLUCAO");

                entity.Property(e => e.QnDevolucaoNotaFiscal).HasColumnName("QN_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.QnDispensacao).HasColumnName("QN_DISPENSACAO");

                entity.Property(e => e.QnEmprestimoEmprestar).HasColumnName("QN_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.QnEmprestimoEmprestarRecebimento).HasColumnName("QN_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.QnEmprestimoPegarEmprestado).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.QnEmprestimoPegarEmprestadoPagamento).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.QnEstoqueConsignado).HasColumnName("QN_ESTOQUE_CONSIGNADO");

                entity.Property(e => e.QnEstoqueFechamento).HasColumnName("QN_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.QnInventarioEntrada).HasColumnName("QN_INVENTARIO_ENTRADA");

                entity.Property(e => e.QnInventarioSaida).HasColumnName("QN_INVENTARIO_SAIDA");

                entity.Property(e => e.QnPerda).HasColumnName("QN_PERDA");

                entity.Property(e => e.VlCompra)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_COMPRA");

                entity.Property(e => e.VlDevolucao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DEVOLUCAO");

                entity.Property(e => e.VlDevolucaoNotaFiscal)
                    .HasColumnType("decimal(18, 7)")
                    .HasColumnName("VL_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.VlDispensacao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DISPENSACAO");

                entity.Property(e => e.VlEmprestimoEmprestar)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.VlEmprestimoEmprestarRecebimento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.VlEmprestimoPegarEmprestado)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.VlEmprestimoPegarEmprestadoPagamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.VlEstoqueConsignado)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_ESTOQUE_CONSIGNADO");

                entity.Property(e => e.VlEstoqueFechamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.VlInventarioEntrada)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_ENTRADA");

                entity.Property(e => e.VlInventarioSaida)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_SAIDA");

                entity.Property(e => e.VlPerda)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_PERDA");
            });

            modelBuilder.Entity<BkpPrecomedio03082017>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BKP_PRECOMEDIO_03082017");

                entity.Property(e => e.DtInventario)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INVENTARIO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdPrecoMedio)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRECO_MEDIO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InUltimoMes).HasColumnName("IN_ULTIMO_MES");

                entity.Property(e => e.PrVariacao)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("PR_VARIACAO");

                entity.Property(e => e.QnConsumoMensal).HasColumnName("QN_CONSUMO_MENSAL");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.VlPrecoMedio)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("VL_PRECO_MEDIO");
            });

            modelBuilder.Entity<Blocktable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("blocktable");

                entity.HasIndex(e => e.DatBloqueio, "IX_blocktable_dat_bloqueio")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.Hostname, "IX_blocktable_hostname")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Blockedsid).HasColumnName("blockedsid");

                entity.Property(e => e.Blockingsid).HasColumnName("blockingsid");

                entity.Property(e => e.DatBloqueio)
                    .HasColumnType("datetime")
                    .HasColumnName("dat_bloqueio");

                entity.Property(e => e.Eventinfo1)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("eventinfo1");

                entity.Property(e => e.Eventinfo2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("eventinfo2");

                entity.Property(e => e.HostBlocking)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("host_blocking")
                    .IsFixedLength(true);

                entity.Property(e => e.Hostname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("hostname");

                entity.Property(e => e.ProgramName1)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("program_name1");

                entity.Property(e => e.ProgramName2)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("program_name2");

                entity.Property(e => e.Waittime).HasColumnName("waittime");
            });

            modelBuilder.Entity<BoletoCobranca>(entity =>
            {
                entity.HasKey(e => e.IdBoleto);

                entity.Property(e => e.IdBoleto).HasColumnName("ID_BOLETO");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtDocumento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DOCUMENTO");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.InConciliado).HasColumnName("IN_CONCILIADO");

                entity.Property(e => e.Juros).HasColumnName("JUROS");

                entity.Property(e => e.TxCdBarra)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_CD_BARRA");

                entity.Property(e => e.TxCpf)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_CPF")
                    .IsFixedLength(true);

                entity.Property(e => e.TxNrDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_NR_DOCUMENTO")
                    .IsFixedLength(true);

                entity.Property(e => e.TxSacado)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_SACADO");

                entity.Property(e => e.VlBoleto).HasColumnName("VL_BOLETO");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.BoletoCobranca)
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BoletoCobranca_Pessoa");
            });

            modelBuilder.Entity<BookProdutividadeFaturamentoReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BOOK_PRODUTIVIDADE_FATURAMENTO_REPORT");

                entity.HasIndex(e => e.DtRegistro, "IX_DGA_DT_REGISTRO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipo).HasColumnName("ID_TIPO");

                entity.Property(e => e.IdTipoOperadoraSus).HasColumnName("ID_TIPO_OPERADORA_SUS");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxTipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO");

                entity.Property(e => e.VlFaturado).HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlParametroUnidadesArquivo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("VL_PARAMETRO_UNIDADES_ARQUIVO");

                entity.Property(e => e.VlTerceiros).HasColumnName("VL_TERCEIROS");
            });

            modelBuilder.Entity<Bordero>(entity =>
            {
                entity.HasKey(e => e.IdBordero);

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.DtPrevisaoPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO_PAGAMENTO");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdFavorecido).HasColumnName("ID_FAVORECIDO");

                entity.Property(e => e.IdFormaPagamento).HasColumnName("ID_FORMA_PAGAMENTO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioAutorizacao).HasColumnName("ID_USUARIO_AUTORIZACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAguardandoAutorizacao).HasColumnName("IN_AGUARDANDO_AUTORIZACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAutorizadoParaCaixa).HasColumnName("IN_AUTORIZADO_PARA_CAIXA");

                entity.Property(e => e.InAvaliacaoIniciada).HasColumnName("IN_AVALIACAO_INICIADA");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InCompensado).HasColumnName("IN_COMPENSADO");

                entity.Property(e => e.InSubstituirMeioDePagto).HasColumnName("IN_SUBSTITUIR_MEIO_DE_PAGTO");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.TxIdentificacao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICACAO");

                entity.Property(e => e.VlBordero)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BORDERO");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.Bordero)
                    .HasForeignKey(d => d.IdContaBancaria)
                    .HasConstraintName("FK_Bordero_Conta_ID_CONTA_BANCARIA");

                entity.HasOne(d => d.IdFavorecidoNavigation)
                    .WithMany(p => p.Bordero)
                    .HasForeignKey(d => d.IdFavorecido);

                entity.HasOne(d => d.IdFormaPagamentoNavigation)
                    .WithMany(p => p.Bordero)
                    .HasForeignKey(d => d.IdFormaPagamento);

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.BorderoIdUsuarioAlteracaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAlteracao);

                entity.HasOne(d => d.IdUsuarioAutorizacaoNavigation)
                    .WithMany(p => p.BorderoIdUsuarioAutorizacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAutorizacao);

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.BorderoIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<BorderoLog>(entity =>
            {
                entity.HasKey(e => e.IdBorderoLog);

                entity.ToTable("Bordero_Log");

                entity.Property(e => e.IdBorderoLog).HasColumnName("ID_BORDERO_LOG");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.DtPrevisaoPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO_PAGAMENTO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdFavorecido).HasColumnName("ID_FAVORECIDO");

                entity.Property(e => e.IdFormaPagamento).HasColumnName("ID_FORMA_PAGAMENTO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioAutorizacao).HasColumnName("ID_USUARIO_AUTORIZACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAguardandoAutorizacao).HasColumnName("IN_AGUARDANDO_AUTORIZACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAutorizadoParaCaixa).HasColumnName("IN_AUTORIZADO_PARA_CAIXA");

                entity.Property(e => e.InAvaliacaoIniciada).HasColumnName("IN_AVALIACAO_INICIADA");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InCompensado).HasColumnName("IN_COMPENSADO");

                entity.Property(e => e.InSubstituirMeioDePagto).HasColumnName("IN_SUBSTITUIR_MEIO_DE_PAGTO");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.TxIdentificacao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICACAO");

                entity.Property(e => e.VlBordero)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BORDERO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.BorderoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<BorderoParcelaContaPagarBaixaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdHistorico)
                    .HasName("Bordero_ParcelaContaPagar_Baixa_Historico_PK");

                entity.ToTable("Bordero_ParcelaContaPagar_Baixa_Historico");

                entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdTipoHistorico).HasColumnName("ID_TIPO_HISTORICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.VlBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BAIXA");

                entity.HasOne(d => d.IdBorderoNavigation)
                    .WithMany(p => p.BorderoParcelaContaPagarBaixaHistorico)
                    .HasForeignKey(d => d.IdBordero)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoHistoricoNavigation)
                    .WithMany(p => p.BorderoParcelaContaPagarBaixaHistorico)
                    .HasForeignKey(d => d.IdTipoHistorico)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.BorderoParcelaContaPagarBaixaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaPagar)
                    .WithMany(p => p.BorderoParcelaContaPagarBaixaHistorico)
                    .HasForeignKey(d => new { d.IdContaPagar, d.NrParcela })
                    .HasConstraintName("FK_Bordero_ParcelaContaPagar_Baixa_Historico_ParcelaContaPagar_ID_CP_NR_PARC");
            });

            modelBuilder.Entity<BpaSpdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BPA_SPDATA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("date")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.IdControleSpdata).HasColumnName("ID_CONTROLE_SPDATA");

                entity.Property(e => e.IdSpdata).HasColumnName("ID_SPDATA");

                entity.Property(e => e.NmPaciente).HasColumnName("NM_PACIENTE");

                entity.Property(e => e.VlConta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CONTA");
            });

            modelBuilder.Entity<BrasMatHmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BRAS_MAT_HMT");

                entity.Property(e => e.CdApresentacao)
                    .IsUnicode(false)
                    .HasColumnName("CD_APRESENTACAO");

                entity.Property(e => e.CdBarras).HasColumnName("CD_BARRAS");

                entity.Property(e => e.CdFabricante)
                    .IsUnicode(false)
                    .HasColumnName("CD_FABRICANTE");

                entity.Property(e => e.CdPrecoTipo)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRECO_TIPO");

                entity.Property(e => e.CdProduto)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRODUTO");

                entity.Property(e => e.CdTiss).HasColumnName("CD_TISS");

                entity.Property(e => e.CdTuss)
                    .IsUnicode(false)
                    .HasColumnName("CD_TUSS");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.InProdutoLista)
                    .IsUnicode(false)
                    .HasColumnName("IN_PRODUTO_LISTA");

                entity.Property(e => e.NmApresentacao)
                    .IsUnicode(false)
                    .HasColumnName("NM_APRESENTACAO");

                entity.Property(e => e.NmFabricante)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmProduto)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrEdicaoAlteracao)
                    .IsUnicode(false)
                    .HasColumnName("NR_EDICAO_ALTERACAO");

                entity.Property(e => e.PrIpi)
                    .IsUnicode(false)
                    .HasColumnName("PR_IPI");

                entity.Property(e => e.QnFracionamento).HasColumnName("QN_FRACIONAMENTO");

                entity.Property(e => e.VlProduto)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("VL_PRODUTO");

                entity.Property(e => e.VlProdutoFracionado).HasColumnName("VL_PRODUTO_FRACIONADO");
            });

            modelBuilder.Entity<BrasindiceTuss>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Brasindice_TUSS");

                entity.Property(e => e.NumTiss)
                    .HasMaxLength(255)
                    .HasColumnName("NUM_TISS");

                entity.Property(e => e.Tuss)
                    .HasMaxLength(255)
                    .HasColumnName("TUSS");
            });

            modelBuilder.Entity<BularioAnvisa>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdBularioAnvisa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_BULARIO_ANVISA");

                entity.Property(e => e.InSeparado).HasColumnName("IN_SEPARADO");

                entity.Property(e => e.NmCategoriaRegulatoriaMedicamento)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_CATEGORIA_REGULATORIA_MEDICAMENTO");

                entity.Property(e => e.NmMedicamentoEEmpresa)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICAMENTO_E_EMPRESA");

                entity.Property(e => e.NmTipoBula)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_BULA");

                entity.Property(e => e.TxFormaFarmaceuticaEConcentracao)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMA_FARMACEUTICA_E_CONCENTRACAO");

                entity.Property(e => e.TxPrincipioAtivo)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_PRINCIPIO_ATIVO");
            });

            modelBuilder.Entity<Caixa>(entity =>
            {
                entity.HasKey(e => e.IdCaixa);

                entity.Property(e => e.IdCaixa).HasColumnName("ID_CAIXA");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.InAberto).HasColumnName("IN_ABERTO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmCaixa)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAIXA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.Caixa)
                    .HasForeignKey(d => d.IdContaBancaria)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.Caixa)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<CaixaMovimento>(entity =>
            {
                entity.HasKey(e => e.IdCaixamovimento)
                    .HasName("CaixaMovimento_PK");

                entity.Property(e => e.IdCaixamovimento).HasColumnName("ID_CAIXAMOVIMENTO");

                entity.Property(e => e.DtAbertura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ABERTURA");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtMovimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MOVIMENTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCaixa).HasColumnName("ID_CAIXA");

                entity.Property(e => e.IdUsuarioAbertura).HasColumnName("ID_USUARIO_ABERTURA");

                entity.Property(e => e.IdUsuarioFechamento).HasColumnName("ID_USUARIO_FECHAMENTO");

                entity.Property(e => e.InMovimentoAberto).HasColumnName("IN_MOVIMENTO_ABERTO");

                entity.Property(e => e.InPermissaoReabertura).HasColumnName("IN_PERMISSAO_REABERTURA");

                entity.Property(e => e.InPermissaoSelecao).HasColumnName("IN_PERMISSAO_SELECAO");

                entity.Property(e => e.VlProvisaoAbertura)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PROVISAO_ABERTURA");

                entity.Property(e => e.VlTotalMovimento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_MOVIMENTO");

                entity.HasOne(d => d.IdCaixaNavigation)
                    .WithMany(p => p.CaixaMovimento)
                    .HasForeignKey(d => d.IdCaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioAberturaNavigation)
                    .WithMany(p => p.CaixaMovimentoIdUsuarioAberturaNavigation)
                    .HasForeignKey(d => d.IdUsuarioAbertura)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioFechamentoNavigation)
                    .WithMany(p => p.CaixaMovimentoIdUsuarioFechamentoNavigation)
                    .HasForeignKey(d => d.IdUsuarioFechamento);
            });

            modelBuilder.Entity<CaixaUsuario>(entity =>
            {
                entity.HasKey(e => e.IdCaixaUsuario)
                    .HasName("PK_Caixa_Usuario");

                entity.ToTable("CAIXA_USUARIO");

                entity.Property(e => e.IdCaixaUsuario).HasColumnName("ID_CAIXA_USUARIO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCaixa).HasColumnName("ID_CAIXA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdCaixaNavigation)
                    .WithMany(p => p.CaixaUsuario)
                    .HasForeignKey(d => d.IdCaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Caixa_Usuario_Caixa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CaixaUsuario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Caixa_Usuario_Usuario");
            });

            modelBuilder.Entity<CaraterSolicitacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CaraterSolicitacao");

                entity.Property(e => e.IdTipoDiversos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.TxDescTipo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TIPO");
            });

            modelBuilder.Entity<Carencia>(entity =>
            {
                entity.HasKey(e => e.IdCarencia)
                    .HasName("Carencia_PK");

                entity.Property(e => e.IdCarencia).HasColumnName("ID_CARENCIA");

                entity.Property(e => e.IdCarenciaTipo).HasColumnName("ID_CARENCIA_TIPO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdUnidadeTempo).HasColumnName("ID_UNIDADE_TEMPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NrPeriodo).HasColumnName("NR_PERIODO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCarenciaTipoNavigation)
                    .WithMany(p => p.CarenciaIdCarenciaTipoNavigation)
                    .HasForeignKey(d => d.IdCarenciaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Carencia_FK2");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.Carencia)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Carencia_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.Carencia)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_Carencia_FK1");

                entity.HasOne(d => d.IdUnidadeTempoNavigation)
                    .WithMany(p => p.CarenciaIdUnidadeTempoNavigation)
                    .HasForeignKey(d => d.IdUnidadeTempo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Carencia_FK1");
            });

            modelBuilder.Entity<CarenciaHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdCarencia, e.DtVigencia })
                    .HasName("Carencia_Historico_PK");

                entity.ToTable("Carencia_Historico");

                entity.Property(e => e.IdCarencia).HasColumnName("ID_CARENCIA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUnidadeTempo).HasColumnName("ID_UNIDADE_TEMPO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NrPeriodo).HasColumnName("NR_PERIODO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCarenciaNavigation)
                    .WithMany(p => p.CarenciaHistorico)
                    .HasForeignKey(d => d.IdCarencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Carencia_Carencia_Historico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CarenciaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_Carencia_historico_FK1");
            });

            modelBuilder.Entity<CarenciaPaciente>(entity =>
            {
                entity.HasKey(e => new { e.IdPaciente, e.IdCarenciaTipo });

                entity.ToTable("Carencia_Paciente");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdCarenciaTipo).HasColumnName("ID_CARENCIA_TIPO");

                entity.Property(e => e.DtVencCarencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENC_CARENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCarenciaTipoNavigation)
                    .WithMany(p => p.CarenciaPaciente)
                    .HasForeignKey(d => d.IdCarenciaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Carencia_Paciente_TipoDiversos");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.CarenciaPaciente)
                    .HasForeignKey(d => d.IdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Carencia_Paciente_Pessoa");
            });

            modelBuilder.Entity<CargaAtualizacao>(entity =>
            {
                entity.HasKey(e => e.IdCargaAtualizacao)
                    .HasName("CargaAtualizacao_PK");

                entity.Property(e => e.IdCargaAtualizacao).HasColumnName("ID_CARGA_ATUALIZACAO");

                entity.Property(e => e.DtCargaAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA_ATUALIZACAO");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxVersaoCarga)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_VERSAO_CARGA");

                entity.HasOne(d => d.IdOrigemCadastroTipoNavigation)
                    .WithMany(p => p.CargaAtualizacao)
                    .HasForeignKey(d => d.IdOrigemCadastroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_CargaAtualizacao_FK1");
            });

            modelBuilder.Entity<CargaHistoricoCepSus>(entity =>
            {
                entity.HasKey(e => e.IdCepCargaHistorico)
                    .HasName("PK__CargaHis__016CB0064FD95F6B");

                entity.Property(e => e.IdCepCargaHistorico).HasColumnName("ID_CEP_CARGA_HISTORICO");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrVersao)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_VERSAO");

                entity.Property(e => e.QnRegistroImportado).HasColumnName("QN_REGISTRO_IMPORTADO");

                entity.Property(e => e.TxNomeArquivo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_ARQUIVO");
            });

            modelBuilder.Entity<CargaHonorarioApartamentoAsaspe2009>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.VlHonorarioApartamento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_HONORARIO_APARTAMENTO");
            });

            modelBuilder.Entity<CargaHonorarioApartamentoTussAsaspe>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.VlHonorarioApartamento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_HONORARIO_APARTAMENTO");
            });

            modelBuilder.Entity<CargaMedicosSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CargaMedicosSus$");

                entity.Property(e => e.Cpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CPF");

                entity.Property(e => e.DsConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DS_CONSELHO");

                entity.Property(e => e.NmProfSaude)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROF_SAUDE");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONSELHO");

                entity.Property(e => e.UfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CONSELHO");
            });

            modelBuilder.Entity<CargaMedio>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalhe);

                entity.Property(e => e.IdProdutoDetalhe)
                    .ValueGeneratedNever()
                    .HasColumnName("id_produto_detalhe");

                entity.Property(e => e.Qtd).HasColumnName("qtd");

                entity.Property(e => e.VlTotal)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("vl_total");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("vl_unitario");
            });

            modelBuilder.Entity<CargaProcedimentoMedico>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .HasMaxLength(50)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.ExigeAutorizacao)
                    .HasMaxLength(50)
                    .HasColumnName("Exige_Autorizacao");

                entity.Property(e => e.ExigeViaAcesso)
                    .HasMaxLength(50)
                    .HasColumnName("Exige_Via_Acesso");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NrPorteAnestesico).HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte).HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares).HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme).HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia).HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.QtdAuxiliaresAnest).HasColumnName("Qtd_Auxiliares_Anest");

                entity.Property(e => e.RolAns)
                    .HasMaxLength(50)
                    .HasColumnName("Rol_ANS");

                entity.Property(e => e.SusCodCompexidade)
                    .HasMaxLength(50)
                    .HasColumnName("SUS_COD_COMPEXIDADE");

                entity.Property(e => e.SusCodSubtipoFinanciamento)
                    .HasMaxLength(50)
                    .HasColumnName("SUS_COD_SUBTIPO_FINANCIAMENTO");

                entity.Property(e => e.SusCodTipoFinanciamento)
                    .HasMaxLength(50)
                    .HasColumnName("SUS_COD_TIPO_FINANCIAMENTO");

                entity.Property(e => e.SusIdadeMaxima).HasColumnName("SUS_IDADE_MAXIMA");

                entity.Property(e => e.SusIdadeMinima).HasColumnName("SUS_IDADE_MINIMA");

                entity.Property(e => e.SusInstrumentoRegistro)
                    .HasMaxLength(50)
                    .HasColumnName("SUS_INSTRUMENTO_REGISTRO");

                entity.Property(e => e.SusMediaPermanencia).HasColumnName("SUS_MEDIA_PERMANENCIA");

                entity.Property(e => e.SusQtMaximaExecucao).HasColumnName("SUS_QT_MAXIMA_EXECUCAO");

                entity.Property(e => e.SusSexo)
                    .HasMaxLength(50)
                    .HasColumnName("SUS_SEXO");

                entity.Property(e => e.SusVlServicoAmbulatorial).HasColumnName("SUS_VL_SERVICO_AMBULATORIAL");

                entity.Property(e => e.SusVlServicoHospitalar).HasColumnName("SUS_VL_SERVICO_HOSPITALAR");

                entity.Property(e => e.SusVlServicoProfissional).HasColumnName("SUS_VL_SERVICO_PROFISSIONAL");

                entity.Property(e => e.TxDescricao).HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxMoeda)
                    .HasMaxLength(50)
                    .HasColumnName("TX_MOEDA");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(50)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(50)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios).HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<CargaProdutodetalheinventario>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalhe);

                entity.Property(e => e.IdProdutoDetalhe)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PRODUTO_DETALHE");
            });

            modelBuilder.Entity<CargaServicoCaracteristica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Carga_ServicoCaracteristica");

                entity.Property(e => e.CdServicoNaoAcomodacaoFinal)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO_NAO_ACOMODACAO_FINAL");

                entity.Property(e => e.CdServicoNaoAcomodacaoInicio)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO_NAO_ACOMODACAO_INICIO");

                entity.Property(e => e.CdServicoNaoHorarioFinal)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO_NAO_HORARIO_FINAL");

                entity.Property(e => e.CdServicoNaoHorarioInicial)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO_NAO_HORARIO_INICIAL");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");
            });

            modelBuilder.Entity<CargaTaxaDiaria>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.CdServicoAgrupador, e.CdReferencia, e.CdServico });

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.CdServicoAgrupador).HasColumnName("CD_SERVICO_AGRUPADOR");

                entity.Property(e => e.CdReferencia).HasColumnName("CD_REFERENCIA");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.InGas).HasColumnName("IN_GAS");

                entity.Property(e => e.NrCadencia).HasColumnName("NR_CADENCIA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.NrPorteAnestesico).HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.QnMinimaCobrar).HasColumnName("QN_MINIMA_COBRAR");

                entity.Property(e => e.QnUnidadeReferencia).HasColumnName("QN_UNIDADE_REFERENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxUnidadeMedida)
                    .HasMaxLength(255)
                    .HasColumnName("TX_UNIDADE_MEDIDA");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");
            });

            modelBuilder.Entity<CargaTaxas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CARGA_TAXAS");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InReferencia).HasColumnName("IN_REFERENCIA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<CartaRecurso>(entity =>
            {
                entity.HasKey(e => e.IdCartarecurso)
                    .HasName("CartaRecurso_PK");

                entity.HasIndex(e => new { e.IdOperadora, e.IdMapa }, "IX_CartaRecurso_ID_OPERADORA_ID_MAPA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdOperadora, e.InReenvio }, "IX_CartaRecurso_ID_OPERADORA_IN_REENVIO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.DtVencimentoRecurso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO_RECURSO");

                entity.Property(e => e.IdMapa).HasColumnName("ID_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InFechada).HasColumnName("IN_FECHADA");

                entity.Property(e => e.InReenvio).HasColumnName("IN_REENVIO");

                entity.Property(e => e.NrGuiaRecurso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA_RECURSO");

                entity.Property(e => e.NrProtocolo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_PROTOCOLO");

                entity.Property(e => e.TxAssinatura)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_ASSINATURA");

                entity.Property(e => e.TxCabecalho)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_CABECALHO");

                entity.Property(e => e.TxContato)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONTATO");

                entity.Property(e => e.TxCorpo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CORPO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.CartaRecurso)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_CartaRecurso_Pessoa");
            });

            modelBuilder.Entity<CartaRecursoHistoricoFechamento>(entity =>
            {
                entity.HasKey(e => e.IdCartarecursoHistoricofechamento);

                entity.Property(e => e.IdCartarecursoHistoricofechamento).HasColumnName("ID_CARTARECURSO_HISTORICOFECHAMENTO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InFechada).HasColumnName("IN_FECHADA");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.CartaRecursoHistoricoFechamento)
                    .HasForeignKey(d => d.IdCartarecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CartaRecurso_CartaRecursoHistoricoFechamento_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CartaRecursoHistoricoFechamentoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_CartaRecursoHistoricoFechamento_FK1");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.CartaRecursoHistoricoFechamentoIdUsuarioOperacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_CartaRecursoHistoricoFechamento_FK2");
            });

            modelBuilder.Entity<CartaRecursoMovimentacaoContaParcela>(entity =>
            {
                entity.HasKey(e => e.IdCartarecursoMovimentacaocontaparcela);

                entity.ToTable("CartaRecurso_MovimentacaoContaParcela");

                entity.Property(e => e.IdCartarecursoMovimentacaocontaparcela).HasColumnName("ID_CARTARECURSO_MOVIMENTACAOCONTAPARCELA");

                entity.Property(e => e.DtInsercao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INSERCAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMovimentacaocontaparcela).HasColumnName("ID_MOVIMENTACAOCONTAPARCELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.VlRecursado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RECURSADO");
            });

            modelBuilder.Entity<CartaRecursoParcelaContaReceber>(entity =>
            {
                entity.HasKey(e => e.IdCartarecursoParcelacontareceber);

                entity.ToTable("CartaRecurso_ParcelaContaReceber");

                entity.Property(e => e.IdCartarecursoParcelacontareceber).HasColumnName("ID_CARTARECURSO_PARCELACONTARECEBER");

                entity.Property(e => e.DtInsercao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INSERCAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.VlRecursado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RECURSADO");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.CartaRecursoParcelaContaReceber)
                    .HasForeignKey(d => d.IdCartarecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdFaturamentobaixagrupoNavigation)
                    .WithMany(p => p.CartaRecursoParcelaContaReceber)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupo)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithMany(p => p.CartaRecursoParcelaContaReceber)
                    .HasForeignKey(d => d.IdLote)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CartaRecursoParcelaContaReceber)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaReceber)
                    .WithMany(p => p.CartaRecursoParcelaContaReceber)
                    .HasForeignKey(d => new { d.IdContaReceber, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartaRecurso_ParcelaContaReceber_ParcelaContaReceber_ID_CR_NR_PARC");
            });

            modelBuilder.Entity<CartaRecursoRecurso>(entity =>
            {
                entity.HasKey(e => new { e.IdFechamentoItem, e.IdConta, e.IdCartarecurso })
                    .HasName("CartaRecurso_Recurso_PK");

                entity.ToTable("CartaRecurso_Recurso");

                entity.HasIndex(e => e.IdCartarecurso, "IX_CartaRecurso_Recurso_ID_CARTARECURSO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdConta, "IX_CartaRecurso_Recurso_ID_CONTA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.CartaRecursoRecurso)
                    .HasForeignKey(d => d.IdCartarecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CartaRecurso_CartaRecurso_Recurso_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CartaRecursoRecurso)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_CartaRecurso_Recurso_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.CartaRecursoRecurso)
                    .HasForeignKey(d => new { d.IdFechamentoItem, d.IdConta })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Recurso_Glosa_CartaRecurso_Recurso_FK1");
            });

            modelBuilder.Entity<CartaRecursoRecursoReenvio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CartaRecurso_Recurso_Reenvio");

                entity.Property(e => e.IdCartarecursoReenvio).HasColumnName("ID_CARTARECURSO_REENVIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            });

            modelBuilder.Entity<CartaRecursoRecusoGlosaGenerica>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdCartarecurso });

                entity.ToTable("CartaRecurso_RecusoGlosaGenerica");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.CartaRecursoRecusoGlosaGenerica)
                    .HasForeignKey(d => d.IdCartarecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartaRecurso_RecusoGlosaGenerica_CartaRecurso");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.CartaRecursoRecusoGlosaGenerica)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartaRecurso_RecusoGlosaGenerica_Recurso_Glosa_Generica");
            });

            modelBuilder.Entity<CartaRecursoRecusoGlosaGenericaReenvio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CartaRecurso_RecusoGlosaGenerica_reenvio");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            });

            modelBuilder.Entity<Cassi>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdAtendimento)
                    .HasMaxLength(255)
                    .HasColumnName("Id_atendimento");

                entity.Property(e => e.NrCartao)
                    .HasMaxLength(255)
                    .HasColumnName("NR_cartao");
            });

            modelBuilder.Entity<CategoriaDespesa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CategoriaDespesa");

                entity.Property(e => e.IdCategoriaDespesa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_CATEGORIA_DESPESA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmCategoriaDespesa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CATEGORIA_DESPESA");
            });

            modelBuilder.Entity<CategoriaDespesaUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.DtLancamento, e.IdCategoriaDespesa, e.IdUnidadeOrganizacional })
                    .HasName("CategoriaDespesa_UnidadeOrganizacional_PK");

                entity.ToTable("CategoriaDespesa_UnidadeOrganizacional");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdCategoriaDespesa).HasColumnName("ID_CATEGORIA_DESPESA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.NrPercentualDesconto).HasColumnName("NR_PERCENTUAL_DESCONTO");

                entity.HasOne(d => d.IdCategoriaDespesaNavigation)
                    .WithMany(p => p.CategoriaDespesaUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdCategoriaDespesa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CategoriaDespesa_CategoriaDespesa_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.CategoriaDespesaUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_CategoriaDespesa_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.CategoriaDespesaUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_CategoriaDespesa_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<CensoDiario>(entity =>
            {
                entity.HasKey(e => e.IdCenso);

                entity.Property(e => e.IdCenso).HasColumnName("ID_CENSO");

                entity.Property(e => e.DtAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtCenso)
                    .HasColumnType("date")
                    .HasColumnName("DT_CENSO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.DtOcupacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCUPACAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidadeMedica).HasColumnName("ID_ESPECIALIDADE_MEDICA");

                entity.Property(e => e.IdNumeroProntuario).HasColumnName("ID_NUMERO_PRONTUARIO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoMovimentacao).HasColumnName("ID_TIPO_MOVIMENTACAO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InPacienteAlta).HasColumnName("IN_PACIENTE_ALTA");

                entity.Property(e => e.InPacienteDiaAnterior).HasColumnName("IN_PACIENTE_DIA_ANTERIOR");

                entity.Property(e => e.InPacienteEntradaMovimentacao).HasColumnName("IN_PACIENTE_ENTRADA_MOVIMENTACAO");

                entity.Property(e => e.InPacienteInternacaoDireta).HasColumnName("IN_PACIENTE_INTERNACAO_DIRETA");

                entity.Property(e => e.InPacienteObito).HasColumnName("IN_PACIENTE_OBITO");

                entity.Property(e => e.InPacienteSaidaMovimentacao).HasColumnName("IN_PACIENTE_SAIDA_MOVIMENTACAO");

                entity.Property(e => e.NmOperadora)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPessoa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NmTipoAlta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_ALTA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrLeito)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_LEITO");

                entity.Property(e => e.NrLeitoOrdenacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_LEITO_ORDENACAO");

                entity.Property(e => e.QnLeitosDisponiveis).HasColumnName("QN_LEITOS_DISPONIVEIS");

                entity.Property(e => e.TxAbrvTipoMovimentacao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABRV_TIPO_MOVIMENTACAO");

                entity.Property(e => e.TxEspecialidadeMedica)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_ESPECIALIDADE_MEDICA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxTipoLeito)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_LEITO");

                entity.Property(e => e.TxTipoMovimentacao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_MOVIMENTACAO");
            });

            modelBuilder.Entity<CensoDiarioAjusteHmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CensoDiarioAjuste_HMT");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("DATE");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .HasMaxLength(255)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");
            });

            modelBuilder.Entity<CensoDiarioNovo>(entity =>
            {
                entity.HasKey(e => e.IdCenso);

                entity.ToTable("CensoDiario_Novo");

                entity.HasIndex(e => new { e.DtCenso, e.IdTipoMovimentacao, e.IdUnidadeOrganizacional, e.NmUnidadeOrganizacional, e.NmOperadora, e.TxEspecialidadeMedica }, "IX_CENSODIARIO_NOVO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdCenso).HasColumnName("ID_CENSO");

                entity.Property(e => e.DtAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtCenso)
                    .HasColumnType("date")
                    .HasColumnName("DT_CENSO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.DtOcupacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCUPACAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidadeMedica).HasColumnName("ID_ESPECIALIDADE_MEDICA");

                entity.Property(e => e.IdNumeroProntuario).HasColumnName("ID_NUMERO_PRONTUARIO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoMovimentacao).HasColumnName("ID_TIPO_MOVIMENTACAO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InPacienteAlta).HasColumnName("IN_PACIENTE_ALTA");

                entity.Property(e => e.InPacienteDiaAnterior).HasColumnName("IN_PACIENTE_DIA_ANTERIOR");

                entity.Property(e => e.InPacienteEntradaMovimentacao).HasColumnName("IN_PACIENTE_ENTRADA_MOVIMENTACAO");

                entity.Property(e => e.InPacienteInternacaoDireta).HasColumnName("IN_PACIENTE_INTERNACAO_DIRETA");

                entity.Property(e => e.InPacienteInternadoSemUnidadeCenso).HasColumnName("IN_PACIENTE_INTERNADO_SEM_UNIDADE_CENSO");

                entity.Property(e => e.InPacienteObito).HasColumnName("IN_PACIENTE_OBITO");

                entity.Property(e => e.InPacienteSaidaMovimentacao).HasColumnName("IN_PACIENTE_SAIDA_MOVIMENTACAO");

                entity.Property(e => e.InPrimeiraOcupacaoNaoCenso).HasColumnName("IN_PRIMEIRA_OCUPACAO_NAO_CENSO");

                entity.Property(e => e.NmOperadora)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPessoa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NmTipoAlta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_ALTA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrLeito)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_LEITO");

                entity.Property(e => e.NrLeitoOrdenacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_LEITO_ORDENACAO");

                entity.Property(e => e.QnLeitosDisponiveis).HasColumnName("QN_LEITOS_DISPONIVEIS");

                entity.Property(e => e.TxAbrvTipoMovimentacao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABRV_TIPO_MOVIMENTACAO");

                entity.Property(e => e.TxEspecialidadeMedica)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_ESPECIALIDADE_MEDICA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxTipoLeito)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_LEITO");

                entity.Property(e => e.TxTipoMovimentacao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_MOVIMENTACAO");
            });

            modelBuilder.Entity<CensoSinteticoIpmmi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CensoSintetico_IPMMI");

                entity.Property(e => e.AbrvTipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("abrv_tipo");

                entity.Property(e => e.Dia)
                    .HasColumnType("date")
                    .HasColumnName("dia");

                entity.Property(e => e.DtAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("dt_nascimento");

                entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");

                entity.Property(e => e.IdContador).HasColumnName("id_contador");

                entity.Property(e => e.IdNumeroProntuario).HasColumnName("ID_NUMERO_PRONTUARIO");

                entity.Property(e => e.IdTipo).HasColumnName("id_tipo");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.LeitoOrdem).HasColumnName("leito_ordem");

                entity.Property(e => e.LeitosDisponiveis).HasColumnName("leitos_disponiveis");

                entity.Property(e => e.NmEspecialidade)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_especialidade");

                entity.Property(e => e.NmOperadora)
                    .HasMaxLength(102)
                    .IsUnicode(false)
                    .HasColumnName("nm_operadora");

                entity.Property(e => e.NmPessoa)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NmTipo)
                    .HasMaxLength(41)
                    .IsUnicode(false)
                    .HasColumnName("nm_tipo");

                entity.Property(e => e.NmTipoAlta)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_ALTA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrLeito)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("NR_LEITO");

                entity.Property(e => e.Obs)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("obs");

                entity.Property(e => e.TipoLeito)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TIPO_LEITO");
            });

            modelBuilder.Entity<CentroCusto>(entity =>
            {
                entity.HasKey(e => e.IdCentroCusto)
                    .HasName("CentroCusto_PK");

                entity.Property(e => e.IdCentroCusto).HasColumnName("ID_CENTRO_CUSTO");

                entity.Property(e => e.CdCentroCusto)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CD_CENTRO_CUSTO");

                entity.Property(e => e.CdReduzido).HasColumnName("CD_REDUZIDO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtFinalVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdCentroCustoPai).HasColumnName("ID_CENTRO_CUSTO_PAI");

                entity.Property(e => e.IdNaturezaTipo)
                    .HasColumnName("ID_NATUREZA_TIPO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmCentroCusto)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CENTRO_CUSTO");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.QnAreaFisica).HasColumnName("QN_AREA_FISICA");

                entity.Property(e => e.VlArea).HasColumnName("VL_AREA");

                entity.HasOne(d => d.IdCentroCustoPaiNavigation)
                    .WithMany(p => p.InverseIdCentroCustoPaiNavigation)
                    .HasForeignKey(d => d.IdCentroCustoPai)
                    .HasConstraintName("FK_CentroCusto_CentroCusto");

                entity.HasOne(d => d.IdNaturezaTipoNavigation)
                    .WithMany(p => p.CentroCusto)
                    .HasForeignKey(d => d.IdNaturezaTipo)
                    .HasConstraintName("FK_CentroCusto_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.CentroCusto)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("UnidadeOrganizacional_CentroCusto_FK1");
            });

            modelBuilder.Entity<Cep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Cep");

                entity.Property(e => e.CdCep).ValueGeneratedOnAdd();

                entity.Property(e => e.Cep1)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Cep")
                    .IsFixedLength(true)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Cpl01)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Cpl_01")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<CepSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CEP_SUS");

                entity.HasIndex(e => e.CdCep, "IX_Cep_Sus_CD_CEP")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.CdCep)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CEP");

                entity.Property(e => e.CdCidadeIbge)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CIDADE_IBGE");

                entity.Property(e => e.TxUf)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TX_UF");
            });

            modelBuilder.Entity<CheckinEnfermagem>(entity =>
            {
                entity.HasKey(e => e.IdCheckinEnfermagem);

                entity.HasIndex(e => e.IdAtendimento, "IX_CheckinEnfermagem_ID_ATENDIMENTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdAtendimento, e.IdUnidadeInternacao }, "IX_CheckinEnfermagem_ID_ATENDIMENTO_ID_UNIDADE_INTERNACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdMedicoResponsavel, "IX_CheckinEnfermagem_ID_MEDICO_RESPONSAVEL")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUnidadeInternacao, "IX_CheckinEnfermagem_ID_UNIDADE_INTERNACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InLiberado, e.IdAtendimento, e.IdUnidadeInternacao }, "IX_CheckinEnfermagem_IN_LIBERADO_ID_ATENDIMENTO_ID_UNIDADE_INTERNACAO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.InLiberado, e.IdUnidadeInternacao }, "IX_CheckinEnfermagem_K3_K8_1_2_5_6_7")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeInternacao, "IX_CheckinEnfermagem_K8_1_7")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.DtCheckin)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CHECKIN");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdMedicoResponsavel).HasColumnName("ID_MEDICO_RESPONSAVEL");

                entity.Property(e => e.IdUnidadeInternacao).HasColumnName("ID_UNIDADE_INTERNACAO");

                entity.Property(e => e.IdUsuarioRealizouCheckin).HasColumnName("ID_USUARIO_REALIZOU_CHECKIN");

                entity.Property(e => e.InLiberado).HasColumnName("IN_LIBERADO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.CheckinEnfermagem)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CheckinEnfermagem_Atendimento");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.CheckinEnfermagem)
                    .HasForeignKey(d => d.IdLeito)
                    .HasConstraintName("FK_CheckinEnfermagem_Leito");

                entity.HasOne(d => d.IdMedicoResponsavelNavigation)
                    .WithMany(p => p.CheckinEnfermagem)
                    .HasForeignKey(d => d.IdMedicoResponsavel)
                    .HasConstraintName("FK_CheckinEnfermagem_Medico");

                entity.HasOne(d => d.IdUnidadeInternacaoNavigation)
                    .WithMany(p => p.CheckinEnfermagem)
                    .HasForeignKey(d => d.IdUnidadeInternacao)
                    .HasConstraintName("FK_CheckinEnfermagem_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioRealizouCheckinNavigation)
                    .WithMany(p => p.CheckinEnfermagem)
                    .HasForeignKey(d => d.IdUsuarioRealizouCheckin)
                    .HasConstraintName("FK_CheckinEnfermagem_Usuario");
            });

            modelBuilder.Entity<CheckinEnfermagemExclusao>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtCheckinInterno)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CHECKIN_INTERNO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdMedicoCancelamento).HasColumnName("ID_MEDICO_CANCELAMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxObservacoes)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACOES");
            });

            modelBuilder.Entity<Cheque>(entity =>
            {
                entity.HasKey(e => e.IdCheque)
                    .HasName("Cheque_PK");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdFavorecido).HasColumnName("ID_FAVORECIDO");

                entity.Property(e => e.IdSerie).HasColumnName("ID_SERIE");

                entity.Property(e => e.IdUsuarioCancelou).HasColumnName("ID_USUARIO_CANCELOU");

                entity.Property(e => e.IdUsuarioEmitiu).HasColumnName("ID_USUARIO_EMITIU");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InCompensado).HasColumnName("IN_COMPENSADO");

                entity.Property(e => e.NrCheque).HasColumnName("NR_CHEQUE");

                entity.Property(e => e.TxMotivoCancelamento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_CANCELAMENTO");

                entity.Property(e => e.VlCheque)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CHEQUE");

                entity.HasOne(d => d.IdBorderoNavigation)
                    .WithMany(p => p.Cheque)
                    .HasForeignKey(d => d.IdBordero)
                    .HasConstraintName("Cheque_Bordero_FK1");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.Cheque)
                    .HasForeignKey(d => d.IdContaBancaria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaBancaria_Cheque_FK1");

                entity.HasOne(d => d.IdFavorecidoNavigation)
                    .WithMany(p => p.Cheque)
                    .HasForeignKey(d => d.IdFavorecido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Cheque_FK1");

                entity.HasOne(d => d.IdSerieNavigation)
                    .WithMany(p => p.Cheque)
                    .HasForeignKey(d => d.IdSerie);
            });

            modelBuilder.Entity<ChequeCliente>(entity =>
            {
                entity.HasKey(e => e.IdChequeCliente);

                entity.Property(e => e.IdChequeCliente).HasColumnName("ID_CHEQUE_CLIENTE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ChequeClienteEvento>(entity =>
            {
                entity.HasKey(e => e.IdChequeClienteEvento);

                entity.Property(e => e.IdChequeClienteEvento).HasColumnName("ID_CHEQUE_CLIENTE_EVENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdChequeCliente).HasColumnName("ID_CHEQUE_CLIENTE");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdTipoEvento).HasColumnName("ID_TIPO_EVENTO");

                entity.Property(e => e.IdTipoMotivoDevolucao).HasColumnName("ID_TIPO_MOTIVO_DEVOLUCAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdChequeClienteNavigation)
                    .WithMany(p => p.ChequeClienteEvento)
                    .HasForeignKey(d => d.IdChequeCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.ChequeClienteEvento)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .HasConstraintName("FK_ChequeCliente_LancamentoBancario_ID_LANCAMENTO_BANCARIO");

                entity.HasOne(d => d.IdTipoEventoNavigation)
                    .WithMany(p => p.ChequeClienteEventoIdTipoEventoNavigation)
                    .HasForeignKey(d => d.IdTipoEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChequeCliente_TipoDiversos_ID_TIPO_EVENTO");

                entity.HasOne(d => d.IdTipoMotivoDevolucaoNavigation)
                    .WithMany(p => p.ChequeClienteEventoIdTipoMotivoDevolucaoNavigation)
                    .HasForeignKey(d => d.IdTipoMotivoDevolucao)
                    .HasConstraintName("FK_ChequeCliente_TipoDiversos_ID_TIPO_MOTIVO_DEVOLUCAO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ChequeClienteEvento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChequeCliente_Usuario_ID_USUARIO");
            });

            modelBuilder.Entity<ChequeEvento>(entity =>
            {
                entity.HasKey(e => e.IdChequeEvento);

                entity.Property(e => e.IdChequeEvento).HasColumnName("ID_CHEQUE_EVENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdSerie).HasColumnName("ID_SERIE");

                entity.Property(e => e.IdTipoEvento).HasColumnName("ID_TIPO_EVENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrCheque).HasColumnName("NR_CHEQUE");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxSerie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE");

                entity.HasOne(d => d.IdChequeNavigation)
                    .WithMany(p => p.ChequeEvento)
                    .HasForeignKey(d => d.IdCheque)
                    .HasConstraintName("FK_ChequeEvento_Cheque");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.ChequeEvento)
                    .HasForeignKey(d => d.IdContaBancaria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChequeEvento_ContaBancaria");

                entity.HasOne(d => d.IdSerieNavigation)
                    .WithMany(p => p.InverseIdSerieNavigation)
                    .HasForeignKey(d => d.IdSerie);

                entity.HasOne(d => d.IdTipoEventoNavigation)
                    .WithMany(p => p.ChequeEvento)
                    .HasForeignKey(d => d.IdTipoEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChequeEvento_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ChequeEvento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChequeEvento_Usuario");
            });

            modelBuilder.Entity<ChequeEventoLog>(entity =>
            {
                entity.HasKey(e => e.IdChequeEventoLog);

                entity.ToTable("ChequeEvento_Log");

                entity.Property(e => e.IdChequeEventoLog).HasColumnName("ID_CHEQUE_EVENTO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.IdChequeEvento).HasColumnName("ID_CHEQUE_EVENTO");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdSerie).HasColumnName("ID_SERIE");

                entity.Property(e => e.IdTipoEvento).HasColumnName("ID_TIPO_EVENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrCheque).HasColumnName("NR_CHEQUE");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxSerie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ChequeEventoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ChequeLog>(entity =>
            {
                entity.HasKey(e => e.IdChequeLog);

                entity.ToTable("Cheque_Log");

                entity.Property(e => e.IdChequeLog).HasColumnName("ID_CHEQUE_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdFavorecido).HasColumnName("ID_FAVORECIDO");

                entity.Property(e => e.IdSerie).HasColumnName("ID_SERIE");

                entity.Property(e => e.IdUsuarioCancelou).HasColumnName("ID_USUARIO_CANCELOU");

                entity.Property(e => e.IdUsuarioEmitiu).HasColumnName("ID_USUARIO_EMITIU");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InCompensado).HasColumnName("IN_COMPENSADO");

                entity.Property(e => e.NrCheque).HasColumnName("NR_CHEQUE");

                entity.Property(e => e.TxMotivoCancelamento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_CANCELAMENTO");

                entity.Property(e => e.VlCheque)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CHEQUE");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ChequeLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ChequeParametrosImpressao>(entity =>
            {
                entity.HasKey(e => e.IdChequeparametrosimpressao);

                entity.Property(e => e.IdChequeparametrosimpressao).HasColumnName("ID_CHEQUEPARAMETROSIMPRESSAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrDataEsquerda).HasColumnName("NR_DATA_ESQUERDA");

                entity.Property(e => e.NrDataTopo).HasColumnName("NR_DATA_TOPO");

                entity.Property(e => e.NrDistanciaProximoCheque).HasColumnName("NR_DISTANCIA_PROXIMO_CHEQUE");

                entity.Property(e => e.NrExtenso2Esquerda).HasColumnName("NR_EXTENSO_2_ESQUERDA");

                entity.Property(e => e.NrExtenso2Topo).HasColumnName("NR_EXTENSO_2_TOPO");

                entity.Property(e => e.NrExtensoEsquerda).HasColumnName("NR_EXTENSO_ESQUERDA");

                entity.Property(e => e.NrExtensoTopo).HasColumnName("NR_EXTENSO_TOPO");

                entity.Property(e => e.NrFavorecidoEsquerda).HasColumnName("NR_FAVORECIDO_ESQUERDA");

                entity.Property(e => e.NrFavorecidoTopo).HasColumnName("NR_FAVORECIDO_TOPO");

                entity.Property(e => e.NrValorEsquerda).HasColumnName("NR_VALOR_ESQUERDA");

                entity.Property(e => e.NrValorTopo).HasColumnName("NR_VALOR_TOPO");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.ChequeParametrosImpressao)
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChequeParametrosImpressao_Banco_ID_BANCO");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.ChequeParametrosImpressao)
                    .HasForeignKey(d => d.IdContaBancaria);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ChequeParametrosImpressao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Cid>(entity =>
            {
                entity.HasKey(e => e.IdCid);

                entity.HasIndex(e => e.InAtivo, "IX_Cid_IN_ATIVO");

                entity.HasIndex(e => new { e.InAtivo, e.NrNivel }, "IX_Cid_IN_ATIVO_NR_NIVEL")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.CdCid, "IX_Cid_K2_1_3_5_6_7")
                    .IsUnique();

                entity.Property(e => e.IdCid)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CID")
                    .HasComment("identificador do número do CID (classificação internacional de Doenças )");

                entity.Property(e => e.CdCid)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID")
                    .IsFixedLength(true)
                    .HasComment("Número do CID (classificação internacional de Doenças )");

                entity.Property(e => e.IdAgravoTipo)
                    .HasColumnName("ID_AGRAVO_TIPO")
                    .HasComment("Identificador de agravo do SUS");

                entity.Property(e => e.IdCidCategoria)
                    .HasColumnName("ID_CID_CATEGORIA")
                    .HasComment("Identificador do tipo do item do CID (Classificação de internacional de doenças)");

                entity.Property(e => e.IdSusTipo)
                    .HasColumnName("ID_SUS_TIPO")
                    .HasComment("Identificador do tipo do CId para o SUS");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Indica se a linha está ativa (exclusão lógica)");

                entity.Property(e => e.InEstadiavel).HasColumnName("IN_ESTADIAVEL");

                entity.Property(e => e.NrNivel)
                    .HasColumnName("NR_NIVEL")
                    .HasComment("Número do nível do item (Hierarquia para construção de árvores)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA")
                    .HasComment("Controla a versão da linha");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO")
                    .HasComment("Texto descritivo da classificação internacional de doenças");

                entity.HasOne(d => d.IdAgravoTipoNavigation)
                    .WithMany(p => p.CidIdAgravoTipoNavigation)
                    .HasForeignKey(d => d.IdAgravoTipo)
                    .HasConstraintName("Cid_AgravoSUSTipo_FK1");

                entity.HasOne(d => d.IdCidCategoriaNavigation)
                    .WithMany(p => p.CidIdCidCategoriaNavigation)
                    .HasForeignKey(d => d.IdCidCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Cid_CategoriaCidTipo_FK1");

                entity.HasOne(d => d.IdSusTipoNavigation)
                    .WithMany(p => p.CidIdSusTipoNavigation)
                    .HasForeignKey(d => d.IdSusTipo)
                    .HasConstraintName("Cid_SexoSUSTipo_FK1");
            });

            modelBuilder.Entity<CidAgrupamento>(entity =>
            {
                entity.HasKey(e => new { e.IdCidAgrupado, e.IdCid })
                    .HasName("CidAgrupamento_PK");

                entity.Property(e => e.IdCidAgrupado)
                    .HasColumnName("ID_CID_AGRUPADO")
                    .HasComment("Identificador do CID (Classificação Internacional de Doenças)  nível Filho");

                entity.Property(e => e.IdCid)
                    .HasColumnName("ID_CID")
                    .HasComment("Identificador do CID (Classificação Internacional de Doenças)  nível Pai");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA")
                    .HasComment("Controla a versão da linha");

                entity.HasOne(d => d.IdC)
                    .WithMany(p => p.CidAgrupamentoIdC)
                    .HasForeignKey(d => d.IdCid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CidAgrupamento_Cid_FK2");

                entity.HasOne(d => d.IdCidAgrupadoNavigation)
                    .WithMany(p => p.CidAgrupamentoIdCidAgrupadoNavigation)
                    .HasForeignKey(d => d.IdCidAgrupado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CidAgrupamento_Cid_FK1");
            });

            modelBuilder.Entity<Cidade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Cidade");

                entity.Property(e => e.Cdd)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CDD");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NOME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<CirurgiaFuncaoTipo>(entity =>
            {
                entity.HasKey(e => e.IdCirurgiaFuncaoTipo);

                entity.Property(e => e.IdCirurgiaFuncaoTipo).HasColumnName("ID_CIRURGIA_FUNCAO_TIPO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<ClassConv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CLASS_CONV");

                entity.Property(e => e.ConvêniosCuboAntigo)
                    .HasMaxLength(255)
                    .HasColumnName("CONVÊNIOS CUBO ANTIGO");

                entity.Property(e => e.ConvêniosCuboNovo)
                    .HasMaxLength(255)
                    .HasColumnName("CONVÊNIOS CUBO NOVO");

                entity.Property(e => e.Resumo)
                    .HasMaxLength(255)
                    .HasColumnName("RESUMO");
            });

            modelBuilder.Entity<ClassificacaoChamada>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoChamada);

                entity.HasIndex(e => new { e.IdClassificacaoLocal, e.DtChamada }, "IX_ClassificacaoChamada_ID_CLASSIFICACAO_LOCAL_DT_CHAMADA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdClassificacaoLocal, e.QdExibicoes }, "IX_ClassificacaoChamada_ID_CLASSIFICACAO_LOCAL_QD_EXIBICOES")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdClassificacaoLocal, e.QdExibicoes }, "IX_ClassificacaoChamada_ID_CLASSIFICACAO_LOCAL_QD_EXIBICOES1")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdClassificacaoSenha, "IX_ClassificacaoChamada_ID_CLASSIFICACAO_SENHA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdClassificacaoChamada).HasColumnName("ID_CLASSIFICACAO_CHAMADA");

                entity.Property(e => e.DtChamada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CHAMADA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdClassificacaoLocal).HasColumnName("ID_CLASSIFICACAO_LOCAL");

                entity.Property(e => e.IdClassificacaoSenha).HasColumnName("ID_CLASSIFICACAO_SENHA");

                entity.Property(e => e.IdStatusSenha).HasColumnName("ID_STATUS_SENHA");

                entity.Property(e => e.QdExibicoes)
                    .HasColumnName("QD_EXIBICOES")
                    .HasComment("mostra a quantidade de vezes chamadas da senha");

                entity.HasOne(d => d.IdClassificacaoLocalNavigation)
                    .WithMany(p => p.ClassificacaoChamada)
                    .HasForeignKey(d => d.IdClassificacaoLocal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoChamada_ClassificacaoLocal");

                entity.HasOne(d => d.IdClassificacaoSenhaNavigation)
                    .WithMany(p => p.ClassificacaoChamada)
                    .HasForeignKey(d => d.IdClassificacaoSenha)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoChamada_ClassificacaoSenha");
            });

            modelBuilder.Entity<ClassificacaoContabil>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoContabil)
                    .HasName("NaturezaContabil_PK");

                entity.Property(e => e.IdClassificacaoContabil)
                    .HasColumnName("ID_CLASSIFICACAO_CONTABIL")
                    .HasComment("PK da Tabela. Identificador único.");

                entity.Property(e => e.CdClassificacaoContabil)
                    .HasColumnName("CD_CLASSIFICACAO_CONTABIL")
                    .HasComment("Codigo contabil que representa a Classificação.");

                entity.Property(e => e.IdTipoClassificacaoCusto).HasColumnName("ID_TIPO_CLASSIFICACAO_CUSTO");

                entity.Property(e => e.InConvenioFaturamento).HasColumnName("IN_CONVENIO_FATURAMENTO");

                entity.Property(e => e.NmClassificacaoContabil)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO_CONTABIL")
                    .HasComment("Descrição da Classificação.\r\n");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdTipoClassificacaoCustoNavigation)
                    .WithMany(p => p.ClassificacaoContabil)
                    .HasForeignKey(d => d.IdTipoClassificacaoCusto)
                    .HasConstraintName("FK_ClassificacaoContabil_TipoDiversos");
            });

            modelBuilder.Entity<ClassificacaoFila>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoFila);

                entity.Property(e => e.IdClassificacaoFila).HasColumnName("ID_CLASSIFICACAO_FILA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InTriagem)
                    .IsRequired()
                    .HasColumnName("IN_TRIAGEM")
                    .HasDefaultValueSql("((1))")
                    .HasComment("se a fila passa por triagem");

                entity.Property(e => e.InVisivel)
                    .IsRequired()
                    .HasColumnName("IN_VISIVEL")
                    .HasDefaultValueSql("((1))")
                    .HasComment("se o campo será visível na tela de retirar a senha");

                entity.Property(e => e.NmFila)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_FILA");

                entity.Property(e => e.TxSigla)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TX_SIGLA");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ClassificacaoFila)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoFila_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ClassificacaoFluxo>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoFluxo)
                    .HasName("PK__Classifi__9E5E577852EC6CEE");

                entity.Property(e => e.IdClassificacaoFluxo).HasColumnName("ID_CLASSIFICACAO_FLUXO");

                entity.Property(e => e.IdClassificacaoFila).HasColumnName("ID_CLASSIFICACAO_FILA");

                entity.Property(e => e.IdClassificacaoLocal).HasColumnName("ID_CLASSIFICACAO_LOCAL");

                entity.Property(e => e.IdClassificacaoPeso).HasColumnName("ID_CLASSIFICACAO_PESO");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdStatusFim).HasColumnName("ID_STATUS_FIM");

                entity.Property(e => e.IdStatusInicio).HasColumnName("ID_STATUS_INICIO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtendimento)
                    .HasColumnName("IN_ATENDIMENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmFluxo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_FLUXO");

                entity.HasOne(d => d.IdClassificacaoFilaNavigation)
                    .WithMany(p => p.ClassificacaoFluxo)
                    .HasForeignKey(d => d.IdClassificacaoFila)
                    .HasConstraintName("FK__Classific__ID_CL__58A54644");

                entity.HasOne(d => d.IdClassificacaoLocalNavigation)
                    .WithMany(p => p.ClassificacaoFluxo)
                    .HasForeignKey(d => d.IdClassificacaoLocal)
                    .HasConstraintName("FK__Classific__ID_CL__59996A7D");

                entity.HasOne(d => d.IdClassificacaoPesoNavigation)
                    .WithMany(p => p.ClassificacaoFluxo)
                    .HasForeignKey(d => d.IdClassificacaoPeso)
                    .HasConstraintName("FK__Classific__ID_CL__4D345EEF");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.ClassificacaoFluxo)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .HasConstraintName("FK__Classific__ID_RE__5A8D8EB6");

                entity.HasOne(d => d.IdStatusFimNavigation)
                    .WithMany(p => p.ClassificacaoFluxoIdStatusFimNavigation)
                    .HasForeignKey(d => d.IdStatusFim)
                    .HasConstraintName("FK__Classific__ID_ST__56BCFDD2");

                entity.HasOne(d => d.IdStatusInicioNavigation)
                    .WithMany(p => p.ClassificacaoFluxoIdStatusInicioNavigation)
                    .HasForeignKey(d => d.IdStatusInicio)
                    .HasConstraintName("FK__Classific__ID_ST__55C8D999");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ClassificacaoFluxo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Classific__ID_UN__57B1220B");
            });

            modelBuilder.Entity<ClassificacaoLocal>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoLocal);

                entity.Property(e => e.IdClassificacaoLocal).HasColumnName("ID_CLASSIFICACAO_LOCAL");

                entity.Property(e => e.IdClassificacaoLocalTipo).HasColumnName("ID_CLASSIFICACAO_LOCAL_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmClassificacaoLocal)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO_LOCAL");

                entity.HasOne(d => d.IdClassificacaoLocalTipoNavigation)
                    .WithMany(p => p.ClassificacaoLocal)
                    .HasForeignKey(d => d.IdClassificacaoLocalTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoLocal_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ClassificacaoLocal)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoLocal_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ClassificacaoLocalStatusSenha>(entity =>
            {
                entity.HasKey(e => new { e.IdClassificacaoLocal, e.IdStatusSenha })
                    .HasName("PK__Classifi__7BBCAE915D69FB61");

                entity.ToTable("ClassificacaoLocal_StatusSenha");

                entity.Property(e => e.IdClassificacaoLocal).HasColumnName("ID_CLASSIFICACAO_LOCAL");

                entity.Property(e => e.IdStatusSenha).HasColumnName("ID_STATUS_SENHA");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdClassificacaoLocalNavigation)
                    .WithMany(p => p.ClassificacaoLocalStatusSenha)
                    .HasForeignKey(d => d.IdClassificacaoLocal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Classific__ID_CL__6046680C");

                entity.HasOne(d => d.IdStatusSenhaNavigation)
                    .WithMany(p => p.ClassificacaoLocalStatusSenha)
                    .HasForeignKey(d => d.IdStatusSenha)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Classific__ID_ST__613A8C45");
            });

            modelBuilder.Entity<ClassificacaoPeso>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoPeso);

                entity.Property(e => e.IdClassificacaoPeso).HasColumnName("ID_CLASSIFICACAO_PESO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NrPeso).HasColumnName("NR_PESO");

                entity.Property(e => e.NrTempoMedioAtendimento)
                    .HasColumnName("NR_TEMPO_MEDIO_ATENDIMENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxCor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COR");

                entity.Property(e => e.TxSigla)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TX_SIGLA");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ClassificacaoPeso)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoPeso_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ClassificacaoProduto>(entity =>
            {
                entity.HasKey(e => e.IdClassificacao)
                    .HasName("ClassificacaoProduto_PK");

                entity.HasIndex(e => e.IdClassificacaoContabil, "IX_ClassificacaoProduto_K5");

                entity.HasIndex(e => e.IdGrupoTerapeutico, "IX_ClassificacaoProduto_TipoDiversos");

                entity.HasIndex(e => e.IdTipoClassificacao, "IX_ClassificacaoProduto_TipoDiversos_ID_TIPO_CLASSIFICACAO");

                entity.Property(e => e.IdClassificacao)
                    .HasColumnName("ID_CLASSIFICACAO")
                    .HasComment("PK da Tabela. Identificador único.");

                entity.Property(e => e.IdClassificacaoContabil)
                    .HasColumnName("ID_CLASSIFICACAO_CONTABIL")
                    .HasComment("FK com ClassificacaoContabil.\r\n");

                entity.Property(e => e.IdClassificacaoFaturamento).HasColumnName("ID_CLASSIFICACAO_FATURAMENTO");

                entity.Property(e => e.IdGrupoTerapeutico)
                    .HasColumnName("ID_GRUPO_TERAPEUTICO")
                    .HasComment("Não utilizado.\r\n");

                entity.Property(e => e.IdTipoClassificacao)
                    .HasColumnName("ID_TIPO_CLASSIFICACAO")
                    .HasComment("Tipo de Classificação. FK com TipoDiversos\r\n");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO")
                    .HasComment("Descrição da Classificação do Produto.");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdClassificacaoContabilNavigation)
                    .WithMany(p => p.ClassificacaoProduto)
                    .HasForeignKey(d => d.IdClassificacaoContabil)
                    .HasConstraintName("FK_ClassificacaoProduto_NaturezaContabil");

                entity.HasOne(d => d.IdClassificacaoFaturamentoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoIdClassificacaoFaturamentoNavigation)
                    .HasForeignKey(d => d.IdClassificacaoFaturamento)
                    .HasConstraintName("FK_ClassificacaoProduto_TipoDiversos");

                entity.HasOne(d => d.IdGrupoTerapeuticoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoIdGrupoTerapeuticoNavigation)
                    .HasForeignKey(d => d.IdGrupoTerapeutico)
                    .HasConstraintName("TipoDiversos_ClassificacaoProduto_FK2");

                entity.HasOne(d => d.IdTipoClassificacaoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoIdTipoClassificacaoNavigation)
                    .HasForeignKey(d => d.IdTipoClassificacao)
                    .HasConstraintName("TipoDiversos_ClassificacaoProduto_FK1");
            });

            modelBuilder.Entity<ClassificacaoProdutoAtributo>(entity =>
            {
                entity.HasKey(e => new { e.IdClassificacaoProduto, e.IdAtributo })
                    .HasName("ClassificacaoProduto_Atributo_PK");

                entity.ToTable("ClassificacaoProduto_Atributo");

                entity.Property(e => e.IdClassificacaoProduto).HasColumnName("ID_CLASSIFICACAO_PRODUTO");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdClassificacaoAtributo).HasColumnName("ID_CLASSIFICACAO_ATRIBUTO");

                entity.Property(e => e.InCompoeNome).HasColumnName("IN_COMPOE_NOME");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoAtributo)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_ClassificacaoProduto_Atributo_FK1");

                entity.HasOne(d => d.IdClassificacaoAtributoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoAtributo)
                    .HasForeignKey(d => d.IdClassificacaoAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ClassificacaoProduto_Atributo_FK1");

                entity.HasOne(d => d.IdClassificacaoProdutoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoAtributo)
                    .HasForeignKey(d => d.IdClassificacaoProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ClassificacaoProduto_Atributo_FK1");
            });

            modelBuilder.Entity<ClassificacaoProdutoClassificacaoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdClassificacaoPai, e.IdClassificacaoFilho })
                    .HasName("ClassificacaoProduto_ClassificacaoProduto_PK");

                entity.ToTable("ClassificacaoProduto_ClassificacaoProduto");

                entity.Property(e => e.IdClassificacaoPai)
                    .HasColumnName("ID_CLASSIFICACAO_PAI")
                    .HasComment("PK da Tabela. FK com ClassificaoProduto. Refere-se a Classificação Pai de um outra Classificação.");

                entity.Property(e => e.IdClassificacaoFilho)
                    .HasColumnName("ID_CLASSIFICACAO_FILHO")
                    .HasComment("PK da Tabela. FK com ClassificaoProduto. Refere-se a Classificação filha de um outra Classificação.\r\n");

                entity.Property(e => e.InUltimoNivel)
                    .HasColumnName("IN_ULTIMO_NIVEL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdClassificacaoFilhoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoClassificacaoProdutoIdClassificacaoFilhoNavigation)
                    .HasForeignKey(d => d.IdClassificacaoFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoProduto_ClassificacaoProduto_ClassificacaoProduto1");

                entity.HasOne(d => d.IdClassificacaoPaiNavigation)
                    .WithMany(p => p.ClassificacaoProdutoClassificacaoProdutoIdClassificacaoPaiNavigation)
                    .HasForeignKey(d => d.IdClassificacaoPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoProduto_ClassificacaoProduto_ClassificacaoProduto");
            });

            modelBuilder.Entity<ClassificacaoProdutoPlanoContaContabil>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoPlanoConta)
                    .HasName("PK_ClassificacaoProduto_PlanoContaContabil_1");

                entity.ToTable("ClassificacaoProduto_PlanoContaContabil");

                entity.Property(e => e.IdClassificacaoPlanoConta).HasColumnName("ID_CLASSIFICACAO_PLANO_CONTA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdClassificacaoProduto).HasColumnName("ID_CLASSIFICACAO_PRODUTO");

                entity.Property(e => e.IdContadespesareceita).HasColumnName("ID_CONTADESPESARECEITA");

                entity.Property(e => e.IdPlanoContaContabil).HasColumnName("ID_PLANO_CONTA_CONTABIL");

                entity.Property(e => e.IdPlanoContaFinanceiro).HasColumnName("ID_PLANO_CONTA_FINANCEIRO");

                entity.Property(e => e.IdPlanoContas).HasColumnName("ID_PLANO_CONTAS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdClassificacaoProdutoNavigation)
                    .WithMany(p => p.ClassificacaoProdutoPlanoContaContabil)
                    .HasForeignKey(d => d.IdClassificacaoProduto)
                    .HasConstraintName("FK_ClassificacaoProduto_PlanoContaContabil_ClassificacaoProduto");

                entity.HasOne(d => d.IdContadespesareceitaNavigation)
                    .WithMany(p => p.ClassificacaoProdutoPlanoContaContabil)
                    .HasForeignKey(d => d.IdContadespesareceita)
                    .HasConstraintName("ClassificacaoProduto_PlanoContaContabil_ContaDespesaReceita_ID_CONTADESPESARECEITA");

                entity.HasOne(d => d.IdPlanoContasNavigation)
                    .WithMany(p => p.ClassificacaoProdutoPlanoContaContabil)
                    .HasForeignKey(d => d.IdPlanoContas);
            });

            modelBuilder.Entity<ClassificacaoSenha>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoSenha);

                entity.HasIndex(e => new { e.IdClassificacaoFila, e.IdStatusSenha }, "IX_01")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdClassificacaoFila, e.IdStatusSenha }, "IX_ClassificacaoSenha_ID_CLASSIFICACAO_FILA_ID_STATUS_SENHA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatusSenha, e.InAtivo }, "IX_ClassificacaoSenha_ID_STATUS_SENHA_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.InAtivo, e.TxSenha, e.DtCriacao }, "IX_ClassificacaoSenha_IN_ATIVO_TX_SENHA_DT_CRIACAO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdClassificacaoSenha).HasColumnName("ID_CLASSIFICACAO_SENHA");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAgendacc).HasColumnName("ID_AGENDACC");

                entity.Property(e => e.IdAgendasadt).HasColumnName("ID_AGENDASADT");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdClassificacaoFila).HasColumnName("ID_CLASSIFICACAO_FILA");

                entity.Property(e => e.IdClassificacaoPeso).HasColumnName("ID_CLASSIFICACAO_PESO");

                entity.Property(e => e.IdCor).HasColumnName("ID_COR");

                entity.Property(e => e.IdStatusSenha).HasColumnName("ID_STATUS_SENHA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InBancoSangue)
                    .HasColumnName("IN_BANCO_SANGUE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InPreAnestesico)
                    .HasColumnName("IN_PRE_ANESTESICO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InPreInternacao)
                    .HasColumnName("IN_PRE_INTERNACAO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InRiscoCirurgico)
                    .HasColumnName("IN_RISCO_CIRURGICO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InTermoConsentimento)
                    .HasColumnName("IN_TERMO_CONSENTIMENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NrPeso).HasColumnName("NR_PESO");

                entity.Property(e => e.TxNomePaciente)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_PACIENTE");

                entity.Property(e => e.TxSenha)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_SENHA");

                entity.HasOne(d => d.IdClassificacaoFilaNavigation)
                    .WithMany(p => p.ClassificacaoSenha)
                    .HasForeignKey(d => d.IdClassificacaoFila)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoSenha_ClassificacaoSenha");

                entity.HasOne(d => d.IdClassificacaoPesoNavigation)
                    .WithMany(p => p.ClassificacaoSenha)
                    .HasForeignKey(d => d.IdClassificacaoPeso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoSenha_ClassificacaoPeso");

                entity.HasOne(d => d.IdStatusSenhaNavigation)
                    .WithMany(p => p.ClassificacaoSenha)
                    .HasForeignKey(d => d.IdStatusSenha)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoSenha_TipoDiversos");
            });

            modelBuilder.Entity<ClassificacaoSenhaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdClassificacaoSenhaHistorico);

                entity.HasIndex(e => e.IdClassificacaoSenha, "IX_ClassificacaoSenhaHistorico_ID_CLASSIFICACAO_SENHA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdClassificacaoSenhaHistorico).HasColumnName("ID_CLASSIFICACAO_SENHA_HISTORICO");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.IdClassificacaoSenha).HasColumnName("ID_CLASSIFICACAO_SENHA");

                entity.Property(e => e.IdStatusSenha).HasColumnName("ID_STATUS_SENHA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdClassificacaoSenhaNavigation)
                    .WithMany(p => p.ClassificacaoSenhaHistorico)
                    .HasForeignKey(d => d.IdClassificacaoSenha)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoSenhaHistorico_ClassificacaoSenha");

                entity.HasOne(d => d.IdStatusSenhaNavigation)
                    .WithMany(p => p.ClassificacaoSenhaHistorico)
                    .HasForeignKey(d => d.IdStatusSenha)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClassificacaoSenhaHistorico_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ClassificacaoSenhaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ClassificacaoSenhaHistorico_Usuario");
            });

            modelBuilder.Entity<ClienteComputador>(entity =>
            {
                entity.HasKey(e => e.IdClienteComputador);

                entity.Property(e => e.IdClienteComputador).HasColumnName("ID_CLIENTE_COMPUTADOR");

                entity.Property(e => e.NmClienteComputador)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLIENTE_COMPUTADOR");
            });

            modelBuilder.Entity<ClientePagina>(entity =>
            {
                entity.HasKey(e => e.IdClientePagina);

                entity.Property(e => e.IdClientePagina).HasColumnName("ID_CLIENTE_PAGINA");

                entity.Property(e => e.NmClientePagina)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLIENTE_PAGINA");
            });

            modelBuilder.Entity<Clinica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Clinica");

                entity.Property(e => e.CdCnes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNES");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCofins).HasColumnName("IN_COFINS");

                entity.Property(e => e.InCooperativa).HasColumnName("IN_COOPERATIVA");

                entity.Property(e => e.InCsl).HasColumnName("IN_CSL");

                entity.Property(e => e.InEstornarLancamentoGlosa).HasColumnName("IN_ESTORNAR_LANCAMENTO_GLOSA");

                entity.Property(e => e.InPis).HasColumnName("IN_PIS");

                entity.Property(e => e.InPrestadorParticipaLucroMatmed).HasColumnName("IN_PRESTADOR_PARTICIPA_LUCRO_MATMED");

                entity.Property(e => e.NmClinica)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLINICA");

                entity.Property(e => e.NrPercentualIss)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("NR_PERCENTUAL_ISS");

                entity.Property(e => e.NrPercentualParticipacao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("NR_PERCENTUAL_PARTICIPACAO");

                entity.Property(e => e.NrPercentualParticipacaoMatmed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("NR_PERCENTUAL_PARTICIPACAO_MATMED");

                entity.Property(e => e.PrInss)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_INSS");

                entity.Property(e => e.PrInssAdicional)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_INSS_ADICIONAL");

                entity.Property(e => e.PrReembolsoConvenio)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REEMBOLSO_CONVENIO");

                entity.Property(e => e.PrReembolsoParticular)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REEMBOLSO_PARTICULAR");

                entity.Property(e => e.TxAgencia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_AGENCIA");

                entity.Property(e => e.TxBanco)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_BANCO");

                entity.Property(e => e.TxContaCorrente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONTA_CORRENTE");
            });

            modelBuilder.Entity<ClinicaIi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ClinicaII");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.InCofins).HasColumnName("IN_COFINS");

                entity.Property(e => e.InCooperativa).HasColumnName("IN_COOPERATIVA");

                entity.Property(e => e.InCsl).HasColumnName("IN_CSL");

                entity.Property(e => e.InPis).HasColumnName("IN_PIS");

                entity.Property(e => e.NmClinica)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLINICA");

                entity.Property(e => e.NrPercentualIss)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("NR_PERCENTUAL_ISS");

                entity.Property(e => e.NrPercentualParticipacao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("NR_PERCENTUAL_PARTICIPACAO");

                entity.Property(e => e.PrInss)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_INSS");

                entity.Property(e => e.PrInssAdicional)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_INSS_ADICIONAL");

                entity.Property(e => e.PrReembolsoConvenio)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REEMBOLSO_CONVENIO");

                entity.Property(e => e.PrReembolsoParticular)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REEMBOLSO_PARTICULAR");

                entity.Property(e => e.TxAgencia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_AGENCIA");

                entity.Property(e => e.TxBanco)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_BANCO");

                entity.Property(e => e.TxContaCorrente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONTA_CORRENTE");
            });

            modelBuilder.Entity<ClinicaMedicoLancamentoAvulso>(entity =>
            {
                entity.HasKey(e => e.IdClinicaMedicoLancamentoAvulso)
                    .HasName("Clinica_Medico_Lancamento_Avulso_PK");

                entity.ToTable("Clinica_Medico_Lancamento_Avulso");

                entity.Property(e => e.IdClinicaMedicoLancamentoAvulso).HasColumnName("ID_CLINICA_MEDICO_LANCAMENTO_AVULSO");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdUsuarioAtivacao).HasColumnName("ID_USUARIO_ATIVACAO");

                entity.Property(e => e.IdUsuarioInativacao).HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlRepasse).HasColumnName("VL_REPASSE");

                entity.HasOne(d => d.IdClinicaNavigation)
                    .WithMany(p => p.ClinicaMedicoLancamentoAvulsoIdClinicaNavigation)
                    .HasForeignKey(d => d.IdClinica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_Medico_Lancamento_Avulso_Pessoa");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.ClinicaMedicoLancamentoAvulsoIdMedicoNavigation)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_Clinica_Medico_Lancamento_Avulso_Pessoa1");

                entity.HasOne(d => d.IdUsuarioAtivacaoNavigation)
                    .WithMany(p => p.ClinicaMedicoLancamentoAvulsoIdUsuarioAtivacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtivacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_Medico_Lancamento_Avulso_UsuarioAtivacao");

                entity.HasOne(d => d.IdUsuarioInativacaoNavigation)
                    .WithMany(p => p.ClinicaMedicoLancamentoAvulsoIdUsuarioInativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioInativacao)
                    .HasConstraintName("FK_Clinica_Medico_Lancamento_Avulso_UsuarioInativacao");
            });

            modelBuilder.Entity<ClinicaUnidadeOrganizacionalMedico>(entity =>
            {
                entity.HasKey(e => new { e.IdClinica, e.IdUnidadeOrganizacional, e.IdMedico });

                entity.ToTable("Clinica_UnidadeOrganizacional_Medico");

                entity.HasIndex(e => new { e.IdMedico, e.InAtivo, e.IdUnidadeOrganizacional }, "IX_Clinica_UnidadeOrganizacional_Medico_K3_K4_K2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");
            });

            modelBuilder.Entity<ClinicaUnidadeOrganizacionalMedicoVigencia>(entity =>
            {
                entity.HasKey(e => e.IdClinicaUnidadeOrganizacionalMedicoVigencia);

                entity.ToTable("Clinica_UnidadeOrganizacional_Medico_Vigencia");

                entity.HasIndex(e => new { e.IdMedico, e.InAtivo, e.IdUnidadeOrganizacional }, "IX_Clinica_UnidadeOrganizacional_Medico_Vigencia_K3_K4_K2")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdClinicaUnidadeOrganizacionalMedicoVigencia).HasColumnName("ID_CLINICA_UNIDADE_ORGANIZACIONAL_MEDICO_VIGENCIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.DtFinalVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdTipoRepasse)
                    .HasColumnName("ID_TIPO_REPASSE")
                    .HasDefaultValueSql("((9734))");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdClinicaNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigencia)
                    .HasForeignKey(d => d.IdClinica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_Pessoa");

                entity.HasOne(d => d.IdTipoRepasseNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigencia)
                    .HasForeignKey(d => d.IdTipoRepasse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_Usuario_Cadastro");

                entity.HasOne(d => d.IdUsuarioDesativacaoNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaIdUsuarioDesativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioDesativacao)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_Usuario_Desativacao");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigencia)
                    .HasForeignKey(d => new { d.IdMedico, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_UnidadeOrganizacional_Colaborador");
            });

            modelBuilder.Entity<ClinicaUnidadeOrganizacionalMedicoVigenciaClassificacaoProduto>(entity =>
            {
                entity.HasKey(e => e.IdClinicaUnidadeorganizacionalMedicoVigenciaClassificacaoproduto)
                    .HasName("Clinica_UnidadeOrganizacional_Medico_Vigencia_ClassificacaoProduto_PK");

                entity.ToTable("Clinica_UnidadeOrganizacional_Medico_Vigencia_ClassificacaoProduto");

                entity.Property(e => e.IdClinicaUnidadeorganizacionalMedicoVigenciaClassificacaoproduto).HasColumnName("ID_CLINICA_UNIDADEORGANIZACIONAL_MEDICO_VIGENCIA_CLASSIFICACAOPRODUTO");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdClinicaUnidadeOrganizacionalMedicoVigencia).HasColumnName("ID_CLINICA_UNIDADE_ORGANIZACIONAL_MEDICO_VIGENCIA");

                entity.Property(e => e.IdUsuarioAtivacao).HasColumnName("ID_USUARIO_ATIVACAO");

                entity.Property(e => e.IdUsuarioInativacao).HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaClassificacaoProduto)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_ClassificacaoProduto_ClassificacaoProduto");

                entity.HasOne(d => d.IdClinicaUnidadeOrganizacionalMedicoVigenciaNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaClassificacaoProduto)
                    .HasForeignKey(d => d.IdClinicaUnidadeOrganizacionalMedicoVigencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_ClassificacaoProduto_Clinica_UnidadeOrganizacional_Medico_Vigencia");

                entity.HasOne(d => d.IdUsuarioAtivacaoNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaClassificacaoProdutoIdUsuarioAtivacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtivacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_ClassificacaoProduto_UsuarioAtivacao");

                entity.HasOne(d => d.IdUsuarioInativacaoNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaClassificacaoProdutoIdUsuarioInativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioInativacao)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_ClassificacaoProduto_UsuarioInativacao");
            });

            modelBuilder.Entity<ClinicaUnidadeOrganizacionalMedicoVigenciaTaxa>(entity =>
            {
                entity.HasKey(e => e.IdClinicaUnidadeorganizacionalMedicoVigenciaTaxa)
                    .HasName("Clinica_UnidadeOrganizacional_Medico_Vigencia_Taxa_PK");

                entity.ToTable("Clinica_UnidadeOrganizacional_Medico_Vigencia_Taxa");

                entity.Property(e => e.IdClinicaUnidadeorganizacionalMedicoVigenciaTaxa).HasColumnName("ID_CLINICA_UNIDADEORGANIZACIONAL_MEDICO_VIGENCIA_TAXA");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.IdClinicaUnidadeOrganizacionalMedicoVigencia).HasColumnName("ID_CLINICA_UNIDADE_ORGANIZACIONAL_MEDICO_VIGENCIA");

                entity.Property(e => e.IdServicoTaxa).HasColumnName("ID_SERVICO_TAXA");

                entity.Property(e => e.IdUsuarioAtivacao).HasColumnName("ID_USUARIO_ATIVACAO");

                entity.Property(e => e.IdUsuarioInativacao).HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.VlRepasse).HasColumnName("VL_REPASSE");

                entity.HasOne(d => d.IdClinicaUnidadeOrganizacionalMedicoVigenciaNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaTaxa)
                    .HasForeignKey(d => d.IdClinicaUnidadeOrganizacionalMedicoVigencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_Taxa_Clinica_UnidadeOrganizacional_Medico_Vigencia");

                entity.HasOne(d => d.IdServicoTaxaNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaTaxa)
                    .HasForeignKey(d => d.IdServicoTaxa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_Taxa_Servico");

                entity.HasOne(d => d.IdUsuarioAtivacaoNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaTaxaIdUsuarioAtivacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtivacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_Taxa_UsuarioAtivacao");

                entity.HasOne(d => d.IdUsuarioInativacaoNavigation)
                    .WithMany(p => p.ClinicaUnidadeOrganizacionalMedicoVigenciaTaxaIdUsuarioInativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioInativacao)
                    .HasConstraintName("FK_Clinica_UnidadeOrganizacional_Medico_Vigencia_Taxa_UsuarioInativacao");
            });

            modelBuilder.Entity<CobrancaJudicial>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("CobrancaJudicial_PK");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtBaixa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA");

                entity.Property(e => e.DtRemessa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REMESSA");

                entity.Property(e => e.IdExecutor).HasColumnName("ID_EXECUTOR");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.HasOne(d => d.IdExecutorNavigation)
                    .WithMany(p => p.CobrancaJudicial)
                    .HasForeignKey(d => d.IdExecutor)
                    .HasConstraintName("Pessoa_CobrancaJudicial_FK1");
            });

            modelBuilder.Entity<CobrancaTerceirizada>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("CobrancaTerceirizada_PK");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.DtRemessa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REMESSA");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.InPaga).HasColumnName("IN_PAGA");

                entity.Property(e => e.TxObs)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.CobrancaTerceirizada)
                    .HasForeignKey(d => d.IdFornecedor)
                    .HasConstraintName("FK_CobrancaTerceirizada_Pessoa");
            });

            modelBuilder.Entity<CobrancaTipoEnfermagem>(entity =>
            {
                entity.HasKey(e => e.IdCobrancaTipoEnfermagem);

                entity.Property(e => e.IdCobrancaTipoEnfermagem).HasColumnName("ID_COBRANCA_TIPO_ENFERMAGEM");

                entity.Property(e => e.TxDescricaoCobranca)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_COBRANCA");
            });

            modelBuilder.Entity<ColaboradorCobranca>(entity =>
            {
                entity.HasKey(e => e.IdUsuario)
                    .HasName("ColaboradorCobranca_PK");

                entity.Property(e => e.IdUsuario)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InEditar)
                    .HasColumnName("IN_EDITAR")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InVizualizar)
                    .HasColumnName("IN_VIZUALIZAR")
                    .HasDefaultValueSql("(1)");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithOne(p => p.ColaboradorCobranca)
                    .HasForeignKey<ColaboradorCobranca>(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ColaboradorCobranca_FK1");
            });

            modelBuilder.Entity<ColetaDadosPaciente>(entity =>
            {
                entity.HasKey(e => e.IdAtendimento);

                entity.Property(e => e.IdAtendimento)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.DtObito)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OBITO");

                entity.Property(e => e.IdCidPrimaria).HasColumnName("ID_CID_PRIMARIA");

                entity.Property(e => e.IdCidSecundaria).HasColumnName("ID_CID_SECUNDARIA");

                entity.Property(e => e.IdCidTerciaria).HasColumnName("ID_CID_TERCIARIA");

                entity.Property(e => e.NrDeclaracaoObito).HasColumnName("NR_DECLARACAO_OBITO");

                entity.Property(e => e.PrApache)
                    .HasColumnType("decimal(3, 0)")
                    .HasColumnName("PR_APACHE");

                entity.Property(e => e.TxCaso)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CASO");

                entity.Property(e => e.TxCausaPrimaria)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CAUSA_PRIMARIA");

                entity.Property(e => e.TxCausaSecundaria)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CAUSA_SECUNDARIA");

                entity.Property(e => e.TxCausaTerciaria)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CAUSA_TERCIARIA");

                entity.Property(e => e.TxDetalhamentoObito)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DETALHAMENTO_OBITO");

                entity.Property(e => e.TxDiagnosticoEntrada)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DIAGNOSTICO_ENTRADA");

                entity.Property(e => e.TxIntercorrencias)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_INTERCORRENCIAS");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.ColetaDadosPaciente)
                    .HasForeignKey<ColetaDadosPaciente>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ColetaDadosPaciente_Atendimento");
            });

            modelBuilder.Entity<ComplementoDietetico>(entity =>
            {
                entity.HasKey(e => e.IdComplementoDietetico)
                    .HasName("ComplementoDietetico_PK");

                entity.Property(e => e.IdComplementoDietetico).HasColumnName("ID_COMPLEMENTO_DIETETICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdIntervaloAplicacaoMedicamento).HasColumnName("ID_INTERVALO_APLICACAO_MEDICAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTipoCondicao).HasColumnName("ID_TIPO_CONDICAO");

                entity.Property(e => e.IdTipoViaAdministracao).HasColumnName("ID_TIPO_VIA_ADMINISTRACAO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCriterioMedico).HasColumnName("IN_CRITERIO_MEDICO");

                entity.Property(e => e.InFarmacia).HasColumnName("IN_FARMACIA");

                entity.Property(e => e.InLiberadoPrescricao).HasColumnName("IN_LIBERADO_PRESCRICAO");

                entity.Property(e => e.InObrigatorioIntervaloQuantidade).HasColumnName("IN_OBRIGATORIO_INTERVALO_QUANTIDADE");

                entity.Property(e => e.InReembolsavel).HasColumnName("IN_REEMBOLSAVEL");

                entity.Property(e => e.QnPadrao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_PADRAO");

                entity.HasOne(d => d.IdIntervaloAplicacaoMedicamentoNavigation)
                    .WithMany(p => p.ComplementoDietetico)
                    .HasForeignKey(d => d.IdIntervaloAplicacaoMedicamento)
                    .HasConstraintName("IntervaloAplicacaoMedicamento_ComplementoDietetico_FK1");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ComplementoDietetico)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_ComplementoDietetico_FK1");

                entity.HasOne(d => d.IdTipoCondicaoNavigation)
                    .WithMany(p => p.ComplementoDieteticoIdTipoCondicaoNavigation)
                    .HasForeignKey(d => d.IdTipoCondicao)
                    .HasConstraintName("TipoDiversos_ComplementoDietetico_FK2");

                entity.HasOne(d => d.IdTipoViaAdministracaoNavigation)
                    .WithMany(p => p.ComplementoDieteticoIdTipoViaAdministracaoNavigation)
                    .HasForeignKey(d => d.IdTipoViaAdministracao)
                    .HasConstraintName("TipoDiversos_ComplementoDietetico_FK1");

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.ComplementoDieteticoIdUsuarioAlteracaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ComplementoDietetico_FK2");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ComplementoDieteticoIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ComplementoDietetico_FK1");
            });

            modelBuilder.Entity<ComposicaoItem>(entity =>
            {
                entity.HasKey(e => e.IdComposicaoItem)
                    .HasName("ComposicaoItem_PK");

                entity.HasIndex(e => e.IdOperadora, "IX_ComposicaoItem_ID_OPERADORA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServico, "IX_ComposicaoItem_ID_SERVICO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdComposicaoItem).HasColumnName("ID_COMPOSICAO_ITEM");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InTodosMateriais).HasColumnName("IN_TODOS_MATERIAIS");

                entity.Property(e => e.InTodosMedicamentos).HasColumnName("IN_TODOS_MEDICAMENTOS");

                entity.Property(e => e.InTodosOpme).HasColumnName("IN_TODOS_OPME");

                entity.Property(e => e.InTodosProcedimentos).HasColumnName("IN_TODOS_PROCEDIMENTOS");

                entity.Property(e => e.InTodosTaxadiarias).HasColumnName("IN_TODOS_TAXADIARIAS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ComposicaoItem)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ComposicaoItem_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ComposicaoItem)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_ComposicaoItem_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ComposicaoItem)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ComposicaoItem_FK1");
            });

            modelBuilder.Entity<ComposicaoItemCarga>(entity =>
            {
                entity.HasKey(e => e.IdComposicaoItemCarga);

                entity.Property(e => e.IdComposicaoItemCarga).HasColumnName("ID_COMPOSICAO_ITEM_CARGA");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InCargaGabarito)
                    .IsRequired()
                    .HasColumnName("IN_CARGA_GABARITO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnCarga).HasColumnName("QN_CARGA");

                entity.Property(e => e.TxArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ComposicaoItemCarga)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComposicaoItemCarga_Pessoa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ComposicaoItemCarga)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComposicaoItemCarga_Usuario");
            });

            modelBuilder.Entity<ComposicaoItemProduto>(entity =>
            {
                entity.HasKey(e => e.IdComposicaoItemProduto)
                    .HasName("ComposicaoItem_Produto_PK");

                entity.ToTable("ComposicaoItem_Produto");

                entity.HasIndex(e => e.IdComposicaoItem, "IX_ComposicaoItem_Produto_ID_COMPOSICAO_ITEM")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdFabricante, e.IdProdutoDetalhe }, "IX_ComposicaoItem_Produto_ID_FABRICANTE_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_ComposicaoItem_Produto_K4_2");

                entity.Property(e => e.IdComposicaoItemProduto).HasColumnName("ID_COMPOSICAO_ITEM_PRODUTO");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdComposicaoItem).HasColumnName("ID_COMPOSICAO_ITEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InProdutoTipo).HasColumnName("IN_PRODUTO_TIPO");

                entity.Property(e => e.QnItem).HasColumnName("QN_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ComposicaoItemProduto)
                    .HasForeignKey(d => d.IdClassificacao)
                    .HasConstraintName("FK_ComposicaoItem_Produto_ClassificacaoProduto");

                entity.HasOne(d => d.IdComposicaoItemNavigation)
                    .WithMany(p => p.ComposicaoItemProduto)
                    .HasForeignKey(d => d.IdComposicaoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ComposicaoItem_ComposicaoItem_Produto_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ComposicaoItemProduto)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_ComposicaoItem_Produto_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ComposicaoItemProduto)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("ID_UNIDADE_ORGANIZACIONAL_ID_UNIDADE_ORGANIZACIONAL_UNIDADEORGANIZACIONAL");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ComposicaoItemProduto)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ComposicaoItem_Produto_FK1");
            });

            modelBuilder.Entity<ComposicaoItemProdutoExcecao>(entity =>
            {
                entity.HasKey(e => e.IdComposicaoItemProdutoExcecao)
                    .HasName("ComposicaoItem_Produto_Excecao_PK");

                entity.ToTable("ComposicaoItem_Produto_Excecao");

                entity.Property(e => e.IdComposicaoItemProdutoExcecao).HasColumnName("ID_COMPOSICAO_ITEM_PRODUTO_EXCECAO");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdComposicaoItem).HasColumnName("ID_COMPOSICAO_ITEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InProdutoTipo).HasColumnName("IN_PRODUTO_TIPO");

                entity.Property(e => e.QnItem).HasColumnName("QN_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ComposicaoItemProdutoExcecao)
                    .HasForeignKey(d => d.IdClassificacao)
                    .HasConstraintName("FK_ComposicaoItem_Produto_Excecao_ClassificacaoProduto");

                entity.HasOne(d => d.IdComposicaoItemNavigation)
                    .WithMany(p => p.ComposicaoItemProdutoExcecao)
                    .HasForeignKey(d => d.IdComposicaoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ComposicaoItem_ComposicaoItem_Produto_Excecao_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ComposicaoItemProdutoExcecao)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_ComposicaoItem_Produto_Excecao_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ComposicaoItemProdutoExcecao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("COMPOSICAOITEM_PRODUTO_EXCECAO_UNIDADEORGANIZACIONAL");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ComposicaoItemProdutoExcecao)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ComposicaoItem_Produto_Excecao_FK1");
            });

            modelBuilder.Entity<ComposicaoItemServico>(entity =>
            {
                entity.HasKey(e => e.IdComposicaoServico)
                    .HasName("ComposicaoItem_Servico_PK");

                entity.ToTable("ComposicaoItem_Servico");

                entity.Property(e => e.IdComposicaoServico).HasColumnName("ID_COMPOSICAO_SERVICO");

                entity.Property(e => e.IdComposicaoItem).HasColumnName("ID_COMPOSICAO_ITEM");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoGrupo).HasColumnName("ID_SERVICO_GRUPO");

                entity.Property(e => e.IdServicoSubespecialidade).HasColumnName("ID_SERVICO_SUBESPECIALIDADE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnItem)
                    .HasColumnName("QN_ITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdComposicaoItemNavigation)
                    .WithMany(p => p.ComposicaoItemServico)
                    .HasForeignKey(d => d.IdComposicaoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ComposicaoItem_ComposicaoItem_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ComposicaoItemServicoIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_ComposicaoItem_Servico_FK1");

                entity.HasOne(d => d.IdServicoGrupoNavigation)
                    .WithMany(p => p.ComposicaoItemServicoIdServicoGrupoNavigation)
                    .HasForeignKey(d => d.IdServicoGrupo)
                    .HasConstraintName("FK_ComposicaoItem_Servico_Servico");

                entity.HasOne(d => d.IdServicoSubespecialidadeNavigation)
                    .WithMany(p => p.ComposicaoItemServicoIdServicoSubespecialidadeNavigation)
                    .HasForeignKey(d => d.IdServicoSubespecialidade)
                    .HasConstraintName("FK_ComposicaoItem_Servico_Servico1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ComposicaoItemServico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("ID_UNIDADE_ORGANIZACIONAL_ID_UNIDADE_ORGANIZACIONAL_COMPOSICAOITEM_SERVICO");
            });

            modelBuilder.Entity<ComposicaoItemServicoExcecao>(entity =>
            {
                entity.HasKey(e => e.IdComposicaoServicoExcecao)
                    .HasName("ComposicaoItem_Servico_Excecao_PK");

                entity.ToTable("ComposicaoItem_Servico_Excecao");

                entity.Property(e => e.IdComposicaoServicoExcecao).HasColumnName("ID_COMPOSICAO_SERVICO_EXCECAO");

                entity.Property(e => e.IdComposicaoItem).HasColumnName("ID_COMPOSICAO_ITEM");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoGrupo).HasColumnName("ID_SERVICO_GRUPO");

                entity.Property(e => e.IdServicoSubespecialidade).HasColumnName("ID_SERVICO_SUBESPECIALIDADE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnItem)
                    .HasColumnName("QN_ITEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdComposicaoItemNavigation)
                    .WithMany(p => p.ComposicaoItemServicoExcecao)
                    .HasForeignKey(d => d.IdComposicaoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ComposicaoItem_ComposicaoItem_Servico_Excecao_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ComposicaoItemServicoExcecaoIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_ComposicaoItem_Servico_Excecao_FK1");

                entity.HasOne(d => d.IdServicoGrupoNavigation)
                    .WithMany(p => p.ComposicaoItemServicoExcecaoIdServicoGrupoNavigation)
                    .HasForeignKey(d => d.IdServicoGrupo)
                    .HasConstraintName("FK_ComposicaoItem_Servico_Excecao_Servico");

                entity.HasOne(d => d.IdServicoSubespecialidadeNavigation)
                    .WithMany(p => p.ComposicaoItemServicoExcecaoIdServicoSubespecialidadeNavigation)
                    .HasForeignKey(d => d.IdServicoSubespecialidade)
                    .HasConstraintName("FK_ComposicaoItem_Servico_Excecao_Servico1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ComposicaoItemServicoExcecao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("ID_UNIDADE_ORGANIZACIONAL_ID_UNIDADE_ORGANIZACIONAL_ComposicaoItem_Servico_Excecao");
            });

            modelBuilder.Entity<ConcentracaoPrincipioAtivo>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdPrincipioAtivo })
                    .HasName("PK_Concentracao");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdPrincipioAtivo).HasColumnName("ID_PRINCIPIO_ATIVO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InPadrao).HasColumnName("IN_PADRAO");

                entity.Property(e => e.InPercentual).HasColumnName("IN_PERCENTUAL");

                entity.Property(e => e.VlConcentracao).HasColumnName("VL_CONCENTRACAO");

                entity.HasOne(d => d.IdPrincipioAtivoNavigation)
                    .WithMany(p => p.ConcentracaoPrincipioAtivoIdPrincipioAtivoNavigation)
                    .HasForeignKey(d => d.IdPrincipioAtivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PrincipioAtivo_PrincipioAtivo_Produto_FK1");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ConcentracaoPrincipioAtivo)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Concentracao_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.ConcentracaoPrincipioAtivoIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("UnidadeMedida_Concentracao_FK1");
            });

            modelBuilder.Entity<ConciliacaoCobranca>(entity =>
            {
                entity.HasKey(e => e.IdConciliacao)
                    .HasName("ConciliacaoCobranca_PK");

                entity.Property(e => e.IdConciliacao).HasColumnName("ID_CONCILIACAO");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.VlConciliado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_CONCILIADO");

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.ConciliacaoCobranca)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LancamentoBancario_ConciliacaoCobranca_FK1");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.ConciliacaoCobranca)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("NotaEmitida_ConciliacaoCobranca_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ConciliacaoCobranca)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ConciliacaoCobranca_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ConciliacaoCobranca)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ConciliacaoCobranca_FK1");
            });

            modelBuilder.Entity<ConciliacaoHistorico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conciliacao_Historico");

                entity.Property(e => e.DtBaixaConvenio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA_CONVENIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaCobrancaComplementoHistorico).HasColumnName("ID_CONTA_COBRANCA_COMPLEMENTO_HISTORICO");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdTipoBaixa).HasColumnName("ID_TIPO_BAIXA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InEnviada)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IN_ENVIADA");

                entity.Property(e => e.InExcluido).HasColumnName("IN_EXCLUIDO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NrLancamento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LANCAMENTO");

                entity.Property(e => e.TxLogin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxTipoBaixa)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_BAIXA");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlFaturado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlLiqRecebSemAcresc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_LIQ_RECEB_SEM_ACRESC");

                entity.Property(e => e.VlReversao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_REVERSAO");

                entity.Property(e => e.VlTotalPago)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_PAGO");
            });

            modelBuilder.Entity<ConciliacaoUnimed>(entity =>
            {
                entity.HasKey(e => e.IdConciliacaounimed)
                    .HasName("ConciliacaoUnimed_PK");

                entity.Property(e => e.IdConciliacaounimed).HasColumnName("ID_CONCILIACAOUNIMED");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdArquivoEletronico).HasColumnName("ID_ARQUIVO_ELETRONICO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.VlAdequacao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ADEQUACAO");

                entity.Property(e => e.VlConciliado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CONCILIADO");

                entity.Property(e => e.VlCredito)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CREDITO");

                entity.Property(e => e.VlEstorno)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ESTORNO");

                entity.Property(e => e.VlFilmeL3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FILME_L3");

                entity.Property(e => e.VlFilmeL4)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FILME_L4");

                entity.Property(e => e.VlPago)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PAGO");

                entity.Property(e => e.VlPagoL3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PAGO_L3");

                entity.Property(e => e.VlPagoL4)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PAGO_L4");

                entity.Property(e => e.VlSaldoAnteriorLancamento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_SALDO_ANTERIOR_LANCAMENTO");

                entity.Property(e => e.VlSaldoPosteriorLancamento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_SALDO_POSTERIOR_LANCAMENTO");
            });

            modelBuilder.Entity<CondicaoPagamento>(entity =>
            {
                entity.HasKey(e => e.IdCondicaoPagamento)
                    .HasName("CondicaoPagamento_PK");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.NmCondicaoPagamento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONDICAO_PAGAMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<CondicaoPagamentoBionexo>(entity =>
            {
                entity.HasKey(e => e.IdCondicaoPagamentoBionexo)
                    .HasName("PK__Condicao__C6FEBDC832413CE8");

                entity.Property(e => e.IdCondicaoPagamentoBionexo).HasColumnName("ID_CONDICAO_PAGAMENTO_BIONEXO");

                entity.Property(e => e.IdEntidadeSistemaLegado).HasColumnName("ID_ENTIDADE_SISTEMA_LEGADO");

                entity.Property(e => e.IdFormaPagamentoBionexo).HasColumnName("ID_FORMA_PAGAMENTO_BIONEXO");

                entity.Property(e => e.NmCondicaoPagamentoBionexo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONDICAO_PAGAMENTO_BIONEXO");

                entity.HasOne(d => d.IdEntidadeSistemaLegadoNavigation)
                    .WithMany(p => p.CondicaoPagamentoBionexo)
                    .HasForeignKey(d => d.IdEntidadeSistemaLegado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CondicaoP__ID_EN__3429855A");
            });

            modelBuilder.Entity<ConfiguracaoMaquina>(entity =>
            {
                entity.HasKey(e => e.IdConfiguracaoMaquina);

                entity.Property(e => e.IdConfiguracaoMaquina).HasColumnName("ID_CONFIGURACAO_MAQUINA");

                entity.Property(e => e.TxIpMaquinaCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_IP_MAQUINA_CLIENTE");

                entity.Property(e => e.TxMacAddressMaquina)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_MAC_ADDRESS_MAQUINA");

                entity.Property(e => e.TxNomeMaquina)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_MAQUINA");

                entity.Property(e => e.TxPorta1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_1");

                entity.Property(e => e.TxPorta10)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_10");

                entity.Property(e => e.TxPorta11)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_11");

                entity.Property(e => e.TxPorta12)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_12");

                entity.Property(e => e.TxPorta13)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_13");

                entity.Property(e => e.TxPorta2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_2");

                entity.Property(e => e.TxPorta3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_3");

                entity.Property(e => e.TxPorta4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_4");

                entity.Property(e => e.TxPorta5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_5");

                entity.Property(e => e.TxPorta6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_6");

                entity.Property(e => e.TxPorta7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_7");

                entity.Property(e => e.TxPorta8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_8");

                entity.Property(e => e.TxPorta9)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTA_9");
            });

            modelBuilder.Entity<ConfirmacaoDevolucao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ConfirmacaoDevolucao");

                entity.Property(e => e.CodigoItem)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO_ITEM");

                entity.Property(e => e.HrHorarioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORARIO_ADMINISTRACAO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_LOTEPRODUTOITEM");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUnidadeSolicitante).HasColumnName("ID_UNIDADE_SOLICITANTE");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");
            });

            modelBuilder.Entity<ConsignadoPendenteNota>(entity =>
            {
                entity.HasKey(e => e.IdConsignadoPendenteNota);

                entity.HasIndex(e => e.IdDispensacaoEnfermagem, "IX_ConsignadoPendenteNota_K12")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdOrdemCompra, "IX_ConsignadoPendenteNota_K13")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_ConsignadoPendenteNota_K4")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.IdOrdemCompra }, "IX_ConsignadoPendenteNota_K4_K5_K13_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdAtendimento, e.IdStatusConsignadoPendente, e.IdNotaEntrada }, "IX_ConsignadoPendenteNota_K6_K7_K9")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdStatusConsignadoPendente, "IX_ConsignadoPendenteNota_K7_1_2_3_4_5_6_8_9_10_11_12_13")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdStatusConsignadoPendente, "IX_ConsignadoPendenteNota_K7_3_6")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdStatusConsignadoPendente, "IX_ConsignadoPendenteNota_K7_6_12")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdNotaEntrada, "IX_ConsignadoPendenteNota_K9")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdConsignadoPendenteNota).HasColumnName("ID_CONSIGNADO_PENDENTE_NOTA");

                entity.Property(e => e.CdProduto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRODUTO");

                entity.Property(e => e.DtConsignadoPendenteNota)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONSIGNADO_PENDENTE_NOTA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdDispensacaoEnfermagem).HasColumnName("ID_DISPENSACAO_ENFERMAGEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdOrdemCompra).HasColumnName("ID_ORDEM_COMPRA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServicoTuss).HasColumnName("ID_SERVICO_TUSS");

                entity.Property(e => e.IdStatusConsignadoPendente).HasColumnName("ID_STATUS_CONSIGNADO_PENDENTE");

                entity.Property(e => e.PrMargemComercializacao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_MARGEM_COMERCIALIZACAO");

                entity.Property(e => e.PrVenda)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_VENDA");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.TxDescricaoProduto)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_PRODUTO");

                entity.Property(e => e.VlTaxaComercializacao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TAXA_COMERCIALIZACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsignadoPendenteNota_Atendimento");

                entity.HasOne(d => d.IdDispensacaoEnfermagemNavigation)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => d.IdDispensacaoEnfermagem)
                    .HasConstraintName("FK_ConsignadoPendenteNota_DispensacaoEnfermagem");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("FK_ConsignadoPendenteNota_LoteProdutoItem");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => d.IdNotaEntrada)
                    .HasConstraintName("FK_ConsignadoPendenteNota_NotaEntrada");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .HasConstraintName("FK_ConsignadoPendenteNota_OrdemCompra");

                entity.HasOne(d => d.IdServicoTussNavigation)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => d.IdServicoTuss)
                    .HasConstraintName("FK_ConsignadoPendenteNota_Servico");

                entity.HasOne(d => d.IdStatusConsignadoPendenteNavigation)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => d.IdStatusConsignadoPendente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsignadoPendenteNota_TipoDiversos");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ConsignadoPendenteNota)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("FK_ConsignadoPendenteNota_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<ConsignadoPendenteNotaHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdConsignadoPendenteNota, e.IdStatusConsignadoPendenteNota });

                entity.Property(e => e.IdConsignadoPendenteNota).HasColumnName("ID_CONSIGNADO_PENDENTE_NOTA");

                entity.Property(e => e.IdStatusConsignadoPendenteNota).HasColumnName("ID_STATUS_CONSIGNADO_PENDENTE_NOTA");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdConsignadoPendenteNotaNavigation)
                    .WithMany(p => p.ConsignadoPendenteNotaHistorico)
                    .HasForeignKey(d => d.IdConsignadoPendenteNota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsignadoPendenteNotaHistorico_ConsignadoPendenteNota");

                entity.HasOne(d => d.IdStatusConsignadoPendenteNotaNavigation)
                    .WithMany(p => p.ConsignadoPendenteNotaHistorico)
                    .HasForeignKey(d => d.IdStatusConsignadoPendenteNota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsignadoPendenteNotaHistorico_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ConsignadoPendenteNotaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConsignadoPendenteNotaHistorico_Usuario");
            });

            modelBuilder.Entity<Conta>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("Conta_PK");

                entity.HasIndex(e => new { e.DtFechamento, e.InParticular, e.InCancelada }, "IX_Conta_DT_FECHAMENTO_IN_PARTICULAR_IN_CANCELADA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdGuia, "IX_Conta_ID_GUIA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdLote, "IX_Conta_ID_LOTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InCancelada, e.IdGuia }, "IX_Conta_IN_CANCELADA_ID_GUIA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InCancelada, e.InExterno }, "IX_Conta_IN_CANCELADA_IN_EXTERNO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InParticular, e.DtFechamento }, "IX_Conta_IN_PARTICULAR_DT_FECHAMENTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InParticular, e.IdGuia }, "IX_Conta_IN_PARTICULAR_ID_GUIA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InParticular, e.InCancelada, e.DtFechamento }, "IX_Conta_IN_PARTICULAR_IN_CANCELADA_DT_FECHAMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InParticular, e.InCancelada, e.IdGuia }, "IX_Conta_IN_PARTICULAR_IN_CANCELADA_ID_GUIA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InParticular, e.InCancelada, e.IdLote, e.InExterno }, "IX_Conta_IN_PARTICULAR_IN_CANCELADA_ID_LOTE_IN_EXTERNO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InParticular, e.InCancelada, e.InExterno, e.DtFechamento }, "IX_Conta_IN_PARTICULAR_IN_CANCELADA_IN_EXTERNO_DT_FECHAMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdConta, e.IdAtendimento }, "IX_Conta_K1_K2")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdAtendimento, e.DtFechamento, e.InParticular }, "IX_Conta_K2_K3_K5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InParticular, e.IdAtendimento, e.IdConta }, "IX_Conta_K5_K2_K1_3_8")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.CdConvenio)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONVENIO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtPreview)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVIEW");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdContaOrigem).HasColumnName("ID_CONTA_ORIGEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdUsuarioCancelamento).HasColumnName("ID_USUARIO_CANCELAMENTO");

                entity.Property(e => e.InAuditada).HasColumnName("IN_AUDITADA");

                entity.Property(e => e.InAuditoriaExterna).HasColumnName("IN_AUDITORIA_EXTERNA");

                entity.Property(e => e.InAvulsa).HasColumnName("IN_AVULSA");

                entity.Property(e => e.InCancelada).HasColumnName("IN_CANCELADA");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InParcial).HasColumnName("IN_PARCIAL");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.InProcessando)
                    .HasColumnName("IN_PROCESSANDO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InRejeitada).HasColumnName("IN_REJEITADA");

                entity.Property(e => e.NrPermanecia).HasColumnName("NR_PERMANECIA");

                entity.Property(e => e.QnTotalItem).HasColumnName("QN_TOTAL_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlHospital)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_HOSPITAL");

                entity.Property(e => e.VlTerceiro)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TERCEIRO");

                entity.Property(e => e.VlTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.Conta)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_Conta_FK1");

                entity.HasOne(d => d.IdContaOrigemNavigation)
                    .WithMany(p => p.InverseIdContaOrigemNavigation)
                    .HasForeignKey(d => d.IdContaOrigem)
                    .HasConstraintName("FK_Conta_Conta");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithMany(p => p.Conta)
                    .HasForeignKey(d => d.IdLote)
                    .HasConstraintName("LoteConta_Conta_FK1");

                entity.HasOne(d => d.IdUsuarioCancelamentoNavigation)
                    .WithMany(p => p.Conta)
                    .HasForeignKey(d => d.IdUsuarioCancelamento)
                    .HasConstraintName("Usuario_Conta_FK1");
            });

            modelBuilder.Entity<ContaAuditoria>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("Conta_Auditoria_PK");

                entity.ToTable("Conta_Auditoria");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO");

                entity.Property(e => e.DtDevolucaoCorrecao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO_CORRECAO");

                entity.Property(e => e.DtDevolucaoReal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO_REAL");

                entity.Property(e => e.DtEntrada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTRADA");

                entity.Property(e => e.TxMotivoDevolucao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_DEVOLUCAO");
            });

            modelBuilder.Entity<ContaBancaria>(entity =>
            {
                entity.HasKey(e => e.IdContaBancaria)
                    .HasName("ContaBancaria_PK");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.DtAbertura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ABERTURA");

                entity.Property(e => e.DtMinParaLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MIN_PARA_LANCAMENTO");

                entity.Property(e => e.DtSaldoConferido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SALDO_CONFERIDO");

                entity.Property(e => e.IdAgencia).HasColumnName("ID_AGENCIA");

                entity.Property(e => e.IdContaTipo).HasColumnName("ID_CONTA_TIPO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InEncerrada).HasColumnName("IN_ENCERRADA");

                entity.Property(e => e.NrConta).HasColumnName("NR_CONTA");

                entity.Property(e => e.NrDigito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NR_DIGITO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCrNaoCompensado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CR_NAO_COMPENSADO");

                entity.Property(e => e.VlDbNaoCompensado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DB_NAO_COMPENSADO");

                entity.Property(e => e.VlSaldoAtual).HasColumnName("VL_SALDO_ATUAL");

                entity.Property(e => e.VlSaldoCompensado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_SALDO_COMPENSADO");

                entity.HasOne(d => d.IdAgenciaNavigation)
                    .WithMany(p => p.ContaBancaria)
                    .HasForeignKey(d => d.IdAgencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Agencia_ContaBancaria_FK1");

                entity.HasOne(d => d.IdContaTipoNavigation)
                    .WithMany(p => p.ContaBancaria)
                    .HasForeignKey(d => d.IdContaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ContaBancaria_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaBancaria)
                    .HasForeignKey(d => d.IdUsuario);
            });

            modelBuilder.Entity<ContaBancariaLog>(entity =>
            {
                entity.HasKey(e => e.IdContaBancariaLog)
                    .HasName("ContaBancaria_Log_PK");

                entity.ToTable("ContaBancaria_Log");

                entity.Property(e => e.IdContaBancariaLog).HasColumnName("ID_CONTA_BANCARIA_LOG");

                entity.Property(e => e.DtAbertura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ABERTURA");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtMinParaLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MIN_PARA_LANCAMENTO");

                entity.Property(e => e.DtSaldoConferido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SALDO_CONFERIDO");

                entity.Property(e => e.IdAgencia).HasColumnName("ID_AGENCIA");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdContaTipo).HasColumnName("ID_CONTA_TIPO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InEncerrada).HasColumnName("IN_ENCERRADA");

                entity.Property(e => e.NrConta).HasColumnName("NR_CONTA");

                entity.Property(e => e.NrDigito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NR_DIGITO");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCrNaoCompensado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CR_NAO_COMPENSADO");

                entity.Property(e => e.VlDbNaoCompensado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DB_NAO_COMPENSADO");

                entity.Property(e => e.VlSaldoAtual).HasColumnName("VL_SALDO_ATUAL");

                entity.Property(e => e.VlSaldoCompensado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_SALDO_COMPENSADO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaBancariaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaBancariaPerfil>(entity =>
            {
                entity.HasKey(e => e.IdContaBancariaPerfil);

                entity.ToTable("ContaBancaria_Perfil");

                entity.Property(e => e.IdContaBancariaPerfil).HasColumnName("ID_CONTA_BANCARIA_PERFIL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.ContaBancariaPerfil)
                    .HasForeignKey(d => d.IdContaBancaria)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.ContaBancariaPerfil)
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaBancariaPerfil)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ContaCaixa>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("Conta_Caixa_PK");

                entity.ToTable("Conta_Caixa");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.MotivoDispCobranca)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MOTIVO_DISP_COBRANCA");

                entity.Property(e => e.UsuarioRecebeu).HasColumnName("USUARIO_RECEBEU");
            });

            modelBuilder.Entity<ContaCobranca>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("Conta_Cobranca_PK");

                entity.ToTable("Conta_Cobranca");

                entity.HasIndex(e => new { e.IdConta, e.VlConta, e.InProduto }, "IX_Conta_Cobranca_K1_K2_K16")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.VlConta, e.InProduto }, "IX_Conta_Cobranca_VL_CONTA_IN_PRODUTO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtDevolucaoCorrecao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO_CORRECAO");

                entity.Property(e => e.IdJustificativaGlosaGenerica)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA_GLOSA_GENERICA");

                entity.Property(e => e.IdUnidadeOrganizacionalDev).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_DEV");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InGlosaGenerica).HasColumnName("IN_GLOSA_GENERICA");

                entity.Property(e => e.InGlosaTotal).HasColumnName("IN_GLOSA_TOTAL");

                entity.Property(e => e.InProduto).HasColumnName("IN_PRODUTO");

                entity.Property(e => e.TxDescAcrescimoGenerico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_ACRESCIMO_GENERICO");

                entity.Property(e => e.TxDescGlosaGenerica)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_GLOSA_GENERICA");

                entity.Property(e => e.TxMotivoDevolucao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_DEVOLUCAO");

                entity.Property(e => e.TxObsSituacaoGlosa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_SITUACAO_GLOSA");

                entity.Property(e => e.VlAcrescimoGenerico).HasColumnName("VL_ACRESCIMO_GENERICO");

                entity.Property(e => e.VlConta).HasColumnName("VL_CONTA");

                entity.Property(e => e.VlGlosaGenerica).HasColumnName("VL_GLOSA_GENERICA");

                entity.Property(e => e.VlHospital)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_HOSPITAL");

                entity.Property(e => e.VlTerceiro)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TERCEIRO");

                entity.Property(e => e.VlTotalAcrescimo).HasColumnName("VL_TOTAL_ACRESCIMO");

                entity.Property(e => e.VlTotalConta).HasColumnName("VL_TOTAL_CONTA");

                entity.Property(e => e.VlTotalCredito)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_CREDITO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VlTotalEstorno)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_ESTORNO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VlTotalFi).HasColumnName("VL_TOTAL_FI");

                entity.Property(e => e.VlTotalFiContaLimpa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_FI_CONTA_LIMPA");

                entity.Property(e => e.VlTotalGlosas).HasColumnName("VL_TOTAL_GLOSAS");

                entity.Property(e => e.VlTotalGlosasContaLimpa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_GLOSAS_CONTA_LIMPA");

                entity.Property(e => e.VlTotalLiberado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_LIBERADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VlTotalRevertido).HasColumnName("VL_TOTAL_REVERTIDO");

                entity.HasOne(d => d.IdJustificativaGlosaGenericaNavigation)
                    .WithMany(p => p.ContaCobranca)
                    .HasForeignKey(d => d.IdJustificativaGlosaGenerica)
                    .HasConstraintName("FK_Conta_Cobranca_JustificativaGlosaFI");

                entity.HasOne(d => d.IdUnidadeOrganizacionalDevNavigation)
                    .WithMany(p => p.ContaCobranca)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalDev)
                    .HasConstraintName("UnidadeOrganizacional_Conta_Cobranca_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaCobranca)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_Conta_Cobranca_FK1");
            });

            modelBuilder.Entity<ContaCobrancaComplemento>(entity =>
            {
                entity.HasKey(e => e.IdConta);

                entity.ToTable("Conta_Cobranca_Complemento");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtBaixaConvenio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA_CONVENIO");

                entity.Property(e => e.DtBaixaParticular)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA_PARTICULAR");

                entity.Property(e => e.IdSituacao).HasColumnName("ID_SITUACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.VlTotalPago)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_PAGO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithOne(p => p.ContaCobrancaComplemento)
                    .HasForeignKey<ContaCobrancaComplemento>(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Conta_Cobranca_Complemento_Conta_Cobranca1");

                entity.HasOne(d => d.IdSituacaoNavigation)
                    .WithMany(p => p.ContaCobrancaComplemento)
                    .HasForeignKey(d => d.IdSituacao)
                    .HasConstraintName("FK_Conta_Cobranca_Complemento_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaCobrancaComplemento)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Conta_Cobranca_Complemento_Usuario");
            });

            modelBuilder.Entity<ContaCobrancaComplementoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdContaCobrancaComplementoHistorico);

                entity.ToTable("Conta_Cobranca_Complemento_Historico");

                entity.HasIndex(e => e.IdLancamentoBancario, "IX_Conta_Cobranca_Complemento_Historico_ID_LANCAMENTO_BANCARIO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdContaCobrancaComplementoHistorico).HasColumnName("ID_CONTA_COBRANCA_COMPLEMENTO_HISTORICO");

                entity.Property(e => e.DtBaixaConvenio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA_CONVENIO");

                entity.Property(e => e.DtBaixaParticular)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA_PARTICULAR");

                entity.Property(e => e.DtConfirmacaoConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONFIRMACAO_CONCILIACAO");

                entity.Property(e => e.IdArquivoEletronico).HasColumnName("ID_ARQUIVO_ELETRONICO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdMovimentacaocontaparcelabaixada).HasColumnName("ID_MOVIMENTACAOCONTAPARCELABAIXADA");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.IdSituacao).HasColumnName("ID_SITUACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InConciliada).HasColumnName("IN_CONCILIADA");

                entity.Property(e => e.InEnviada).HasColumnName("IN_ENVIADA");

                entity.Property(e => e.InExcluido).HasColumnName("IN_EXCLUIDO");

                entity.Property(e => e.NrLancamentoBancario).HasColumnName("NR_LANCAMENTO_BANCARIO");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlFaturado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FATURADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VlLiqRecebSemAcresc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_LIQ_RECEB_SEM_ACRESC");

                entity.Property(e => e.VlReversao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_REVERSAO");

                entity.Property(e => e.VlTotalPago)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_PAGO");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.ContaCobrancaComplementoHistorico)
                    .HasForeignKey(d => d.IdCartarecurso)
                    .HasConstraintName("FK_Conta_Cob_Compl_Hist_CartaRecurso");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.ContaCobrancaComplementoHistorico)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Conta_Cobranca_Complemento_Historico_Conta_Cobranca1");

                entity.HasOne(d => d.IdFaturamentobaixagrupoNavigation)
                    .WithMany(p => p.ContaCobrancaComplementoHistorico)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupo)
                    .HasConstraintName("FK_CCCH_FaturamentoBaixaGrupo_ID_FATURAMENTOBAIXAGRUPO");

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.ContaCobrancaComplementoHistorico)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .HasConstraintName("CCCH_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdOperadorarecebimentoNavigation)
                    .WithMany(p => p.ContaCobrancaComplementoHistorico)
                    .HasForeignKey(d => d.IdOperadorarecebimento)
                    .HasConstraintName("FK_CCCH_OperadoraRecebimento");

                entity.HasOne(d => d.IdSituacaoNavigation)
                    .WithMany(p => p.ContaCobrancaComplementoHistorico)
                    .HasForeignKey(d => d.IdSituacao)
                    .HasConstraintName("FK_Conta_Cobranca_Complemento_Historico_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaCobrancaComplementoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Conta_Cobranca_Complemento_Historico_Usuario");
            });

            modelBuilder.Entity<ContaCobrancaItem>(entity =>
            {
                entity.HasKey(e => e.IdContaCobrancaItem)
                    .HasName("Conta_Cobranca_Item_PK");

                entity.ToTable("Conta_Cobranca_Item");

                entity.Property(e => e.IdContaCobrancaItem).HasColumnName("ID_CONTA_COBRANCA_ITEM");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InGlosaTotal).HasColumnName("IN_GLOSA_TOTAL");

                entity.Property(e => e.VlAcrescimo)
                    .HasColumnType("money")
                    .HasColumnName("VL_ACRESCIMO");

                entity.Property(e => e.VlCredito)
                    .HasColumnType("money")
                    .HasColumnName("VL_CREDITO");

                entity.Property(e => e.VlEstorno)
                    .HasColumnType("money")
                    .HasColumnName("VL_ESTORNO");

                entity.Property(e => e.VlFi)
                    .HasColumnType("money")
                    .HasColumnName("VL_FI");

                entity.Property(e => e.VlGlosa)
                    .HasColumnType("money")
                    .HasColumnName("VL_GLOSA");

                entity.Property(e => e.VlItem)
                    .HasColumnType("money")
                    .HasColumnName("VL_ITEM");

                entity.Property(e => e.VlLiberado)
                    .HasColumnType("money")
                    .HasColumnName("VL_LIBERADO");

                entity.Property(e => e.VlRevertido)
                    .HasColumnType("money")
                    .HasColumnName("VL_REVERTIDO");

                entity.Property(e => e.VlSaldo)
                    .HasColumnType("money")
                    .HasColumnName("VL_SALDO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaCobrancaItem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Conta_Cobranca_Item_FK1");
            });

            modelBuilder.Entity<ContaComplemento>(entity =>
            {
                entity.HasKey(e => e.IdConta);

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtAltaObito)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA_OBITO");

                entity.Property(e => e.DtConfirmacaoVinculoOpmesSus)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONFIRMACAO_VINCULO_OPMES_SUS");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdCidComplementar).HasColumnName("ID_CID_COMPLEMENTAR");

                entity.Property(e => e.IdCidSecundario).HasColumnName("ID_CID_SECUNDARIO");

                entity.Property(e => e.IdEspecialidadeLeito).HasColumnName("ID_ESPECIALIDADE_LEITO");

                entity.Property(e => e.IdLiberaCriticaSus).HasColumnName("ID_LIBERA_CRITICA_SUS");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdTipoApac).HasColumnName("ID_TIPO_APAC");

                entity.Property(e => e.IdTipoContaSus).HasColumnName("ID_TIPO_CONTA_SUS");

                entity.Property(e => e.IdUsuarioConfirmacaoVinculoOpmesSus).HasColumnName("ID_USUARIO_CONFIRMACAO_VINCULO_OPMES_SUS");

                entity.Property(e => e.InPendenteConfirmacaoVinculoOpmesSus).HasColumnName("IN_PENDENTE_CONFIRMACAO_VINCULO_OPMES_SUS");

                entity.Property(e => e.NrAihAnterior)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_AIH_ANTERIOR");

                entity.Property(e => e.NrAihPosterior)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_AIH_POSTERIOR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.VlDescontoConta).HasColumnName("VL_DESCONTO_CONTA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ContaComplemento)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaComplemento_Atendimento");

                entity.HasOne(d => d.IdCidComplementarNavigation)
                    .WithMany(p => p.ContaComplementoIdCidComplementarNavigation)
                    .HasForeignKey(d => d.IdCidComplementar)
                    .HasConstraintName("ContaComplemento_Cid_FK1");

                entity.HasOne(d => d.IdCidSecundarioNavigation)
                    .WithMany(p => p.ContaComplementoIdCidSecundarioNavigation)
                    .HasForeignKey(d => d.IdCidSecundario)
                    .HasConstraintName("ContaComplemento_Cid_FK2");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithOne(p => p.ContaComplemento)
                    .HasForeignKey<ContaComplemento>(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaComplemento_Conta_FK");

                entity.HasOne(d => d.IdEspecialidadeLeitoNavigation)
                    .WithMany(p => p.ContaComplementoIdEspecialidadeLeitoNavigation)
                    .HasForeignKey(d => d.IdEspecialidadeLeito)
                    .HasConstraintName("FK__ContaComp__ID_ES__3CC7564E");

                entity.HasOne(d => d.IdLiberaCriticaSusNavigation)
                    .WithMany(p => p.ContaComplementoIdLiberaCriticaSusNavigation)
                    .HasForeignKey(d => d.IdLiberaCriticaSus)
                    .HasConstraintName("FK_ContaComplemento_TipoDiversos");

                entity.HasOne(d => d.IdMotivoSaidaNavigation)
                    .WithMany(p => p.ContaComplemento)
                    .HasForeignKey(d => d.IdMotivoSaida)
                    .HasConstraintName("ContaComplemento_TipoAltaSUS_FK");

                entity.HasOne(d => d.IdTipoContaSusNavigation)
                    .WithMany(p => p.ContaComplementoIdTipoContaSusNavigation)
                    .HasForeignKey(d => d.IdTipoContaSus)
                    .HasConstraintName("FK_ContaComplemento_TipoDiversos1");

                entity.HasOne(d => d.IdUsuarioConfirmacaoVinculoOpmesSusNavigation)
                    .WithMany(p => p.ContaComplemento)
                    .HasForeignKey(d => d.IdUsuarioConfirmacaoVinculoOpmesSus)
                    .HasConstraintName("ContaComplemento_Usuario_FK1");
            });

            modelBuilder.Entity<ContaConciliacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Conciliacao");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdSituacao).HasColumnName("ID_SITUACAO");

                entity.Property(e => e.InRejeitada).HasColumnName("IN_REJEITADA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.TxDescricaoSituacao)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SITUACAO");

                entity.Property(e => e.VlFaturado).HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");
            });

            modelBuilder.Entity<ContaConciliacaoLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Conciliacao_Lote");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.VlFaturado).HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlPago)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_PAGO");
            });

            modelBuilder.Entity<ContaConciliacaoSituacaoTipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Conciliacao_Situacao_Tipo");

                entity.Property(e => e.IdSituacao)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_SITUACAO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<ContaCorrente>(entity =>
            {
                entity.HasKey(e => e.IdContaCorrente);

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtMovimentacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MOVIMENTACAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.IdCaixamovimento).HasColumnName("ID_CAIXAMOVIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdContaFaturamento).HasColumnName("ID_CONTA_FATURAMENTO");

                entity.Property(e => e.IdFormaPagamento).HasColumnName("ID_FORMA_PAGAMENTO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLancamentoBancarioVinculado).HasColumnName("ID_LANCAMENTO_BANCARIO_VINCULADO");

                entity.Property(e => e.IdMotivoAdiantamento)
                    .HasColumnName("ID_MOTIVO_ADIANTAMENTO")
                    .HasComment("motivo do adiantamento, tabela 419");

                entity.Property(e => e.IdParcelacontareceberBaixaCompensacao).HasColumnName("ID_PARCELACONTARECEBER_BAIXA_COMPENSACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioCancelou).HasColumnName("ID_USUARIO_CANCELOU");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InRestituido).HasColumnName("IN_RESTITUIDO");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NrAgencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_AGENCIA");

                entity.Property(e => e.NrCc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_CC");

                entity.Property(e => e.NrCheque)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CHEQUE");

                entity.Property(e => e.NrCnpjResponsavel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CNPJ_RESPONSAVEL");

                entity.Property(e => e.NrTelefone)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NR_TELEFONE");

                entity.Property(e => e.TxCartao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_CARTAO");

                entity.Property(e => e.TxCidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_CIDADE");

                entity.Property(e => e.TxDebitoCredito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_DEBITO_CREDITO");

                entity.Property(e => e.TxEndereco)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");

                entity.Property(e => e.VlMovimentacao).HasColumnName("VL_MOVIMENTACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ContaCorrente)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaCorrente_Atendimento");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.ContaCorrente)
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_ContaCorrente_Banco");

                entity.HasOne(d => d.IdCaixamovimentoNavigation)
                    .WithMany(p => p.ContaCorrente)
                    .HasForeignKey(d => d.IdCaixamovimento);

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.ContaCorrente)
                    .HasForeignKey(d => d.IdContaBancaria);

                entity.HasOne(d => d.IdFormaPagamentoNavigation)
                    .WithMany(p => p.ContaCorrenteIdFormaPagamentoNavigation)
                    .HasForeignKey(d => d.IdFormaPagamento)
                    .HasConstraintName("FK_ContaCorrente_TipoDiversos");

                entity.HasOne(d => d.IdLancamentoBancarioVinculadoNavigation)
                    .WithMany(p => p.ContaCorrente)
                    .HasForeignKey(d => d.IdLancamentoBancarioVinculado);

                entity.HasOne(d => d.IdMotivoAdiantamentoNavigation)
                    .WithMany(p => p.ContaCorrenteIdMotivoAdiantamentoNavigation)
                    .HasForeignKey(d => d.IdMotivoAdiantamento)
                    .HasConstraintName("FK_ContaCorrente_TipoDiversos1");

                entity.HasOne(d => d.IdParcelacontareceberBaixaCompensacaoNavigation)
                    .WithMany(p => p.ContaCorrente)
                    .HasForeignKey(d => d.IdParcelacontareceberBaixaCompensacao);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaCorrenteIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaCorrente_Usuario");

                entity.HasOne(d => d.IdUsuarioCancelouNavigation)
                    .WithMany(p => p.ContaCorrenteIdUsuarioCancelouNavigation)
                    .HasForeignKey(d => d.IdUsuarioCancelou)
                    .HasConstraintName("FK_ContaCorrente_UsuarioCancelado");
            });

            modelBuilder.Entity<ContaCorrenteLog>(entity =>
            {
                entity.HasKey(e => e.IdContaCorrenteLog);

                entity.ToTable("ContaCorrente_Log");

                entity.Property(e => e.IdContaCorrenteLog).HasColumnName("ID_CONTA_CORRENTE_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtMovimentacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MOVIMENTACAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.IdCaixamovimento).HasColumnName("ID_CAIXAMOVIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdContaFaturamento).HasColumnName("ID_CONTA_FATURAMENTO");

                entity.Property(e => e.IdFormaPagamento).HasColumnName("ID_FORMA_PAGAMENTO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLancamentoBancarioVinculado).HasColumnName("ID_LANCAMENTO_BANCARIO_VINCULADO");

                entity.Property(e => e.IdMotivoAdiantamento).HasColumnName("ID_MOTIVO_ADIANTAMENTO");

                entity.Property(e => e.IdParcelacontareceberBaixaCompensacao).HasColumnName("ID_PARCELACONTARECEBER_BAIXA_COMPENSACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioCancelou).HasColumnName("ID_USUARIO_CANCELOU");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InRestituido).HasColumnName("IN_RESTITUIDO");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NrAgencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_AGENCIA");

                entity.Property(e => e.NrCc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_CC");

                entity.Property(e => e.NrCheque)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CHEQUE");

                entity.Property(e => e.NrCnpjResponsavel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CNPJ_RESPONSAVEL");

                entity.Property(e => e.NrTelefone)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NR_TELEFONE");

                entity.Property(e => e.TxCartao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_CARTAO");

                entity.Property(e => e.TxCidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_CIDADE");

                entity.Property(e => e.TxDebitoCredito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_DEBITO_CREDITO");

                entity.Property(e => e.TxEndereco)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");

                entity.Property(e => e.VlMovimentacao).HasColumnName("VL_MOVIMENTACAO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaCorrenteLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaDespesaReceita>(entity =>
            {
                entity.HasKey(e => e.IdContadespesareceita);

                entity.HasIndex(e => e.CdConta, "UK_ContaDespesaReceita_CD_CONTA")
                    .IsUnique();

                entity.HasIndex(e => e.CdReduzido, "UK_ContaDespesaReceita_CD_REDUZIDO")
                    .IsUnique();

                entity.Property(e => e.IdContadespesareceita).HasColumnName("ID_CONTADESPESARECEITA");

                entity.Property(e => e.CdConta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONTA");

                entity.Property(e => e.CdReduzido).HasColumnName("CD_REDUZIDO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContapai).HasColumnName("ID_CONTAPAI");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivada)
                    .IsRequired()
                    .HasColumnName("IN_ATIVADA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InSintetica).HasColumnName("IN_SINTETICA");

                entity.Property(e => e.NmConta)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTA");

                entity.HasOne(d => d.IdContapaiNavigation)
                    .WithMany(p => p.InverseIdContapaiNavigation)
                    .HasForeignKey(d => d.IdContapai)
                    .HasConstraintName("FK_ContaDR_ContaDR_ID_CONTAPAI");

                entity.HasOne(d => d.IdTipoContaNavigation)
                    .WithMany(p => p.ContaDespesaReceita)
                    .HasForeignKey(d => d.IdTipoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaDespesaReceita)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ContaDtLiberacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_DT_LIBERACAO");

                entity.Property(e => e.DtLiberacaoConta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO_CONTA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");
            });

            modelBuilder.Entity<ContaDtLiberacaoTab>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("PK_Conta_DT_LIBERACAO");

                entity.ToTable("Conta_DT_LIBERACAO_TAB");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtLiberacaoConta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithOne(p => p.ContaDtLiberacaoTab)
                    .HasForeignKey<ContaDtLiberacaoTab>(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Conta_DT_LIBERACAO_TAB_Conta");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithMany(p => p.ContaDtLiberacaoTab)
                    .HasForeignKey(d => d.IdLote)
                    .HasConstraintName("FK_Conta_DT_LIBERACAO_TAB_LoteConta");

                entity.HasOne(d => d.IdLoteContaMapaNavigation)
                    .WithMany(p => p.ContaDtLiberacaoTab)
                    .HasForeignKey(d => d.IdLoteContaMapa)
                    .HasConstraintName("FK_Conta_DT_LIBERACAO_TAB_LoteContaMapa");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ContaDtLiberacaoTab)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_Conta_DT_LIBERACAO_TAB_PessoaOperadora");
            });

            modelBuilder.Entity<ContaFechamento>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("ContaFechamento_PK");

                entity.HasIndex(e => e.IdUsuarioFechamento, "IX_ContaFechamento_ID_USUARIO_FECHAMENTO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.IdUsuarioFechamento).HasColumnName("ID_USUARIO_FECHAMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdUsuarioFechamentoNavigation)
                    .WithMany(p => p.ContaFechamento)
                    .HasForeignKey(d => d.IdUsuarioFechamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ContaFechamento_FK1");
            });

            modelBuilder.Entity<ContaFechamentoPermanencia>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("ContaFechamentoPermanencia_PK");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtFechamentoPermanencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO_PERMANENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<ContaHemodinamica>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");
            });

            modelBuilder.Entity<ContaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdContaHistorico)
                    .HasName("ContaHistorico_PK");

                entity.HasIndex(e => new { e.IdConta, e.IdHistoricoContaTipo, e.DtOcorrencia }, "IX_ContaHistorico_K2_K4_K3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdContaHistorico).HasColumnName("ID_CONTA_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdHistoricoContaTipo).HasColumnName("ID_HISTORICO_CONTA_TIPO");

                entity.Property(e => e.IdUsuarioOcorrencia).HasColumnName("ID_USUARIO_OCORRENCIA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdUsuarioOcorrenciaNavigation)
                    .WithMany(p => p.ContaHistorico)
                    .HasForeignKey(d => d.IdUsuarioOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Conta_Usuario_FK");
            });

            modelBuilder.Entity<ContaItem>(entity =>
            {
                entity.HasKey(e => e.IdContaItem)
                    .HasName("ContaItem_PK");

                entity.HasIndex(e => e.IdConta, "IX_ContaItem_ID_CONTA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdConta, e.InExtra }, "IX_ContaItem_ID_CONTA_IN_EXTRA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdContaItemOrigem, "IX_ContaItem_ID_CONTA_ITEM_ORIGEM")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdConta, e.IdGuia }, "IX_ContaItem_K2_K13")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdConta, e.VlCobradoItem }, "_dta_index_RECALCULO_ContaItem_7_44175553__K2_K1_K4")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.IdClassificacaoTipoSus).HasColumnName("ID_CLASSIFICACAO_TIPO_SUS");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemOrigem).HasColumnName("ID_CONTA_ITEM_ORIGEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdServicoProdutoTabelaOrigem).HasColumnName("ID_SERVICO_PRODUTO_TABELA_ORIGEM");

                entity.Property(e => e.IdUsuarioLancamento).HasColumnName("ID_USUARIO_LANCAMENTO");

                entity.Property(e => e.InExtra)
                    .HasColumnName("IN_EXTRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InPacienteAusente)
                    .HasColumnName("IN_PACIENTE_AUSENTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InPertenceDiaria).HasColumnName("IN_PERTENCE_DIARIA");

                entity.Property(e => e.InPertenceGabarito).HasColumnName("IN_PERTENCE_GABARITO");

                entity.Property(e => e.PrDesconto).HasColumnName("PR_DESCONTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlAnestesista).HasColumnName("VL_ANESTESISTA");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.ContaItem)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Conta_ContaItem_FK1");

                entity.HasOne(d => d.IdUsuarioLancamentoNavigation)
                    .WithMany(p => p.ContaItem)
                    .HasForeignKey(d => d.IdUsuarioLancamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Usuario");
            });

            modelBuilder.Entity<ContaItemCh>(entity =>
            {
                entity.HasKey(e => e.IdContaItem)
                    .HasName("ContaItemCH_PK");

                entity.ToTable("ContaItemCH");

                entity.Property(e => e.IdContaItem)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.QnCh).HasColumnName("QN_CH");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithOne(p => p.ContaItemCh)
                    .HasForeignKey<ContaItemCh>(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_ContaItemCH_FK1");
            });

            modelBuilder.Entity<ContaItemComposicao>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdContaItemPai, e.IdContaItem });

                entity.ToTable("ContaItem_Composicao");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemPai).HasColumnName("ID_CONTA_ITEM_PAI");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.ContaItemComposicao)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Composicao_Conta");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemComposicao)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Composicao_ContaItem");
            });

            modelBuilder.Entity<ContaItemComposicaoNaoFaturada>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdContaItem, e.IdContaItemPai });

                entity.ToTable("ContaItem_ComposicaoNaoFaturada");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdContaItemPai).HasColumnName("ID_CONTA_ITEM_PAI");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            });

            modelBuilder.Entity<ContaItemExtras>(entity =>
            {
                entity.HasKey(e => e.IdContaItem);

                entity.ToTable("ContaItem_Extras");

                entity.Property(e => e.IdContaItem)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA_ITEM");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithOne(p => p.ContaItemExtras)
                    .HasForeignKey<ContaItemExtras>(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Extras_ContaItem");
            });

            modelBuilder.Entity<ContaItemFechamentoItem>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItem, e.IdConta, e.IdFechamentoItem })
                    .HasName("ContaItem_FechamentoItem_PK");

                entity.ToTable("ContaItem_FechamentoItem");

                entity.HasIndex(e => new { e.IdConta, e.IdContaItem }, "IX_ContaItem_FechamentoItem_K1_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_ContaItem_FechamentoItem_K1_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdContaItem, e.IdFechamentoItem }, "IX_ContaItem_FechamentoItem_K2_K3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemFechamentoItem)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_ContaItem_FechamentoItem_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ContaItemFechamentoItem)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_FechamentoItem");
            });

            modelBuilder.Entity<ContaItemFechamentoItemContaCorrente>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItem, e.IdConta, e.IdFechamentoItem })
                    .HasName("ContaItem_FechamentoItemContaCorrente_PK");

                entity.ToTable("ContaItem_FechamentoItemContaCorrente");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemFechamentoItemContaCorrente)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_ContaItem_FechamentoItemContaCorrente_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ContaItemFechamentoItemContaCorrente)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_FechamentoItemContaCorrente");
            });

            modelBuilder.Entity<ContaItemFechamentoItemRepasse>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItem, e.IdConta, e.IdFechamentoItem })
                    .HasName("ContaItem_FechamentoItem_Repasse_PK");

                entity.ToTable("ContaItem_FechamentoItem_Repasse");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemFechamentoItemRepasse)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_ContaItem_FechamentoItem_Repasse_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ContaItemFechamentoItemRepasse)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_FechamentoItem_Repasse");
            });

            modelBuilder.Entity<ContaItemHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItem, e.DtOcorrencia })
                    .HasName("ContaItemHistorico_PK");

                entity.HasIndex(e => e.InCancelamento, "IX_ContaItemHistorico_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdContaItem, "IX_ContaItemHistorico_K1_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdContaItem, e.InCancelamento }, "IX_ContaItemHistorico_K1_K5")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdJustificativaPadrao).HasColumnName("ID_JUSTIFICATIVA_PADRAO");

                entity.Property(e => e.IdUsuarioOcorrencia).HasColumnName("ID_USUARIO_OCORRENCIA");

                entity.Property(e => e.InCancelamento).HasColumnName("IN_CANCELAMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxJustificativa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemHistorico)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_ContaItemHistorico_FK1");

                entity.HasOne(d => d.IdJustificativaPadraoNavigation)
                    .WithMany(p => p.ContaItemHistorico)
                    .HasForeignKey(d => d.IdJustificativaPadrao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ContaItemHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioOcorrenciaNavigation)
                    .WithMany(p => p.ContaItemHistorico)
                    .HasForeignKey(d => d.IdUsuarioOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ContaItemHistorico_FK1");
            });

            modelBuilder.Entity<ContaItemOcorrencia>(entity =>
            {
                entity.HasKey(e => e.IdContaItemOcorrencia);

                entity.Property(e => e.IdContaItemOcorrencia).HasColumnName("ID_CONTA_ITEM_OCORRENCIA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdJustificativaOcorrenciaCti).HasColumnName("ID_JUSTIFICATIVA_OCORRENCIA_CTI");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmColaboradorMedico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_COLABORADOR_MEDICO")
                    .IsFixedLength(true);

                entity.Property(e => e.QtOcorrencia).HasColumnName("QT_OCORRENCIA");

                entity.Property(e => e.TxObs)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS")
                    .IsFixedLength(true);

                entity.Property(e => e.VlTotal).HasColumnName("VL_TOTAL");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemOcorrencia)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemOcorrencia_ContaItem");

                entity.HasOne(d => d.IdJustificativaOcorrenciaCtiNavigation)
                    .WithMany(p => p.ContaItemOcorrencia)
                    .HasForeignKey(d => d.IdJustificativaOcorrenciaCti)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("JustificativaOcorrenciaCTI_ContaItemOcorrencia_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ContaItemOcorrencia)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_ContaItemOcorrencia_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaItemOcorrencia)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ContaItemOcorrencia_FK1");
            });

            modelBuilder.Entity<ContaItemProduto>(entity =>
            {
                entity.HasKey(e => e.IdContaItemProduto)
                    .HasName("ContaItem_Produto_PK");

                entity.ToTable("ContaItem_Produto");

                entity.HasIndex(e => e.IdLoteProdutoItem, "IX_ContaItemProduto_LoteProdutoItem")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdContaItem, "IX_ContaItem_Produto_CONTA_ITEM")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.DtUtilizacaoProduto }, "IX_ContaItem_Produto_ID_PRODUTO_DETALHE_DT_UTILIZACAO_PRODUTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdContaItem, e.IdContaItemProduto, e.IdProdutoDetalhe, e.IdFabricante, e.IdUnidadeOrganizacional, e.DtUtilizacaoProduto }, "IX_ContaItem_Produto_K2_K1_K3_K4_K6_K8_5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.IdUnidadeOrganizacional }, "IX_ContaItem_Produto_K3_K4_K6_1_2_5_7_8")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_ContaItem_Produto_UNIDADE_ORGANIZACIONAL")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdContaItemProduto).HasColumnName("ID_CONTA_ITEM_PRODUTO");

                entity.Property(e => e.DtUtilizacaoProduto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_UTILIZACAO_PRODUTO");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlTaxaComercializacao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TAXA_COMERCIALIZACAO");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemProduto)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_ContaItem_Produto_FK1");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.ContaItemProduto)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("LoteProdutoItem_ContaItem_Produto_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ContaItemProduto)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Produto_UnidadeOrganizacional");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ContaItemProduto)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ContaItem_Produto_FK1");
            });

            modelBuilder.Entity<ContaItemProdutoDispensacaoEnfermagem>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItemProduto, e.IdDispensacaoEnfermagem });

                entity.ToTable("ContaItemProduto_DispensacaoEnfermagem");

                entity.HasIndex(e => e.IdDispensacaoEnfermagem, "IX_ContaItemProduto_DispensacaoEnfermagem_DispensacaoEnfermagem")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdContaItemProduto).HasColumnName("ID_CONTA_ITEM_PRODUTO");

                entity.Property(e => e.IdDispensacaoEnfermagem).HasColumnName("ID_DISPENSACAO_ENFERMAGEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemProdutoNavigation)
                    .WithMany(p => p.ContaItemProdutoDispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdContaItemProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemProduto_DispensacaoEnfermagem_ContaItem_Produto");

                entity.HasOne(d => d.IdDispensacaoEnfermagemNavigation)
                    .WithMany(p => p.ContaItemProdutoDispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdDispensacaoEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemProduto_DispensacaoEnfermagem_DispensacaoEnfermagem");
            });

            modelBuilder.Entity<ContaItemProdutoNotaEntradaSus>(entity =>
            {
                entity.HasKey(e => e.IdContaItemProduto)
                    .HasName("ContaItemProduto_NotaEntradaSUS_PK");

                entity.ToTable("ContaItemProduto_NotaEntradaSUS");

                entity.Property(e => e.IdContaItemProduto)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA_ITEM_PRODUTO");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.NrLote)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE");

                entity.Property(e => e.NrNota)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NR_NOTA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemProdutoNavigation)
                    .WithOne(p => p.ContaItemProdutoNotaEntradaSus)
                    .HasForeignKey<ContaItemProdutoNotaEntradaSus>(d => d.IdContaItemProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItemProduto_NotaEntradaSUS_ContaItem_Produto_FK");
            });

            modelBuilder.Entity<ContaItemProdutoSolicitacaoEnfermagem>(entity =>
            {
                entity.HasKey(e => new { e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem, e.IdContaItemProduto })
                    .HasName("ContaItemProduto_SolicitacaoEnfermagem_PK");

                entity.ToTable("ContaItemProduto_SolicitacaoEnfermagem");

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem, "IX_CONTAITEMPRODUTOSOLICITACAOENFERMAGEM_IDSOLICITACAOPDENFERMAGEMHORARIOADMINISTRACAOLOTEPRODUTOITEM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdContaItemProduto, "IX_CONTAITEMPRODUTOSOLICITACAOPDENFERMAGEM_IDCONTAITEMPRODUTO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_LOTEPRODUTOITEM");

                entity.Property(e => e.IdContaItemProduto).HasColumnName("ID_CONTA_ITEM_PRODUTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemProdutoNavigation)
                    .WithMany(p => p.ContaItemProdutoSolicitacaoEnfermagem)
                    .HasForeignKey(d => d.IdContaItemProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Produto_ContaItemProduto_SolicitacaoEnfermagem_FK1");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitemNavigation)
                    .WithMany(p => p.ContaItemProdutoSolicitacaoEnfermagem)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem_ContaItemProduto_SolicitacaoEnfermagem_FK1");
            });

            modelBuilder.Entity<ContaItemServico>(entity =>
            {
                entity.HasKey(e => e.IdContaItemServico);

                entity.ToTable("ContaItem_Servico");

                entity.HasIndex(e => e.IdServico, "IX_ContaItem_Servico_ID_SERVICO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.DtExecucaoServico }, "IX_ContaItem_Servico_ID_UNIDADE_ORGANIZACIONAL_DT_EXECUCAO_SERVICO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InProcedimentoPrincipalSus, "IX_ContaItem_Servico_IN_PROCEDIMENTO_PRINCIPAL_SUS")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdContaItem, "IX_ContaItem_Servico_K3_4_5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdContaItem, e.IdServico, e.IdUnidadeOrganizacional }, "IX_ContaItem_Servico_K3_K2_K6_1_4_5");

                entity.HasIndex(e => e.IdServico, "ix_ContaItem_Servico_ID_SERVICO_includes")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoTraduzido).HasColumnName("ID_SERVICO_TRADUZIDO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InMesmaVia).HasColumnName("IN_MESMA_VIA");

                entity.Property(e => e.InMudancaServico).HasColumnName("IN_MUDANCA_SERVICO");

                entity.Property(e => e.InProcedimentoPrincipalSus)
                    .HasColumnName("IN_PROCEDIMENTO_PRINCIPAL_SUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InProcedimentoSimultaneo).HasColumnName("IN_PROCEDIMENTO_SIMULTANEO");

                entity.Property(e => e.InUtilizaVideo).HasColumnName("IN_UTILIZA_VIDEO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ContaItemServico)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_ContaItem_Servico_FK1");

                entity.HasOne(d => d.IdOrdemServicoNavigation)
                    .WithMany(p => p.ContaItemServico)
                    .HasForeignKey(d => d.IdOrdemServico)
                    .HasConstraintName("FK_ContaItem_Servico_OrdemServico");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ContaItemServicoIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_ContaItem_Servico_FK1");

                entity.HasOne(d => d.IdServicoTraduzidoNavigation)
                    .WithMany(p => p.ContaItemServicoIdServicoTraduzidoNavigation)
                    .HasForeignKey(d => d.IdServicoTraduzido)
                    .HasConstraintName("FK_ContaItem_Servico_Servico");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ContaItemServico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Servico_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ContaItemServicoAtendimentoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdServico, e.DtUso, e.IdContaItemServico })
                    .HasName("ContaItemServico_AtendimentoServico_PK");

                entity.ToTable("ContaItemServico_AtendimentoServico");

                entity.HasIndex(e => new { e.IdAtendimento, e.DtUso }, "IX_ContaItemServico_AtendimentoServico_ID_ATENDIMENTO_DT_USO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdContaItemServico, "IX_ContaItemServico_AtendimentoServico_ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_USO");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoAtendimentoServico)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItemServico_AtendimentoServico_FK1");

                entity.HasOne(d => d.AtendimentoServico)
                    .WithMany(p => p.ContaItemServicoAtendimentoServico)
                    .HasForeignKey(d => new { d.IdAtendimento, d.IdServico, d.DtUso })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemServico_AtendimentoServico_Atendimento_Servico");
            });

            modelBuilder.Entity<ContaItemServicoComplemento>(entity =>
            {
                entity.HasKey(e => e.IdContaItemServicoComplemento)
                    .HasName("PK_ContaItemServicoComplemento");

                entity.ToTable("ContaItemServico_Complemento");

                entity.Property(e => e.IdContaItemServicoComplemento).HasColumnName("ID_CONTA_ITEM_SERVICO_COMPLEMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.VlIdadeGestacional)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_IDADE_GESTACIONAL");

                entity.Property(e => e.VlPesoNascimento)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_PESO_NASCIMENTO");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoComplemento)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemServicoComplemento_ContaItemServico");

                entity.HasOne(d => d.IdMotivoSaidaNavigation)
                    .WithMany(p => p.ContaItemServicoComplemento)
                    .HasForeignKey(d => d.IdMotivoSaida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemServicoComplemento_MotivoSaida");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ContaItemServicoComplemento)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemServicoComplemento_Usuario");
            });

            modelBuilder.Entity<ContaItemServicoContaItemProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItemServico, e.IdContaItemProduto })
                    .HasName("ContaItem_Servico_ContaItem_Produto_PK");

                entity.ToTable("ContaItem_Servico_ContaItem_Produto");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdContaItemProduto).HasColumnName("ID_CONTA_ITEM_PRODUTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdContaItemProdutoNavigation)
                    .WithMany(p => p.ContaItemServicoContaItemProduto)
                    .HasForeignKey(d => d.IdContaItemProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItem_Produto_FK2");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoContaItemProduto)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItem_Produto_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaItemServicoContaItemProduto)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("ContaItem_Servico_ContaItem_Produto_Usuario_FK1");
            });

            modelBuilder.Entity<ContaItemServicoDependente>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItemServicoPai, e.IdContaItemServico })
                    .HasName("ContaItem_ServicoDependente_PK");

                entity.ToTable("ContaItem_ServicoDependente");

                entity.Property(e => e.IdContaItemServicoPai).HasColumnName("ID_CONTA_ITEM_SERVICO_PAI");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");
            });

            modelBuilder.Entity<ContaItemServicoMedicoExecutante>(entity =>
            {
                entity.HasKey(e => e.IdContaItemServicoMedicoExecutante);

                entity.ToTable("ContaItem_Servico_MedicoExecutante");

                entity.HasIndex(e => new { e.IdContaItemServico, e.IdMedico }, "IX_ContaItem_Servico_MedicoExecutante_1_2")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdContaItemServico, e.IdMedico, e.IdFuncao }, "IX_ContaItem_Servico_MedicoExecutante_1_2_3")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdMedico, "IX_ContaItem_Servico_MedicoExecutante_ID_MEDICO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdContaItemServicoMedicoExecutante).HasColumnName("ID_CONTA_ITEM_SERVICO_MEDICO_EXECUTANTE");

                entity.Property(e => e.IdApurarValoresSus).HasColumnName("ID_APURAR_VALORES_SUS");

                entity.Property(e => e.IdCboTipo).HasColumnName("ID_CBO_TIPO");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidadeTipo).HasColumnName("ID_ESPECIALIDADE_TIPO");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.InRepasseRealizado).HasColumnName("IN_REPASSE_REALIZADO");

                entity.Property(e => e.PrRepasse).HasColumnName("PR_REPASSE");

                entity.HasOne(d => d.IdApurarValoresSusNavigation)
                    .WithMany(p => p.ContaItemServicoMedicoExecutanteIdApurarValoresSusNavigation)
                    .HasForeignKey(d => d.IdApurarValoresSus)
                    .HasConstraintName("FK_ContaItemServicoMedicoExecutante_IdApurarValoresSus_TipoDiversos");

                entity.HasOne(d => d.IdCboTipoNavigation)
                    .WithMany(p => p.ContaItemServicoMedicoExecutanteIdCboTipoNavigation)
                    .HasForeignKey(d => d.IdCboTipo)
                    .HasConstraintName("FK_ContaItem_Servico_MedicoExecutante_TipoDiversos");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoMedicoExecutante)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Servico_MedicoExecutante_ContaItem_Servico");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.ContaItemServicoMedicoExecutante)
                    .HasForeignKey(d => d.IdMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Servico_MedicoExecutante_Pessoa");
            });

            modelBuilder.Entity<ContaItemServicoProcedimentoSecundarioFolhaDeSala>(entity =>
            {
                entity.HasKey(e => new { e.IdProcedimentoPrincipal, e.IdCheckinEnfermagem, e.IdProcedimentoSecundario, e.IdContaItemServico })
                    .IsClustered(false);

                entity.ToTable("ContaItemServico_ProcedimentoSecundarioFolhaDeSala");

                entity.HasIndex(e => new { e.IdContaItemServico, e.IdProcedimentoSecundario }, "IX_ContaItemServico_ProcedimentoSecundarioFolhaDeSala_K4_K3_1_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProcedimentoPrincipal).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdProcedimentoSecundario).HasColumnName("ID_PROCEDIMENTO_SECUNDARIO");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoProcedimentoSecundarioFolhaDeSala)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItemServico_ProcedimentoSecundarioFolhaDeSala_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ContaItemServicoProcedimentoSecundarioFolhaDeSala)
                    .HasForeignKey(d => new { d.IdProcedimentoPrincipal, d.IdCheckinEnfermagem, d.IdProcedimentoSecundario })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProcedimentoSecundarioFolhaDeSala_ContaItemServico_ProcedimentoSecundarioFolhaDeSala_FK1");
            });

            modelBuilder.Entity<ContaItemServicoRadiofarmaco>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItemServico, e.IdContaItemServicoPai });

                entity.ToTable("ContaItem_Servico_Radiofarmaco");

                entity.HasIndex(e => e.IdContaItemServicoPai, "IX_ContaItem_Servico_Radiofarmaco_Pai")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdContaItemServicoPai).HasColumnName("ID_CONTA_ITEM_SERVICO_PAI");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoRadiofarmacoIdContaItemServicoNavigation)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Servico_Radiofarmaco_ContaItem_Servico");

                entity.HasOne(d => d.IdContaItemServicoPaiNavigation)
                    .WithMany(p => p.ContaItemServicoRadiofarmacoIdContaItemServicoPaiNavigation)
                    .HasForeignKey(d => d.IdContaItemServicoPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItem_Servico_Radiofarmaco_ContaItem_Servico1");
            });

            modelBuilder.Entity<ContaItemServicoRefeicaoConsumo>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItemServico, e.IdRefeicaoConsumo });

                entity.ToTable("ContaItemServico_RefeicaoConsumo");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdRefeicaoConsumo).HasColumnName("ID_REFEICAO_CONSUMO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoRefeicaoConsumo)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemServico_RefeicaoConsumo_ContaItem_Servico");

                entity.HasOne(d => d.IdRefeicaoConsumoNavigation)
                    .WithMany(p => p.ContaItemServicoRefeicaoConsumo)
                    .HasForeignKey(d => d.IdRefeicaoConsumo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaItemServico_RefeicaoConsumo_RefeicaoConsumo");
            });

            modelBuilder.Entity<ContaItemServicoRelacionado>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItemServicoPai, e.IdContaItemServico })
                    .HasName("ContaItem_ServicoRelacionado_PK");

                entity.ToTable("ContaItem_ServicoRelacionado");

                entity.HasIndex(e => e.IdContaItemServico, "IX_ContaItem_ServicoRelacionado_K2")
                    .IsUnique()
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdContaItemServicoPai).HasColumnName("ID_CONTA_ITEM_SERVICO_PAI");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithOne(p => p.ContaItemServicoRelacionadoIdContaItemServicoNavigation)
                    .HasForeignKey<ContaItemServicoRelacionado>(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItem_ServicoRelacionado_FK2");

                entity.HasOne(d => d.IdContaItemServicoPaiNavigation)
                    .WithMany(p => p.ContaItemServicoRelacionadoIdContaItemServicoPaiNavigation)
                    .HasForeignKey(d => d.IdContaItemServicoPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItem_ServicoRelacionado_FK1");
            });

            modelBuilder.Entity<ContaItemServicoServicoCheckinEnfermagem>(entity =>
            {
                entity.HasKey(e => new { e.IdContaItemServico, e.IdCheckinEnfermagem, e.IdServico })
                    .HasName("ContaItemServico_ServicoCheckinEnfermagem_PK");

                entity.ToTable("ContaItemServico_ServicoCheckinEnfermagem");

                entity.HasIndex(e => e.IdCheckinEnfermagem, "IX_ContaItemServico_ServicoCheckinEnfermagem_ID_CHECKIN_ENFERMAGEM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdServico, e.IdCheckinEnfermagem }, "IX_ContaItemServico_ServicoCheckinEnfermagem_K3_K2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItemServico_ServicoCheckinEnfermagem_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ContaItemServicoServicoCheckinEnfermagem)
                    .HasForeignKey(d => new { d.IdCheckinEnfermagem, d.IdServico })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_CheckinEnfermagem_ContaItemServico_ServicoCheckinEnfermagem_FK1");
            });

            modelBuilder.Entity<ContaItemServicoTaxaFolhadeSala>(entity =>
            {
                entity.HasKey(e => new { e.IdTaxaFolhaDeSala, e.IdContaItemServico })
                    .HasName("ContaItemServico_TaxaFolhadeSala_PK");

                entity.ToTable("ContaItemServico_TaxaFolhadeSala");

                entity.HasIndex(e => e.IdContaItemServico, "missing_index_1084360")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdTaxaFolhaDeSala).HasColumnName("ID_TAXA_FOLHA_DE_SALA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ContaItemServicoTaxaFolhadeSala)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_ContaItemServico_TaxaFolhadeSala_FK1");

                entity.HasOne(d => d.IdTaxaFolhaDeSalaNavigation)
                    .WithMany(p => p.ContaItemServicoTaxaFolhadeSala)
                    .HasForeignKey(d => d.IdTaxaFolhaDeSala)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TaxaFolhaDeSala_ContaItemServico_TaxaFolhadeSala_FK1");
            });

            modelBuilder.Entity<ContaItemServicoUnidadeOrganizacional>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ContaItemServicoUnidadeOrganizacional");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<ContaOrdemUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => e.IdUnidadeOrganizacionalParametro)
                    .HasName("Conta_Ordem_UnidadeOrganizacional_PK");

                entity.ToTable("Conta_Ordem_UnidadeOrganizacional");

                entity.Property(e => e.IdUnidadeOrganizacionalParametro)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL_PARAMETRO");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.HasOne(d => d.IdUnidadeOrganizacionalParametroNavigation)
                    .WithOne(p => p.ContaOrdemUnidadeOrganizacional)
                    .HasForeignKey<ContaOrdemUnidadeOrganizacional>(d => d.IdUnidadeOrganizacionalParametro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Conta_Ordem_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<ContaPagar>(entity =>
            {
                entity.HasKey(e => e.IdContaPagar)
                    .HasName("ContaPagar_PK");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtEntrada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTRADA");

                entity.Property(e => e.DtVencimentoOri)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO_ORI");

                entity.Property(e => e.IdArquivoContabilHistoricoPadrao).HasColumnName("ID_ARQUIVO_CONTABIL_HISTORICO_PADRAO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdContaDespesa).HasColumnName("ID_CONTA_DESPESA");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdGuiafiscal).HasColumnName("ID_GUIAFISCAL");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdOrdemCompraAdiantamento).HasColumnName("ID_ORDEM_COMPRA_ADIANTAMENTO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdRetencaoTecnicaLiberacao).HasColumnName("ID_RETENCAO_TECNICA_LIBERACAO");

                entity.Property(e => e.IdServicoPrestado).HasColumnName("ID_SERVICO_PRESTADO");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtualizar).HasColumnName("IN_ATUALIZAR");

                entity.Property(e => e.InReal).HasColumnName("IN_REAL");

                entity.Property(e => e.NrContaContabil)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONTA_CONTABIL");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.NrDocumentoStr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO_STR");

                entity.Property(e => e.NrStatusConta).HasColumnName("NR_STATUS_CONTA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.TxSerieDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE_DOCUMENTO");

                entity.Property(e => e.VlAcrescimos).HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDescontos).HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlDocumento).HasColumnName("VL_DOCUMENTO");

                entity.Property(e => e.VlImpostos).HasColumnName("VL_IMPOSTOS");

                entity.Property(e => e.VlPagar).HasColumnName("VL_PAGAR");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.Property(e => e.VlTributosRetidos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTOS_RETIDOS");

                entity.HasOne(d => d.IdArquivoContabilHistoricoPadraoNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdArquivoContabilHistoricoPadrao)
                    .HasConstraintName("FK_ContaPagar_ArqContHistPadrao_ID_ARQUIVO_CONTABIL_HISTORICO_PADRAO");

                entity.HasOne(d => d.IdCondicaoPagamentoNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdCondicaoPagamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CondicaoPagamento_ContaPagar_FK1");

                entity.HasOne(d => d.IdContaCorrenteNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdContaCorrente)
                    .HasConstraintName("ContaPagar_ContaCorrente_ID_CONTA_CORRENTE");

                entity.HasOne(d => d.IdContaDespesaNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdContaDespesa)
                    .HasConstraintName("FK_ContaPagar_ContaDespesaReceita");

                entity.HasOne(d => d.IdFaturafinanceiraNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdFaturafinanceira)
                    .HasConstraintName("ContaPagar_FaturaFinanceira_ID_FATURAFINANCEIRA");

                entity.HasOne(d => d.IdGuiafiscalNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdGuiafiscal)
                    .HasConstraintName("ContaPagar_GuiaFiscal_ID_GUIAFISCAL");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdNotaEntrada)
                    .HasConstraintName("ContaPagar_NotaEntrada_FK1");

                entity.HasOne(d => d.IdOrdemCompraAdiantamentoNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdOrdemCompraAdiantamento);

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ContaPagar_FK1");

                entity.HasOne(d => d.IdRetencaoTecnicaLiberacaoNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdRetencaoTecnicaLiberacao);

                entity.HasOne(d => d.IdServicoPrestadoNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdServicoPrestado);

                entity.HasOne(d => d.IdTipoContaNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdTipoConta);

                entity.HasOne(d => d.IdTipoDocumentoNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdTipoDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDocumento_ContaPagar_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaPagar)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("ContaPagar_Usuario_FK1");
            });

            modelBuilder.Entity<ContaPagarAcrescimo>(entity =>
            {
                entity.HasKey(e => new { e.IdContaPagar, e.IdTipoAcrescimo })
                    .HasName("ContaPagar_Acrescimo_PK");

                entity.ToTable("ContaPagar_Acrescimo");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.ContaPagarAcrescimo)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaPagar_ContaPagar_Acrescimo_FK1");

                entity.HasOne(d => d.IdTipoAcrescimoNavigation)
                    .WithMany(p => p.ContaPagarAcrescimo)
                    .HasForeignKey(d => d.IdTipoAcrescimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ContaPagar_Acrescimo_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaPagarAcrescimo)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ContaPagar_Acrescimo_Usuario");
            });

            modelBuilder.Entity<ContaPagarAcrescimoLog>(entity =>
            {
                entity.HasKey(e => e.IdContapagarAcrescimoLog);

                entity.ToTable("ContaPagar_Acrescimo_Log");

                entity.Property(e => e.IdContapagarAcrescimoLog).HasColumnName("ID_CONTAPAGAR_ACRESCIMO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaPagarAcrescimoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaPagarDes>(entity =>
            {
                entity.HasKey(e => e.IdContaPagar);

                entity.ToTable("ContaPagar_DES");

                entity.Property(e => e.IdContaPagar)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdLocalidadePrestacao).HasColumnName("ID_LOCALIDADE_PRESTACAO");

                entity.Property(e => e.IdLogradouroPrestacao).HasColumnName("ID_LOGRADOURO_PRESTACAO");

                entity.Property(e => e.IdTipoModeloDoc).HasColumnName("ID_TIPO_MODELO_DOC");

                entity.Property(e => e.IdTipoMotivoNaoRetencao).HasColumnName("ID_TIPO_MOTIVO_NAO_RETENCAO");

                entity.Property(e => e.IdTipoSerieNf).HasColumnName("ID_TIPO_SERIE_NF");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrInscricaoMunicipal)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_INSCRICAO_MUNICIPAL");

                entity.Property(e => e.PrAliquota)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_ALIQUOTA");

                entity.Property(e => e.VlBaseCalculo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BASE_CALCULO");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithOne(p => p.ContaPagarDes)
                    .HasForeignKey<ContaPagarDes>(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdLocalidadePrestacaoNavigation)
                    .WithMany(p => p.ContaPagarDes)
                    .HasForeignKey(d => d.IdLocalidadePrestacao)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdLogradouroPrestacaoNavigation)
                    .WithMany(p => p.ContaPagarDes)
                    .HasForeignKey(d => d.IdLogradouroPrestacao);

                entity.HasOne(d => d.IdTipoModeloDocNavigation)
                    .WithMany(p => p.ContaPagarDesIdTipoModeloDocNavigation)
                    .HasForeignKey(d => d.IdTipoModeloDoc);

                entity.HasOne(d => d.IdTipoMotivoNaoRetencaoNavigation)
                    .WithMany(p => p.ContaPagarDesIdTipoMotivoNaoRetencaoNavigation)
                    .HasForeignKey(d => d.IdTipoMotivoNaoRetencao);

                entity.HasOne(d => d.IdTipoSerieNfNavigation)
                    .WithMany(p => p.ContaPagarDesIdTipoSerieNfNavigation)
                    .HasForeignKey(d => d.IdTipoSerieNf);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaPagarDes)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ContaPagarDesconto>(entity =>
            {
                entity.HasKey(e => new { e.IdContaPagar, e.IdTipoDesconto })
                    .HasName("ContaPagar_Desconto_PK");

                entity.ToTable("ContaPagar_Desconto");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdNotaDevolucao).HasColumnName("ID_NOTA_DEVOLUCAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.ContaPagarDesconto)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaPagar_ContaPagar_Desconto_FK1");

                entity.HasOne(d => d.IdNotaDevolucaoNavigation)
                    .WithMany(p => p.ContaPagarDesconto)
                    .HasForeignKey(d => d.IdNotaDevolucao);

                entity.HasOne(d => d.IdTipoDescontoNavigation)
                    .WithMany(p => p.ContaPagarDesconto)
                    .HasForeignKey(d => d.IdTipoDesconto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ContaPagar_Desconto_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaPagarDesconto)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ContaPagar_Desconto_Usuario");
            });

            modelBuilder.Entity<ContaPagarDescontoLog>(entity =>
            {
                entity.HasKey(e => e.IdContapagarDescontoLog);

                entity.ToTable("ContaPagar_Desconto_Log");

                entity.Property(e => e.IdContapagarDescontoLog).HasColumnName("ID_CONTAPAGAR_DESCONTO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaPagarDescontoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaPagarImpostoRetido>(entity =>
            {
                entity.HasKey(e => new { e.IdContaPagar, e.IdImpostoRetido })
                    .HasName("ContaPagar_ImpostoRetido_PK");

                entity.ToTable("ContaPagar_ImpostoRetido");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPago).HasColumnName("IN_PAGO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlImpostoRetido).HasColumnName("VL_IMPOSTO_RETIDO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaPagarImpostoRetido)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ContaPagar_ImpostoRetido_Usuario");
            });

            modelBuilder.Entity<ContaPagarImpostoRetidoLog>(entity =>
            {
                entity.HasKey(e => e.IdContapagarImpostoretidoLog);

                entity.ToTable("ContaPagar_ImpostoRetido_Log");

                entity.Property(e => e.IdContapagarImpostoretidoLog).HasColumnName("ID_CONTAPAGAR_IMPOSTORETIDO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InPago).HasColumnName("IN_PAGO");

                entity.Property(e => e.VlImpostoRetido).HasColumnName("VL_IMPOSTO_RETIDO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaPagarImpostoRetidoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaPagarLog>(entity =>
            {
                entity.HasKey(e => e.IdContaPagarLog);

                entity.ToTable("ContaPagar_Log");

                entity.Property(e => e.IdContaPagarLog).HasColumnName("ID_CONTA_PAGAR_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtEntrada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTRADA");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtVencimentoOri)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO_ORI");

                entity.Property(e => e.IdArquivoContabilHistoricoPadrao).HasColumnName("ID_ARQUIVO_CONTABIL_HISTORICO_PADRAO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdContaDespesa).HasColumnName("ID_CONTA_DESPESA");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdGuiafiscal).HasColumnName("ID_GUIAFISCAL");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdOrdemCompraAdiantamento).HasColumnName("ID_ORDEM_COMPRA_ADIANTAMENTO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdRetencaoTecnicaLiberacao).HasColumnName("ID_RETENCAO_TECNICA_LIBERACAO");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InReal).HasColumnName("IN_REAL");

                entity.Property(e => e.NrContaContabil)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONTA_CONTABIL");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.NrDocumentoStr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO_STR");

                entity.Property(e => e.NrStatusConta).HasColumnName("NR_STATUS_CONTA");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.TxSerieDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE_DOCUMENTO");

                entity.Property(e => e.VlAcrescimos).HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDescontos).HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlDocumento).HasColumnName("VL_DOCUMENTO");

                entity.Property(e => e.VlImpostos).HasColumnName("VL_IMPOSTOS");

                entity.Property(e => e.VlPagar).HasColumnName("VL_PAGAR");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.Property(e => e.VlTributosRetidos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTOS_RETIDOS");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaPagarLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaPagarRateio>(entity =>
            {
                entity.HasKey(e => e.IdContaPagarRateio);

                entity.Property(e => e.IdContaPagarRateio).HasColumnName("ID_CONTA_PAGAR_RATEIO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCentroCusto).HasColumnName("ID_CENTRO_CUSTO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdContadespesareceita).HasColumnName("ID_CONTADESPESARECEITA");

                entity.Property(e => e.IdPlanoContas).HasColumnName("ID_PLANO_CONTAS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.PrRateio)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("PR_RATEIO");

                entity.Property(e => e.VlRateio)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RATEIO");

                entity.HasOne(d => d.IdCentroCustoNavigation)
                    .WithMany(p => p.ContaPagarRateio)
                    .HasForeignKey(d => d.IdCentroCusto)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.ContaPagarRateio)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdContadespesareceitaNavigation)
                    .WithMany(p => p.ContaPagarRateio)
                    .HasForeignKey(d => d.IdContadespesareceita)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdPlanoContasNavigation)
                    .WithMany(p => p.ContaPagarRateio)
                    .HasForeignKey(d => d.IdPlanoContas);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaPagarRateio)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ContaPagarTributoAliquota>(entity =>
            {
                entity.HasKey(e => e.IdContaPagarTributoAliquota);

                entity.ToTable("ContaPagar_TributoAliquota");

                entity.Property(e => e.IdContaPagarTributoAliquota).HasColumnName("ID_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdContaPagarTributoAliquotaPai).HasColumnName("ID_CONTA_PAGAR_TRIBUTO_ALIQUOTA_PAI");

                entity.Property(e => e.IdParcelacontapagarBaixaBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_BAIXA");

                entity.Property(e => e.IdParcelacontapagarBaixaOrigem).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_ORIGEM");

                entity.Property(e => e.IdTipoRegimeRecolhimento).HasColumnName("ID_TIPO_REGIME_RECOLHIMENTO");

                entity.Property(e => e.IdTributoAliquota).HasColumnName("ID_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InBaixado).HasColumnName("IN_BAIXADO");

                entity.Property(e => e.VlBaseCalculo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BASE_CALCULO");

                entity.Property(e => e.VlTributo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTO");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.ContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaPagar_TributoAliquota_ContaPagar");

                entity.HasOne(d => d.IdContaPagarTributoAliquotaPaiNavigation)
                    .WithMany(p => p.InverseIdContaPagarTributoAliquotaPaiNavigation)
                    .HasForeignKey(d => d.IdContaPagarTributoAliquotaPai)
                    .HasConstraintName("FK_CP_TributoAliquota_CP_TributoAliquota");

                entity.HasOne(d => d.IdParcelacontapagarBaixaBaixaNavigation)
                    .WithMany(p => p.ContaPagarTributoAliquotaIdParcelacontapagarBaixaBaixaNavigation)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixaBaixa)
                    .HasConstraintName("FK_ContaPagar_TributoAliquota_PCPB_BAIXA");

                entity.HasOne(d => d.IdParcelacontapagarBaixaOrigemNavigation)
                    .WithMany(p => p.ContaPagarTributoAliquotaIdParcelacontapagarBaixaOrigemNavigation)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixaOrigem)
                    .HasConstraintName("FK_ContaPagar_TributoAliquota_PCPB_ORIGEM");

                entity.HasOne(d => d.IdTipoRegimeRecolhimentoNavigation)
                    .WithMany(p => p.ContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdTipoRegimeRecolhimento)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTributoAliquotaNavigation)
                    .WithMany(p => p.ContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdTributoAliquota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaPagar_TributoAliquota_TributoAliquota");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaPagar_TributoAliquota_Usuario");
            });

            modelBuilder.Entity<ContaPagarUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdContaPagar, e.IdUnidadeOrganizacional })
                    .HasName("ContaPagar_UnidadeOrganizacional_PK");

                entity.ToTable("ContaPagar_UnidadeOrganizacional");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlRateio).HasColumnName("VL_RATEIO");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.ContaPagarUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaPagar_ContaPagar_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<ContaPlano>(entity =>
            {
                entity.HasKey(e => e.IdConta)
                    .HasName("PK__ContaPlano__1E1E7756");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ContaPlano)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaPlano_Plano");
            });

            modelBuilder.Entity<ContaPreview>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem })
                    .HasName("ContaPreview_PK");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdFechamentoItemPai).HasColumnName("ID_FECHAMENTO_ITEM_PAI");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONSUMO_MINIMO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrAlicotaIss).HasColumnName("NR_ALICOTA_ISS");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<ContaPreviewHonorarioCooperado>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.ToTable("ContaPreview_HonorarioCooperado");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.ContaPreviewHonorarioCooperado)
                    .HasForeignKey<ContaPreviewHonorarioCooperado>(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaPreview_HonorarioCooperado_ContaPreview_FK1");
            });

            modelBuilder.Entity<ContaReceber>(entity =>
            {
                entity.HasKey(e => e.IdContaReceber)
                    .HasName("ContaReceber_PK");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.DtBaixa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtEmissaoDocumento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO_DOCUMENTO");

                entity.Property(e => e.IdBaixaAdiantamentoPago).HasColumnName("ID_BAIXA_ADIANTAMENTO_PAGO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdContaReceita).HasColumnName("ID_CONTA_RECEITA");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdNotaDevolucao).HasColumnName("ID_NOTA_DEVOLUCAO");

                entity.Property(e => e.IdOperadorarecebimentoparcelasemconciliacao).HasColumnName("ID_OPERADORARECEBIMENTOPARCELASEMCONCILIACAO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdResponsavel).HasColumnName("ID_RESPONSAVEL");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdTipoSituacao).HasColumnName("ID_TIPO_SITUACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InCancelada).HasColumnName("IN_CANCELADA");

                entity.Property(e => e.InInconsistente).HasColumnName("IN_INCONSISTENTE");

                entity.Property(e => e.InPrevisao)
                    .IsRequired()
                    .HasColumnName("IN_PREVISAO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InRecebimentoAutorizado)
                    .IsRequired()
                    .HasColumnName("IN_RECEBIMENTO_AUTORIZADO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrContaContabil)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONTA_CONTABIL");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.TxSerieDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE_DOCUMENTO");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlContaReceber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CONTA_RECEBER");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlImpostos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_IMPOSTOS");

                entity.Property(e => e.VlTotalReceber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_RECEBER");

                entity.HasOne(d => d.IdBaixaAdiantamentoPagoNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdBaixaAdiantamentoPago)
                    .HasConstraintName("FK_ContaReceber_PCP_Baixa_ID_BAIXA_ADIANTAMENTO_PAGO");

                entity.HasOne(d => d.IdCondicaoPagamentoNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdCondicaoPagamento)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdConta);

                entity.HasOne(d => d.IdContaCorrenteNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdContaCorrente)
                    .HasConstraintName("ContaReceber_ContaCorrente_ID_CONTA_CORRENTE");

                entity.HasOne(d => d.IdContaReceitaNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdContaReceita);

                entity.HasOne(d => d.IdFaturafinanceiraNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdFaturafinanceira)
                    .HasConstraintName("ContaReceber_FaturaFinanceira_ID_FATURAFINANCEIRA");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdLote);

                entity.HasOne(d => d.IdNotaDevolucaoNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdNotaDevolucao);

                entity.HasOne(d => d.IdOperadorarecebimentoparcelasemconciliacaoNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdOperadorarecebimentoparcelasemconciliacao)
                    .HasConstraintName("ContaReceber_ORPSC_ID_OPERADORARECEBIMENTOPARCELASEMCONCILIACAO");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.ContaReceberIdPessoaNavigation)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdResponsavelNavigation)
                    .WithMany(p => p.ContaReceberIdResponsavelNavigation)
                    .HasForeignKey(d => d.IdResponsavel);

                entity.HasOne(d => d.IdTipoContaNavigation)
                    .WithMany(p => p.ContaReceberIdTipoContaNavigation)
                    .HasForeignKey(d => d.IdTipoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoDocumentoNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdTipoDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoSituacaoNavigation)
                    .WithMany(p => p.ContaReceberIdTipoSituacaoNavigation)
                    .HasForeignKey(d => d.IdTipoSituacao)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaReceber)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ContaReceberAcrescimo>(entity =>
            {
                entity.HasKey(e => new { e.IdContaReceber, e.IdTipoAcrescimo })
                    .HasName("ContaReceber_Acrescimo_PK");

                entity.ToTable("ContaReceber_Acrescimo");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.VlAcrescimo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdContaReceberNavigation)
                    .WithMany(p => p.ContaReceberAcrescimo)
                    .HasForeignKey(d => d.IdContaReceber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaReceber_ContaReceber_Acrescimo_ID_CONTA_RECEBER");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaReceberAcrescimo)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ContaReceber_Acrescimo_Usuario");
            });

            modelBuilder.Entity<ContaReceberAcrescimoLog>(entity =>
            {
                entity.HasKey(e => e.IdContareceberAcrescimoLog);

                entity.ToTable("ContaReceber_Acrescimo_Log");

                entity.Property(e => e.IdContareceberAcrescimoLog).HasColumnName("ID_CONTARECEBER_ACRESCIMO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.VlAcrescimo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaReceberAcrescimoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaReceberArquivoOrigem>(entity =>
            {
                entity.HasKey(e => e.IdContareceberArquivoorigem);

                entity.ToTable("ContaReceber_ArquivoOrigem");

                entity.Property(e => e.IdContareceberArquivoorigem).HasColumnName("ID_CONTARECEBER_ARQUIVOORIGEM");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtFimProcess)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_PROCESS");

                entity.Property(e => e.DtIniProcess)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INI_PROCESS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioProcessamento).HasColumnName("ID_USUARIO_PROCESSAMENTO");

                entity.Property(e => e.InAguardandoLiberacao).HasColumnName("IN_AGUARDANDO_LIBERACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxCaminho)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_CAMINHO");

                entity.Property(e => e.TxSituacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITUACAO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaReceberArquivoOrigemIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaReceber_ArquivoOrigem_Usuario");

                entity.HasOne(d => d.IdUsuarioProcessamentoNavigation)
                    .WithMany(p => p.ContaReceberArquivoOrigemIdUsuarioProcessamentoNavigation)
                    .HasForeignKey(d => d.IdUsuarioProcessamento)
                    .HasConstraintName("FK_ContaReceber_ArquivoOrigem_UsuarioProcessamento");
            });

            modelBuilder.Entity<ContaReceberArquivoOrigemDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdContareceberArquivoorigemDetalhe);

                entity.ToTable("ContaReceber_ArquivoOrigem_Detalhe");

                entity.Property(e => e.IdContareceberArquivoorigemDetalhe).HasColumnName("ID_CONTARECEBER_ARQUIVOORIGEM_DETALHE");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdContareceberArquivoorigem).HasColumnName("ID_CONTARECEBER_ARQUIVOORIGEM");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.TxSituacao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_SITUACAO");

                entity.Property(e => e.VlBaixadoLote)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VL_BAIXADO_LOTE");

                entity.Property(e => e.VlLote)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VL_LOTE");

                entity.Property(e => e.VlReceber)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VL_RECEBER");

                entity.HasOne(d => d.IdContareceberArquivoorigemNavigation)
                    .WithMany(p => p.ContaReceberArquivoOrigemDetalhe)
                    .HasForeignKey(d => d.IdContareceberArquivoorigem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaReceber_ArquivoOrigem_Detalhe_ContaReceber_ArquivoOrigem");
            });

            modelBuilder.Entity<ContaReceberDesconto>(entity =>
            {
                entity.HasKey(e => new { e.IdContaReceber, e.IdTipoDesconto })
                    .HasName("ContaReceber_Desconto_PK");

                entity.ToTable("ContaReceber_Desconto");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdContaReceberNavigation)
                    .WithMany(p => p.ContaReceberDesconto)
                    .HasForeignKey(d => d.IdContaReceber)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoDescontoNavigation)
                    .WithMany(p => p.ContaReceberDesconto)
                    .HasForeignKey(d => d.IdTipoDesconto)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaReceberDesconto)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ContaReceber_Desconto_Usuario");
            });

            modelBuilder.Entity<ContaReceberDescontoLog>(entity =>
            {
                entity.HasKey(e => e.IdContareceberDescontoLog);

                entity.ToTable("ContaReceber_Desconto_Log");

                entity.Property(e => e.IdContareceberDescontoLog).HasColumnName("ID_CONTARECEBER_DESCONTO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaReceberDescontoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaReceberImpostoRetido>(entity =>
            {
                entity.HasKey(e => new { e.IdContaReceber, e.IdImpostoRetido })
                    .HasName("ContaReceber_ImpostoRetido_PK");

                entity.ToTable("ContaReceber_ImpostoRetido");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.InPago).HasColumnName("IN_PAGO");

                entity.Property(e => e.VlImpostoRetido)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_IMPOSTO_RETIDO");

                entity.HasOne(d => d.IdContaReceberNavigation)
                    .WithMany(p => p.ContaReceberImpostoRetido)
                    .HasForeignKey(d => d.IdContaReceber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaReceber_IRet_ContaReceber_ID_CONTA_RECEBER");

                entity.HasOne(d => d.IdImpostoRetidoNavigation)
                    .WithMany(p => p.ContaReceberImpostoRetido)
                    .HasForeignKey(d => d.IdImpostoRetido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaReceber_IRet_ImpostoRetido_ID_IMPOSTO_RETIDO");
            });

            modelBuilder.Entity<ContaReceberLog>(entity =>
            {
                entity.HasKey(e => e.IdContaReceberLog);

                entity.ToTable("ContaReceber_Log");

                entity.Property(e => e.IdContaReceberLog).HasColumnName("ID_CONTA_RECEBER_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtBaixa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtEmissaoDocumento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO_DOCUMENTO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdBaixaAdiantamentoPago).HasColumnName("ID_BAIXA_ADIANTAMENTO_PAGO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdContaReceita).HasColumnName("ID_CONTA_RECEITA");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdNotaDevolucao).HasColumnName("ID_NOTA_DEVOLUCAO");

                entity.Property(e => e.IdOperadorarecebimentoparcelasemconciliacao).HasColumnName("ID_OPERADORARECEBIMENTOPARCELASEMCONCILIACAO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdResponsavel).HasColumnName("ID_RESPONSAVEL");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdTipoSituacao).HasColumnName("ID_TIPO_SITUACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCancelada).HasColumnName("IN_CANCELADA");

                entity.Property(e => e.InInconsistente).HasColumnName("IN_INCONSISTENTE");

                entity.Property(e => e.InPrevisao).HasColumnName("IN_PREVISAO");

                entity.Property(e => e.InRecebimentoAutorizado).HasColumnName("IN_RECEBIMENTO_AUTORIZADO");

                entity.Property(e => e.NrContaContabil)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONTA_CONTABIL");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.TxSerieDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE_DOCUMENTO");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlContaReceber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CONTA_RECEBER");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlImpostos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_IMPOSTOS");

                entity.Property(e => e.VlTotalReceber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_RECEBER");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ContaReceberLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ContaReceberPrevisao>(entity =>
            {
                entity.HasKey(e => new { e.IdContaReceber, e.DtPrevisao });

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.DtPrevisao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.VlPrevisao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PREVISAO");

                entity.HasOne(d => d.IdContaReceberNavigation)
                    .WithMany(p => p.ContaReceberPrevisao)
                    .HasForeignKey(d => d.IdContaReceber)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ContaRegistro>(entity =>
            {
                entity.HasKey(e => new { e.DtSelecao, e.IdConta });

                entity.Property(e => e.DtSelecao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SELECAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");
            });

            modelBuilder.Entity<ContaReprocessada>(entity =>
            {
                entity.HasKey(e => e.IdContaReprocessamento);

                entity.Property(e => e.IdContaReprocessamento).HasColumnName("ID_CONTA_REPROCESSAMENTO");

                entity.Property(e => e.DtReprocessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REPROCESSAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.InErro)
                    .HasColumnName("IN_ERRO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InReprocessada)
                    .HasColumnName("IN_REPROCESSADA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxMensagem)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_MENSAGEM");
            });

            modelBuilder.Entity<ContaReprocessadaBkp>(entity =>
            {
                entity.HasKey(e => e.IdContaReprocessamento);

                entity.ToTable("ContaReprocessadaBKP");

                entity.Property(e => e.IdContaReprocessamento).HasColumnName("ID_CONTA_REPROCESSAMENTO");

                entity.Property(e => e.DtReprocessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REPROCESSAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.InErro)
                    .HasColumnName("IN_ERRO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InReprocessada)
                    .HasColumnName("IN_REPROCESSADA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxMensagem)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_MENSAGEM");
            });

            modelBuilder.Entity<ContaReprocessamento>(entity =>
            {
                entity.HasKey(e => e.IdContaReprocessamento);

                entity.Property(e => e.IdContaReprocessamento).HasColumnName("ID_CONTA_REPROCESSAMENTO");

                entity.Property(e => e.DtAgendamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDAMENTO");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InFechar).HasColumnName("IN_FECHAR");

                entity.Property(e => e.InProcessada).HasColumnName("IN_PROCESSADA");

                entity.Property(e => e.InRecalcular).HasColumnName("IN_RECALCULAR");

                entity.Property(e => e.TxParametros)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_PARAMETROS");

                entity.Property(e => e.VlTempoProcessamento).HasColumnName("VL_TEMPO_PROCESSAMENTO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaReprocessamento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaReprocessamento_Usuario");
            });

            modelBuilder.Entity<ContaSelNota>(entity =>
            {
                entity.HasKey(e => e.IdConta);

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtSelecao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SELECAO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdNota2).HasColumnName("ID_NOTA_2");

                entity.Property(e => e.IdNota3).HasColumnName("ID_NOTA_3");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithMany(p => p.ContaSelNota)
                    .HasForeignKey(d => d.IdLote)
                    .HasConstraintName("FK_ContaSelNota_LoteConta");

                entity.HasOne(d => d.IdNota2Navigation)
                    .WithMany(p => p.ContaSelNotaIdNota2Navigation)
                    .HasForeignKey(d => d.IdNota2)
                    .HasConstraintName("FK_ContaSelNota_NotaEmitida");

                entity.HasOne(d => d.IdNota3Navigation)
                    .WithMany(p => p.ContaSelNotaIdNota3Navigation)
                    .HasForeignKey(d => d.IdNota3)
                    .HasConstraintName("FK_ContaSelNota_NotaEmitida1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaSelNota)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaSelNota_Usuario1");
            });

            modelBuilder.Entity<ContaSelNotaReversao>(entity =>
            {
                entity.HasKey(e => e.IdContaSelNotaReversao);

                entity.Property(e => e.IdContaSelNotaReversao).HasColumnName("ID_CONTA_SEL_NOTA_REVERSAO");

                entity.Property(e => e.DtSelecao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SELECAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdNota2).HasColumnName("ID_NOTA_2");

                entity.Property(e => e.IdNota3).HasColumnName("ID_NOTA_3");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdNota2Navigation)
                    .WithMany(p => p.ContaSelNotaReversaoIdNota2Navigation)
                    .HasForeignKey(d => d.IdNota2)
                    .HasConstraintName("FK_ContaSelNotaReversao_NotaEmitida");

                entity.HasOne(d => d.IdNota3Navigation)
                    .WithMany(p => p.ContaSelNotaReversaoIdNota3Navigation)
                    .HasForeignKey(d => d.IdNota3)
                    .HasConstraintName("FK_ContaSelNotaReversao_NotaEmitida1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ContaSelNotaReversao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContaSelNotaReversao_Usuario");
            });

            modelBuilder.Entity<ContaTotais>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais");

                entity.Property(e => e.AnoMapa)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("ANO_MAPA");

                entity.Property(e => e.DtGeracaoLote)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_GERACAO_LOTE");

                entity.Property(e => e.DtLiberacaoLoteCobranca)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO_LOTE_COBRANCA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InRejeitada).HasColumnName("IN_REJEITADA");

                entity.Property(e => e.Mapa)
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.MesMapa)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("MES_MAPA");

                entity.Property(e => e.NmMesMapa)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("NM_MES_MAPA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.TipoInternoExterno)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAApurar)
                    .HasColumnType("decimal(16, 2)")
                    .HasColumnName("VALOR_A_APURAR");

                entity.Property(e => e.ValorAApurarGlosa)
                    .HasColumnType("decimal(13, 2)")
                    .HasColumnName("VALOR_A_APURAR_GLOSA");

                entity.Property(e => e.ValorAApurarRecebimento)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VALOR_A_APURAR_RECEBIMENTO");

                entity.Property(e => e.ValorAApurarRecurso)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("VALOR_A_APURAR_RECURSO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO");

                entity.Property(e => e.VlAcatadoComRecurso)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_COM_RECURSO");

                entity.Property(e => e.VlAcatadoGen)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_GEN");

                entity.Property(e => e.VlAcatadoItens)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("VL_ACATADO_ITENS");

                entity.Property(e => e.VlAcatadoSemRecurso)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_SEM_RECURSO");

                entity.Property(e => e.VlAcrescimoGenerico).HasColumnName("VL_ACRESCIMO_GENERICO");

                entity.Property(e => e.VlAcrescimos).HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlCredito)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_CREDITO");

                entity.Property(e => e.VlEstorno)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ESTORNO");

                entity.Property(e => e.VlFaturado).HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.Property(e => e.VlGlosaGenerica).HasColumnName("VL_GLOSA_GENERICA");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlRecebido)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_RECEBIDO");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");

                entity.Property(e => e.VlRevertidoSemRecurso).HasColumnName("VL_REVERTIDO_SEM_RECURSO");
            });

            modelBuilder.Entity<ContaTotais2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_2");

                entity.Property(e => e.DtGeracaoLote)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_GERACAO_LOTE");

                entity.Property(e => e.DtLiberacaoLoteCobranca)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO_LOTE_COBRANCA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.Mapa)
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.NmMesMapa)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("NM_MES_MAPA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.TipoInternoExterno)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAApurar)
                    .HasColumnType("decimal(16, 2)")
                    .HasColumnName("VALOR_A_APURAR");

                entity.Property(e => e.ValorAApurarGlosa)
                    .HasColumnType("decimal(13, 2)")
                    .HasColumnName("VALOR_A_APURAR_GLOSA");

                entity.Property(e => e.ValorAApurarRecebimento)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VALOR_A_APURAR_RECEBIMENTO");

                entity.Property(e => e.ValorAApurarRecurso)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("VALOR_A_APURAR_RECURSO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO");

                entity.Property(e => e.VlAcatadoComRecurso)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_COM_RECURSO");

                entity.Property(e => e.VlAcatadoGen)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_GEN");

                entity.Property(e => e.VlAcatadoItens)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("VL_ACATADO_ITENS");

                entity.Property(e => e.VlAcatadoSemRecurso)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_SEM_RECURSO");

                entity.Property(e => e.VlAcrescimoGenerico).HasColumnName("VL_ACRESCIMO_GENERICO");

                entity.Property(e => e.VlAcrescimos).HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlCredito)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_CREDITO");

                entity.Property(e => e.VlEstorno)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ESTORNO");

                entity.Property(e => e.VlFaturado).HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.Property(e => e.VlGlosaGenerica).HasColumnName("VL_GLOSA_GENERICA");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlRecebido)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_RECEBIDO");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");

                entity.Property(e => e.VlRevertidoSemRecurso).HasColumnName("VL_REVERTIDO_SEM_RECURSO");
            });

            modelBuilder.Entity<ContaTotaisAcrescimos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_Acrescimos");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");
            });

            modelBuilder.Entity<ContaTotaisCreditoEstorno>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_CreditoEstorno");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlCredito)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_CREDITO");

                entity.Property(e => e.VlEstorno)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ESTORNO");
            });

            modelBuilder.Entity<ContaTotaisFi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_FI");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");
            });

            modelBuilder.Entity<ContaTotaisGlosa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_Glosa");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");
            });

            modelBuilder.Entity<ContaTotaisGlosaAcatada>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaAcatada");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("VL_ACATADO");
            });

            modelBuilder.Entity<ContaTotaisGlosaAcatadaComRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaAcatada_COM_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("VL_ACATADO");
            });

            modelBuilder.Entity<ContaTotaisGlosaAcatadaParcialComRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaAcatadaParcial_COM_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("VL_ACATADO");
            });

            modelBuilder.Entity<ContaTotaisGlosaAcatadaParcialSemRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaAcatadaParcial_SEM_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("VL_ACATADO");
            });

            modelBuilder.Entity<ContaTotaisGlosaAcatadaSemRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaAcatada_SEM_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("VL_ACATADO");
            });

            modelBuilder.Entity<ContaTotaisGlosaGenericaAcatada>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaGenericaAcatada");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatadoGen)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_GEN");
            });

            modelBuilder.Entity<ContaTotaisGlosaGenericaAcatadaComRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaGenericaAcatada_COM_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO");
            });

            modelBuilder.Entity<ContaTotaisGlosaGenericaAcatadaSemRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_GlosaGenericaAcatada_SEM_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO");
            });

            modelBuilder.Entity<ContaTotaisRecebido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_Recebido");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlRecebido)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_RECEBIDO");
            });

            modelBuilder.Entity<ContaTotaisRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");
            });

            modelBuilder.Entity<ContaTotaisRecursoGenerico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_RecursoGenerico");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");
            });

            modelBuilder.Entity<ContaTotaisReversao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_Reversao");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");
            });

            modelBuilder.Entity<ContaTotaisReversaoGenerica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_ReversaoGenerica");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");
            });

            modelBuilder.Entity<ContaTotaisReversaoSemRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Conta_Totais_Reversao_Sem_Recurso");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlRevertidoSemRecurso).HasColumnName("VL_REVERTIDO_SEM_RECURSO");
            });

            modelBuilder.Entity<ContagemEstoque>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdFabricante, e.IdProdutoDetalhe, e.DtContagem })
                    .HasName("ContagemEstoque_PK");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.DtContagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONTAGEM");

                entity.Property(e => e.IdStatusContagem).HasColumnName("ID_STATUS_CONTAGEM");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InUltimaContagem).HasColumnName("IN_ULTIMA_CONTAGEM");

                entity.Property(e => e.QnPrimeiraContagem).HasColumnName("QN_PRIMEIRA_CONTAGEM");

                entity.Property(e => e.QnSegundaContagem).HasColumnName("QN_SEGUNDA_CONTAGEM");

                entity.Property(e => e.QnTerceiraContagem).HasColumnName("QN_TERCEIRA_CONTAGEM");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ContagemEstoque)
                    .HasForeignKey(d => new { d.IdUnidadeOrganizacional, d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EstoqueLocaliza_ContagemEstoque_FK1");
            });

            modelBuilder.Entity<ContagemEstoqueLoteProdutoItem>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdFabricante, e.IdProdutoDetalhe, e.DtContagem, e.IdLoteProdutoItem })
                    .HasName("ContagemEstoque_LoteProdutoItem_PK");

                entity.ToTable("ContagemEstoque_LoteProdutoItem");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.DtContagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONTAGEM");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.InPrimeiraContagem).HasColumnName("IN_PRIMEIRA_CONTAGEM");

                entity.Property(e => e.InSegundaContagem).HasColumnName("IN_SEGUNDA_CONTAGEM");

                entity.Property(e => e.InTerceiraContagem).HasColumnName("IN_TERCEIRA_CONTAGEM");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.ContagemEstoqueLoteProdutoItem)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LoteProdutoItem_ContagemEstoque_LoteProdutoItem_FK1");

                entity.HasOne(d => d.ContagemEstoque)
                    .WithMany(p => p.ContagemEstoqueLoteProdutoItem)
                    .HasForeignKey(d => new { d.IdUnidadeOrganizacional, d.IdFabricante, d.IdProdutoDetalhe, d.DtContagem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContagemEstoque_ContagemEstoque_LoteProdutoItem_FK1");
            });

            modelBuilder.Entity<Contaitemcorrecao>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("contaitemcorrecao");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.IdContaItemProduto).HasColumnName("ID_CONTA_ITEM_PRODUTO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");
            });

            modelBuilder.Entity<Contas>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Conta).HasColumnName("conta");

                entity.Property(e => e.Item).HasColumnName("item");

                entity.Property(e => e.ItemServico).HasColumnName("item_servico");
            });

            modelBuilder.Entity<ContasAguardandoConciliacaoSimplificada>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ContasAguardandoConciliacaoSimplificada");

                entity.Property(e => e.AnoMapa).HasColumnName("ANO_MAPA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdSituacaoLote).HasColumnName("ID_SITUACAO_LOTE");

                entity.Property(e => e.Mapa)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("MAPA");

                entity.Property(e => e.MesMapa).HasColumnName("MES_MAPA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.SituacaoLoteCobranca)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StrMesMapa)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STR_MES_MAPA");

                entity.Property(e => e.VlConta).HasColumnName("VL_CONTA");
            });

            modelBuilder.Entity<ContasPagasRepasse>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");
            });

            modelBuilder.Entity<ContasPendentes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cartão).HasMaxLength(255);

                entity.Property(e => e.DataEnvio)
                    .HasMaxLength(255)
                    .HasColumnName("Data Envio");

                entity.Property(e => e.DtAtendimento)
                    .HasMaxLength(255)
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtVencimento)
                    .HasMaxLength(255)
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.Matricula).HasMaxLength(255);

                entity.Property(e => e.Operadora).HasMaxLength(255);

                entity.Property(e => e.Paciente).HasMaxLength(255);

                entity.Property(e => e.Situação).HasMaxLength(255);
            });

            modelBuilder.Entity<Contato>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Contato");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CdIdentidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DtExpedicao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXPEDICAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdCargo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_CARGO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdContato).HasColumnName("ID_CONTATO");

                entity.Property(e => e.IdCor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_COR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdEstadoCivil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_ESTADO_CIVIL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdExpeditor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXPEDITOR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdNacionalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NACIONALIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdNaturalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NATURALIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdOcupacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OCUPACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdSexo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmConjuge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONJUGE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmContato)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTATO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmMae)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmPai)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAI")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescFuncao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_FUNCAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ContatoDependente>(entity =>
            {
                entity.HasKey(e => e.IdDependente)
                    .HasName("ContatoDependente_PK");

                entity.Property(e => e.IdDependente).HasColumnName("ID_DEPENDENTE");

                entity.Property(e => e.DtCasamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CASAMENTO");

                entity.Property(e => e.DtNascimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.IdContato).HasColumnName("ID_CONTATO");

                entity.Property(e => e.IdParentesco).HasColumnName("ID_PARENTESCO");

                entity.Property(e => e.NmDependente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_DEPENDENTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdParentescoNavigation)
                    .WithMany(p => p.ContatoDependente)
                    .HasForeignKey(d => d.IdParentesco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ContatoDependente_FK1");
            });

            modelBuilder.Entity<Controle>(entity =>
            {
                entity.HasKey(e => e.IdControle)
                    .HasName("Controle_PK");

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdControleTipo).HasColumnName("ID_CONTROLE_TIPO");

                entity.Property(e => e.NmControle)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTROLE");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ControleIdClassificacaoNavigation)
                    .HasForeignKey(d => d.IdClassificacao)
                    .HasConstraintName("TipoDiversos_Controle_FK1");

                entity.HasOne(d => d.IdControleTipoNavigation)
                    .WithMany(p => p.ControleIdControleTipoNavigation)
                    .HasForeignKey(d => d.IdControleTipo)
                    .HasConstraintName("TipoDiversos_Controle_FK2");
            });

            modelBuilder.Entity<ControleDependencia>(entity =>
            {
                entity.HasKey(e => new { e.IdControlePai, e.IdControleFilho })
                    .HasName("Controle_Dependencia_PK");

                entity.ToTable("Controle_Dependencia");

                entity.Property(e => e.IdControlePai).HasColumnName("ID_CONTROLE_PAI");

                entity.Property(e => e.IdControleFilho).HasColumnName("ID_CONTROLE_FILHO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdControleFilhoNavigation)
                    .WithMany(p => p.ControleDependenciaIdControleFilhoNavigation)
                    .HasForeignKey(d => d.IdControleFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Controle_Controle_Dependencia_FK2");

                entity.HasOne(d => d.IdControlePaiNavigation)
                    .WithMany(p => p.ControleDependenciaIdControlePaiNavigation)
                    .HasForeignKey(d => d.IdControlePai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Controle_Controle_Dependencia_FK1");
            });

            modelBuilder.Entity<ControleQuantidadeAcesso>(entity =>
            {
                entity.HasKey(e => new { e.IdControle, e.IdUsuario });

                entity.HasIndex(e => e.IdUsuario, "IX_ControleQuantidadeAcesso")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.QnAcesso).HasColumnName("QN_ACESSO");

                entity.HasOne(d => d.IdControleNavigation)
                    .WithMany(p => p.ControleQuantidadeAcesso)
                    .HasForeignKey(d => d.IdControle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleQuantidadeAcesso_Novo_Controle");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ControleQuantidadeAcesso)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControleQuantidadeAcesso_Usuario");
            });

            modelBuilder.Entity<ControleVisitantes>(entity =>
            {
                entity.HasKey(e => e.IdControleVisitante)
                    .HasName("ControleVisitantes_PK");

                entity.HasIndex(e => new { e.IdAtendimento, e.InAtivo }, "IX_ControleVisitantes_ID_ATENDIMENTO_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLeito, e.InAtivo }, "IX_ControleVisitantes_K5")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.NrDocumento, "IX_ControleVisitantes_NR_DOCUMENTO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdControleVisitante).HasColumnName("ID_CONTROLE_VISITANTE");

                entity.Property(e => e.DtEntradaVisitante)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTRADA_VISITANTE");

                entity.Property(e => e.DtSaidaVisitante)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA_VISITANTE");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdTipoVisitante).HasColumnName("ID_TIPO_VISITANTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAcompanhante)
                    .HasColumnName("IN_ACOMPANHANTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmVisitante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_VISITANTE");

                entity.Property(e => e.NrCracha).HasColumnName("NR_CRACHA");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ControleVisitantes)
                    .HasForeignKey(d => d.IdAtendimento)
                    .HasConstraintName("Atendimento_ControleVisitantes_FK1");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.ControleVisitantes)
                    .HasForeignKey(d => d.IdLeito)
                    .HasConstraintName("Leito_ControleVisitantes_FK1");

                entity.HasOne(d => d.IdTipoVisitanteNavigation)
                    .WithMany(p => p.ControleVisitantes)
                    .HasForeignKey(d => d.IdTipoVisitante)
                    .HasConstraintName("FK_CONTROLEVISITANTES_TIPOVISITANTE");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ControleVisitantes)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ControleVisitantes_FK1");
            });

            modelBuilder.Entity<ControleVisitantesHistorico>(entity =>
            {
                entity.HasKey(e => e.IdControleVisitante)
                    .HasName("ControleVisitantes_Historico_PK");

                entity.ToTable("ControleVisitantes_Historico");

                entity.Property(e => e.IdControleVisitante).HasColumnName("ID_CONTROLE_VISITANTE");

                entity.Property(e => e.DtEntradaVisitante)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTRADA_VISITANTE");

                entity.Property(e => e.DtSaidaVisitante)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA_VISITANTE");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAcompanhante).HasColumnName("IN_ACOMPANHANTE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmVisitante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_VISITANTE");

                entity.Property(e => e.NrCracha).HasColumnName("NR_CRACHA");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");
            });

            modelBuilder.Entity<Convenios>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodigoAns)
                    .HasMaxLength(255)
                    .HasColumnName("CodigoANS");

                entity.Property(e => e.Grupo).HasMaxLength(255);

                entity.Property(e => e.Nome).HasMaxLength(255);

                entity.Property(e => e.NomePessoa).HasMaxLength(255);

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(255)
                    .HasColumnName("NumDOC");

                entity.Property(e => e.TipoDoc)
                    .HasMaxLength(255)
                    .HasColumnName("TipoDOC");

                entity.Property(e => e.UfDoc)
                    .HasMaxLength(255)
                    .HasColumnName("UF_DOC");
            });

            modelBuilder.Entity<CorreioEletronico>(entity =>
            {
                entity.HasKey(e => e.IdCorreioEletronico)
                    .HasName("CorreioEletronico_PK");

                entity.HasIndex(e => e.TxEnderecoEletronico, "IX_CorreioEletronico_TX_ENDERECO_ELETRONICO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdCorreioEletronico).HasColumnName("ID_CORREIO_ELETRONICO");

                entity.Property(e => e.IdCorreioEletronicoTipo).HasColumnName("ID_CORREIO_ELETRONICO_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxEnderecoEletronico)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO_ELETRONICO");

                entity.HasOne(d => d.IdCorreioEletronicoTipoNavigation)
                    .WithMany(p => p.CorreioEletronico)
                    .HasForeignKey(d => d.IdCorreioEletronicoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_CorreioEletronico_FK1");
            });

            modelBuilder.Entity<CorreioEletronicoAplicativo>(entity =>
            {
                entity.HasKey(e => e.IdCorreioEletronicoAplicativo);

                entity.Property(e => e.IdCorreioEletronicoAplicativo).HasColumnName("ID_CORREIO_ELETRONICO_APLICATIVO");

                entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdTipoUtilizacaoCorreioEletronico).HasColumnName("ID_TIPO_UTILIZACAO_CORREIO_ELETRONICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxCorreioEletronico)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_CORREIO_ELETRONICO");

                entity.Property(e => e.VlAtributo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VL_ATRIBUTO");

                entity.HasOne(d => d.IdAplicativoNavigation)
                    .WithMany(p => p.CorreioEletronicoAplicativo)
                    .HasForeignKey(d => d.IdAplicativo)
                    .HasConstraintName("FK_CorreioEletronicoAplicativo_Aplicativo");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.CorreioEletronicoAplicativo)
                    .HasForeignKey(d => d.IdAtributo)
                    .HasConstraintName("FK_CorreioEletronicoAplicativo_Atributo");

                entity.HasOne(d => d.IdTipoUtilizacaoCorreioEletronicoNavigation)
                    .WithMany(p => p.CorreioEletronicoAplicativo)
                    .HasForeignKey(d => d.IdTipoUtilizacaoCorreioEletronico)
                    .HasConstraintName("FK_CorreioEletronicoAplicativo_TipoDiversos");
            });

            modelBuilder.Entity<CorteEstoque>(entity =>
            {
                entity.HasKey(e => new { e.DtCorteEstoque, e.IdProdutoDetalhe, e.IdFabricante, e.IdUnidadeOrganizacional })
                    .HasName("CorteEstoque_PK");

                entity.Property(e => e.DtCorteEstoque)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CORTE_ESTOQUE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InUltimoCorte).HasColumnName("IN_ULTIMO_CORTE");

                entity.Property(e => e.QnEstoque).HasColumnName("QN_ESTOQUE");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.CorteEstoque)
                    .HasForeignKey(d => new { d.IdUnidadeOrganizacional, d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EstoqueLocaliza_CorteEstoque_FK1");
            });

            modelBuilder.Entity<Cotacao>(entity =>
            {
                entity.HasKey(e => e.IdCotacao)
                    .HasName("Cotacao_PK");

                entity.HasIndex(e => new { e.IdComprador, e.IdStatusCotacao }, "IX_Cotacao_")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdStatusCotacao, "IX_Cotacao_ID_STATUS_COTACAO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdCotacao)
                    .HasColumnName("ID_COTACAO")
                    .HasComment("PK da Tabela. Identificador único.");

                entity.Property(e => e.DtCotacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COTACAO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Data da criação da cotação no sistema. (getdate)\r\n");

                entity.Property(e => e.DtEncerramento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENCERRAMENTO")
                    .HasComment("Data de encerramento da Cotação.\r\n");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO")
                    .HasComment("Data de Abertura da Cotação\r\n");

                entity.Property(e => e.IdComprador)
                    .HasColumnName("ID_COMPRADOR")
                    .HasComment("Comprador (funcionario do Hospital) que abriu a cotação no Hospitale.\r\n");

                entity.Property(e => e.IdStatusCotacao)
                    .HasColumnName("ID_STATUS_COTACAO")
                    .HasComment("Status da Cotação. FK com TipoDiversos.\r\n");

                entity.Property(e => e.InComplementar).HasColumnName("IN_COMPLEMENTAR");

                entity.Property(e => e.InContrato).HasColumnName("IN_CONTRATO");

                entity.HasOne(d => d.IdCompradorNavigation)
                    .WithMany(p => p.Cotacao)
                    .HasForeignKey(d => d.IdComprador)
                    .HasConstraintName("FK_Cotacao_Pessoa");

                entity.HasOne(d => d.IdStatusCotacaoNavigation)
                    .WithMany(p => p.Cotacao)
                    .HasForeignKey(d => d.IdStatusCotacao)
                    .HasConstraintName("TipoDiversos_Cotacao_FK1");
            });

            modelBuilder.Entity<CotacaoFornecedor>(entity =>
            {
                entity.HasKey(e => new { e.IdCotacao, e.IdFornecedor })
                    .HasName("Cotacao_Fornecedor_PK");

                entity.ToTable("Cotacao_Fornecedor");

                entity.HasIndex(e => e.IdFornecedor, "IX_Cotacao_Fornecedor_ID_FORNECEDOR")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdCotacao)
                    .HasColumnName("ID_COTACAO")
                    .HasComment("PK da Tabela. FK com Cotação.");

                entity.Property(e => e.IdFornecedor)
                    .HasColumnName("ID_FORNECEDOR")
                    .HasComment("PK da Tabela. FK com Pessoa. \r\n");

                entity.Property(e => e.DtFinalizacaoCotacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINALIZACAO_COTACAO");

                entity.Property(e => e.InContrato).HasColumnName("IN_CONTRATO");

                entity.Property(e => e.InRecotar).HasColumnName("IN_RECOTAR");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasComment("Percentual de desconto.");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO")
                    .HasComment("Valor de desconto concedido pelo fornecedor.");

                entity.Property(e => e.VlFrete)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FRETE")
                    .HasComment("valor do Frete no qual totalizará os itens da cotação.");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ICMS")
                    .HasComment("Valor do ICMS (Imposto sobre circulação de mercadorias) da cotação.");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_IPI")
                    .HasComment("Valor do IPI (Imposto de produto Industrializado).\r\n");

                entity.HasOne(d => d.IdCotacaoNavigation)
                    .WithMany(p => p.CotacaoFornecedor)
                    .HasForeignKey(d => d.IdCotacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Cotacao_Cotacao_Fornecedor_FK1");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.CotacaoFornecedor)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Cotacao_Fornecedor_FK1");
            });

            modelBuilder.Entity<CotacaoFornecedorProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdCotacaoFornecedorProdutodetalhe)
                    .HasName("Cotacao_Fornecedor_ProdutoDetalhe_PK");

                entity.ToTable("Cotacao_Fornecedor_ProdutoDetalhe");

                entity.HasIndex(e => e.IdFornecedor, "IX_Cotacao_Fornecedor_ProdutoDetalhe_FORNECEDOR")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdCotacao, e.IdFornecedor }, "IX_Cotacao_Fornecedor_ProdutoDetalhe_ID_COTACAO_ID_FORNECEDOR")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_Cotacao_Fornecedor_ProdutoDetalhe_PRODUTO_DETALHE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdCotacao, "IX_Cotacao_Fornecedor_ProdutoDetalhe_id_cotacao")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdCotacaoFornecedorProdutodetalhe)
                    .HasColumnName("ID_COTACAO_FORNECEDOR_PRODUTODETALHE")
                    .HasComment("PK da Tabela. Identificador único.");

                entity.Property(e => e.DtCotacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COTACAO")
                    .HasComment("Data da Cotação realizada pelo fornecedor.\r\n");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE")
                    .HasComment("Data de Validade da cotação do fornecedor.\r\n");

                entity.Property(e => e.IdCondicaoPagamento)
                    .HasColumnName("ID_CONDICAO_PAGAMENTO")
                    .HasComment("Condição de Pagamendo. FK com CondicaoPagamento\r\n");

                entity.Property(e => e.IdCotacao)
                    .HasColumnName("ID_COTACAO")
                    .HasComment("Referencia de qual cotação se trata. FK com Cotacao.\r\n");

                entity.Property(e => e.IdEmbalagem)
                    .HasColumnName("ID_EMBALAGEM")
                    .HasComment("Id da embalagem que o produto se enquadra. FK com Embalagem.\r\n");

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("Id do fabricante do produto detalhe cotato.\r\n");

                entity.Property(e => e.IdFornecedor)
                    .HasColumnName("ID_FORNECEDOR")
                    .HasComment("Id do Fornecedor que participa da cotação.");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("Id do produto detalhe. FK com ProdutoDetalhe_Fabricante.\r\n");

                entity.Property(e => e.IdSituacaoFiscal).HasColumnName("ID_SITUACAO_FISCAL");

                entity.Property(e => e.InNaoAtendeContrato).HasColumnName("IN_NAO_ATENDE_CONTRATO");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasComment("Percentual de desconto.");

                entity.Property(e => e.PrIcms)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ICMS")
                    .HasComment("Percentual de ICMS\r\n");

                entity.Property(e => e.PrIpi)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_IPI")
                    .HasComment("Percentual de IPI no produto.\r\n");

                entity.Property(e => e.PzEntregaProduto)
                    .HasColumnName("PZ_ENTREGA_PRODUTO")
                    .HasComment("Prazo de entrega do produto. ");

                entity.Property(e => e.QnBonificacao)
                    .HasColumnName("QN_BONIFICACAO")
                    .HasComment("Quantidade de produtos bonificados, ou seja, que não terão custos para o Hospital.\r\n");

                entity.Property(e => e.QnEmbalagem)
                    .HasColumnName("QN_EMBALAGEM")
                    .HasComment("Quantidade de Embalagem.\r\n");

                entity.Property(e => e.QnProdutoComprado).HasColumnName("QN_PRODUTO_COMPRADO");

                entity.Property(e => e.QnProdutoCotado)
                    .HasColumnName("QN_PRODUTO_COTADO")
                    .HasComment("Quantidade de produto cotado.\r\n");

                entity.Property(e => e.TxCondicaoPagamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONDICAO_PAGAMENTO")
                    .HasComment("Condição de Pagamento.");

                entity.Property(e => e.TxJustificativaContrato)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_CONTRATO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_DESCONTO")
                    .HasComment("Valor de desconto no produto.\r\n");

                entity.Property(e => e.VlFrete)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FRETE")
                    .HasComment("Valor do Frete.");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ICMS")
                    .HasComment("Valor de ICMS\r\n");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_IPI")
                    .HasComment("Valor de IPI\r\n");

                entity.Property(e => e.VlTotalComprado)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_TOTAL_COMPRADO");

                entity.Property(e => e.VlTotalProduto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_TOTAL_PRODUTO")
                    .HasComment("Valor total do produto detalhe.");

                entity.Property(e => e.VlUnitarioItem)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_UNITARIO_ITEM")
                    .HasComment("Valor unitário do item.");

                entity.Property(e => e.VlUnitarioProduto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_UNITARIO_PRODUTO")
                    .HasComment("Valor unitário do produto no Fornecedor.\r\n");

                entity.HasOne(d => d.IdCondicaoPagamentoNavigation)
                    .WithMany(p => p.CotacaoFornecedorProdutoDetalhe)
                    .HasForeignKey(d => d.IdCondicaoPagamento)
                    .HasConstraintName("FK_Cotacao_Fornecedor_ProdutoDetalhe_CondicaoPagamento");

                entity.HasOne(d => d.IdEmbalagemNavigation)
                    .WithMany(p => p.CotacaoFornecedorProdutoDetalhe)
                    .HasForeignKey(d => d.IdEmbalagem)
                    .HasConstraintName("FK_Cotacao_Fornecedor_ProdutoDetalhe_Embalagem");

                entity.HasOne(d => d.IdSituacaoFiscalNavigation)
                    .WithMany(p => p.CotacaoFornecedorProdutoDetalhe)
                    .HasForeignKey(d => d.IdSituacaoFiscal)
                    .HasConstraintName("FK_CotacaoFPD_TipoDiveros");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.CotacaoFornecedorProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdCotacao, d.IdFornecedor })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cotacao_Fornecedor_ProdutoDetalhe_Cotacao_Fornecedor");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.CotacaoFornecedorProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cotacao_Fornecedor_ProdutoDetalhe_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<CotacaoFornecedorProdutoDetalheHistorico>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cotacao_Fornecedor_ProdutoDetalhe_Historico");

                entity.Property(e => e.DtCotacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COTACAO");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdCotacao).HasColumnName("ID_COTACAO");

                entity.Property(e => e.IdCotacaoFornecedorProdutodetalhe).HasColumnName("ID_COTACAO_FORNECEDOR_PRODUTODETALHE");

                entity.Property(e => e.IdCotacaoFornecedorProdutodetalheHistorico)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_COTACAO_FORNECEDOR_PRODUTODETALHE_HISTORICO");

                entity.Property(e => e.IdEmbalagem).HasColumnName("ID_EMBALAGEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrIcms)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ICMS");

                entity.Property(e => e.PrIpi)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_IPI");

                entity.Property(e => e.PzEntregaProduto).HasColumnName("PZ_ENTREGA_PRODUTO");

                entity.Property(e => e.QnBonificacao).HasColumnName("QN_BONIFICACAO");

                entity.Property(e => e.QnEmbalagem).HasColumnName("QN_EMBALAGEM");

                entity.Property(e => e.QnProdutoComprado).HasColumnName("QN_PRODUTO_COMPRADO");

                entity.Property(e => e.QnProdutoCotado).HasColumnName("QN_PRODUTO_COTADO");

                entity.Property(e => e.TxCondicaoPagamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONDICAO_PAGAMENTO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlFrete)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FRETE");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ICMS");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_IPI");

                entity.Property(e => e.VlTotalComprado)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_TOTAL_COMPRADO");

                entity.Property(e => e.VlTotalProduto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_TOTAL_PRODUTO");

                entity.Property(e => e.VlUnitarioItem)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_UNITARIO_ITEM");

                entity.Property(e => e.VlUnitarioProduto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_UNITARIO_PRODUTO");
            });

            modelBuilder.Entity<CotacaoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdCotacao, e.IdProdutoDetalhe });

                entity.ToTable("Cotacao_Produto");

                entity.HasIndex(e => e.IdOrdemCompra, "IX_Cotacao_Produto_ID_ORDEM_COMPRA")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdCotacao)
                    .HasColumnName("ID_COTACAO")
                    .HasComment("PK da Tabela. FK com Cotacao.");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK da Tabela. FK com ProdutoDetalhe_Fabricante. Referencia dos produtos pertencetes a cotação.\r\n");

                entity.Property(e => e.IdOrdemCompra)
                    .HasColumnName("ID_ORDEM_COMPRA")
                    .HasComment("Ordem de Compra que foi gerado apartir da cotação. FK com OrdemCompra.\r\n");

                entity.Property(e => e.IdUnidadeMedida)
                    .HasColumnName("ID_UNIDADE_MEDIDA")
                    .HasComment("Unidade de medida do produto. FK com TipoDiversos.\r\n");

                entity.Property(e => e.InProdutoCotado)
                    .HasColumnName("IN_PRODUTO_COTADO")
                    .HasComment("Flag que aponta se o produto já foi cotado.");

                entity.Property(e => e.QnProduto)
                    .HasColumnName("QN_PRODUTO")
                    .HasComment("Quantidade de produto a ser cotado.\r\n");

                entity.Property(e => e.QnProdutoComprado).HasColumnName("QN_PRODUTO_COMPRADO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCotacaoNavigation)
                    .WithMany(p => p.CotacaoProduto)
                    .HasForeignKey(d => d.IdCotacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cotacao_Produto_Cotacao");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.CotacaoProduto)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .HasConstraintName("FK_Cotacao_Produto_OrdemCompra");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.CotacaoProduto)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cotacao_Produto_ProdutoDetalhe");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.CotacaoProduto)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_Cotacao_Produto_TipoDiversos");
            });

            modelBuilder.Entity<CotacaoProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => new { e.IdCotacao, e.IdProdutoDetalhe, e.IdSolicitacao })
                    .HasName("Cotacao_ProdutoDetalhe_PK");

                entity.ToTable("Cotacao_ProdutoDetalhe");

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdSolicitacao }, "IX_Cotacao_ProdutoDetalhe_ID_PRODUTO_DETALHE_ID_SOLICITACAO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdSolicitacao, "IX_Cotacao_ProdutoDetalhe_ID_SOLICITACAO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdCotacao)
                    .HasColumnName("ID_COTACAO")
                    .HasComment("PK da Tabela. FK com Cotacao.");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK da tabela. FK com ProdutoDetalhe_Fabricante\r\n");

                entity.Property(e => e.IdSolicitacao)
                    .HasColumnName("ID_SOLICITACAO")
                    .HasComment("PK da Tabela. FK com Solicitacao.\r\n");

                entity.HasOne(d => d.IdCotacaoNavigation)
                    .WithMany(p => p.CotacaoProdutoDetalhe)
                    .HasForeignKey(d => d.IdCotacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Cotacao_Cotacao_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.CotacaoProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdProdutoDetalhe, d.IdSolicitacao })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_ProdutoDetalhe_Cotacao_ProdutoDetalhe_FK1");
            });

            modelBuilder.Entity<CreditoEstorno>(entity =>
            {
                entity.HasKey(e => e.IdCreditoestorno)
                    .HasName("CreditoEstorno_PK");

                entity.HasComment("Créditos ou estornos ocorridos após o pagamento da conta ter sido feito pelo Convênio");

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_CreditoEstorno_ID_CONTA_ID_FECHAMENTO_ITEM")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdCreditoestorno)
                    .HasColumnName("ID_CREDITOESTORNO")
                    .HasComment("Chave única sequencial");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasComment("Data do cadastro");

                entity.Property(e => e.DtCreditoestorno)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CREDITOESTORNO")
                    .HasComment("Data do crédito ou estorno");

                entity.Property(e => e.IdArquivoUnimed)
                    .HasColumnName("ID_ARQUIVO_UNIMED")
                    .HasComment("Chave Estrangeira (ARQUIVO_UNIMED)");

                entity.Property(e => e.IdConta)
                    .HasColumnName("ID_CONTA")
                    .HasComment("Chave Estrangeira (FechamentoItem)");

                entity.Property(e => e.IdFechamentoItem)
                    .HasColumnName("ID_FECHAMENTO_ITEM")
                    .HasComment("Chave Estrangeira (FechamentoItem)");

                entity.Property(e => e.IdTipoMotivo)
                    .HasColumnName("ID_TIPO_MOTIVO")
                    .HasComment("Chave Estrangeira (TipoDiversos: TipoTabela 408: Motivo de Credito ou Estorno)");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("Usuário que atualizou o registro");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("1=Ativo");

                entity.Property(e => e.InCredito)
                    .HasColumnName("IN_CREDITO")
                    .HasComment("1=Credito 0=Estorno");

                entity.Property(e => e.InSeloQualidade).HasColumnName("IN_SELO_QUALIDADE");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("Complemento da justificativa");

                entity.Property(e => e.VlCreditoestorno)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CREDITOESTORNO")
                    .HasComment("Valor do crédito ou estorno");

                entity.HasOne(d => d.IdArquivoUnimedNavigation)
                    .WithMany(p => p.CreditoEstorno)
                    .HasForeignKey(d => d.IdArquivoUnimed)
                    .HasConstraintName("ARQUIVO_UNIMED_CreditoEstorno_FK1");

                entity.HasOne(d => d.IdTipoMotivoNavigation)
                    .WithMany(p => p.CreditoEstorno)
                    .HasForeignKey(d => d.IdTipoMotivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_CreditoEstorno_FK1");
            });

            modelBuilder.Entity<CreditosLiberadosConvenioParaRepasse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CreditosLiberadosConvenioParaRepasse");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.VlConciliado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_CONCILIADO");

                entity.Property(e => e.VlGlosas).HasColumnName("VL_GLOSAS");

                entity.Property(e => e.VlLancamento).HasColumnName("VL_LANCAMENTO");

                entity.Property(e => e.VlLote).HasColumnName("VL_LOTE");
            });

            modelBuilder.Entity<CronogramaConta>(entity =>
            {
                entity.HasKey(e => e.IdCronogramaConta)
                    .HasName("CronogramaConta_PK");

                entity.HasIndex(e => e.IdOperadora, "IX_CronogramaConta_K2_3_4")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.DtFimPeriodo, "IX_CronogramaConta_K4_3_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdCronogramaConta).HasColumnName("ID_CRONOGRAMA_CONTA");

                entity.Property(e => e.DtCorteAuditoria)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CORTE_AUDITORIA");

                entity.Property(e => e.DtFimPeriodo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_PERIODO");

                entity.Property(e => e.DtInicioPeriodo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PERIODO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.CronogramaConta)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_CronogramaConta_FK1");
            });

            modelBuilder.Entity<CronogramaRecebimentoConta>(entity =>
            {
                entity.HasKey(e => e.IdCronogramaRecebimentoConta)
                    .HasName("CronogramaRecebimentoConta_PK");

                entity.Property(e => e.IdCronogramaRecebimentoConta).HasColumnName("ID_CRONOGRAMA_RECEBIMENTO_CONTA");

                entity.Property(e => e.NmNomeCronograma)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_NOME_CRONOGRAMA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<CronogramaRecebimentoContaDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdCronogramaConta)
                    .HasName("CronogramaRecebimentoContaDetalhe_PK");

                entity.Property(e => e.IdCronogramaConta).HasColumnName("ID_CRONOGRAMA_CONTA");

                entity.Property(e => e.DtFimPeriodo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_PERIODO");

                entity.Property(e => e.DtInicioPeriodo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PERIODO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.IdCronogramaRecebimentoConta).HasColumnName("ID_CRONOGRAMA_RECEBIMENTO_CONTA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCronogramaRecebimentoContaNavigation)
                    .WithMany(p => p.CronogramaRecebimentoContaDetalhe)
                    .HasForeignKey(d => d.IdCronogramaRecebimentoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CronogramaRecebimentoConta_CronogramaRecebimentoContaDetalhe_FK1");
            });

            modelBuilder.Entity<CustosFatRentabilidade>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CUSTOS_FAT_RENTABILIDADE");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.IdAnoMes).HasColumnName("ID_ANO_MES");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdClassificacaoPai).HasColumnName("ID_CLASSIFICACAO_PAI");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdPossuiNotaEntrada).HasColumnName("ID_POSSUI_NOTA_ENTRADA");

                entity.Property(e => e.IdPossuiTaxaCoercializacao).HasColumnName("ID_POSSUI_TAXA_COERCIALIZACAO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdStatusConsignadoPendente).HasColumnName("ID_STATUS_CONSIGNADO_PENDENTE");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdTipoDispensacao).HasColumnName("ID_TIPO_DISPENSACAO");

                entity.Property(e => e.IdTipoEntrada).HasColumnName("ID_TIPO_ENTRADA");

                entity.Property(e => e.IdUnidadeAtendimento).HasColumnName("ID_UNIDADE_ATENDIMENTO");

                entity.Property(e => e.IdUnidadeOrganizacionalLancamento).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_LANCAMENTO");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InOpme).HasColumnName("IN_OPME");

                entity.Property(e => e.InPossuiPacote).HasColumnName("IN_POSSUI_PACOTE");

                entity.Property(e => e.NrCheckinEnfermagem)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.NrPrescricao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRESCRICAO");

                entity.Property(e => e.QnItemDispensado).HasColumnName("QN_ITEM_DISPENSADO");

                entity.Property(e => e.QnItemFaturado).HasColumnName("QN_ITEM_FATURADO");

                entity.Property(e => e.TxProcedimentoPrincipal)
                    .IsUnicode(false)
                    .HasColumnName("TX_PROCEDIMENTO_PRINCIPAL");

                entity.Property(e => e.UnidadeConsumo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_CONSUMO");

                entity.Property(e => e.UnidadeConsumoConta)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_CONSUMO_CONTA");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(30, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlItemDispensado)
                    .HasColumnType("decimal(30, 2)")
                    .HasColumnName("VL_ITEM_DISPENSADO");

                entity.Property(e => e.VlPacote).HasColumnName("VL_PACOTE");

                entity.Property(e => e.VlTaxaComercializacao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TAXA_COMERCIALIZACAO");
            });

            modelBuilder.Entity<DadosHospital>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DadosHospital");

                entity.Property(e => e.CdCnes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cd_cnes");

                entity.Property(e => e.Cnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cnpj");

                entity.Property(e => e.CrmResponsavelLaboratorio)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("crm_responsavel_laboratorio");

                entity.Property(e => e.Endereco1)
                    .HasMaxLength(715)
                    .IsUnicode(false)
                    .HasColumnName("endereco1");

                entity.Property(e => e.Endereco2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("endereco2");

                entity.Property(e => e.IdHospital).HasColumnName("id_hospital");

                entity.Property(e => e.NmHospital)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_hospital");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("telefone");
            });

            modelBuilder.Entity<DefaultContabil>(entity =>
            {
                entity.HasKey(e => e.IdDefaultContabil);

                entity.Property(e => e.IdDefaultContabil).HasColumnName("ID_DEFAULT_CONTABIL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdClassificacaoTipo).HasColumnName("ID_CLASSIFICACAO_TIPO");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdContadespesareceita).HasColumnName("ID_CONTADESPESARECEITA");

                entity.Property(e => e.IdDefaultContabilTipo).HasColumnName("ID_DEFAULT_CONTABIL_TIPO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPkTemp01).HasColumnName("ID_PK_TEMP_01");

                entity.Property(e => e.IdPkTemp02).HasColumnName("ID_PK_TEMP_02");

                entity.Property(e => e.IdPkTemp03).HasColumnName("ID_PK_TEMP_03");

                entity.Property(e => e.IdPkTemp04).HasColumnName("ID_PK_TEMP_04");

                entity.Property(e => e.IdPkTemp05).HasColumnName("ID_PK_TEMP_05");

                entity.Property(e => e.IdPlanoContas).HasColumnName("ID_PLANO_CONTAS");

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.IdTipoLancamentoBancario).HasColumnName("ID_TIPO_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InDebito)
                    .IsRequired()
                    .HasColumnName("IN_DEBITO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrConta)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_CONTA");

                entity.Property(e => e.TxClassificacao)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_CLASSIFICACAO");

                entity.HasOne(d => d.IdClassificacaoTipoNavigation)
                    .WithMany(p => p.DefaultContabilIdClassificacaoTipoNavigation)
                    .HasForeignKey(d => d.IdClassificacaoTipo);

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.DefaultContabil)
                    .HasForeignKey(d => d.IdContaBancaria);

                entity.HasOne(d => d.IdContadespesareceitaNavigation)
                    .WithMany(p => p.DefaultContabil)
                    .HasForeignKey(d => d.IdContadespesareceita);

                entity.HasOne(d => d.IdDefaultContabilTipoNavigation)
                    .WithMany(p => p.DefaultContabil)
                    .HasForeignKey(d => d.IdDefaultContabilTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.DefaultContabil)
                    .HasForeignKey(d => d.IdPessoa);

                entity.HasOne(d => d.IdPlanoContasNavigation)
                    .WithMany(p => p.DefaultContabil)
                    .HasForeignKey(d => d.IdPlanoContas)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.DefaultContabilIdTipoDiversosNavigation)
                    .HasForeignKey(d => d.IdTipoDiversos);

                entity.HasOne(d => d.IdTipoLancamentoBancarioNavigation)
                    .WithMany(p => p.DefaultContabil)
                    .HasForeignKey(d => d.IdTipoLancamentoBancario);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DefaultContabil)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<DefaultContabilTipo>(entity =>
            {
                entity.HasKey(e => e.IdDefaultContabilTipo);

                entity.Property(e => e.IdDefaultContabilTipo).HasColumnName("ID_DEFAULT_CONTABIL_TIPO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmColunaPk)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_COLUNA_PK");

                entity.Property(e => e.NmDefaultContabil)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_DEFAULT_CONTABIL");

                entity.Property(e => e.NmTabelaDados)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TABELA_DADOS");

                entity.Property(e => e.TxLabel)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_LABEL");

                entity.Property(e => e.TxMsgErroInsertPkNegativa)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ERRO_INSERT_PK_NEGATIVA");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");
            });

            modelBuilder.Entity<DescontoFinanceiro>(entity =>
            {
                entity.HasKey(e => e.IdNotaEntrada);

                entity.Property(e => e.IdNotaEntrada)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.InPercentual).HasColumnName("IN_PERCENTUAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithOne(p => p.DescontoFinanceiro)
                    .HasForeignKey<DescontoFinanceiro>(d => d.IdNotaEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DescontoFinanceiro_NotaEntrada");
            });

            modelBuilder.Entity<DespesaRepasse>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtMesAnoReferencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MES_ANO_REFERENCIA");

                entity.Property(e => e.IdCategoriaDespesa).HasColumnName("ID_CATEGORIA_DESPESA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlBaseRateio).HasColumnName("VL_BASE_RATEIO");

                entity.Property(e => e.VlDespesa).HasColumnName("VL_DESPESA");
            });

            modelBuilder.Entity<DevolucaoChecagem>(entity =>
            {
                entity.HasKey(e => e.IdDevolucaoChecagem);

                entity.HasIndex(e => e.IdSolicitacao, "IX_DevolucaoChecagem_ID_SOLICITACAO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdDevolucaoChecagem).HasColumnName("ID_DEVOLUCAO_CHECAGEM");

                entity.Property(e => e.DtDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO");

                entity.Property(e => e.IdJustificativa).HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdJustificativaNavigation)
                    .WithMany(p => p.DevolucaoChecagem)
                    .HasForeignKey(d => d.IdJustificativa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevolucaoChecagem_TipoDiversos");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.DevolucaoChecagem)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevolucaoChecagem_Solicitacao");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DevolucaoChecagem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevolucaoChecagem_Usuario");
            });

            modelBuilder.Entity<DevolucaoChecagemSolicitacaoPdEnfermagemHorarioAdministracao>(entity =>
            {
                entity.HasKey(e => new { e.IdDevolucaoChecagem, e.IdSolicitacaoPdEnfermagemhorarioadministracao });

                entity.ToTable("DevolucaoChecagem_Solicitacao_PD_EnfermagemHorarioAdministracao");

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao, "IX_DevolucaoChecagem_Solicitacao_PD_EnfermagemHorarioAdministracao_PK2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdDevolucaoChecagem).HasColumnName("ID_DEVOLUCAO_CHECAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.HasOne(d => d.IdDevolucaoChecagemNavigation)
                    .WithMany(p => p.DevolucaoChecagemSolicitacaoPdEnfermagemHorarioAdministracao)
                    .HasForeignKey(d => d.IdDevolucaoChecagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevolucaoChecagem_Solicitacao_PD_EnfermagemHorarioAdministracao_DevolucaoChecagem");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoNavigation)
                    .WithMany(p => p.DevolucaoChecagemSolicitacaoPdEnfermagemHorarioAdministracao)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevolucaoChecagem_Solicitacao_PD_EnfermagemHorarioAdministracao_Solicitacao_PD_EnfermagemHorarioAdministracao");
            });

            modelBuilder.Entity<DevolucaoProdutoPendenteConfirmacao>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoProdutoEntregue);

                entity.Property(e => e.IdSolicitacaoProdutoEntregue)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_SOLICITACAO_PRODUTO_ENTREGUE");

                entity.Property(e => e.IdUnidadeDevolveu).HasColumnName("ID_UNIDADE_DEVOLVEU");

                entity.Property(e => e.QnDevolucaoConfirmada)
                    .HasColumnName("QN_DEVOLUCAO_CONFIRMADA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnDevolver).HasColumnName("QN_DEVOLVER");

                entity.HasOne(d => d.IdSolicitacaoProdutoEntregueNavigation)
                    .WithOne(p => p.DevolucaoProdutoPendenteConfirmacao)
                    .HasForeignKey<DevolucaoProdutoPendenteConfirmacao>(d => d.IdSolicitacaoProdutoEntregue)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevolucaoProdutoPendenteConfirmacao_Solicitacao_ProdutoDetalhe_Entregue");

                entity.HasOne(d => d.IdUnidadeDevolveuNavigation)
                    .WithMany(p => p.DevolucaoProdutoPendenteConfirmacao)
                    .HasForeignKey(d => d.IdUnidadeDevolveu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DevolucaoProdutoPendenteConfirmacao_UnidadeOrganizacional");
            });

            modelBuilder.Entity<DiaSolicitacao>(entity =>
            {
                entity.HasKey(e => e.IdDiaSolicitacao)
                    .HasName("DiaSolicitacao_PK");

                entity.Property(e => e.IdDiaSolicitacao).HasColumnName("ID_DIA_SOLICITACAO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.HrLimiteSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_LIMITE_SOLICITACAO");

                entity.Property(e => e.IdDiaSemana).HasColumnName("ID_DIA_SEMANA");

                entity.Property(e => e.IdUnidadeExecutante).HasColumnName("ID_UNIDADE_EXECUTANTE");

                entity.Property(e => e.IdUnidadeSolicitante).HasColumnName("ID_UNIDADE_SOLICITANTE");

                entity.Property(e => e.IdUsuarioAlterou).HasColumnName("ID_USUARIO_ALTEROU");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdDiaSemanaNavigation)
                    .WithMany(p => p.DiaSolicitacao)
                    .HasForeignKey(d => d.IdDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_DiaSolicitacao_FK3");

                entity.HasOne(d => d.IdUnidadeExecutanteNavigation)
                    .WithMany(p => p.DiaSolicitacaoIdUnidadeExecutanteNavigation)
                    .HasForeignKey(d => d.IdUnidadeExecutante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_DiaSolicitacao_FK5");

                entity.HasOne(d => d.IdUnidadeSolicitanteNavigation)
                    .WithMany(p => p.DiaSolicitacaoIdUnidadeSolicitanteNavigation)
                    .HasForeignKey(d => d.IdUnidadeSolicitante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_DiaSolicitacao_FK4");

                entity.HasOne(d => d.IdUsuarioAlterouNavigation)
                    .WithMany(p => p.DiaSolicitacaoIdUsuarioAlterouNavigation)
                    .HasForeignKey(d => d.IdUsuarioAlterou)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_DiaSolicitacao_FK2");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.DiaSolicitacaoIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_DiaSolicitacao_FK1");
            });

            modelBuilder.Entity<DiaSolicitacaoUsuario>(entity =>
            {
                entity.HasKey(e => new { e.IdDiaSolicitacao, e.IdUsuario })
                    .HasName("DiaSolicitacao_Usuario_PK1");

                entity.ToTable("DiaSolicitacao_Usuario");

                entity.Property(e => e.IdDiaSolicitacao).HasColumnName("ID_DIA_SOLICITACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdDiaSolicitacaoNavigation)
                    .WithMany(p => p.DiaSolicitacaoUsuario)
                    .HasForeignKey(d => d.IdDiaSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DiaSolicitacao_Usuario_DiaSolicitacao");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DiaSolicitacaoUsuario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DiaSolicitacao_Usuario_Usuario");
            });

            modelBuilder.Entity<DiagnosticoSecundarioSus>(entity =>
            {
                entity.HasKey(e => e.IdDiagnosticoSecundario)
                    .HasName("PK__Diagnost__5077B7865FFB83F2");

                entity.HasIndex(e => new { e.IdGuia, e.InAtivo }, "IX_DiagnosticoSecundarioSus_K2_K6_1_3_4_5_6_7")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdDiagnosticoSecundario).HasColumnName("ID_DIAGNOSTICO_SECUNDARIO");

                entity.Property(e => e.DtGravacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GRAVACAO");

                entity.Property(e => e.IdCidSecundario).HasColumnName("ID_CID_SECUNDARIO");

                entity.Property(e => e.IdClassificacaoDiagnostico).HasColumnName("ID_CLASSIFICACAO_DIAGNOSTICO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.HasOne(d => d.IdCidSecundarioNavigation)
                    .WithMany(p => p.DiagnosticoSecundarioSus)
                    .HasForeignKey(d => d.IdCidSecundario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DiagnosticoSecundarioSus_Cid");

                entity.HasOne(d => d.IdClassificacaoDiagnosticoNavigation)
                    .WithMany(p => p.DiagnosticoSecundarioSus)
                    .HasForeignKey(d => d.IdClassificacaoDiagnostico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DiagnosticoSecundarioSus_TipoClassificaoCidSecundario");
            });

            modelBuilder.Entity<DietaPadronizada>(entity =>
            {
                entity.HasKey(e => e.IdServico)
                    .HasName("DietaPadronizada_PK");

                entity.Property(e => e.IdServico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdTipoViaAdministracao).HasColumnName("ID_TIPO_VIA_ADMINISTRACAO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InKcalObrigatorio).HasColumnName("IN_KCAL_OBRIGATORIO");

                entity.Property(e => e.InLiberadoPrescricao).HasColumnName("IN_LIBERADO_PRESCRICAO");

                entity.Property(e => e.QnKcaloriasTotal)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_KCALORIAS_TOTAL");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithOne(p => p.DietaPadronizada)
                    .HasForeignKey<DietaPadronizada>(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_DietaPadronizada_FK1");

                entity.HasOne(d => d.IdTipoViaAdministracaoNavigation)
                    .WithMany(p => p.DietaPadronizada)
                    .HasForeignKey(d => d.IdTipoViaAdministracao)
                    .HasConstraintName("TipoDiversos_DietaPadronizada_FK1");

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.DietaPadronizadaIdUsuarioAlteracaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_DietaPadronizada_FK1");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.DietaPadronizadaIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_DietaPadronizada_FK2");
            });

            modelBuilder.Entity<DietaPadronizadaMedicamento>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdProdutoDetalhe })
                    .HasName("DietaPadronizada_Medicamento_PK");

                entity.ToTable("DietaPadronizada_Medicamento");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.IdTipoSistema).HasColumnName("ID_TIPO_SISTEMA");

                entity.Property(e => e.QnDensidadeCalorica)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DENSIDADE_CALORICA");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.DietaPadronizadaMedicamento)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_DietaPadronizada_Medicamento_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.DietaPadronizadaMedicamento)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DietaPadronizada_DietaPadronizada_Medicamento_FK1");

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.DietaPadronizadaMedicamento)
                    .HasForeignKey(d => d.IdTipoDiversos)
                    .HasConstraintName("TipoDiversos_DietaPadronizada_Medicamento_FK1");
            });

            modelBuilder.Entity<DietaPadronizadaMedicamentoOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdProdutoDetalhe, e.IdOperadora })
                    .HasName("DietaPadronizada_Medicamento_Operadora_PK");

                entity.ToTable("DietaPadronizada_Medicamento_Operadora");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.DietaPadronizadaMedicamentoOperadora)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_DietaPadronizada_Medicamento_Operadora_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.DietaPadronizadaMedicamentoOperadora)
                    .HasForeignKey(d => new { d.IdServico, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DietaPadronizada_Medicamento_DietaPadronizada_Medicamento_Operadora_FK1");
            });

            modelBuilder.Entity<DietaPadronizadaMedicamentoUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdProdutoDetalhe, e.IdUnidadeOrganizacional })
                    .HasName("DietaPadronizada_Medicamento_UnidadeOrganizacional_PK");

                entity.ToTable("DietaPadronizada_Medicamento_UnidadeOrganizacional");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.DietaPadronizadaMedicamentoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_DietaPadronizada_Medicamento_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.DietaPadronizadaMedicamentoUnidadeOrganizacional)
                    .HasForeignKey(d => new { d.IdServico, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DietaPadronizada_Medicamento_DietaPadronizada_Medicamento_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<DietaRestricao>(entity =>
            {
                entity.HasKey(e => e.IdDietaRestricao);

                entity.Property(e => e.IdDietaRestricao).HasColumnName("ID_DIETA_RESTRICAO");

                entity.Property(e => e.IdServico1).HasColumnName("ID_SERVICO_1");

                entity.Property(e => e.IdServico2).HasColumnName("ID_SERVICO_2");

                entity.HasOne(d => d.IdServico1Navigation)
                    .WithMany(p => p.DietaRestricaoIdServico1Navigation)
                    .HasForeignKey(d => d.IdServico1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DietaRestricao_DietaPadronizada1");

                entity.HasOne(d => d.IdServico2Navigation)
                    .WithMany(p => p.DietaRestricaoIdServico2Navigation)
                    .HasForeignKey(d => d.IdServico2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DietaRestricao_DietaPadronizada2");
            });

            modelBuilder.Entity<DimMedico>(entity =>
            {
                entity.HasKey(e => e.IdMedico)
                    .HasName("DIM_MEDICO_PK");

                entity.ToTable("DIM_MEDICO");

                entity.Property(e => e.IdMedico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_MEDICO");

                entity.Property(e => e.NmMedico)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NM_MEDICO");
            });

            modelBuilder.Entity<DimOperadora>(entity =>
            {
                entity.HasKey(e => e.IdOperadora)
                    .HasName("DIM_OPERADORA_PK");

                entity.ToTable("DIM_OPERADORA");

                entity.Property(e => e.IdOperadora)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_OPERADORA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("NM_OPERADORA");
            });

            modelBuilder.Entity<DimRecurso>(entity =>
            {
                entity.HasKey(e => e.IdRecurso)
                    .HasName("DIM_RECURSO_PK");

                entity.ToTable("DIM_RECURSO");

                entity.Property(e => e.IdRecurso)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_RECURSO");

                entity.Property(e => e.NmRecurso)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NM_RECURSO");
            });

            modelBuilder.Entity<DimTempo>(entity =>
            {
                entity.HasKey(e => e.IdTempo)
                    .HasName("DIM_TEMPO_PK");

                entity.ToTable("DIM_TEMPO");

                entity.Property(e => e.IdTempo)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_TEMPO");

                entity.Property(e => e.Ano).HasColumnName("ANO");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DATA")
                    .IsFixedLength(true);

                entity.Property(e => e.Mes)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("MES");

                entity.Property(e => e.Semestre)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("SEMESTRE");
            });

            modelBuilder.Entity<DimUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => e.IdUnidadeOrganizacional)
                    .HasName("DIM_UNIDADE_ORGANIZACIONAL_PK");

                entity.ToTable("DIM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");
            });

            modelBuilder.Entity<DimUsuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario)
                    .HasName("DIM_USUARIO_PK");

                entity.ToTable("DIM_USUARIO");

                entity.Property(e => e.IdUsuario)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmUsuario)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("NM_USUARIO");
            });

            modelBuilder.Entity<DispensacaoCusto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DispensacaoCusto");

                entity.Property(e => e.CdOperadora).HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdProduto).HasColumnName("CD_PRODUTO");

                entity.Property(e => e.CdProdutoPai).HasColumnName("CD_PRODUTO_PAI");

                entity.Property(e => e.DtUtilizacao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_UTILIZACAO");

                entity.Property(e => e.IdCentroCusto).HasColumnName("ID_CENTRO_CUSTO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.NrFolhaSala).HasColumnName("NR_FOLHA_SALA");

                entity.Property(e => e.PrUnitario)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("PR_UNITARIO");

                entity.Property(e => e.QnDispensada).HasColumnName("QN_DISPENSADA");
            });

            modelBuilder.Entity<DispensacaoEnfermagem>(entity =>
            {
                entity.HasKey(e => e.IdDispensacaoEnfermagem);

                entity.HasIndex(e => new { e.DtDispensacao, e.InDevolvido }, "IX_DispensacaoEnfermagem_DT_DISPENSACAO_IN_DEVOLVIDO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdCheckinEnfermagem, e.IdServico, e.InDevolvido, e.DtLancamento }, "IX_DispensacaoEnfermagem_ID_CHECKIN_ENFERMAGEM_ID_SERVICO_IN_DEVOLVIDO_DT_LANCAMENTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdMdFracionado, "IX_DispensacaoEnfermagem_ID_MD_FRACIONADO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InDevolvido, e.IdCirurgiaFuncaoTipo, e.IdUsuarioChecagem }, "IX_DispensacaoEnfermagem_IN_DEVOLVIDO_ID_CIRURGIA_FUNCAO_TIPO_ID_USUARIO_CHECAGEM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InDevolvido, e.IdProdutoDetalhe, e.DtDispensacao }, "IX_DispensacaoEnfermagem_IN_DEVOLVIDO_ID_PRODUTO_DETALHE_DT_DISPENSACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdLoteProdutoItem, e.InDevolvido }, "IX_DispensacaoEnfermagem_K3_K6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdCheckinEnfermagem, "IX_DispensacaoEnfermagem_check_in_enferm_id_serv")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdDispensacaoEnfermagemPai, "IX_ID_DISPENSACAO_ENFERMAGEM_PAI")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdDispensacaoEnfermagem).HasColumnName("ID_DISPENSACAO_ENFERMAGEM");

                entity.Property(e => e.DtChecagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CHECAGEM");

                entity.Property(e => e.DtDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO");

                entity.Property(e => e.DtDispensacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DISPENSACAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdAgrupamentoMaterial).HasColumnName("ID_AGRUPAMENTO_MATERIAL");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdCirurgiaFuncaoTipo).HasColumnName("ID_CIRURGIA_FUNCAO_TIPO");

                entity.Property(e => e.IdComposicaoItemProduto).HasColumnName("ID_COMPOSICAO_ITEM_PRODUTO");

                entity.Property(e => e.IdDispensacaoEnfermagemPai).HasColumnName("ID_DISPENSACAO_ENFERMAGEM_PAI");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdMdFracionado).HasColumnName("ID_MD_FRACIONADO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoCobranca).HasColumnName("ID_TIPO_COBRANCA");

                entity.Property(e => e.IdUnidadeEstoque).HasColumnName("ID_UNIDADE_ESTOQUE");

                entity.Property(e => e.IdUsuarioChecagem).HasColumnName("ID_USUARIO_CHECAGEM");

                entity.Property(e => e.IdUsuarioDevolveu).HasColumnName("ID_USUARIO_DEVOLVEU");

                entity.Property(e => e.IdUsuarioDispensou).HasColumnName("ID_USUARIO_DISPENSOU");

                entity.Property(e => e.InCobrado).HasColumnName("IN_COBRADO");

                entity.Property(e => e.InDevolvido).HasColumnName("IN_DEVOLVIDO");

                entity.Property(e => e.QnFracionado).HasColumnName("QN_FRACIONADO");

                entity.HasOne(d => d.IdAgrupamentoMaterialNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdAgrupamentoMaterial)
                    .HasConstraintName("FK_DispensacaoEnfermagem_AgrupamentoMaterial");

                entity.HasOne(d => d.IdCheckinEnfermagemNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdCheckinEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DispensacaoEnfermagem_CheckinEnfermagem");

                entity.HasOne(d => d.IdCirurgiaFuncaoTipoNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdCirurgiaFuncaoTipo)
                    .HasConstraintName("FK_DispensacaoEnfermagem_CirurgiaFuncaoTipo");

                entity.HasOne(d => d.IdComposicaoItemProdutoNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdComposicaoItemProduto)
                    .HasConstraintName("ComposicaoItem_Produto_DispensacaoEnfermagem_FK1");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("FK_DispensacaoEnfermagem_LoteProdutoItem");

                entity.HasOne(d => d.IdMdFracionadoNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdMdFracionado)
                    .HasConstraintName("FK_DispensacaoEnfermagem_TipoDiversos");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DispensacaoEnfermagem_Servico");

                entity.HasOne(d => d.IdTipoCobrancaNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdTipoCobranca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DispensacaoEnfermagem_CobrancaTipoEnfermagem");

                entity.HasOne(d => d.IdUnidadeEstoqueNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdUnidadeEstoque)
                    .HasConstraintName("FK_DispensacaoEnfermagem_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioChecagemNavigation)
                    .WithMany(p => p.DispensacaoEnfermagemIdUsuarioChecagemNavigation)
                    .HasForeignKey(d => d.IdUsuarioChecagem)
                    .HasConstraintName("FK_DispensacaoEnfermagem_Usuario");

                entity.HasOne(d => d.IdUsuarioDevolveuNavigation)
                    .WithMany(p => p.DispensacaoEnfermagemIdUsuarioDevolveuNavigation)
                    .HasForeignKey(d => d.IdUsuarioDevolveu)
                    .HasConstraintName("FK_DispensacaoEnfermagem_UsuarioDevolveu");

                entity.HasOne(d => d.IdUsuarioDispensouNavigation)
                    .WithMany(p => p.DispensacaoEnfermagemIdUsuarioDispensouNavigation)
                    .HasForeignKey(d => d.IdUsuarioDispensou)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DispensacaoEnfermagem_UsuarioDispensou");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => new { d.IdCheckinEnfermagem, d.IdServico })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DispensacaoEnfermagem_Servico_CheckinEnfermagem");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.DispensacaoEnfermagem)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("FK_DispensacaoEnfermagem_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<DispensacaoEnfermagemHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdDispensacaoEnfermagem, e.DtRegistro, e.IdUsuarioHistorico })
                    .HasName("DispensacaoEnfermagemHistorico_PK");

                entity.Property(e => e.IdDispensacaoEnfermagem).HasColumnName("ID_DISPENSACAO_ENFERMAGEM");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdUsuarioHistorico).HasColumnName("ID_USUARIO_HISTORICO");

                entity.Property(e => e.DtDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO");

                entity.Property(e => e.DtDispensacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DISPENSACAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdAgrupamentoMaterial).HasColumnName("ID_AGRUPAMENTO_MATERIAL");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdComposicaoItemProduto).HasColumnName("ID_COMPOSICAO_ITEM_PRODUTO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdMdFracionado).HasColumnName("ID_MD_FRACIONADO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoCobranca).HasColumnName("ID_TIPO_COBRANCA");

                entity.Property(e => e.IdUnidadeEstoque).HasColumnName("ID_UNIDADE_ESTOQUE");

                entity.Property(e => e.IdUsuarioDevolveu).HasColumnName("ID_USUARIO_DEVOLVEU");

                entity.Property(e => e.IdUsuarioDispensou).HasColumnName("ID_USUARIO_DISPENSOU");

                entity.Property(e => e.InCobrado).HasColumnName("IN_COBRADO");

                entity.Property(e => e.InDevolvido).HasColumnName("IN_DEVOLVIDO");

                entity.Property(e => e.QnFracionado).HasColumnName("QN_FRACIONADO");

                entity.HasOne(d => d.IdDispensacaoEnfermagemNavigation)
                    .WithMany(p => p.DispensacaoEnfermagemHistorico)
                    .HasForeignKey(d => d.IdDispensacaoEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DispensacaoEnfermagem_DispensacaoEnfermagemHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioHistoricoNavigation)
                    .WithMany(p => p.DispensacaoEnfermagemHistorico)
                    .HasForeignKey(d => d.IdUsuarioHistorico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_DispensacaoEnfermagemHistorico_FK1");
            });

            modelBuilder.Entity<Dmed>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.NrCpfResponsavel, e.NrAnoReferencia, e.NrAnoCalendario }, "IX_Dmed_NR_CPF_RESPONSAVEL_NR_ANO_REFERENCIA_NR_ANO_CALENDARIO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdNotaEmitida, "UK_Dmed")
                    .IsUnique();

                entity.Property(e => e.DtNascBeneficiario)
                    .HasMaxLength(8)
                    .HasColumnName("DT_NASC_BENEFICIARIO")
                    .IsFixedLength(true);

                entity.Property(e => e.IdDmed)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_DMED");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.NmBeneficiario)
                    .HasMaxLength(60)
                    .HasColumnName("NM_BENEFICIARIO")
                    .IsFixedLength(true);

                entity.Property(e => e.NmResponsavel)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("NM_RESPONSAVEL")
                    .IsFixedLength(true);

                entity.Property(e => e.NrAnoCalendario).HasColumnName("NR_ANO_CALENDARIO");

                entity.Property(e => e.NrAnoReferencia).HasColumnName("NR_ANO_REFERENCIA");

                entity.Property(e => e.NrCpfBeneficiario)
                    .HasMaxLength(11)
                    .HasColumnName("NR_CPF_BENEFICIARIO")
                    .IsFixedLength(true);

                entity.Property(e => e.NrCpfResponsavel)
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnName("NR_CPF_RESPONSAVEL")
                    .IsFixedLength(true);

                entity.Property(e => e.VlBeneficiario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_BENEFICIARIO");

                entity.Property(e => e.VlResponsavel)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_RESPONSAVEL");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithOne()
                    .HasForeignKey<Dmed>(d => d.IdNotaEmitida)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Documento>(entity =>
            {
                entity.HasKey(e => e.IdDocumento)
                    .HasName("Documento_PK");

                entity.HasIndex(e => e.IdDocumentoFinalidade, "IX_Documento_ID_DOCUMENTO_FINALIDADE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

                entity.Property(e => e.CdModelo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_MODELO");

                entity.Property(e => e.IdDocumentoFinalidade)
                    .HasColumnName("ID_DOCUMENTO_FINALIDADE")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.IdDocumentoTipo).HasColumnName("ID_DOCUMENTO_TIPO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InRetencao)
                    .HasColumnName("IN_RETENCAO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxTitulo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_TITULO");

                entity.HasOne(d => d.IdDocumentoFinalidadeNavigation)
                    .WithMany(p => p.Documento)
                    .HasForeignKey(d => d.IdDocumentoFinalidade)
                    .HasConstraintName("DocumentoFinalidade_Documento_FK1");

                entity.HasOne(d => d.IdDocumentoTipoNavigation)
                    .WithMany(p => p.Documento)
                    .HasForeignKey(d => d.IdDocumentoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Documento_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Documento)
                    .HasForeignKey(d => d.IdPessoa)
                    .HasConstraintName("Pessoa_Documento_FK1");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.Documento)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_Documento_FK1");
            });

            modelBuilder.Entity<DocumentoEmprestimo>(entity =>
            {
                entity.HasKey(e => e.IdEmprestimo);

                entity.Property(e => e.IdEmprestimo)
                    .HasColumnName("ID_EMPRESTIMO")
                    .HasComment("identificado único do emprestimo");

                entity.Property(e => e.DtDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO")
                    .HasComment("data que o prontuário foi devolvido");

                entity.Property(e => e.DtEmprestimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMPRESTIMO")
                    .HasComment("data que o prontuário foi emprestado");

                entity.Property(e => e.DtRenovacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RENOVACAO");

                entity.Property(e => e.IdEmprestado)
                    .HasColumnName("ID_EMPRESTADO")
                    .HasComment("id da pessoa que pegou emprestado o prontuário");

                entity.Property(e => e.IdPaciente)
                    .HasColumnName("ID_PACIENTE")
                    .HasComment("o paciente que o prontuário pertence, tabela PESSOA campo ID_PESSOA");

                entity.Property(e => e.IdStatusEmprestimo)
                    .HasColumnName("ID_STATUS_EMPRESTIMO")
                    .HasComment("status da tabela 386");

                entity.Property(e => e.NmPasta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_PASTA")
                    .HasComment("número da pasta aonde o prontuário está armazenado fisicametne");

                entity.Property(e => e.NmSetor)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_SETOR")
                    .HasComment("nome do setor da pessoa que pegou o emprestimo");

                entity.Property(e => e.NrAtendimento)
                    .HasColumnName("NR_ATENDIMENTO")
                    .HasComment("número do atendimento, mas não é chave da tabela atendimento");

                entity.Property(e => e.NrConta)
                    .HasColumnName("NR_CONTA")
                    .HasComment("número da conta, mas não é chave da tabela Conta");

                entity.Property(e => e.NrFolhas)
                    .HasColumnName("NR_FOLHAS")
                    .HasComment("número de folhas que o prontuário possui");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("observação");

                entity.HasOne(d => d.IdEmprestadoNavigation)
                    .WithMany(p => p.DocumentoEmprestimoIdEmprestadoNavigation)
                    .HasForeignKey(d => d.IdEmprestado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoEmprestimo_Pessoa1");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.DocumentoEmprestimoIdPacienteNavigation)
                    .HasForeignKey(d => d.IdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoEmprestimo_Pessoa");

                entity.HasOne(d => d.IdStatusEmprestimoNavigation)
                    .WithMany(p => p.DocumentoEmprestimo)
                    .HasForeignKey(d => d.IdStatusEmprestimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoEmprestimo_TipoDiversos");
            });

            modelBuilder.Entity<DocumentoEmprestimoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdEmprestimoHistorico);

                entity.Property(e => e.IdEmprestimoHistorico).HasColumnName("ID_EMPRESTIMO_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA")
                    .HasComment("data que ocorreu a alteração na tabela DocumentoEmprestimo");

                entity.Property(e => e.IdEmprestimo)
                    .HasColumnName("ID_EMPRESTIMO")
                    .HasComment("identifica qual emprestimo foi realizado na tabela DocumentoEmprestimo");

                entity.Property(e => e.IdStatusEmprestimo)
                    .HasColumnName("ID_STATUS_EMPRESTIMO")
                    .HasComment("novo status que foi alterado, tabela 386");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("Identifica o usuário que realizou a alteração");

                entity.HasOne(d => d.IdEmprestimoNavigation)
                    .WithMany(p => p.DocumentoEmprestimoHistorico)
                    .HasForeignKey(d => d.IdEmprestimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoEmprestimoHistorico_DocumentoEmprestimo");

                entity.HasOne(d => d.IdStatusEmprestimoNavigation)
                    .WithMany(p => p.DocumentoEmprestimoHistorico)
                    .HasForeignKey(d => d.IdStatusEmprestimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoEmprestimoHistorico_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DocumentoEmprestimoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoEmprestimoHistorico_Usuario");
            });

            modelBuilder.Entity<DocumentoEvento>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoEvento)
                    .HasName("DocumentoEvento_PK");

                entity.Property(e => e.IdDocumentoEvento).HasColumnName("ID_DOCUMENTO_EVENTO");

                entity.Property(e => e.IdTipoEvento).HasColumnName("ID_TIPO_EVENTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoEvento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_EVENTO");
            });

            modelBuilder.Entity<DocumentoExigido>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoExigido)
                    .HasName("DocumentoExigido_PK");

                entity.HasIndex(e => e.IdDocumentoEvento, "IX_DOCUMENTO_EVENTO");

                entity.HasIndex(e => e.IdDocumentoFinalidade, "IX_DocumentoExigido_DocumentoFinalidade");

                entity.Property(e => e.IdDocumentoExigido).HasColumnName("ID_DOCUMENTO_EXIGIDO");

                entity.Property(e => e.IdDocumentoEvento).HasColumnName("ID_DOCUMENTO_EVENTO");

                entity.Property(e => e.IdDocumentoFinalidade).HasColumnName("ID_DOCUMENTO_FINALIDADE");

                entity.Property(e => e.IdDocumentoTipo).HasColumnName("ID_DOCUMENTO_TIPO");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InExigido)
                    .IsRequired()
                    .HasColumnName("IN_EXIGIDO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("se o documento será solicitado ao finalizar o atendimento");

                entity.Property(e => e.NmDocumento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_DOCUMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoEventoNavigation)
                    .WithMany(p => p.DocumentoExigido)
                    .HasForeignKey(d => d.IdDocumentoEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoEvento_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdDocumentoFinalidadeNavigation)
                    .WithMany(p => p.DocumentoExigido)
                    .HasForeignKey(d => d.IdDocumentoFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoFinalidade_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdDocumentoTipoNavigation)
                    .WithMany(p => p.DocumentoExigidoIdDocumentoTipoNavigation)
                    .HasForeignKey(d => d.IdDocumentoTipo)
                    .HasConstraintName("TipoDiversos_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdTipoContaNavigation)
                    .WithMany(p => p.DocumentoExigidoIdTipoContaNavigation)
                    .HasForeignKey(d => d.IdTipoConta)
                    .HasConstraintName("FK__Documento__ID_TI__49F8CAE8");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.DocumentoExigido)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_DocumentoExigido_UnidadeOrganizacional");
            });

            modelBuilder.Entity<DocumentoExigidoRegistroEletronicoModelo>(entity =>
            {
                entity.HasKey(e => new { e.IdDocumentoExigido, e.IdRegistroEletronicoModelo })
                    .HasName("DocumentoExigido_RegistroEletronicoModelo_PK");

                entity.ToTable("DocumentoExigido_RegistroEletronicoModelo");

                entity.Property(e => e.IdDocumentoExigido).HasColumnName("ID_DOCUMENTO_EXIGIDO");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<DocumentoExigidoUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdDocumentoExigido, e.IdUnidadeOrganizacional, e.IdUnidadeTipo });

                entity.ToTable("DocumentoExigido_UnidadeOrganizacional");

                entity.Property(e => e.IdDocumentoExigido).HasColumnName("ID_DOCUMENTO_EXIGIDO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeTipo).HasColumnName("ID_UNIDADE_TIPO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdDocumentoExigidoNavigation)
                    .WithMany(p => p.DocumentoExigidoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdDocumentoExigido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoExigido_UnidadeOrganizacional_DocumentoExigido");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.DocumentoExigidoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoExigido_UnidadeOrganizacional_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUnidadeTipoNavigation)
                    .WithMany(p => p.DocumentoExigidoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoExigido_UnidadeOrganizacional_TipoDiversos");
            });

            modelBuilder.Entity<DocumentoFinalidade>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoFinalidade);

                entity.HasIndex(e => e.TxDescricaoFinalidade, "IX_DocumentoFinalidade_TX_DESCRICAO_FINALIDADE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdDocumentoFinalidade).HasColumnName("ID_DOCUMENTO_FINALIDADE");

                entity.Property(e => e.IdUnidadeDestinoFinal).HasColumnName("ID_UNIDADE_DESTINO_FINAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxAbreviatura)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABREVIATURA");

                entity.Property(e => e.TxDescricaoFinalidade)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_FINALIDADE");

                entity.HasOne(d => d.IdUnidadeDestinoFinalNavigation)
                    .WithMany(p => p.DocumentoFinalidade)
                    .HasForeignKey(d => d.IdUnidadeDestinoFinal)
                    .HasConstraintName("DocumentoFinalidade_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<DocumentoFluxo>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoFluxo)
                    .HasName("DocumentoFluxo_PK");

                entity.Property(e => e.IdDocumentoFluxo).HasColumnName("ID_DOCUMENTO_FLUXO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmFluxoDocumento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FLUXO_DOCUMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<DocumentoFluxoDocumentoFinalidade>(entity =>
            {
                entity.HasKey(e => new { e.IdDocumentoFluxo, e.IdDocumentoFinalidade })
                    .HasName("DocumentoFluxo_DocumentoFinalidade_PK");

                entity.ToTable("DocumentoFluxo_DocumentoFinalidade");

                entity.Property(e => e.IdDocumentoFluxo).HasColumnName("ID_DOCUMENTO_FLUXO");

                entity.Property(e => e.IdDocumentoFinalidade).HasColumnName("ID_DOCUMENTO_FINALIDADE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoFinalidadeNavigation)
                    .WithMany(p => p.DocumentoFluxoDocumentoFinalidade)
                    .HasForeignKey(d => d.IdDocumentoFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoFinalidade_DocumentoFluxo_DocumentoFinalidade_FK1");

                entity.HasOne(d => d.IdDocumentoFluxoNavigation)
                    .WithMany(p => p.DocumentoFluxoDocumentoFinalidade)
                    .HasForeignKey(d => d.IdDocumentoFluxo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoFluxo_DocumentoFluxo_DocumentoFinalidade_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.DocumentoFluxoDocumentoFinalidade)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("Pessoa_DocumentoFluxo_DocumentoFinalidade_FK1");
            });

            modelBuilder.Entity<DocumentoFluxoDocumentoFluxoEtapa>(entity =>
            {
                entity.HasKey(e => new { e.IdDocumentoFluxo, e.IdDocumentoFluxoEtapa })
                    .HasName("DocumentoFluxo_DocumentoFluxoEtapa_PK");

                entity.ToTable("DocumentoFluxo_DocumentoFluxoEtapa");

                entity.Property(e => e.IdDocumentoFluxo).HasColumnName("ID_DOCUMENTO_FLUXO");

                entity.Property(e => e.IdDocumentoFluxoEtapa).HasColumnName("ID_DOCUMENTO_FLUXO_ETAPA");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoFluxoNavigation)
                    .WithMany(p => p.DocumentoFluxoDocumentoFluxoEtapa)
                    .HasForeignKey(d => d.IdDocumentoFluxo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoFluxo_DocumentoFluxo_DocumentoFluxoEtapa_FK1");

                entity.HasOne(d => d.IdDocumentoFluxoEtapaNavigation)
                    .WithMany(p => p.DocumentoFluxoDocumentoFluxoEtapa)
                    .HasForeignKey(d => d.IdDocumentoFluxoEtapa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoFluxoEtapa_DocumentoFluxo_DocumentoFluxoEtapa_FK1");
            });

            modelBuilder.Entity<DocumentoFluxoEtapa>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoFluxoEtapa)
                    .HasName("DocumentoFluxoEtapa_PK");

                entity.Property(e => e.IdDocumentoFluxoEtapa).HasColumnName("ID_DOCUMENTO_FLUXO_ETAPA");

                entity.Property(e => e.IdUnidadeOrganizacionalFinal).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_FINAL");

                entity.Property(e => e.IdUnidadeOrganizacionalInicio).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_INICIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NmFluxoDocumentoEtapa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FLUXO_DOCUMENTO_ETAPA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<DocumentoFluxoUnidade>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacionalEnvia, e.IdUnidadeOrganizacionalRecebe });

                entity.Property(e => e.IdUnidadeOrganizacionalEnvia).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_ENVIA");

                entity.Property(e => e.IdUnidadeOrganizacionalRecebe).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_RECEBE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdUnidadeOrganizacionalEnviaNavigation)
                    .WithMany(p => p.DocumentoFluxoUnidadeIdUnidadeOrganizacionalEnviaNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalEnvia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoFluxoUnidade_DocumentoFluxoUnidade");

                entity.HasOne(d => d.IdUnidadeOrganizacionalRecebeNavigation)
                    .WithMany(p => p.DocumentoFluxoUnidadeIdUnidadeOrganizacionalRecebeNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalRecebe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoFluxoUnidade_UnidadeOrganizacional");
            });

            modelBuilder.Entity<DocumentoGerado>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoGerado)
                    .HasName("DocumentoGerado_PK");

                entity.HasIndex(e => e.IdConta, "IX_CONTA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdDocumentoProtocolo, "IX_DocumentoGerado_ID_DOCUMENTO_PROTOCOLO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdDocumentoFinalidade }, "IX_DocumentoGerado_ID_UNIDADE_ORGANIZACIONAL_ID_DOCUMENTO_FINALIDADE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdDocumentoProtocolo }, "IX_DocumentoGerado_ID_UNIDADE_ORGANIZACIONAL_ID_DOCUMENTO_PROTOCOLO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdDocumentoFinalidade, "IX_FINALIDADE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdDocumentoGerado).HasColumnName("ID_DOCUMENTO_GERADO");

                entity.Property(e => e.DtGeracaoDocumento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO_DOCUMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdDocumentoExigido).HasColumnName("ID_DOCUMENTO_EXIGIDO");

                entity.Property(e => e.IdDocumentoFinalidade).HasColumnName("ID_DOCUMENTO_FINALIDADE");

                entity.Property(e => e.IdDocumentoProtocolo).HasColumnName("ID_DOCUMENTO_PROTOCOLO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmCaminhoArquivo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMINHO_ARQUIVO");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoExigidoNavigation)
                    .WithMany(p => p.DocumentoGerado)
                    .HasForeignKey(d => d.IdDocumentoExigido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoExigido_DocumentoGerado_FK1");

                entity.HasOne(d => d.IdDocumentoFinalidadeNavigation)
                    .WithMany(p => p.DocumentoGerado)
                    .HasForeignKey(d => d.IdDocumentoFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoGerado_DocumentoFinalidade");

                entity.HasOne(d => d.IdDocumentoProtocoloNavigation)
                    .WithMany(p => p.DocumentoGerado)
                    .HasForeignKey(d => d.IdDocumentoProtocolo)
                    .HasConstraintName("FK_DocumentoGerado_DocumentoProtocolo");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.DocumentoGerado)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_DocumentoGerado_FK1");
            });

            modelBuilder.Entity<DocumentoGeradoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoGeradoHistorico);

                entity.Property(e => e.IdDocumentoGeradoHistorico).HasColumnName("ID_DOCUMENTO_GERADO_HISTORICO");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdDocumentoGerado).HasColumnName("ID_DOCUMENTO_GERADO");

                entity.Property(e => e.IdUnidadeDestino).HasColumnName("ID_UNIDADE_DESTINO");

                entity.Property(e => e.IdUnidadeOrigem).HasColumnName("ID_UNIDADE_ORIGEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<DocumentoGeradoVersao>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoGeradoVersao)
                    .HasName("DocumentoGeradoVersao_PK");

                entity.HasIndex(e => e.IdDocumentoGerado, "IX_DOCUMENTO_GERADO_VERSAO");

                entity.Property(e => e.IdDocumentoGeradoVersao).HasColumnName("ID_DOCUMENTO_GERADO_VERSAO");

                entity.Property(e => e.DtArquivo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ARQUIVO");

                entity.Property(e => e.IdDocumentoGerado).HasColumnName("ID_DOCUMENTO_GERADO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmCaminhoArquivo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMINHO_ARQUIVO");

                entity.HasOne(d => d.IdDocumentoGeradoNavigation)
                    .WithMany(p => p.DocumentoGeradoVersao)
                    .HasForeignKey(d => d.IdDocumentoGerado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoGerado_DocumentoGeradoVersao_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DocumentoGeradoVersao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoGeradoVersao_Usuario");
            });

            modelBuilder.Entity<DocumentoGeral>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoGeral)
                    .HasName("DocumentoGeral_PK");

                entity.Property(e => e.IdDocumentoGeral).HasColumnName("ID_DOCUMENTO_GERAL");

                entity.Property(e => e.Documento)
                    .IsRequired()
                    .HasColumnName("DOCUMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmDocumento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_DOCUMENTO");

                entity.Property(e => e.NmDocumentoCompleto)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_DOCUMENTO_COMPLETO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxTipo)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DocumentoGeral)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_DocumentoGeral_FK1");
            });

            modelBuilder.Entity<DocumentoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoHistorico);

                entity.HasIndex(e => new { e.IdDocumentoEvento, e.IdConta }, "IX_DOCUMENTOEVENTO_CONTA")
                    .HasFillFactor((byte)75);

                entity.HasIndex(e => e.IdConta, "IX_DocumentoHistorico_ID_CONTA")
                    .HasFillFactor((byte)75);

                entity.Property(e => e.IdDocumentoHistorico).HasColumnName("ID_DOCUMENTO_HISTORICO");

                entity.Property(e => e.DtGeracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data que o documento foi gerado");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdDocumentoEvento).HasColumnName("ID_DOCUMENTO_EVENTO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacionalExecutora).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_EXECUTORA");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("informa a situação na hora de gerar o documento");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.DocumentoHistorico)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoHistorico_Conta");

                entity.HasOne(d => d.IdDocumentoEventoNavigation)
                    .WithMany(p => p.DocumentoHistorico)
                    .HasForeignKey(d => d.IdDocumentoEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoHistorico_DocumentoEvento");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.DocumentoHistoricoIdUnidadeOrganizacionalNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_DocumentoHistorico_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUnidadeOrganizacionalExecutoraNavigation)
                    .WithMany(p => p.DocumentoHistoricoIdUnidadeOrganizacionalExecutoraNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalExecutora)
                    .HasConstraintName("FK__Documento__ID_UN__0E78DDBE");
            });

            modelBuilder.Entity<DocumentoLote>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoLote)
                    .HasName("DocumentoLote_PK");

                entity.HasIndex(e => new { e.IdDocumentoRemessaLoteSituacao, e.IdUnidadeOrganizacionalEnvio, e.IdUsuarioEnvio, e.IdUnidadeOrganizacionalRecebimento, e.IdDocumentoLote, e.IdUsuarioRecebimento, e.DtEnvio, e.DtRecebimento, e.DtGeracaoProtocolo }, "DocumentoLote2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdDocumentoRemessaLoteSituacao, "IX_DocumentoLote_ID_DOCUMENTO_REMESSA_LOTE_SITUACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeOrganizacionalEnvio, "IX_DocumentoLote_ID_UNIDADE_ORGANIZACIONAL_ENVIO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeOrganizacionalRecebimento, "IX_DocumentoLote_ID_UNIDADE_ORGANIZACIONAL_RECEBIMENTO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdDocumentoLote).HasColumnName("ID_DOCUMENTO_LOTE");

                entity.Property(e => e.DtEnvio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO");

                entity.Property(e => e.DtGeracaoProtocolo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO_PROTOCOLO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.IdDocumentoRemessaLoteSituacao).HasColumnName("ID_DOCUMENTO_REMESSA_LOTE_SITUACAO");

                entity.Property(e => e.IdUnidadeOrganizacionalEnvio).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_ENVIO");

                entity.Property(e => e.IdUnidadeOrganizacionalRecebimento).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_RECEBIMENTO");

                entity.Property(e => e.IdUsuarioEnvio).HasColumnName("ID_USUARIO_ENVIO");

                entity.Property(e => e.IdUsuarioRecebimento).HasColumnName("ID_USUARIO_RECEBIMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoRemessaLoteSituacaoNavigation)
                    .WithMany(p => p.DocumentoLote)
                    .HasForeignKey(d => d.IdDocumentoRemessaLoteSituacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoRemessaLoteSituacao_DocumentoLote_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalEnvioNavigation)
                    .WithMany(p => p.DocumentoLoteIdUnidadeOrganizacionalEnvioNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalEnvio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoLote_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUnidadeOrganizacionalRecebimentoNavigation)
                    .WithMany(p => p.DocumentoLoteIdUnidadeOrganizacionalRecebimentoNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalRecebimento)
                    .HasConstraintName("FK_DocumentoLote_UnidadeOrganizacional1");

                entity.HasOne(d => d.IdUsuarioEnvioNavigation)
                    .WithMany(p => p.DocumentoLoteIdUsuarioEnvioNavigation)
                    .HasForeignKey(d => d.IdUsuarioEnvio)
                    .HasConstraintName("Usuario_DocumentoLote_FK2");

                entity.HasOne(d => d.IdUsuarioRecebimentoNavigation)
                    .WithMany(p => p.DocumentoLoteIdUsuarioRecebimentoNavigation)
                    .HasForeignKey(d => d.IdUsuarioRecebimento)
                    .HasConstraintName("Usuario_DocumentoLote_FK1");
            });

            modelBuilder.Entity<DocumentoLoteAuditado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DocumentoLoteAuditado");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdDocumentoLote).HasColumnName("ID_DOCUMENTO_LOTE");
            });

            modelBuilder.Entity<DocumentoLoteAuditoria>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoLote);

                entity.Property(e => e.IdDocumentoLote)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_DOCUMENTO_LOTE");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdClienteComputador).HasColumnName("ID_CLIENTE_COMPUTADOR");

                entity.Property(e => e.IdClientePagina).HasColumnName("ID_CLIENTE_PAGINA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdClienteComputadorNavigation)
                    .WithMany(p => p.DocumentoLoteAuditoria)
                    .HasForeignKey(d => d.IdClienteComputador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoLoteAuditoria_ClienteComputador");

                entity.HasOne(d => d.IdClientePaginaNavigation)
                    .WithMany(p => p.DocumentoLoteAuditoria)
                    .HasForeignKey(d => d.IdClientePagina)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoLoteAuditoria_ClientePagina");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DocumentoLoteAuditoria)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoLoteAuditoria_Usuario");
            });

            modelBuilder.Entity<DocumentoLoteMedico>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoLote);

                entity.ToTable("DocumentoLote_Medico");

                entity.HasIndex(e => e.IdEspecialidade, "IX_DocumentoLote_Medico_ID_ESPECIALIDADE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdDocumentoLote)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_DOCUMENTO_LOTE");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtAtendimentoAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO_ATENDIMENTO");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdMedicoAtendimento).HasColumnName("ID_MEDICO_ATENDIMENTO");

                entity.Property(e => e.InImpresso).HasColumnName("IN_IMPRESSO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoLoteNavigation)
                    .WithOne(p => p.DocumentoLoteMedico)
                    .HasForeignKey<DocumentoLoteMedico>(d => d.IdDocumentoLote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoLote_DocumentoLote_Medico_FK1");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.DocumentoLoteMedico)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_DocumentoLote_Medico_TipoDiversos");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.DocumentoLoteMedico)
                    .HasForeignKey(d => d.IdMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_DocumentoLote_Medico_FK1");

                entity.HasOne(d => d.AtendimentoMedico)
                    .WithMany(p => p.DocumentoLoteMedico)
                    .HasForeignKey(d => new { d.IdMedicoAtendimento, d.IdAtendimento, d.DtAtendimentoAtendimento })
                    .HasConstraintName("FK_DocumentoLote_Medico_Atendimento_Medico");
            });

            modelBuilder.Entity<DocumentoProtocolo>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoProtocolo)
                    .HasName("DocumentoProtocolo_PK");

                entity.HasIndex(e => new { e.IdUnidadeOrganizacionalEnvia, e.IdMotivoDevolucao }, "IX_DocumentoProtocolo_ID_UNIDADE_ORGANIZACIONAL_ENVIA_ID_MOTIVO_DEVOLUCAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeOrganizacionalRecebe, "IX_DocumentoProtocolo_ID_UNIDADE_ORGANIZACIONAL_RECEBE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacionalRecebe, e.IdStatusProtocolo }, "IX_DocumentoProtocolo_ID_UNIDADE_ORGANIZACIONAL_RECEBE_ID_STATUS_PROTOCOLO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacionalRecebe, e.IdUnidadeOrganizacionalEnvia }, "IX_DocumentoProtocolo_ID_UNIDADE_ORGANIZACIONAL_RECEBE_ID_UNIDADE_ORGANIZACIONAL_ENVIA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdDocumentoProtocolo).HasColumnName("ID_DOCUMENTO_PROTOCOLO");

                entity.Property(e => e.DtEnvio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.IdMotivoDevolucao).HasColumnName("ID_MOTIVO_DEVOLUCAO");

                entity.Property(e => e.IdProtocoloRecusa).HasColumnName("ID_PROTOCOLO_RECUSA");

                entity.Property(e => e.IdStatusProtocolo)
                    .HasColumnName("ID_STATUS_PROTOCOLO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdUnidadeOrganizacionalEnvia)
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL_ENVIA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdUnidadeOrganizacionalRecebe).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_RECEBE");

                entity.Property(e => e.IdUsuarioEnvia).HasColumnName("ID_USUARIO_ENVIA");

                entity.Property(e => e.IdUsuarioRecebe).HasColumnName("ID_USUARIO_RECEBE");

                entity.Property(e => e.TxMotivoDevolucao)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_DEVOLUCAO");

                entity.HasOne(d => d.IdMotivoDevolucaoNavigation)
                    .WithMany(p => p.DocumentoProtocoloIdMotivoDevolucaoNavigation)
                    .HasForeignKey(d => d.IdMotivoDevolucao)
                    .HasConstraintName("TipoDiversos_DocumentoProtocolo_FK1");

                entity.HasOne(d => d.IdProtocoloRecusaNavigation)
                    .WithMany(p => p.InverseIdProtocoloRecusaNavigation)
                    .HasForeignKey(d => d.IdProtocoloRecusa)
                    .HasConstraintName("DocumentoProtocolo_DocumentoProtocolo_FK1");

                entity.HasOne(d => d.IdStatusProtocoloNavigation)
                    .WithMany(p => p.DocumentoProtocoloIdStatusProtocoloNavigation)
                    .HasForeignKey(d => d.IdStatusProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_DocumentoProtocolo_FK2");

                entity.HasOne(d => d.IdUnidadeOrganizacionalEnviaNavigation)
                    .WithMany(p => p.DocumentoProtocoloIdUnidadeOrganizacionalEnviaNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalEnvia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_DocumentoProtocolo_FK4");

                entity.HasOne(d => d.IdUnidadeOrganizacionalRecebeNavigation)
                    .WithMany(p => p.DocumentoProtocoloIdUnidadeOrganizacionalRecebeNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalRecebe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_DocumentoProtocolo_FK2");

                entity.HasOne(d => d.IdUsuarioEnviaNavigation)
                    .WithMany(p => p.DocumentoProtocoloIdUsuarioEnviaNavigation)
                    .HasForeignKey(d => d.IdUsuarioEnvia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoProtocolo_Usuario_Envia");

                entity.HasOne(d => d.IdUsuarioRecebeNavigation)
                    .WithMany(p => p.DocumentoProtocoloIdUsuarioRecebeNavigation)
                    .HasForeignKey(d => d.IdUsuarioRecebe)
                    .HasConstraintName("FK_DocumentoProtocolo_Usuario_Recebe");
            });

            modelBuilder.Entity<DocumentoProtocoloDocumentoExigido>(entity =>
            {
                entity.HasKey(e => new { e.IdDocumentoProtocolo, e.IdDocumentoGerado })
                    .HasName("DocumentoProtocolo_DocumentoExigido_PK");

                entity.ToTable("DocumentoProtocolo_DocumentoExigido");

                entity.HasIndex(e => e.IdDocumentoGerado, "IX_DocumentoProtocolo_DocumentoExigido_K2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdDocumentoProtocolo).HasColumnName("ID_DOCUMENTO_PROTOCOLO");

                entity.Property(e => e.IdDocumentoGerado).HasColumnName("ID_DOCUMENTO_GERADO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO")
                    .HasComment("data que o usuário recebeu ou recusou parcialmente");

                entity.Property(e => e.IdStatusDocumento)
                    .HasColumnName("ID_STATUS_DOCUMENTO")
                    .HasComment("status do item. tipo tabela 105");

                entity.Property(e => e.IdUsuarioRecebe)
                    .HasColumnName("ID_USUARIO_RECEBE")
                    .HasComment("usuário que recebeu ou recusou parcialmente");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.HasOne(d => d.IdDocumentoGeradoNavigation)
                    .WithMany(p => p.DocumentoProtocoloDocumentoExigido)
                    .HasForeignKey(d => d.IdDocumentoGerado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoGerado_DocumentoProtocolo_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdDocumentoProtocoloNavigation)
                    .WithMany(p => p.DocumentoProtocoloDocumentoExigido)
                    .HasForeignKey(d => d.IdDocumentoProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoProtocolo_DocumentoProtocolo_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdStatusDocumentoNavigation)
                    .WithMany(p => p.DocumentoProtocoloDocumentoExigido)
                    .HasForeignKey(d => d.IdStatusDocumento)
                    .HasConstraintName("FK_DocumentoProtocolo_DocumentoExigido_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioRecebeNavigation)
                    .WithMany(p => p.DocumentoProtocoloDocumentoExigido)
                    .HasForeignKey(d => d.IdUsuarioRecebe)
                    .HasConstraintName("FK_DocumentoProtocolo_DocumentoExigido_Usuario");
            });

            modelBuilder.Entity<DocumentoProtocoloMotivoDevolucao>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoProtocoloMotivoDevolucao)
                    .HasName("DocumentoProtocolo_MotivoDevolucao_PK");

                entity.ToTable("DocumentoProtocolo_MotivoDevolucao");

                entity.Property(e => e.IdDocumentoProtocoloMotivoDevolucao).HasColumnName("ID_DOCUMENTO_PROTOCOLO_MOTIVO_DEVOLUCAO");

                entity.Property(e => e.IdDocumentoProtocolo).HasColumnName("ID_DOCUMENTO_PROTOCOLO");

                entity.Property(e => e.IdMotivoDevolucao).HasColumnName("ID_MOTIVO_DEVOLUCAO");

                entity.HasOne(d => d.IdDocumentoProtocoloNavigation)
                    .WithMany(p => p.DocumentoProtocoloMotivoDevolucao)
                    .HasForeignKey(d => d.IdDocumentoProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MotivoDevolucao_DocumentoProtocolo");

                entity.HasOne(d => d.IdMotivoDevolucaoNavigation)
                    .WithMany(p => p.DocumentoProtocoloMotivoDevolucao)
                    .HasForeignKey(d => d.IdMotivoDevolucao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MotivoDevolucao_TipoDiversos");
            });

            modelBuilder.Entity<DocumentoRemessa>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdConta, e.IdDocumentoFinalidade })
                    .HasName("DocumentoRemessa_PK");

                entity.HasIndex(e => e.IdConta, "IX_DocumentoRemessa_ID_CONTA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdDocumentoFinalidade).HasColumnName("ID_DOCUMENTO_FINALIDADE");

                entity.Property(e => e.DtObservacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OBSERVACAO");

                entity.Property(e => e.IdStatusRemessa).HasColumnName("ID_STATUS_REMESSA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdDocumentoFinalidadeNavigation)
                    .WithMany(p => p.DocumentoRemessa)
                    .HasForeignKey(d => d.IdDocumentoFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoFinalidade_DocumentoRemessa_FK1");

                entity.HasOne(d => d.IdStatusRemessaNavigation)
                    .WithMany(p => p.DocumentoRemessa)
                    .HasForeignKey(d => d.IdStatusRemessa)
                    .HasConstraintName("TipoDiversos_DocumentoRemessa_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.DocumentoRemessa)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_DocumentoRemessa_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.DocumentoRemessa)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK__Documento__ID_US__55406062");
            });

            modelBuilder.Entity<DocumentoRemessaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoRemessaHistorico)
                    .HasName("DocumentoRemessaHistorico_PK");

                entity.HasIndex(e => e.IdDocumentoLote, "_dta_index_DocumentoRemessaHistorico_5_1761701624__K3");

                entity.Property(e => e.IdDocumentoRemessaHistorico).HasColumnName("ID_DOCUMENTO_REMESSA_HISTORICO");

                entity.Property(e => e.DtGeracaoRemessa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO_REMESSA");

                entity.Property(e => e.DtInclusaoHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INCLUSAO_HISTORICO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdDocumentoFinalidade).HasColumnName("ID_DOCUMENTO_FINALIDADE");

                entity.Property(e => e.IdDocumentoLote).HasColumnName("ID_DOCUMENTO_LOTE");

                entity.Property(e => e.IdDocumentoRemessaLoteSituacao).HasColumnName("ID_DOCUMENTO_REMESSA_LOTE_SITUACAO");

                entity.Property(e => e.NrLacre).HasColumnName("NR_LACRE");

                entity.Property(e => e.QnDocumentoRemessa).HasColumnName("QN_DOCUMENTO_REMESSA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoFinalidadeNavigation)
                    .WithMany(p => p.DocumentoRemessaHistorico)
                    .HasForeignKey(d => d.IdDocumentoFinalidade)
                    .HasConstraintName("FK_DocumentoFinalidade_DocumentoRemessaHistorico");

                entity.HasOne(d => d.IdDocumentoLoteNavigation)
                    .WithMany(p => p.DocumentoRemessaHistorico)
                    .HasForeignKey(d => d.IdDocumentoLote)
                    .HasConstraintName("FK_DocumentoLote_DocumentoRemessaHistorico");

                entity.HasOne(d => d.IdDocumentoRemessaLoteSituacaoNavigation)
                    .WithMany(p => p.DocumentoRemessaHistorico)
                    .HasForeignKey(d => d.IdDocumentoRemessaLoteSituacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentoRemessaLoteSituacao_DocumentoRemessaHistorico");
            });

            modelBuilder.Entity<DocumentoRemessaLoteSituacao>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoRemessaLoteSituacao)
                    .HasName("DocumentoRemessaLoteSituacao_PK");

                entity.Property(e => e.IdDocumentoRemessaLoteSituacao).HasColumnName("ID_DOCUMENTO_REMESSA_LOTE_SITUACAO");

                entity.Property(e => e.InSituacaoLote).HasColumnName("IN_SITUACAO_LOTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoSituacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SITUACAO");
            });

            modelBuilder.Entity<DocumentoRemessaRecusado>(entity =>
            {
                entity.HasKey(e => e.IdDocumentoRemessaRecusado);

                entity.HasIndex(e => e.IdDocumentoLote, "IX_DocumentoRemessaRecusado")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdDocumentoRemessaHistorico, e.IdDocumentoLote, e.IdDocumentoRemessaRecusado }, "_dta_index_DocumentoRemessaRecusado_5_1141123356__K2_K3_K1_4_5");

                entity.Property(e => e.IdDocumentoRemessaRecusado).HasColumnName("ID_DOCUMENTO_REMESSA_RECUSADO");

                entity.Property(e => e.IdDocumentoLote).HasColumnName("ID_DOCUMENTO_LOTE");

                entity.Property(e => e.IdDocumentoRemessaHistorico).HasColumnName("ID_DOCUMENTO_REMESSA_HISTORICO");

                entity.Property(e => e.IdJustificativaRecusaPadrao).HasColumnName("ID_JUSTIFICATIVA_RECUSA_PADRAO");

                entity.Property(e => e.TxComplementoJustificativa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO_JUSTIFICATIVA");

                entity.HasOne(d => d.IdDocumentoLoteNavigation)
                    .WithMany(p => p.DocumentoRemessaRecusado)
                    .HasForeignKey(d => d.IdDocumentoLote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoLote_DocumentoRemessaRecusado_FK1");

                entity.HasOne(d => d.IdDocumentoRemessaHistoricoNavigation)
                    .WithMany(p => p.DocumentoRemessaRecusado)
                    .HasForeignKey(d => d.IdDocumentoRemessaHistorico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoRemessa_DocumentoRemessaRecusado_FK1");

                entity.HasOne(d => d.IdJustificativaRecusaPadraoNavigation)
                    .WithMany(p => p.DocumentoRemessaRecusado)
                    .HasForeignKey(d => d.IdJustificativaRecusaPadrao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_DocumentoRemessaRecusado_FK1");
            });

            modelBuilder.Entity<DocumentoexigidoOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdDocumentoExigido })
                    .HasName("Documentoexigido_Operadora_PK");

                entity.ToTable("Documentoexigido_Operadora");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdDocumentoExigido).HasColumnName("ID_DOCUMENTO_EXIGIDO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdDocumentoExigidoNavigation)
                    .WithMany(p => p.DocumentoexigidoOperadora)
                    .HasForeignKey(d => d.IdDocumentoExigido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("DocumentoExigido_Documentoexigido_Operadora_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.DocumentoexigidoOperadora)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Documentoexigido_Operadora_FK1");
            });

            modelBuilder.Entity<Documentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Documentos");

                entity.Property(e => e.CdModelo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_MODELO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmEntidade)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ENTIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoEvento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_EVENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxTitulo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_TITULO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<DrgAltaAdministrativa>(entity =>
            {
                entity.HasKey(e => e.IdDrgAltaAdministrativa);

                entity.ToTable("DRG_AltaAdministrativa");

                entity.HasIndex(e => e.IdAtendimento, "UK_DRG_AltaAdministrativa_ID_ATENDIMENTO")
                    .IsUnique();

                entity.Property(e => e.IdDrgAltaAdministrativa).HasColumnName("ID_DRG_ALTA_ADMINISTRATIVA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.TxAltaAdmNrAtend)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_ALTA_ADM_NR_ATEND");

                entity.Property(e => e.TxAltaAdmNrAutorizacao)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_ALTA_ADM_NR_AUTORIZACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.DrgAltaAdministrativa)
                    .HasForeignKey<DrgAltaAdministrativa>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_AltaAdministrativa_Atendimento");
            });

            modelBuilder.Entity<DrgBeneficiario>(entity =>
            {
                entity.HasKey(e => e.IdDrgBeneficiario);

                entity.ToTable("DRG_Beneficiario");

                entity.HasIndex(e => e.IdAtendimento, "UK_DRG_Beneficiario_ID_ATENDIMENTO")
                    .IsUnique();

                entity.Property(e => e.IdDrgBeneficiario).HasColumnName("ID_DRG_BENEFICIARIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.TxBairro)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_BAIRRO");

                entity.Property(e => e.TxCep)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("TX_CEP");

                entity.Property(e => e.TxCidade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_CIDADE");

                entity.Property(e => e.TxComplLogradouro)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPL_LOGRADOURO");

                entity.Property(e => e.TxCpf)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("TX_CPF");

                entity.Property(e => e.TxDtNascimento)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_DT_NASCIMENTO");

                entity.Property(e => e.TxLogradouro)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGRADOURO");

                entity.Property(e => e.TxNumLogradouro)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("TX_NUM_LOGRADOURO");

                entity.Property(e => e.TxParticular)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_PARTICULAR");

                entity.Property(e => e.TxRecemNascido)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_RECEM_NASCIDO");

                entity.Property(e => e.TxSexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_SEXO");

                entity.Property(e => e.TxTipoLogradouro)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_LOGRADOURO");

                entity.Property(e => e.TxUf)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TX_UF");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.DrgBeneficiario)
                    .HasForeignKey<DrgBeneficiario>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Beneficiario_Atendimento");
            });

            modelBuilder.Entity<DrgCidSecundario>(entity =>
            {
                entity.HasKey(e => e.IdDrgCidSecundario);

                entity.ToTable("DRG_CidSecundario");

                entity.HasIndex(e => e.IdAtendimento, "UK_DRG_CidSecundario_ID_ATENDIMENTO")
                    .IsUnique();

                entity.Property(e => e.IdDrgCidSecundario).HasColumnName("ID_DRG_CID_SECUNDARIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.TxCodCidSecundario)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_COD_CID_SECUNDARIO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.DrgCidSecundario)
                    .HasForeignKey<DrgCidSecundario>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_CidSecundario_Atendimento");
            });

            modelBuilder.Entity<DrgInternacao>(entity =>
            {
                entity.HasKey(e => e.IdDrgInternacao);

                entity.ToTable("DRG_Internacao");

                entity.HasIndex(e => e.IdAtendimento, "UK_DRG_Internacao_ID_ATENDIMENTO")
                    .IsUnique();

                entity.Property(e => e.IdDrgInternacao).HasColumnName("ID_DRG_INTERNACAO");

                entity.Property(e => e.DtAlta)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DT_ALTA");

                entity.Property(e => e.DtAutorizacao)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtInternacao)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DT_INTERNACAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrOperadora)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NR_OPERADORA");

                entity.Property(e => e.NrRegistro)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NR_REGISTRO");

                entity.Property(e => e.TxAltaAdmNrAtend)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_ALTA_ADM_NR_ATEND");

                entity.Property(e => e.TxAltaAdmNrAutorizacao)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_ALTA_ADM_NR_AUTORIZACAO");

                entity.Property(e => e.TxCarater)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_CARATER");

                entity.Property(e => e.TxCodCidPrincipal)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_COD_CID_PRINCIPAL");

                entity.Property(e => e.TxCodCidSecundario)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_COD_CID_SECUNDARIO");

                entity.Property(e => e.TxCondicaoAlta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONDICAO_ALTA");

                entity.Property(e => e.TxInternadoOutrasVezes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_INTERNADO_OUTRAS_VEZES");

                entity.Property(e => e.TxRecaida)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_RECAIDA");

                entity.Property(e => e.TxReinternacao)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_REINTERNACAO");

                entity.Property(e => e.TxSituacao)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITUACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.DrgInternacao)
                    .HasForeignKey<DrgInternacao>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Internacao_Atendimento");
            });

            modelBuilder.Entity<DrgMedico>(entity =>
            {
                entity.HasKey(e => e.IdDrgMedico);

                entity.ToTable("DRG_Medico");

                entity.Property(e => e.IdDrgMedico).HasColumnName("ID_DRG_MEDICO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.TxCrm)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_CRM");

                entity.Property(e => e.TxDdd)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TX_DDD");

                entity.Property(e => e.TxEmail)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_EMAIL");

                entity.Property(e => e.TxEspecialidade)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("TX_ESPECIALIDADE");

                entity.Property(e => e.TxNome)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME");

                entity.Property(e => e.TxResponsavel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESPONSAVEL");

                entity.Property(e => e.TxTelefone)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE");

                entity.Property(e => e.TxUf)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TX_UF");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.DrgMedico)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Medico_Atendimento");
            });

            modelBuilder.Entity<DrgOperadora>(entity =>
            {
                entity.HasKey(e => e.IdDrgOperadora);

                entity.ToTable("DRG_Operadora");

                entity.HasIndex(e => e.IdAtendimento, "UK_DRG_Operadora_ID_ATENDIMENTO")
                    .IsUnique();

                entity.Property(e => e.IdDrgOperadora).HasColumnName("ID_DRG_OPERADORA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.TxCodigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_CODIGO");

                entity.Property(e => e.TxDtValidade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_DT_VALIDADE");

                entity.Property(e => e.TxNome)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME");

                entity.Property(e => e.TxNumCarteira)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_NUM_CARTEIRA");

                entity.Property(e => e.TxPlano)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PLANO");

                entity.Property(e => e.TxSigla)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SIGLA");

                entity.Property(e => e.TxTipo)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithOne(p => p.DrgOperadora)
                    .HasForeignKey<DrgOperadora>(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Operadora_Atendimento");
            });

            modelBuilder.Entity<DrgProcedimento>(entity =>
            {
                entity.HasKey(e => e.IdDrgProcedimento);

                entity.ToTable("DRG_Procedimento");

                entity.Property(e => e.IdDrgProcedimento).HasColumnName("ID_DRG_PROCEDIMENTO");

                entity.Property(e => e.CdProcedimento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_PROCEDIMENTO");

                entity.Property(e => e.DtAutorizacao)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtExecucao)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.DtExecucaoFinal)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXECUCAO_FINAL");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.DrgProcedimento)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Procedimento_Atendimento");
            });

            modelBuilder.Entity<DrgProcedimentoMedico>(entity =>
            {
                entity.HasKey(e => e.IdDrgProcedimentoMedico);

                entity.ToTable("DRG_Procedimento_Medico");

                entity.Property(e => e.IdDrgProcedimentoMedico).HasColumnName("ID_DRG_PROCEDIMENTO_MEDICO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdDrgMedico).HasColumnName("ID_DRG_MEDICO");

                entity.Property(e => e.IdDrgProcedimento).HasColumnName("ID_DRG_PROCEDIMENTO");

                entity.Property(e => e.TxTipoAtuacao)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_ATUACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.DrgProcedimentoMedico)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Procedimento_Medico_Atendimento");

                entity.HasOne(d => d.IdDrgMedicoNavigation)
                    .WithMany(p => p.DrgProcedimentoMedico)
                    .HasForeignKey(d => d.IdDrgMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Procedimento_Medico_Medico");

                entity.HasOne(d => d.IdDrgProcedimentoNavigation)
                    .WithMany(p => p.DrgProcedimentoMedico)
                    .HasForeignKey(d => d.IdDrgProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DRG_Procedimento_Medico_Procedimento");
            });

            modelBuilder.Entity<DuracaoEventoLeitoSituacao>(entity =>
            {
                entity.HasKey(e => new { e.IdEvento, e.IdLeitoTipo, e.IdSituacaoLeitoTipo })
                    .HasName("DuracaoEvento_Leito_Situacao_PK");

                entity.ToTable("DuracaoEvento_Leito_Situacao");

                entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

                entity.Property(e => e.IdLeitoTipo).HasColumnName("ID_LEITO_TIPO");

                entity.Property(e => e.IdSituacaoLeitoTipo).HasColumnName("ID_SITUACAO_LEITO_TIPO");

                entity.Property(e => e.DtMinutoDuracao).HasColumnName("DT_MINUTO_DURACAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEventoNavigation)
                    .WithMany(p => p.DuracaoEventoLeitoSituacao)
                    .HasForeignKey(d => d.IdEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EventoLeito_DuracaoEvento_Leito_Situacao_FK1");

                entity.HasOne(d => d.IdLeitoTipoNavigation)
                    .WithMany(p => p.DuracaoEventoLeitoSituacaoIdLeitoTipoNavigation)
                    .HasForeignKey(d => d.IdLeitoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_DuracaoEvento_Leito_Situacao_FK1");

                entity.HasOne(d => d.IdSituacaoLeitoTipoNavigation)
                    .WithMany(p => p.DuracaoEventoLeitoSituacaoIdSituacaoLeitoTipoNavigation)
                    .HasForeignKey(d => d.IdSituacaoLeitoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_DuracaoEvento_Leito_Situacao_FK2");
            });

            modelBuilder.Entity<Efd>(entity =>
            {
                entity.ToTable("EFD");

                entity.Property(e => e.Efdid).HasColumnName("EFDId");

                entity.Property(e => e.Cnpj0000)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("CNPJ_0000");

                entity.Property(e => e.CodGen0200).HasColumnName("COD_GEN_0200");

                entity.Property(e => e.CodIncTrib0110).HasColumnName("COD_INC_TRIB_0110");

                entity.Property(e => e.CodLst200).HasColumnName("COD_LST_200");

                entity.Property(e => e.CodMun0000)
                    .IsRequired()
                    .HasMaxLength(7)
                    .HasColumnName("COD_MUN_0000");

                entity.Property(e => e.CodMun0140)
                    .IsRequired()
                    .HasMaxLength(7)
                    .HasColumnName("COD_MUN_0140");

                entity.Property(e => e.Cpf0100)
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnName("CPF_0100");

                entity.Property(e => e.Crc0100)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("CRC_0100");

                entity.Property(e => e.Im0140).HasColumnName("IM_0140");

                entity.Property(e => e.IndAproCred0110).HasColumnName("IND_APRO_CRED_0110");

                entity.Property(e => e.IndAtiv0000).HasColumnName("IND_ATIV_0000");

                entity.Property(e => e.IndNatPj0000).HasColumnName("IND_NAT_PJ_0000");

                entity.Property(e => e.IndSitEsp0000).HasColumnName("IND_SIT_ESP_0000");

                entity.Property(e => e.Nome0000)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Nome_0000");

                entity.Property(e => e.Nome0100)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("Nome_0100");

                entity.Property(e => e.Suframa0000)
                    .HasMaxLength(9)
                    .HasColumnName("Suframa_0000");

                entity.Property(e => e.TipoEscrit0000).HasColumnName("TIPO_ESCRIT_0000");

                entity.Property(e => e.TipoItem0200).HasColumnName("TIPO_ITEM_0200");

                entity.Property(e => e.Uf0000)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("UF_0000");
            });

            modelBuilder.Entity<Embalagem>(entity =>
            {
                entity.HasKey(e => e.IdEmbalagem)
                    .HasName("Embalagem_PK");

                entity.Property(e => e.IdEmbalagem)
                    .HasColumnName("ID_EMBALAGEM")
                    .HasComment("PK da Tabela. Identificador Único.");

                entity.Property(e => e.IdUnidadeCompra).HasColumnName("ID_UNIDADE_COMPRA");

                entity.Property(e => e.InUltimoNivel)
                    .HasColumnName("IN_ULTIMO_NIVEL")
                    .HasComment("Controle para dizer ser a embalagem é Último Nível. EX: Caixa com 12 Unidades não é.  Unidade já é. ");

                entity.Property(e => e.NmEmbalagem)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMBALAGEM")
                    .HasComment("Nome da Embalagem.");
            });

            modelBuilder.Entity<EmbalagemEmbalagem>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbalagemPai, e.IdEmbalagemFilho })
                    .HasName("Embalagem_Embalagem_PK");

                entity.ToTable("Embalagem_Embalagem");

                entity.Property(e => e.IdEmbalagemPai)
                    .HasColumnName("ID_EMBALAGEM_PAI")
                    .HasComment("PK da Tabela. FK com Embalagem. Representa a Embalagem Pai.");

                entity.Property(e => e.IdEmbalagemFilho)
                    .HasColumnName("ID_EMBALAGEM_FILHO")
                    .HasComment("PK da Tabela. FK com Embalagem. Representa a Embalagem Filho\r\n");

                entity.Property(e => e.NrFatorConversao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_FATOR_CONVERSAO")
                    .IsFixedLength(true)
                    .HasComment("Representa o Fator de Conversão entre uma Embalagem Pai e Filho. EX: Caixa com 12 Unidades e Unidade. Fator de conversão é 12.\r\n");

                entity.HasOne(d => d.IdEmbalagemFilhoNavigation)
                    .WithMany(p => p.EmbalagemEmbalagemIdEmbalagemFilhoNavigation)
                    .HasForeignKey(d => d.IdEmbalagemFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Embalagem_Embalagem_Embalagem_FK2");

                entity.HasOne(d => d.IdEmbalagemPaiNavigation)
                    .WithMany(p => p.EmbalagemEmbalagemIdEmbalagemPaiNavigation)
                    .HasForeignKey(d => d.IdEmbalagemPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Embalagem_Embalagem_Embalagem_FK1");
            });

            modelBuilder.Entity<EmbalagemProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.IdEmbalagemPai, e.IdEmbalagemFilho })
                    .HasName("Embalagem_ProdutoDetalhe_PK");

                entity.ToTable("Embalagem_ProdutoDetalhe");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK da Tabela. FK com ProdutoDetalhe_Fabricante. Representao Produto Detalhe");

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("PK da Tabela. FK com ProdutoDetalhe_Fabricante. Reprenta o Fabricante do Produto Detalhe.\r\n");

                entity.Property(e => e.IdEmbalagemPai)
                    .HasColumnName("ID_EMBALAGEM_PAI")
                    .HasComment("PK da Tabela. FK com Embalagem_Embalagem. Representa a Embalagem Pai.");

                entity.Property(e => e.IdEmbalagemFilho)
                    .HasColumnName("ID_EMBALAGEM_FILHO")
                    .HasComment("PK da Tabela. FK com Embalagem_Embalagem. Representa a Embalagem Filho.\r\n");

                entity.HasOne(d => d.IdEmbalagem)
                    .WithMany(p => p.EmbalagemProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdEmbalagemPai, d.IdEmbalagemFilho })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Embalagem_Embalagem_Embalagem_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.EmbalagemProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_Embalagem_ProdutoDetalhe_FK1");
            });

            modelBuilder.Entity<Emprestimo>(entity =>
            {
                entity.HasKey(e => e.NrEmprestimo)
                    .HasName("Emprestimo_PK");

                entity.HasIndex(e => new { e.IdPessoa, e.IdTipoEmprestimo }, "IX_Emprestimo_ID_PESSOA_ID_TIPO_EMPRESTIMO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdPessoa, e.IdTipoEmprestimo }, "IX_Emprestimo_K2_K3")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.NrEmprestimo).HasColumnName("NR_EMPRESTIMO");

                entity.Property(e => e.DtEmprestimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMPRESTIMO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoEmprestimo).HasColumnName("ID_TIPO_EMPRESTIMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioResponsavel).HasColumnName("ID_USUARIO_RESPONSAVEL");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InFechado).HasColumnName("IN_FECHADO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxUsuarioRepresentante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_USUARIO_REPRESENTANTE");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Emprestimo)
                    .HasForeignKey(d => d.IdPessoa)
                    .HasConstraintName("Pessoa_Emprestimo_FK1");

                entity.HasOne(d => d.IdTipoEmprestimoNavigation)
                    .WithMany(p => p.Emprestimo)
                    .HasForeignKey(d => d.IdTipoEmprestimo)
                    .HasConstraintName("FK_Emprestimo_TipoDiversos");
            });

            modelBuilder.Entity<EmprestimoLoteProdutoItem>(entity =>
            {
                entity.HasKey(e => new { e.NrEmprestimo, e.IdLoteProdutoItem })
                    .HasName("Emprestimo_LoteProdutoItem_PK");

                entity.ToTable("Emprestimo_LoteProdutoItem");

                entity.Property(e => e.NrEmprestimo).HasColumnName("NR_EMPRESTIMO");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.DtPrevistaPgto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISTA_PGTO");

                entity.Property(e => e.IdStatusEmprestimo).HasColumnName("ID_STATUS_EMPRESTIMO");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.EmprestimoLoteProdutoItem)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Emprestimo_LoteProdutoItem_LoteProdutoItem");

                entity.HasOne(d => d.IdStatusEmprestimoNavigation)
                    .WithMany(p => p.EmprestimoLoteProdutoItem)
                    .HasForeignKey(d => d.IdStatusEmprestimo)
                    .HasConstraintName("FK_Emprestimo_LoteProdutoItem_TipoDiversos");

                entity.HasOne(d => d.NrEmprestimoNavigation)
                    .WithMany(p => p.EmprestimoLoteProdutoItem)
                    .HasForeignKey(d => d.NrEmprestimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Emprestimo_Emprestimo_LoteProdutoItem_FK1");
            });

            modelBuilder.Entity<EmprestimoPagamento>(entity =>
            {
                entity.HasKey(e => e.IdEmprestimoPagamento);

                entity.HasIndex(e => e.IdEmprestimo, "IX_EmprestimoPagamento_K")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdEmprestimoPagamento).HasColumnName("ID_EMPRESTIMO_PAGAMENTO");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdEmbalagem).HasColumnName("ID_EMBALAGEM");

                entity.Property(e => e.IdEmprestimo).HasColumnName("ID_EMPRESTIMO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdResponsavel).HasColumnName("ID_RESPONSAVEL");

                entity.Property(e => e.InEtiquetado).HasColumnName("IN_ETIQUETADO");

                entity.Property(e => e.NrLoteProduto)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE_PRODUTO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdEmbalagemNavigation)
                    .WithMany(p => p.EmprestimoPagamento)
                    .HasForeignKey(d => d.IdEmbalagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmprestimoPagamento_Embalagem");

                entity.HasOne(d => d.IdEmprestimoNavigation)
                    .WithMany(p => p.EmprestimoPagamento)
                    .HasForeignKey(d => d.IdEmprestimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmprestimoPagamento_Emprestimo");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.EmprestimoPagamento)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("FK_EmprestimoPagamento_LoteProdutoItem");

                entity.HasOne(d => d.IdResponsavelNavigation)
                    .WithMany(p => p.EmprestimoPagamento)
                    .HasForeignKey(d => d.IdResponsavel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmprestimoPagamento_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.EmprestimoPagamento)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmprestimoPagamento_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<EmprestimoProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => new { e.NrEmprestimo, e.IdFabricante, e.IdProdutoDetalhe })
                    .HasName("Emprestimo_ProdutoDetalhe_PK");

                entity.ToTable("Emprestimo_ProdutoDetalhe");

                entity.HasIndex(e => new { e.IdFabricante, e.IdProdutoDetalhe }, "IX_Emprestimo_ProdutoDetalhe_ID_FABRICANTE_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.NrEmprestimo).HasColumnName("NR_EMPRESTIMO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.DtPrevistaPgto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISTA_PGTO");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdEmbalagem).HasColumnName("ID_EMBALAGEM");

                entity.Property(e => e.InProdutoEtiquetado).HasColumnName("IN_PRODUTO_ETIQUETADO");

                entity.Property(e => e.NrLote)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdEmbalagemNavigation)
                    .WithMany(p => p.EmprestimoProdutoDetalhe)
                    .HasForeignKey(d => d.IdEmbalagem)
                    .HasConstraintName("Embalagem_Emprestimo_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.NrEmprestimoNavigation)
                    .WithMany(p => p.EmprestimoProdutoDetalhe)
                    .HasForeignKey(d => d.NrEmprestimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Emprestimo_Emprestimo_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.EmprestimoProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_Emprestimo_ProdutoDetalhe_FK1");
            });

            modelBuilder.Entity<Endereco>(entity =>
            {
                entity.HasKey(e => e.IdEndereco)
                    .HasName("Endereco_PK");

                entity.HasIndex(e => e.LogNu, "IX_Endereco_LOG_NU")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdEnderecoCategoriaTipo).HasColumnName("ID_ENDERECO_CATEGORIA_TIPO");

                entity.Property(e => e.IdEnderecoTipo).HasColumnName("ID_ENDERECO_TIPO");

                entity.Property(e => e.IdImovelTipo).HasColumnName("ID_IMOVEL_TIPO");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.LogNu).HasColumnName("LOG_NU");

                entity.Property(e => e.NrLatitude).HasColumnName("NR_LATITUDE");

                entity.Property(e => e.NrLongitude).HasColumnName("NR_LONGITUDE");

                entity.Property(e => e.NrNumero)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.HasOne(d => d.IdEnderecoCategoriaTipoNavigation)
                    .WithMany(p => p.EnderecoIdEnderecoCategoriaTipoNavigation)
                    .HasForeignKey(d => d.IdEnderecoCategoriaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Endereco_TipoDiversos");

                entity.HasOne(d => d.IdEnderecoTipoNavigation)
                    .WithMany(p => p.EnderecoIdEnderecoTipoNavigation)
                    .HasForeignKey(d => d.IdEnderecoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Endereco_FK2");

                entity.HasOne(d => d.IdImovelTipoNavigation)
                    .WithMany(p => p.EnderecoIdImovelTipoNavigation)
                    .HasForeignKey(d => d.IdImovelTipo)
                    .HasConstraintName("TipoDiversos_Endereco_FK3");

                entity.HasOne(d => d.IdOrigemCadastroTipoNavigation)
                    .WithMany(p => p.EnderecoIdOrigemCadastroTipoNavigation)
                    .HasForeignKey(d => d.IdOrigemCadastroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Endereco_FK1");

                entity.HasOne(d => d.LogNuNavigation)
                    .WithMany(p => p.Endereco)
                    .HasForeignKey(d => d.LogNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOGRADOURO_Endereco_FK1");
            });

            modelBuilder.Entity<EnderecoGeo>(entity =>
            {
                entity.HasKey(e => e.IdEndereco);

                entity.ToTable("Endereco_Geo");

                entity.Property(e => e.IdEndereco)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_ENDERECO");

                entity.Property(e => e.DistHospital).HasColumnName("DIST_HOSPITAL");

                entity.Property(e => e.Latitude).HasColumnName("LATITUDE");

                entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
            });

            modelBuilder.Entity<EnderecoPessoaRelatorio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Endereco_Pessoa_Relatorio");

                entity.Property(e => e.Bairro)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.CdBacen)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CD_BACEN")
                    .IsFixedLength(true);

                entity.Property(e => e.CdIbge)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_IBGE");

                entity.Property(e => e.Cep)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.CepCidade)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP_CIDADE");

                entity.Property(e => e.Cidade)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Endereco)
                    .HasMaxLength(355)
                    .IsUnicode(false)
                    .HasColumnName("ENDERECO");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LogNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOG_NO");

                entity.Property(e => e.NmPais)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAIS");

                entity.Property(e => e.NrNumero)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.SgUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");
            });

            modelBuilder.Entity<EnderecoPessoaRelatorioBi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Endereco_Pessoa_Relatorio_BI");

                entity.Property(e => e.Bairro)
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.CdIbge)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_IBGE");

                entity.Property(e => e.Cep)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.CepCidade)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP_CIDADE");

                entity.Property(e => e.Cidade)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.CidadeBi)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE_BI");

                entity.Property(e => e.Endereco)
                    .HasMaxLength(566)
                    .IsUnicode(false)
                    .HasColumnName("ENDERECO");

                entity.Property(e => e.EnderecoLatLong)
                    .HasMaxLength(516)
                    .IsUnicode(false)
                    .HasColumnName("ENDERECO_LAT_LONG");

                entity.Property(e => e.IdBairro).HasColumnName("ID_BAIRRO");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LogNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LOG_NO");

                entity.Property(e => e.NmPais)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAIS");

                entity.Property(e => e.NrNumero)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.SgUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoLogradouro)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TIPO_LOGRADOURO");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");
            });

            modelBuilder.Entity<EnderecoPessoaRelatorioSemComplemento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ENDERECO_PESSOA_RELATORIO_SEM_COMPLEMENTO");

                entity.Property(e => e.Bairro)
                    .HasMaxLength(145)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.CdBacen)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CD_BACEN")
                    .IsFixedLength(true);

                entity.Property(e => e.CdIbge)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_IBGE");

                entity.Property(e => e.Cep)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.CepCidade)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP_CIDADE");

                entity.Property(e => e.Cidade)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Endereco)
                    .HasMaxLength(567)
                    .IsUnicode(false)
                    .HasColumnName("ENDERECO");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LogNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LOG_NO");

                entity.Property(e => e.NmPais)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAIS");

                entity.Property(e => e.NrNumero)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.SgUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");
            });

            modelBuilder.Entity<EnderecosTipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Enderecos_Tipo");

                entity.Property(e => e.Abr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ABR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Dsy)
                    .HasColumnType("datetime")
                    .HasColumnName("DSY");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.St).HasColumnName("ST");

                entity.Property(e => e.Ted)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TED");

                entity.Property(e => e.Usr).HasColumnName("USR");
            });

            modelBuilder.Entity<Enfermeiro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Enfermeiro");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<Envio>(entity =>
            {
                entity.HasKey(e => e.IdEnvio);

                entity.Property(e => e.IdEnvio).HasColumnName("ID_ENVIO");

                entity.Property(e => e.DtEnvio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO");

                entity.Property(e => e.IdMedicoExecutante).HasColumnName("ID_MEDICO_EXECUTANTE");

                entity.Property(e => e.IdMedicoSolicitante).HasColumnName("ID_MEDICO_SOLICITANTE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdServicoImagem).HasColumnName("ID_SERVICO_IMAGEM");

                entity.Property(e => e.IdUnidadeGuia).HasColumnName("ID_UNIDADE_GUIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxProcedimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_PROCEDIMENTO");
            });

            modelBuilder.Entity<Envioagenda>(entity =>
            {
                entity.HasKey(e => e.IdEnvioagenda);

                entity.ToTable("ENVIOAGENDA");

                entity.Property(e => e.IdEnvioagenda).HasColumnName("ID_ENVIOAGENDA");

                entity.Property(e => e.Bairro)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.Carteiraconvenio).HasColumnName("CARTEIRACONVENIO");

                entity.Property(e => e.Carteiraconvenio1)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("CARTEIRACONVENIO1");

                entity.Property(e => e.Carteiraconvenio2)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("CARTEIRACONVENIO2");

                entity.Property(e => e.Celular).HasColumnName("CELULAR");

                entity.Property(e => e.Cep).HasColumnName("CEP");

                entity.Property(e => e.Cidade)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Cnpjconvenio)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CNPJCONVENIO");

                entity.Property(e => e.Cnpjconvenio1)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CNPJCONVENIO1");

                entity.Property(e => e.Cnpjconvenio2)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CNPJCONVENIO2");

                entity.Property(e => e.Codigoespecialidade).HasColumnName("CODIGOESPECIALIDADE");

                entity.Property(e => e.Complementoendereco)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COMPLEMENTOENDERECO");

                entity.Property(e => e.Cpf)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CPF");

                entity.Property(e => e.Crm).HasColumnName("CRM");

                entity.Property(e => e.Dataatendimento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DATAATENDIMENTO");

                entity.Property(e => e.Datanascimento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DATANASCIMENTO");

                entity.Property(e => e.Dddcelular).HasColumnName("DDDCELULAR");

                entity.Property(e => e.Dddpessoacontato).HasColumnName("DDDPESSOACONTATO");

                entity.Property(e => e.Dddtelefonecomercial).HasColumnName("DDDTELEFONECOMERCIAL");

                entity.Property(e => e.Dddtelefoneresidencial).HasColumnName("DDDTELEFONERESIDENCIAL");

                entity.Property(e => e.Descricaoconvenio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAOCONVENIO");

                entity.Property(e => e.Descricaoconvenio1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAOCONVENIO1");

                entity.Property(e => e.Descricaoconvenio2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAOCONVENIO2");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Endereco)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ENDERECO");

                entity.Property(e => e.Estadocivil).HasColumnName("ESTADOCIVIL");

                entity.Property(e => e.Horaatendimento)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("HORAATENDIMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.Idclienteintegracao)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTEINTEGRACAO");

                entity.Property(e => e.Nacionalidade)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NACIONALIDADE");

                entity.Property(e => e.Naturalidade)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NATURALIDADE");

                entity.Property(e => e.Nomecliente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMECLIENTE");

                entity.Property(e => e.Nomemae)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEMAE");

                entity.Property(e => e.Nomepai)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEPAI");

                entity.Property(e => e.Numero).HasColumnName("NUMERO");

                entity.Property(e => e.Numerodocumento)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NUMERODOCUMENTO");

                entity.Property(e => e.Numeropessoacontato).HasColumnName("NUMEROPESSOACONTATO");

                entity.Property(e => e.Numeroprontuario).HasColumnName("NUMEROPRONTUARIO");

                entity.Property(e => e.Orgaoexpedidor)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ORGAOEXPEDIDOR");

                entity.Property(e => e.Pessoacontato)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PESSOACONTATO");

                entity.Property(e => e.Responsavellegal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RESPONSAVELLEGAL");

                entity.Property(e => e.Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO");

                entity.Property(e => e.Telefonecomercial).HasColumnName("TELEFONECOMERCIAL");

                entity.Property(e => e.Telefoneresidencial).HasColumnName("TELEFONERESIDENCIAL");

                entity.Property(e => e.Tipoatendimento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOATENDIMENTO");

                entity.Property(e => e.Tipodocumento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPODOCUMENTO");

                entity.Property(e => e.Uf)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("UF");
            });

            modelBuilder.Entity<EquipeResponsavel>(entity =>
            {
                entity.HasKey(e => new { e.IdCheckinEnfermagem, e.IdProcedimentoPrincipal, e.IdProfissional });

                entity.HasIndex(e => e.IdFuncao, "IX_EquipeResponsavel_ID_FUNCAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProfissional, "IX_EquipeResponsavel_ID_PROFISSIONAL")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdProcedimentoPrincipal).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL");

                entity.Property(e => e.IdProfissional).HasColumnName("ID_PROFISSIONAL");

                entity.Property(e => e.IdEspecialidade)
                    .HasColumnName("ID_ESPECIALIDADE")
                    .HasComment("armazena a especialidade do médico para aquele procedimento");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.InRepasse).HasColumnName("IN_REPASSE");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.EquipeResponsavel)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_EquipeResponsavel_TipoDiversos");

                entity.HasOne(d => d.IdFuncaoNavigation)
                    .WithMany(p => p.EquipeResponsavel)
                    .HasForeignKey(d => d.IdFuncao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipeResponsavel_CirurgiaFuncaoTipo");

                entity.HasOne(d => d.IdProfissionalNavigation)
                    .WithMany(p => p.EquipeResponsavel)
                    .HasForeignKey(d => d.IdProfissional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipeResponsavel_Pessoa");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.EquipeResponsavel)
                    .HasForeignKey(d => new { d.IdProcedimentoPrincipal, d.IdCheckinEnfermagem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EquipeResponsavel_Folhadesala");
            });

            modelBuilder.Entity<ErroArquivoRetorno>(entity =>
            {
                entity.HasKey(e => e.IdErroArquivo);

                entity.ToTable("ERRO_ARQUIVO_RETORNO");

                entity.Property(e => e.IdErroArquivo).HasColumnName("ID_ERRO_ARQUIVO");

                entity.Property(e => e.TxDescErro)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_ERRO");
            });

            modelBuilder.Entity<EscoreFarmacia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EscoreFarmacia");

                entity.Property(e => e.Admissão)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ClassificaçãoRisco)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("Classificação Risco");

                entity.Property(e => e.DataHoraCriação)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Data/Hora Criação");

                entity.Property(e => e.DataPrevistaNovoEscore)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Data Prevista Novo Escore");

                entity.Property(e => e.Excluído)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Leito)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Login)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OcupaçãoLeito)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Ocupação Leito");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Setor)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EspecialidadeLeitoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdTipoLeitoHistorico)
                    .HasName("PK__Especial__51E251EC3FA3C2F9");

                entity.ToTable("EspecialidadeLeito_Historico");

                entity.Property(e => e.IdTipoLeitoHistorico).HasColumnName("ID_TIPO_LEITO_HISTORICO");

                entity.Property(e => e.IdTipoLeito).HasColumnName("ID_TIPO_LEITO");

                entity.Property(e => e.TxCompetencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.HasOne(d => d.IdTipoLeitoNavigation)
                    .WithMany(p => p.EspecialidadeLeitoHistorico)
                    .HasForeignKey(d => d.IdTipoLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoLeito_EspecialidadeLeito_Historico");
            });

            modelBuilder.Entity<Estado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Estado");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NOME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Pss).HasColumnName("PSS");

                entity.Property(e => e.Uf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("UF")
                    .IsFixedLength(true)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Estatistica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("estatistica");

                entity.Property(e => e.CodServidor)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cod_servidor");

                entity.Property(e => e.DatExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("dat_execucao");

                entity.Property(e => e.QteExecucao).HasColumnName("qte_execucao");

                entity.Property(e => e.QteMediaDuracao)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("qte_media_duracao");
            });

            modelBuilder.Entity<EstatisticaBck>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("estatistica_bck");

                entity.Property(e => e.CodServidor)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cod_servidor");

                entity.Property(e => e.DatExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("dat_execucao");

                entity.Property(e => e.QteExecucao).HasColumnName("qte_execucao");

                entity.Property(e => e.QteMediaDuracao)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("qte_media_duracao");
            });

            modelBuilder.Entity<EstoqueEnfermagemCc>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeEstoque, e.DtInicioVigencia, e.IdUnidadeAtendida });

                entity.ToTable("EstoqueEnfermagemCC");

                entity.Property(e => e.IdUnidadeEstoque).HasColumnName("ID_UNIDADE_ESTOQUE");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdUnidadeAtendida).HasColumnName("ID_UNIDADE_ATENDIDA");

                entity.Property(e => e.DtFimVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VIGENCIA");

                entity.Property(e => e.IdAplicativo)
                    .HasColumnName("ID_APLICATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InEstoqueAtual).HasColumnName("IN_ESTOQUE_ATUAL");

                entity.HasOne(d => d.IdAplicativoNavigation)
                    .WithMany(p => p.EstoqueEnfermagemCc)
                    .HasForeignKey(d => d.IdAplicativo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstoqueEnfermagemCC_Aplicativo");

                entity.HasOne(d => d.IdUnidadeAtendidaNavigation)
                    .WithMany(p => p.EstoqueEnfermagemCcIdUnidadeAtendidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeAtendida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstoqueEnfermagemCC_UnidadeOrganizacional1");

                entity.HasOne(d => d.IdUnidadeEstoqueNavigation)
                    .WithMany(p => p.EstoqueEnfermagemCcIdUnidadeEstoqueNavigation)
                    .HasForeignKey(d => d.IdUnidadeEstoque)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstoqueEnfermagemCC_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.EstoqueEnfermagemCc)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_EstoqueEnfermagemCC_Usuario");
            });

            modelBuilder.Entity<EstoqueFechamentoMensal>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdFechamentoMensal })
                    .HasName("PK_EstoqueFechamentoMensal_1");

                entity.HasIndex(e => e.IdFechamentoMensal, "IX_EstoqueFechamentoMensal_ID_FECHAMENTO_MENSAL")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdFechamentoMensal, e.IdClassificacaoContabil }, "IX_EstoqueFechamentoMensal_ID_FECHAMENTO_MENSAL_ID_CLASSIFICACAO_CONTABIL")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdFechamentoMensal, "IX_EstoqueFechamentoMensal_K2_1_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.QnAjusteEntrada).HasColumnName("QN_AJUSTE_ENTRADA");

                entity.Property(e => e.QnAjusteSaida).HasColumnName("QN_AJUSTE_SAIDA");

                entity.Property(e => e.QnCompra).HasColumnName("QN_COMPRA");

                entity.Property(e => e.QnDevolucao).HasColumnName("QN_DEVOLUCAO");

                entity.Property(e => e.QnDevolucaoNotaFiscal).HasColumnName("QN_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.QnDispensacao).HasColumnName("QN_DISPENSACAO");

                entity.Property(e => e.QnEmprestimoEmprestar).HasColumnName("QN_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.QnEmprestimoEmprestarRecebimento).HasColumnName("QN_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.QnEmprestimoPegarEmprestado).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.QnEmprestimoPegarEmprestadoPagamento).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.QnEstoqueConsignado).HasColumnName("QN_ESTOQUE_CONSIGNADO");

                entity.Property(e => e.QnEstoqueFechamento).HasColumnName("QN_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.QnInventarioEntrada).HasColumnName("QN_INVENTARIO_ENTRADA");

                entity.Property(e => e.QnInventarioSaida).HasColumnName("QN_INVENTARIO_SAIDA");

                entity.Property(e => e.QnPerda).HasColumnName("QN_PERDA");

                entity.Property(e => e.VlAjusteEntrada)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_AJUSTE_ENTRADA");

                entity.Property(e => e.VlAjusteSaida)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_AJUSTE_SAIDA");

                entity.Property(e => e.VlCompra)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_COMPRA");

                entity.Property(e => e.VlDevolucao)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_DEVOLUCAO");

                entity.Property(e => e.VlDevolucaoNotaFiscal)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.VlDispensacao)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_DISPENSACAO");

                entity.Property(e => e.VlEmprestimoEmprestar)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.VlEmprestimoEmprestarRecebimento)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.VlEmprestimoPegarEmprestado)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.VlEmprestimoPegarEmprestadoPagamento)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.VlEstoqueConsignado)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_ESTOQUE_CONSIGNADO");

                entity.Property(e => e.VlEstoqueFechamento)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.VlInventarioEntrada)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_INVENTARIO_ENTRADA");

                entity.Property(e => e.VlInventarioSaida)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_INVENTARIO_SAIDA");

                entity.Property(e => e.VlPerda)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("VL_PERDA");

                entity.HasOne(d => d.IdClassificacaoContabilNavigation)
                    .WithMany(p => p.EstoqueFechamentoMensal)
                    .HasForeignKey(d => d.IdClassificacaoContabil)
                    .HasConstraintName("FK_EstoqueFechamentoMensal_ClassificacaoContabil");

                entity.HasOne(d => d.IdFechamentoMensalNavigation)
                    .WithMany(p => p.EstoqueFechamentoMensal)
                    .HasForeignKey(d => d.IdFechamentoMensal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstoqueFechamentoMensal_EstoqueFechamentoParametro");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.EstoqueFechamentoMensal)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstoqueFechamentoMensal_ProdutoDetalhe");
            });

            modelBuilder.Entity<EstoqueFechamentoMensalConsignado>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdFechamentoMensal })
                    .HasName("PK_EstoqueFechamentoMensalConsignado_1");

                entity.HasIndex(e => e.IdFechamentoMensal, "IX_EstoqueFechamentoMensalConsignado_Id_fechamento_mensal")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.QnAjusteEntrada).HasColumnName("QN_AJUSTE_ENTRADA");

                entity.Property(e => e.QnAjusteSaida).HasColumnName("QN_AJUSTE_SAIDA");

                entity.Property(e => e.QnCompra).HasColumnName("QN_COMPRA");

                entity.Property(e => e.QnDevolucao).HasColumnName("QN_DEVOLUCAO");

                entity.Property(e => e.QnDevolucaoNotaFiscal).HasColumnName("QN_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.QnDispensacao).HasColumnName("QN_DISPENSACAO");

                entity.Property(e => e.QnEmprestimoEmprestar).HasColumnName("QN_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.QnEmprestimoEmprestarRecebimento).HasColumnName("QN_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.QnEmprestimoPegarEmprestado).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.QnEmprestimoPegarEmprestadoPagamento).HasColumnName("QN_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.QnEstoqueFechamento).HasColumnName("QN_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.QnInventarioEntrada).HasColumnName("QN_INVENTARIO_ENTRADA");

                entity.Property(e => e.QnInventarioSaida).HasColumnName("QN_INVENTARIO_SAIDA");

                entity.Property(e => e.QnPerda).HasColumnName("QN_PERDA");

                entity.Property(e => e.VlAjusteEntrada)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_AJUSTE_ENTRADA");

                entity.Property(e => e.VlAjusteSaida)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_AJUSTE_SAIDA");

                entity.Property(e => e.VlCompra)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_COMPRA");

                entity.Property(e => e.VlDevolucao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DEVOLUCAO");

                entity.Property(e => e.VlDevolucaoNotaFiscal)
                    .HasColumnType("decimal(18, 7)")
                    .HasColumnName("VL_DEVOLUCAO_NOTA_FISCAL");

                entity.Property(e => e.VlDispensacao)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_DISPENSACAO");

                entity.Property(e => e.VlEmprestimoEmprestar)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR");

                entity.Property(e => e.VlEmprestimoEmprestarRecebimento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_EMPRESTAR_RECEBIMENTO");

                entity.Property(e => e.VlEmprestimoPegarEmprestado)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO");

                entity.Property(e => e.VlEmprestimoPegarEmprestadoPagamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_EMPRESTIMO_PEGAR_EMPRESTADO_PAGAMENTO");

                entity.Property(e => e.VlEstoqueFechamento)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_ESTOQUE_FECHAMENTO");

                entity.Property(e => e.VlInventarioEntrada)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_ENTRADA");

                entity.Property(e => e.VlInventarioSaida)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_INVENTARIO_SAIDA");

                entity.Property(e => e.VlPerda)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("VL_PERDA");

                entity.HasOne(d => d.IdClassificacaoContabilNavigation)
                    .WithMany(p => p.EstoqueFechamentoMensalConsignado)
                    .HasForeignKey(d => d.IdClassificacaoContabil)
                    .HasConstraintName("FK_EstoqueFechamentoMensalConsignado_ClassificacaoContabil");

                entity.HasOne(d => d.IdFechamentoMensalNavigation)
                    .WithMany(p => p.EstoqueFechamentoMensalConsignado)
                    .HasForeignKey(d => d.IdFechamentoMensal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstoqueFechamentoMensalConsignado_EstoqueFechamentoParametro");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.EstoqueFechamentoMensalConsignado)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstoqueFechamentoMensalConsignado_ProdutoDetalhe");
            });

            modelBuilder.Entity<EstoqueFechamentoParametro>(entity =>
            {
                entity.HasKey(e => e.IdFechamentoMensal);

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.IdUsuarioFechouMes).HasColumnName("ID_USUARIO_FECHOU_MES");

                entity.Property(e => e.InCritica)
                    .HasColumnName("IN_CRITICA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InFechado)
                    .HasColumnName("IN_FECHADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InVisivel)
                    .HasColumnName("IN_VISIVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrAnoFechamento).HasColumnName("NR_ANO_FECHAMENTO");

                entity.Property(e => e.NrMesFechamento).HasColumnName("NR_MES_FECHAMENTO");
            });

            modelBuilder.Entity<EstoqueLocaliza>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdFabricante, e.IdProdutoDetalhe })
                    .HasName("EstoqueLocaliza_PK");

                entity.HasIndex(e => new { e.IdFabricante, e.IdProdutoDetalhe }, "IX_EstoqueLocaliza_ID_FABRICANTE_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.QnProduto }, "IX_EstoqueLocaliza_ID_PRODUTO_DETALHE_QN_PRODUTO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_EstoqueLocaliza_PRODUTO_DETALHE")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.QnConsignado).HasColumnName("QN_CONSIGNADO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.EstoqueLocaliza)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_EstoqueLocaliza_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.EstoqueLocaliza)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_EstoqueLocaliza_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.EstoqueLocaliza)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_EstoqueLocaliza_FK1");
            });

            modelBuilder.Entity<EstoqueLocalizaConcorrencia>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdUnidadeOrganizacional });

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EstoqueLocalizaDiario>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdUnidadeOrganizacional, e.IdFabricante, e.DtEstoque })
                    .HasName("EstoqueLocalizaDiario_PK");

                entity.HasIndex(e => e.DtEstoque, "IX_EstoqueLocalizaDiario_DT_ESTOQUE");

                entity.HasIndex(e => new { e.DtEstoque, e.QnProduto }, "IX_EstoqueLocalizaDiario_DT_ESTOQUE_QN_PRODUTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.DtEstoque }, "IX_EstoqueLocalizaDiario_ID_UNIDADE_ORGANIZACIONAL_DT_ESTOQUE")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.DtEstoque)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ESTOQUE");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.QnConsignado).HasColumnName("QN_CONSIGNADO");

                entity.Property(e => e.QnConsignadoKit)
                    .HasColumnName("QN_CONSIGNADO_KIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnConsignadoTotal)
                    .HasColumnName("QN_CONSIGNADO_TOTAL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.QnProdutoKit).HasColumnName("QN_PRODUTO_KIT");

                entity.Property(e => e.QnProdutoTotal).HasColumnName("QN_PRODUTO_TOTAL");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.EstoqueLocalizaDiario)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_EstoqueLocalizaDiario_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.EstoqueLocalizaDiario)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_EstoqueLocalizaDiario_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.EstoqueLocalizaDiario)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_EstoqueLocalizaDiario_FK1");
            });

            modelBuilder.Entity<EstoqueLocalizaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdEstoqueLocalizaHistorico)
                    .HasName("EstoqueLocalizaHistorico_PK");

                entity.Property(e => e.IdEstoqueLocalizaHistorico).HasColumnName("ID_ESTOQUE_LOCALIZA_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtRegistroEstoque)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO_ESTOQUE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdFabricantePrioridade).HasColumnName("ID_FABRICANTE_PRIORIDADE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InKit).HasColumnName("IN_KIT");

                entity.Property(e => e.QnConsignado).HasColumnName("QN_CONSIGNADO");

                entity.Property(e => e.QnConsignadoAnterior).HasColumnName("QN_CONSIGNADO_ANTERIOR");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.QnProdutoAnterior).HasColumnName("QN_PRODUTO_ANTERIOR");

                entity.Property(e => e.SaldoConsignadoUnidade).HasColumnName("SALDO_CONSIGNADO_UNIDADE");

                entity.Property(e => e.SaldoProdutoUnidade).HasColumnName("SALDO_PRODUTO_UNIDADE");
            });

            modelBuilder.Entity<EtiquetasAtendimento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Etiquetas_Atendimento");

                entity.Property(e => e.CdIdentidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE");

                entity.Property(e => e.DtAlta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_ALTA");

                entity.Property(e => e.DtAtendimento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtFimAtendimento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_FIM_ATENDIMENTO");

                entity.Property(e => e.DtNascimento)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.DtValidadeCartao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_VALIDADE_CARTAO");

                entity.Property(e => e.HrAlta)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("HR_ALTA");

                entity.Property(e => e.HrAtendimento)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("HR_ATENDIMENTO");

                entity.Property(e => e.HrFimAtendimento)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("HR_FIM_ATENDIMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.NmEstadoCivil)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ESTADO_CIVIL");

                entity.Property(e => e.NmMae)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrContaConvenio).HasColumnName("NR_CONTA_CONVENIO");

                entity.Property(e => e.NrContaParticular).HasColumnName("NR_CONTA_PARTICULAR");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.NrGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.NrProntuario)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRONTUARIO");

                entity.Property(e => e.TxBairro)
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("TX_BAIRRO");

                entity.Property(e => e.TxCep)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("TX_CEP")
                    .IsFixedLength(true);

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.TxEndereco)
                    .HasMaxLength(213)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");

                entity.Property(e => e.TxEspecialidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_ESPECIALIDADE");

                entity.Property(e => e.TxLeito)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TX_LEITO");

                entity.Property(e => e.TxNaturalidade)
                    .IsRequired()
                    .HasMaxLength(77)
                    .IsUnicode(false)
                    .HasColumnName("TX_NATURALIDADE");

                entity.Property(e => e.TxOperadora)
                    .HasMaxLength(133)
                    .IsUnicode(false)
                    .HasColumnName("TX_OPERADORA");

                entity.Property(e => e.TxSexo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_SEXO");

                entity.Property(e => e.TxTelefoneCelular)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_CELULAR");

                entity.Property(e => e.TxTelefoneCelularAc)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_CELULAR_AC");

                entity.Property(e => e.TxTelefoneCelularMe)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_CELULAR_ME");

                entity.Property(e => e.TxTelefoneComercial)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_COMERCIAL");

                entity.Property(e => e.TxTelefoneComercialAc)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_COMERCIAL_AC");

                entity.Property(e => e.TxTelefoneComercialMe)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_COMERCIAL_ME");

                entity.Property(e => e.TxTelefoneResidencial)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_RESIDENCIAL");

                entity.Property(e => e.TxTelefoneResidencialAc)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_RESIDENCIAL_AC");

                entity.Property(e => e.TxTelefoneResidencialMe)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_RESIDENCIAL_ME");
            });

            modelBuilder.Entity<EventoIntegracao>(entity =>
            {
                entity.HasKey(e => e.IdEventoIntegracao);

                entity.HasIndex(e => new { e.IdEvento, e.InProcessou, e.InCancelado }, "IX_EventoIntegracao_ID_EVENTO_IN_PROCESSOU_IN_CANCELADO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdEventoIntegracao)
                    .HasColumnName("ID_EVENTO_INTEGRACAO")
                    .HasComment("identificador único do evento");

                entity.Property(e => e.DtEvento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EVENTO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data que ocorreu o evento");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEvento)
                    .HasColumnName("ID_EVENTO")
                    .HasComment("tipo tabela 396");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InProcessou).HasColumnName("IN_PROCESSOU");

                entity.Property(e => e.TxDados)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DADOS")
                    .HasComment("XML contendo os ID dos itens que foram disparados os eventos");

                entity.HasOne(d => d.IdEventoNavigation)
                    .WithMany(p => p.EventoIntegracao)
                    .HasForeignKey(d => d.IdEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventoIntegracao_TipoDiversos");
            });

            modelBuilder.Entity<EventoIntegracaoExcecao>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdEventoIntegracao).HasColumnName("ID_EVENTO_INTEGRACAO");

                entity.Property(e => e.IdMetodo).HasColumnName("ID_METODO");
            });

            modelBuilder.Entity<EventoIntegracaoLog>(entity =>
            {
                entity.HasKey(e => e.IdEventoIntegracaoLog);

                entity.HasIndex(e => e.IdEventoIntegracao, "IDX_C_EventoIntegracaoLog_ID_EVENTO_INTEGRACAO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdEventoIntegracaoLog).HasColumnName("ID_EVENTO_INTEGRACAO_LOG");

                entity.Property(e => e.DtLog)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LOG");

                entity.Property(e => e.IdEventoIntegracao).HasColumnName("ID_EVENTO_INTEGRACAO");

                entity.Property(e => e.InSucesso).HasColumnName("IN_SUCESSO");

                entity.Property(e => e.TxLog)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOG");
            });

            modelBuilder.Entity<EventoLeito>(entity =>
            {
                entity.HasKey(e => e.IdEvento)
                    .HasName("EventoLeito_PK");

                entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

                entity.Property(e => e.IdAcao).HasColumnName("ID_ACAO");

                entity.Property(e => e.IdEventoTipo).HasColumnName("ID_EVENTO_TIPO");

                entity.Property(e => e.IdPendenciaTipo).HasColumnName("ID_PENDENCIA_TIPO");

                entity.Property(e => e.IdStatusLeito).HasColumnName("ID_STATUS_LEITO");

                entity.Property(e => e.NmEvento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_EVENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAcaoNavigation)
                    .WithMany(p => p.EventoLeitoIdAcaoNavigation)
                    .HasForeignKey(d => d.IdAcao)
                    .HasConstraintName("TipoDiversos_EventoLeito_FK4");

                entity.HasOne(d => d.IdEventoTipoNavigation)
                    .WithMany(p => p.EventoLeitoIdEventoTipoNavigation)
                    .HasForeignKey(d => d.IdEventoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_EventoLeito_FK2");

                entity.HasOne(d => d.IdPendenciaTipoNavigation)
                    .WithMany(p => p.EventoLeitoIdPendenciaTipoNavigation)
                    .HasForeignKey(d => d.IdPendenciaTipo)
                    .HasConstraintName("TipoDiversos_EventoLeito_FK3");

                entity.HasOne(d => d.IdStatusLeitoNavigation)
                    .WithMany(p => p.EventoLeitoIdStatusLeitoNavigation)
                    .HasForeignKey(d => d.IdStatusLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_EventoLeito_FK1");
            });

            modelBuilder.Entity<EventoLeitoAssociacao>(entity =>
            {
                entity.HasKey(e => new { e.IdEventoLeitoPai, e.IdEventoLeitoFilho })
                    .HasName("EventoLeito_Associacao_PK");

                entity.ToTable("EventoLeito_Associacao");

                entity.Property(e => e.IdEventoLeitoPai).HasColumnName("ID_EVENTO_LEITO_PAI");

                entity.Property(e => e.IdEventoLeitoFilho).HasColumnName("ID_EVENTO_LEITO_FILHO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEventoLeitoFilhoNavigation)
                    .WithMany(p => p.EventoLeitoAssociacaoIdEventoLeitoFilhoNavigation)
                    .HasForeignKey(d => d.IdEventoLeitoFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Leito_EventoLeito_EventoLeito_Associacao_FK2");

                entity.HasOne(d => d.IdEventoLeitoPaiNavigation)
                    .WithMany(p => p.EventoLeitoAssociacaoIdEventoLeitoPaiNavigation)
                    .HasForeignKey(d => d.IdEventoLeitoPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Leito_EventoLeito_EventoLeito_Associacao_FK1");
            });

            modelBuilder.Entity<EventoLeitoEventoLeito>(entity =>
            {
                entity.HasKey(e => new { e.IdEventoPai, e.IdEventoFilho })
                    .HasName("EventoLeito_EventoLeito_PK");

                entity.ToTable("EventoLeito_EventoLeito");

                entity.Property(e => e.IdEventoPai).HasColumnName("ID_EVENTO_PAI");

                entity.Property(e => e.IdEventoFilho).HasColumnName("ID_EVENTO_FILHO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEventoFilhoNavigation)
                    .WithMany(p => p.EventoLeitoEventoLeitoIdEventoFilhoNavigation)
                    .HasForeignKey(d => d.IdEventoFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EventoLeito_EventoLeito_EventoLeito_FK2");

                entity.HasOne(d => d.IdEventoPaiNavigation)
                    .WithMany(p => p.EventoLeitoEventoLeitoIdEventoPaiNavigation)
                    .HasForeignKey(d => d.IdEventoPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EventoLeito_EventoLeito_EventoLeito_FK1");
            });

            modelBuilder.Entity<Exame>(entity =>
            {
                entity.HasKey(e => e.IdExame)
                    .HasName("Exame_PK");

                entity.HasIndex(e => e.InAtivo, "IX_Exame_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.NmExame, "IX_Exame_NM_EXAME")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServico, "IX_Exame_Servico_ID_SERVICO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.TxMnemonico, e.InAtivo }, "IX_Exame_TX_MNEMONICO_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdTipoExame, "IX_Exame_TipoDiversos_ID_TIPO_EXAME")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdSessaoTecnica, "IX_Exame_UnidadeOrganizacional_ID_SESSAO_TECNICA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdExame)
                    .HasColumnName("ID_EXAME")
                    .HasComment("identificador do exame");

                entity.Property(e => e.IdGrupo)
                    .HasColumnName("ID_GRUPO")
                    .HasComment("");

                entity.Property(e => e.IdResultadoTipo)
                    .HasColumnName("ID_RESULTADO_TIPO")
                    .HasComment("tipo do resultado do laudo será impresso");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSessaoTecnica)
                    .HasColumnName("ID_SESSAO_TECNICA")
                    .HasComment("bancada que o exame é realizado");

                entity.Property(e => e.IdTipoExame)
                    .HasColumnName("ID_TIPO_EXAME")
                    .HasComment("pode ser pacote ou simples");

                entity.Property(e => e.InAtivado)
                    .IsRequired()
                    .HasColumnName("IN_ATIVADO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("para cancelar a solicitação de novos exames");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusao lógica");

                entity.Property(e => e.InColetaLaboratorio).HasColumnName("IN_COLETA_LABORATORIO");

                entity.Property(e => e.InEntregaPessoal)
                    .HasColumnName("IN_ENTREGA_PESSOAL")
                    .HasComment("se o resultado pode ser consultado pelos médicos na tela de pedidos");

                entity.Property(e => e.InExameGratuito)
                    .HasColumnName("IN_EXAME_GRATUITO")
                    .HasComment("exame não é cobrado e não cai na conta");

                entity.Property(e => e.InExigeComunicacao)
                    .HasColumnName("IN_EXIGE_COMUNICACAO")
                    .HasComment("obrigatoriedade da comunicação ao médico para resultado crítico");

                entity.Property(e => e.InImprimeSesmt)
                    .HasColumnName("IN_IMPRIME_SESMT")
                    .HasComment("se o laudo vai aparecer o nome do paciente, como HIV");

                entity.Property(e => e.InPesquisaBacteria)
                    .HasColumnName("IN_PESQUISA_BACTERIA")
                    .HasComment("para exames de cultura de bacterias");

                entity.Property(e => e.InSomenteUmPorDia).HasColumnName("IN_SOMENTE_UM_POR_DIA");

                entity.Property(e => e.NmExame)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_EXAME")
                    .HasComment("nome do exame");

                entity.Property(e => e.NrHoraRealizacao).HasColumnName("NR_HORA_REALIZACAO");

                entity.Property(e => e.NrTempoRealizacao)
                    .HasColumnName("NR_TEMPO_REALIZACAO")
                    .HasComment("quanto tempo dura o exame em dias");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxIndicacao)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("TX_INDICACAO")
                    .HasComment("indicações dos exames");

                entity.Property(e => e.TxInterferentes)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_INTERFERENTES")
                    .HasComment("texto dos interferentes");

                entity.Property(e => e.TxMnemonico)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_MNEMONICO")
                    .HasComment("mnemonico do exame");

                entity.Property(e => e.TxObservacaoPadrao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_PADRAO")
                    .HasComment("observação que aparece no laudo");

                entity.Property(e => e.TxPreparo)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_PREPARO")
                    .HasComment("preparo do paciente");

                entity.Property(e => e.TxPreparoColeta)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_PREPARO_COLETA")
                    .HasComment("texto de preparo da coleta");

                entity.Property(e => e.TxRelacionados)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_RELACIONADOS")
                    .HasComment("quais exames são relacionados");

                entity.Property(e => e.TxSinonimia)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_SINONIMIA")
                    .HasComment("exames parecidos");

                entity.HasOne(d => d.IdResultadoTipoNavigation)
                    .WithMany(p => p.ExameIdResultadoTipoNavigation)
                    .HasForeignKey(d => d.IdResultadoTipo)
                    .HasConstraintName("FK_Exame_TipoDiversos1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.Exame)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK_Exame_Servico");

                entity.HasOne(d => d.IdSessaoTecnicaNavigation)
                    .WithMany(p => p.Exame)
                    .HasForeignKey(d => d.IdSessaoTecnica)
                    .HasConstraintName("FK_Exame_UnidadeOrganizacional");

                entity.HasOne(d => d.IdTipoExameNavigation)
                    .WithMany(p => p.ExameIdTipoExameNavigation)
                    .HasForeignKey(d => d.IdTipoExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_TipoDiversos");
            });

            modelBuilder.Entity<ExameAcidente>(entity =>
            {
                entity.HasKey(e => e.IdExameAcidente);

                entity.Property(e => e.IdExameAcidente)
                    .HasColumnName("ID_EXAME_ACIDENTE")
                    .HasComment("identificador único do acidente de trabalho");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.NmExameAcidente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_EXAME_ACIDENTE")
                    .HasComment("nome do acidente de trabalho");

                entity.Property(e => e.TxMinemonico)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TX_MINEMONICO")
                    .HasComment("mnemonico do acidente de trabalho");

                entity.Property(e => e.TxPergunta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_PERGUNTA")
                    .HasComment("pergunta feita ao selecionar o acidente de trabalho. resposta sempre é SIM ou NÂO");
            });

            modelBuilder.Entity<ExameAcidenteExame>(entity =>
            {
                entity.HasKey(e => new { e.IdExameAcidente, e.IdExame });

                entity.ToTable("ExameAcidente_Exame");

                entity.Property(e => e.IdExameAcidente)
                    .HasColumnName("ID_EXAME_ACIDENTE")
                    .HasComment("identificador do acidente de trabalho");

                entity.Property(e => e.IdExame)
                    .HasColumnName("ID_EXAME")
                    .HasComment("identificador do exame");

                entity.Property(e => e.IdUnidadeTempo)
                    .HasColumnName("ID_UNIDADE_TEMPO")
                    .HasComment("se o intervalo é em minutos ou horas");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.InResposta)
                    .HasColumnName("IN_RESPOSTA")
                    .HasComment("adiciona o exame no pedido se a resposta for");

                entity.Property(e => e.NrAmostra)
                    .HasColumnName("NR_AMOSTRA")
                    .HasComment("número de amostras que será lançado no pedido");

                entity.Property(e => e.NrIntervalo)
                    .HasColumnName("NR_INTERVALO")
                    .HasComment("intervalo do exame no pedido caso tenha mais de uma mostra");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.ExameAcidenteExame)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExameAcidente_Exame_Exame");

                entity.HasOne(d => d.IdExameAcidenteNavigation)
                    .WithMany(p => p.ExameAcidenteExame)
                    .HasForeignKey(d => d.IdExameAcidente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExameAcidente_Exame_ExameAcidente");

                entity.HasOne(d => d.IdUnidadeTempoNavigation)
                    .WithMany(p => p.ExameAcidenteExame)
                    .HasForeignKey(d => d.IdUnidadeTempo)
                    .HasConstraintName("FK_ExameAcidente_Exame_TipoDiversos");
            });

            modelBuilder.Entity<ExameEtapaTempo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExameEtapaTempo");

                entity.Property(e => e.AtrasoAprovacao).HasColumnName("ATRASO_APROVACAO");

                entity.Property(e => e.AtrasoColeta).HasColumnName("ATRASO_COLETA");

                entity.Property(e => e.AtrasoExecucao).HasColumnName("ATRASO_EXECUCAO");

                entity.Property(e => e.AtrasoPreparo).HasColumnName("ATRASO_PREPARO");

                entity.Property(e => e.AtrasoSeparacao).HasColumnName("ATRASO_SEPARACAO");

                entity.Property(e => e.AtrasoTotal).HasColumnName("ATRASO_TOTAL");

                entity.Property(e => e.DtAbertura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ABERTURA");

                entity.Property(e => e.DtLimiteOs)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIMITE_OS");

                entity.Property(e => e.ExecutanteAprovacao)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("EXECUTANTE_APROVACAO");

                entity.Property(e => e.ExecutanteColeta)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("EXECUTANTE_COLETA");

                entity.Property(e => e.ExecutanteExecucao)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("EXECUTANTE_EXECUCAO");

                entity.Property(e => e.ExecutanteSeparacao)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("EXECUTANTE_SEPARACAO");

                entity.Property(e => e.FimAprovacao)
                    .HasColumnType("datetime")
                    .HasColumnName("FIM_APROVACAO");

                entity.Property(e => e.FimColeta)
                    .HasColumnType("datetime")
                    .HasColumnName("FIM_COLETA");

                entity.Property(e => e.FimExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("FIM_EXECUCAO");

                entity.Property(e => e.FimPreparo)
                    .HasColumnType("datetime")
                    .HasColumnName("FIM_PREPARO");

                entity.Property(e => e.FimSeparacao)
                    .HasColumnType("datetime")
                    .HasColumnName("FIM_SEPARACAO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdExecutantePreparo).HasColumnName("ID_EXECUTANTE_PREPARO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdUnidadeSolicitante).HasColumnName("ID_UNIDADE_SOLICITANTE");

                entity.Property(e => e.InicioAprovacao)
                    .HasColumnType("datetime")
                    .HasColumnName("INICIO_APROVACAO");

                entity.Property(e => e.InicioColeta)
                    .HasColumnType("datetime")
                    .HasColumnName("INICIO_COLETA");

                entity.Property(e => e.InicioExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("INICIO_EXECUCAO");

                entity.Property(e => e.InicioPreparo)
                    .HasColumnType("datetime")
                    .HasColumnName("INICIO_PREPARO");

                entity.Property(e => e.InicioSeparacao)
                    .HasColumnType("datetime")
                    .HasColumnName("INICIO_SEPARACAO");

                entity.Property(e => e.LimiteAprovacao)
                    .HasColumnType("datetime")
                    .HasColumnName("LIMITE_APROVACAO");

                entity.Property(e => e.LimiteColeta)
                    .HasColumnType("datetime")
                    .HasColumnName("LIMITE_COLETA");

                entity.Property(e => e.LimiteExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("LIMITE_EXECUCAO");

                entity.Property(e => e.LimitePreparo)
                    .HasColumnType("datetime")
                    .HasColumnName("LIMITE_PREPARO");

                entity.Property(e => e.LimiteSeparacao)
                    .HasColumnType("datetime")
                    .HasColumnName("LIMITE_SEPARACAO");

                entity.Property(e => e.NmExame)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_EXAME");

                entity.Property(e => e.NmExecutantePreparo)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_EXECUTANTE_PREPARO");

                entity.Property(e => e.NmMaterial)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MATERIAL");

                entity.Property(e => e.NmUnidadeSolicitante)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_SOLICITANTE");

                entity.Property(e => e.TempoAprovacao).HasColumnName("TEMPO_APROVACAO");

                entity.Property(e => e.TempoColeta).HasColumnName("TEMPO_COLETA");

                entity.Property(e => e.TempoExecucao).HasColumnName("TEMPO_EXECUCAO");

                entity.Property(e => e.TempoPreparo).HasColumnName("TEMPO_PREPARO");

                entity.Property(e => e.TempoSeparacao).HasColumnName("TEMPO_SEPARACAO");
            });

            modelBuilder.Entity<ExameExame>(entity =>
            {
                entity.HasKey(e => new { e.IdExamePai, e.IdExameFilho });

                entity.ToTable("Exame_Exame");

                entity.Property(e => e.IdExamePai)
                    .HasColumnName("ID_EXAME_PAI")
                    .HasComment("identificador do exame pacote");

                entity.Property(e => e.IdExameFilho)
                    .HasColumnName("ID_EXAME_FILHO")
                    .HasComment("identificador do exame simples");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data que foi cadastrado este relacionamento");

                entity.Property(e => e.IdUnidadeTempo)
                    .HasColumnName("ID_UNIDADE_TEMPO")
                    .HasComment("unidade de medida do tempo do intervalo entre as amostras,tipo tabela 57");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.InExcecao).HasColumnName("IN_EXCECAO");

                entity.Property(e => e.NrAmostra)
                    .HasColumnName("NR_AMOSTRA")
                    .HasComment("número de amostras que será lançada no pedido");

                entity.Property(e => e.NrIntervalo)
                    .HasColumnName("NR_INTERVALO")
                    .HasComment("tempo do intervalo de acordo com a unidade, geralmente em minutos");

                entity.HasOne(d => d.IdExameFilhoNavigation)
                    .WithMany(p => p.ExameExameIdExameFilhoNavigation)
                    .HasForeignKey(d => d.IdExameFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_Exame_Exame1");

                entity.HasOne(d => d.IdExamePaiNavigation)
                    .WithMany(p => p.ExameExameIdExamePaiNavigation)
                    .HasForeignKey(d => d.IdExamePai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_Exame_Exame");

                entity.HasOne(d => d.IdUnidadeTempoNavigation)
                    .WithMany(p => p.ExameExame)
                    .HasForeignKey(d => d.IdUnidadeTempo)
                    .HasConstraintName("FK_Exame_Exame_TipoDiversos");
            });

            modelBuilder.Entity<ExameExameAmostra>(entity =>
            {
                entity.HasKey(e => new { e.IdExamePai, e.IdExameFilho });

                entity.ToTable("Exame_ExameAmostra");

                entity.Property(e => e.IdExamePai).HasColumnName("ID_EXAME_PAI");

                entity.Property(e => e.IdExameFilho).HasColumnName("ID_EXAME_FILHO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdExameFilhoNavigation)
                    .WithMany(p => p.ExameExameAmostraIdExameFilhoNavigation)
                    .HasForeignKey(d => d.IdExameFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_ExameAmostra_Exame1");

                entity.HasOne(d => d.IdExamePaiNavigation)
                    .WithMany(p => p.ExameExameAmostraIdExamePaiNavigation)
                    .HasForeignKey(d => d.IdExamePai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_ExameAmostra_Exame");
            });

            modelBuilder.Entity<ExameItemColeta>(entity =>
            {
                entity.HasKey(e => e.IdExameItemColeta);

                entity.Property(e => e.IdExameItemColeta)
                    .HasColumnName("ID_EXAME_ITEM_COLETA")
                    .HasComment("identificados unico da tabela");

                entity.Property(e => e.IdExame)
                    .HasColumnName("ID_EXAME")
                    .HasComment("referencia do identificador do exame");

                entity.Property(e => e.IdTabela)
                    .HasColumnName("ID_TABELA")
                    .HasComment("quando o item tem valores predefinidos e utilizam a estrutura do tipodiversos, como cor de urina");

                entity.Property(e => e.IdTipoResponsavelLancamento).HasColumnName("ID_TIPO_RESPONSAVEL_LANCAMENTO");

                entity.Property(e => e.IdTipoValor)
                    .HasColumnName("ID_TIPO_VALOR")
                    .HasComment("tipo do dado que será lançado");

                entity.Property(e => e.IdTipoValorAnteriorPor).HasColumnName("ID_TIPO_VALOR_ANTERIOR_POR");

                entity.Property(e => e.IdUnidade)
                    .HasColumnName("ID_UNIDADE")
                    .HasComment("unidade de medida, tipo tabela 137");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("excelusão lógica");

                entity.Property(e => e.InObrigatorio)
                    .HasColumnName("IN_OBRIGATORIO")
                    .HasComment("se o dado é obrigatório");

                entity.Property(e => e.NmItem)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ITEM")
                    .HasComment("label do item que aparece no resultado");

                entity.Property(e => e.NrOrdem)
                    .HasColumnName("NR_ORDEM")
                    .HasComment("ordem que os campos aparecem na tela e que são impressos");

                entity.Property(e => e.NrRangeMax)
                    .HasColumnName("NR_RANGE_MAX")
                    .HasComment("range máximo para alertar o laboratório");

                entity.Property(e => e.NrRangeMin)
                    .HasColumnName("NR_RANGE_MIN")
                    .HasComment("range mínimo para alertar o laboratório");

                entity.Property(e => e.NrTamanho)
                    .HasColumnName("NR_TAMANHO")
                    .HasComment("tamanho dos campos, caso texto");

                entity.Property(e => e.TxCampoReferencia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_CAMPO_REFERENCIA");

                entity.Property(e => e.TxFormula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMULA")
                    .HasComment("quando o item é calculado");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.ExameItemColeta)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExameItemColeta_Exame");

                entity.HasOne(d => d.IdTabelaNavigation)
                    .WithMany(p => p.ExameItemColeta)
                    .HasForeignKey(d => d.IdTabela)
                    .HasConstraintName("FK_ExameItemColeta_TipoTabela");

                entity.HasOne(d => d.IdTipoResponsavelLancamentoNavigation)
                    .WithMany(p => p.ExameItemColetaIdTipoResponsavelLancamentoNavigation)
                    .HasForeignKey(d => d.IdTipoResponsavelLancamento)
                    .HasConstraintName("FK_ExameItemColeta_TipoDiversos_TIPO_RESPONSAVEL");

                entity.HasOne(d => d.IdTipoValorNavigation)
                    .WithMany(p => p.ExameItemColetaIdTipoValorNavigation)
                    .HasForeignKey(d => d.IdTipoValor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExameItemColeta_TipoDiversos");

                entity.HasOne(d => d.IdTipoValorAnteriorPorNavigation)
                    .WithMany(p => p.ExameItemColetaIdTipoValorAnteriorPorNavigation)
                    .HasForeignKey(d => d.IdTipoValorAnteriorPor)
                    .HasConstraintName("FK_ExameItemColeta_TipoDiversos_VALOR_ANTERIOR_POR");

                entity.HasOne(d => d.IdUnidadeNavigation)
                    .WithMany(p => p.ExameItemColetaIdUnidadeNavigation)
                    .HasForeignKey(d => d.IdUnidade)
                    .HasConstraintName("FK_ExameItemColeta_TipoDiversos1");
            });

            modelBuilder.Entity<ExameItemExame>(entity =>
            {
                entity.HasKey(e => new { e.IdExameMaterialMeioMetodo, e.IdItemExame });

                entity.ToTable("Exame_ItemExame");

                entity.Property(e => e.IdExameMaterialMeioMetodo).HasColumnName("ID_EXAME_MATERIAL_MEIO_METODO");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.IdUnidadePadraoTipo).HasColumnName("ID_UNIDADE_PADRAO_TIPO");

                entity.Property(e => e.InUsaValorReferencia).HasColumnName("IN_USA_VALOR_REFERENCIA");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxValorReferencia)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_REFERENCIA");

                entity.HasOne(d => d.IdExameMaterialMeioMetodoNavigation)
                    .WithMany(p => p.ExameItemExame)
                    .HasForeignKey(d => d.IdExameMaterialMeioMetodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_ItemExame_Exame_MaterialColeta");

                entity.HasOne(d => d.IdItemExameNavigation)
                    .WithMany(p => p.ExameItemExame)
                    .HasForeignKey(d => d.IdItemExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ItemExame_Exame_ItemExame_FK1");

                entity.HasOne(d => d.IdUnidadePadraoTipoNavigation)
                    .WithMany(p => p.ExameItemExame)
                    .HasForeignKey(d => d.IdUnidadePadraoTipo)
                    .HasConstraintName("TipoDiversos_Exame_ItemExame_FK1");
            });

            modelBuilder.Entity<ExameItemExameTipoTabela>(entity =>
            {
                entity.HasKey(e => new { e.IdExameMaterialMeioMetodo, e.IdItemExame, e.IdTipoTabela })
                    .HasName("ExameItemExame_TipoTabela_PK");

                entity.ToTable("ExameItemExame_TipoTabela");

                entity.Property(e => e.IdExameMaterialMeioMetodo).HasColumnName("ID_EXAME_MATERIAL_MEIO_METODO");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdTipoTabelaNavigation)
                    .WithMany(p => p.ExameItemExameTipoTabela)
                    .HasForeignKey(d => d.IdTipoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoTabela_ExameItemExame_TipoTabela_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ExameItemExameTipoTabela)
                    .HasForeignKey(d => new { d.IdExameMaterialMeioMetodo, d.IdItemExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exame_ItemExame_ExameItemExame_TipoTabela_FK1");
            });

            modelBuilder.Entity<ExameItemMaterial>(entity =>
            {
                entity.HasKey(e => e.IdExameItemMaterial);

                entity.HasIndex(e => new { e.IdExameMaterial, e.InAtivo }, "IX_ExameItemMaterial_ID_EXAME_MATERIAL_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdExameItemMaterial)
                    .HasColumnName("ID_EXAME_ITEM_MATERIAL")
                    .HasComment("identificador da relação entre exame_material e seus itens de resultado");

                entity.Property(e => e.IdExameMaterial)
                    .HasColumnName("ID_EXAME_MATERIAL")
                    .HasComment("identificador do exame junto ao material e método");

                entity.Property(e => e.IdTabela)
                    .HasColumnName("ID_TABELA")
                    .HasComment("quando o item tem valores predefinidos e utilizam a estrutura do tipodiversos, como cor de urina");

                entity.Property(e => e.IdTipoValor)
                    .HasColumnName("ID_TIPO_VALOR")
                    .HasComment("tipo do dado que será lançado");

                entity.Property(e => e.IdUnidade)
                    .HasColumnName("ID_UNIDADE")
                    .HasComment("unidade de medida, tipo tabela 137");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("excelusão lógica");

                entity.Property(e => e.InExibeLaudo)
                    .IsRequired()
                    .HasColumnName("in_exibe_laudo")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InObrigatorio)
                    .HasColumnName("IN_OBRIGATORIO")
                    .HasComment("se o dado é obrigatório");

                entity.Property(e => e.NmItem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ITEM")
                    .HasComment("label do item que aparece no resultado");

                entity.Property(e => e.NrOrdem)
                    .HasColumnName("NR_ORDEM")
                    .HasComment("ordem que os campos aparecem na tela e que são impressos");

                entity.Property(e => e.NrOrdemExp).HasColumnName("NR_ORDEM_EXP");

                entity.Property(e => e.NrRangeMax)
                    .HasColumnName("NR_RANGE_MAX")
                    .HasComment("range máximo para alertar o laboratório");

                entity.Property(e => e.NrRangeMin)
                    .HasColumnName("NR_RANGE_MIN")
                    .HasComment("range mínimo para alertar o laboratório");

                entity.Property(e => e.NrRangevermelhoMax)
                    .HasColumnName("NR_RANGEVERMELHO_MAX")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NrRangevermelhoMin)
                    .HasColumnName("NR_RANGEVERMELHO_MIN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NrTamanho)
                    .HasColumnName("NR_TAMANHO")
                    .HasComment("tamanho dos campos, caso texto");

                entity.Property(e => e.TxCampoReferencia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_CAMPO_REFERENCIA")
                    .HasComment("quando o item é % pode ter um valor absoluto referente a um campo ou fórmula");

                entity.Property(e => e.TxCodInterfaceamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COD_INTERFACEAMENTO");

                entity.Property(e => e.TxFormula)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMULA")
                    .HasComment("quando o item é calculado");

                entity.Property(e => e.TxGrupo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_GRUPO")
                    .HasComment("grupo de validação de dados, se existir um % dentro de um grupo, este deve totalizar 100%");

                entity.Property(e => e.TxRangeAmarelo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_RANGE_AMARELO")
                    .HasComment("range de segurança para alertar o laboratório (campos texto e tabela)");

                entity.Property(e => e.TxRangeVermelho)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_RANGE_VERMELHO")
                    .HasComment("range crítico para alertar o laboratório (campos texto e tabela)");

                entity.Property(e => e.TxReferencia)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_REFERENCIA")
                    .HasComment("valor de referência");

                entity.HasOne(d => d.IdTabelaNavigation)
                    .WithMany(p => p.ExameItemMaterial)
                    .HasForeignKey(d => d.IdTabela)
                    .HasConstraintName("FK_ExameItemMaterial_TipoTabela");

                entity.HasOne(d => d.IdTipoValorNavigation)
                    .WithMany(p => p.ExameItemMaterialIdTipoValorNavigation)
                    .HasForeignKey(d => d.IdTipoValor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExameItemMaterial_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeNavigation)
                    .WithMany(p => p.ExameItemMaterialIdUnidadeNavigation)
                    .HasForeignKey(d => d.IdUnidade)
                    .HasConstraintName("FK_ExameItemMaterial_TipoDiversos1");
            });

            modelBuilder.Entity<ExameItemMaterialPlanilha>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdExame, e.IdItemExame, e.IdMaterialTipo })
                    .HasName("ExameItemMaterial_Planilha_PK");

                entity.ToTable("ExameItemMaterial_Planilha");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.TxDescExame)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_EXAME");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.ExameItemMaterialPlanilha)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exame_ExameItemMaterial_Planilha_FK1");

                entity.HasOne(d => d.IdItemExameNavigation)
                    .WithMany(p => p.ExameItemMaterialPlanilha)
                    .HasForeignKey(d => d.IdItemExame)
                    .HasConstraintName("ItemExame_ExameItemMaterial_Planilha_FK1");

                entity.HasOne(d => d.IdMaterialTipoNavigation)
                    .WithMany(p => p.ExameItemMaterialPlanilha)
                    .HasForeignKey(d => d.IdMaterialTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ExameItemMaterial_Planilha_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ExameItemMaterialPlanilha)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_ExameItemMaterial_Planilha_FK1");
            });

            modelBuilder.Entity<ExameMaterialColeta>(entity =>
            {
                entity.HasKey(e => e.IdExameMaterialMeioMetodo);

                entity.ToTable("Exame_MaterialColeta");

                entity.Property(e => e.IdExameMaterialMeioMetodo).HasColumnName("ID_EXAME_MATERIAL_MEIO_METODO");

                entity.Property(e => e.IdEquipamento).HasColumnName("ID_EQUIPAMENTO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdMetodoTipo).HasColumnName("ID_METODO_TIPO");

                entity.Property(e => e.IdModeloLaudo).HasColumnName("ID_MODELO_LAUDO");

                entity.Property(e => e.InImprimeMapa).HasColumnName("IN_IMPRIME_MAPA");

                entity.Property(e => e.NrQuantidadeAmostra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_QUANTIDADE_AMOSTRA");

                entity.Property(e => e.NrVolumeColeta).HasColumnName("NR_VOLUME_COLETA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEquipamentoNavigation)
                    .WithMany(p => p.ExameMaterialColeta)
                    .HasForeignKey(d => d.IdEquipamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_MaterialColeta_TipoDiversos");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.ExameMaterialColeta)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exame_Exame_MaterialColeta_FK1");

                entity.HasOne(d => d.IdModeloLaudoNavigation)
                    .WithMany(p => p.ExameMaterialColeta)
                    .HasForeignKey(d => d.IdModeloLaudo)
                    .HasConstraintName("ModeloLaudo_Exame_MaterialColeta_FK1");
            });

            modelBuilder.Entity<ExameMaterialMetodoAnalisador>(entity =>
            {
                entity.HasKey(e => new { e.IdExameMaterialMeioMetodo, e.IdAnalisador })
                    .HasName("ExameMaterialMetodo_Analisador_PK");

                entity.ToTable("ExameMaterialMetodo_Analisador");

                entity.Property(e => e.IdExameMaterialMeioMetodo).HasColumnName("ID_EXAME_MATERIAL_MEIO_METODO");

                entity.Property(e => e.IdAnalisador).HasColumnName("ID_ANALISADOR");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdAnalisadorNavigation)
                    .WithMany(p => p.ExameMaterialMetodoAnalisador)
                    .HasForeignKey(d => d.IdAnalisador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Analisador_ExameMaterialMetodo_Analisador_FK1");

                entity.HasOne(d => d.IdExameMaterialMeioMetodoNavigation)
                    .WithMany(p => p.ExameMaterialMetodoAnalisador)
                    .HasForeignKey(d => d.IdExameMaterialMeioMetodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exame_MaterialColeta_ExameMaterialMetodo_Analisador_FK1");
            });

            modelBuilder.Entity<ExameMaterialMetodoMeioColeta>(entity =>
            {
                entity.HasKey(e => new { e.IdExameMaterialMeioMetodo, e.IdMeioColeta })
                    .HasName("ExameMaterialMetodo_MeioColeta_PK");

                entity.ToTable("ExameMaterialMetodo_MeioColeta");

                entity.Property(e => e.IdExameMaterialMeioMetodo).HasColumnName("ID_EXAME_MATERIAL_MEIO_METODO");

                entity.Property(e => e.IdMeioColeta).HasColumnName("ID_MEIO_COLETA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdExameMaterialMeioMetodoNavigation)
                    .WithMany(p => p.ExameMaterialMetodoMeioColeta)
                    .HasForeignKey(d => d.IdExameMaterialMeioMetodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exame_MaterialColeta_ExameMaterialMetodo_MeioColeta_FK1");

                entity.HasOne(d => d.IdMeioColetaNavigation)
                    .WithMany(p => p.ExameMaterialMetodoMeioColeta)
                    .HasForeignKey(d => d.IdMeioColeta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MeioColeta_ExameMaterialMetodo_MeioColeta_FK1");
            });

            modelBuilder.Entity<ExamePessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdExame, e.IdPessoaEntidade });

                entity.ToTable("Exame_PessoaEntidade");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.ExamePessoaEntidade)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_PessoaEntidade_Exame");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.ExamePessoaEntidade)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Exame_PessoaEntidade_PessoaEntidade");
            });

            modelBuilder.Entity<ExamePrioridade>(entity =>
            {
                entity.HasKey(e => new { e.IdPrioridadeTipo, e.IdUnidadeOrganizacionalAbertura, e.IdGrupo, e.IdHorarioLaboratorio })
                    .HasName("ExamePrioridade_PK");

                entity.Property(e => e.IdPrioridadeTipo).HasColumnName("ID_PRIORIDADE_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacionalAbertura).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_ABERTURA");

                entity.Property(e => e.IdGrupo).HasColumnName("ID_GRUPO");

                entity.Property(e => e.IdHorarioLaboratorio)
                    .HasColumnName("ID_HORARIO_LABORATORIO")
                    .HasDefaultValueSql("(2)");

                entity.Property(e => e.IdFluxo).HasColumnName("ID_FLUXO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFluxoNavigation)
                    .WithMany(p => p.ExamePrioridade)
                    .HasForeignKey(d => d.IdFluxo)
                    .HasConstraintName("Fluxo_ExamePrioridade_FK1");

                entity.HasOne(d => d.IdGrupoNavigation)
                    .WithMany(p => p.ExamePrioridade)
                    .HasForeignKey(d => d.IdGrupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GrupoExame_ExamePrioridade_FK1");

                entity.HasOne(d => d.IdHorarioLaboratorioNavigation)
                    .WithMany(p => p.ExamePrioridade)
                    .HasForeignKey(d => d.IdHorarioLaboratorio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExamePrioridade_HorarioLaboratorio");

                entity.HasOne(d => d.IdPrioridadeTipoNavigation)
                    .WithMany(p => p.ExamePrioridade)
                    .HasForeignKey(d => d.IdPrioridadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ExamePrioridade_FK1");
            });

            modelBuilder.Entity<ExameServico>(entity =>
            {
                entity.HasKey(e => e.IdExameServico)
                    .HasName("PK_EXAME_SERVICO");

                entity.ToTable("Exame_Servico");

                entity.HasIndex(e => new { e.IdExame, e.IdServico, e.IdOperadora }, "Exame_Servico_ID_EXAME_ID_SERVICO_ID_OPERADORA")
                    .IsUnique()
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdExame, e.InAtivo, e.IdOperadora }, "IX_Exame_Servico_ID_EXAME_IN_ATIVO_ID_OPERADORA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdOperadora, "IX_Exame_Servico_ID_OPERADORA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdExameServico)
                    .HasColumnName("ID_EXAME_SERVICO")
                    .HasComment("identificador único do relacionamento entre exames e serviços");

                entity.Property(e => e.IdExame)
                    .HasColumnName("ID_EXAME")
                    .HasComment("identificador do exame");

                entity.Property(e => e.IdOperadora)
                    .HasColumnName("ID_OPERADORA")
                    .HasComment("identificador da operadora");

                entity.Property(e => e.IdServico)
                    .HasColumnName("ID_SERVICO")
                    .HasComment("identificador do serviço que cairá na conta");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.ExameServico)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EXAME_SERVICO_Exame");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ExameServico)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_Exame_Servico_Pessoa");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ExameServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EXAME_SERVICO_Servico");
            });

            modelBuilder.Entity<ExameTempoLiberacao>(entity =>
            {
                entity.HasKey(e => e.IdExameTempoLiberacao);

                entity.Property(e => e.IdExameTempoLiberacao).HasColumnName("ID_EXAME_TEMPO_LIBERACAO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrMinutosEmergencial).HasColumnName("NR_MINUTOS_EMERGENCIAL");

                entity.Property(e => e.NrMinutosNormalCti).HasColumnName("NR_MINUTOS_NORMAL_CTI");

                entity.Property(e => e.NrMinutosNormalInternacao).HasColumnName("NR_MINUTOS_NORMAL_INTERNACAO");

                entity.Property(e => e.NrMinutosNormalRotina).HasColumnName("NR_MINUTOS_NORMAL_ROTINA");

                entity.Property(e => e.NrMinutosUrgente).HasColumnName("NR_MINUTOS_URGENTE");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.ExameTempoLiberacao)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExameTempoLiberacao_Exame");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ExameTempoLiberacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExameTempoLiberacao_Usuario");
            });

            modelBuilder.Entity<ExameTempoLiberacaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdExameTempoLiberacaoHistorico);

                entity.Property(e => e.IdExameTempoLiberacaoHistorico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_EXAME_TEMPO_LIBERACAO_HISTORICO");

                entity.Property(e => e.DtExameTempoLiberacaoHistoricoUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXAME_TEMPO_LIBERACAO_HISTORICO_UTC");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdExameTempoLiberacao).HasColumnName("ID_EXAME_TEMPO_LIBERACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrMinutosEmergencial).HasColumnName("NR_MINUTOS_EMERGENCIAL");

                entity.Property(e => e.NrMinutosNormalCti).HasColumnName("NR_MINUTOS_NORMAL_CTI");

                entity.Property(e => e.NrMinutosNormalInternacao).HasColumnName("NR_MINUTOS_NORMAL_INTERNACAO");

                entity.Property(e => e.NrMinutosNormalRotina).HasColumnName("NR_MINUTOS_NORMAL_ROTINA");

                entity.Property(e => e.NrMinutosUrgente).HasColumnName("NR_MINUTOS_URGENTE");
            });

            modelBuilder.Entity<ExamesAnteriores>(entity =>
            {
                entity.HasKey(e => e.IdExamesAnteriores);

                entity.Property(e => e.IdExamesAnteriores).HasColumnName("ID_EXAMES_ANTERIORES");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.NmExame)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_EXAME");

                entity.Property(e => e.NrQuantidade).HasColumnName("NR_QUANTIDADE");

                entity.Property(e => e.TxMaterial)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_MATERIAL");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ExamesAnteriores)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExamesAnteriores_Atendimento");
            });

            modelBuilder.Entity<ExcecaoServicoCompatibilidade>(entity =>
            {
                entity.HasKey(e => e.IdRestricao);

                entity.Property(e => e.IdRestricao)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_RESTRICAO");

                entity.Property(e => e.IdCompatibilidadeTipo).HasColumnName("ID_COMPATIBILIDADE_TIPO");

                entity.Property(e => e.IdInstrRegistroCompTipo).HasColumnName("ID_INSTR_REGISTRO_COMP_TIPO");

                entity.Property(e => e.IdInstrRegistroPrincTipo).HasColumnName("ID_INSTR_REGISTRO_PRINC_TIPO");

                entity.Property(e => e.IdServicoCompativel).HasColumnName("ID_SERVICO_COMPATIVEL");

                entity.Property(e => e.IdServicoPrincipal).HasColumnName("ID_SERVICO_PRINCIPAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdCompatibilidadeTipoNavigation)
                    .WithMany(p => p.ExcecaoServicoCompatibilidadeIdCompatibilidadeTipoNavigation)
                    .HasForeignKey(d => d.IdCompatibilidadeTipo)
                    .HasConstraintName("FK_ExcecaoServicoCompatibilidade_TipoDiversos2");

                entity.HasOne(d => d.IdInstrRegistroCompTipoNavigation)
                    .WithMany(p => p.ExcecaoServicoCompatibilidadeIdInstrRegistroCompTipoNavigation)
                    .HasForeignKey(d => d.IdInstrRegistroCompTipo)
                    .HasConstraintName("FK_ExcecaoServicoCompatibilidade_TipoDiversos1");

                entity.HasOne(d => d.IdInstrRegistroPrincTipoNavigation)
                    .WithMany(p => p.ExcecaoServicoCompatibilidadeIdInstrRegistroPrincTipoNavigation)
                    .HasForeignKey(d => d.IdInstrRegistroPrincTipo)
                    .HasConstraintName("FK_ExcecaoServicoCompatibilidade_TipoDiversos");

                entity.HasOne(d => d.IdServicoCompativelNavigation)
                    .WithMany(p => p.ExcecaoServicoCompatibilidadeIdServicoCompativelNavigation)
                    .HasForeignKey(d => d.IdServicoCompativel)
                    .HasConstraintName("FK_ExcecaoServicoCompatibilidade_Servico1");

                entity.HasOne(d => d.IdServicoPrincipalNavigation)
                    .WithMany(p => p.ExcecaoServicoCompatibilidadeIdServicoPrincipalNavigation)
                    .HasForeignKey(d => d.IdServicoPrincipal)
                    .HasConstraintName("FK_ExcecaoServicoCompatibilidade_Servico");
            });

            modelBuilder.Entity<Fabricante>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Fabricante");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdInscricaoEstadual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_ESTADUAL");

                entity.Property(e => e.CdInscricaoMunicipal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_MUNICIPAL");

                entity.Property(e => e.DtInicioAtividade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_INICIO_ATIVIDADE");

                entity.Property(e => e.IdEmpresaTipo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EMPRESA_TIPO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdImpostoRendaRetido)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_IMPOSTO_RENDA_RETIDO");

                entity.Property(e => e.IdRamoAtividade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_RAMO_ATIVIDADE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmFabricante)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL");

                entity.Property(e => e.TxSite)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITE");
            });

            modelBuilder.Entity<FaixaEtaria>(entity =>
            {
                entity.HasKey(e => e.IdFaixaEtaria)
                    .HasName("FaixaEtaria_PK");

                entity.Property(e => e.IdFaixaEtaria).HasColumnName("ID_FAIXA_ETARIA");

                entity.Property(e => e.IdGrupoFaixaEtaria).HasColumnName("ID_GRUPO_FAIXA_ETARIA");

                entity.Property(e => e.NmFaixaEtaria)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_FAIXA_ETARIA");

                entity.Property(e => e.NrIdadeMaxima).HasColumnName("NR_IDADE_MAXIMA");

                entity.Property(e => e.NrIdadeMinima).HasColumnName("NR_IDADE_MINIMA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdGrupoFaixaEtariaNavigation)
                    .WithMany(p => p.FaixaEtaria)
                    .HasForeignKey(d => d.IdGrupoFaixaEtaria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GrupoFaixaEtaria_FaixaEtaria_FK1");
            });

            modelBuilder.Entity<FaltaLancamento>(entity =>
            {
                entity.HasKey(e => e.IdFaltaLancamento)
                    .HasName("FaltaLancamento_PK");

                entity.Property(e => e.IdFaltaLancamento).HasColumnName("ID_FALTA_LANCAMENTO");

                entity.Property(e => e.DtFaltaLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FALTA_LANCAMENTO");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmColaboradorMedico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_COLABORADOR_MEDICO")
                    .IsFixedLength(true);

                entity.Property(e => e.QtFaltante).HasColumnName("QT_FALTANTE");

                entity.Property(e => e.TxObs)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS")
                    .IsFixedLength(true);

                entity.Property(e => e.VlFaltante).HasColumnName("VL_FALTANTE");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.FaltaLancamento)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("ProdutoDetalhe_FaltaLancamento_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.FaltaLancamento)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_FaltaLancamento_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.FaltaLancamento)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_FaltaLancamento_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FaltaLancamento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_FaltaLancamento_FK1");
            });

            modelBuilder.Entity<Farmaceutico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Farmaceutico");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<FatoFaturamentoTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FATO_FATURAMENTO_TESTE");

                entity.Property(e => e.Ano).HasColumnName("ANO");

                entity.Property(e => e.DtFechamentoConta)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DT_FECHAMENTO_CONTA");

                entity.Property(e => e.DtwrAltaMedica)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DTWR_ALTA_MEDICA");

                entity.Property(e => e.DtwrFaturamento)
                    .HasColumnType("date")
                    .HasColumnName("DTWR_FATURAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdBairro).HasColumnName("ID_BAIRRO");

                entity.Property(e => e.IdCid).HasColumnName("ID_CID");

                entity.Property(e => e.IdCidade).HasColumnName("ID_CIDADE");

                entity.Property(e => e.IdClassificacaoFaturamento).HasColumnName("ID_CLASSIFICACAO_FATURAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEspecialidadeAlta).HasColumnName("ID_ESPECIALIDADE_ALTA");

                entity.Property(e => e.IdEspecialidadeCirurgia).HasColumnName("ID_ESPECIALIDADE_CIRURGIA");

                entity.Property(e => e.IdEspecialidadeEntrada).HasColumnName("ID_ESPECIALIDADE_ENTRADA");

                entity.Property(e => e.IdEspecialidadeSolicitante).HasColumnName("ID_ESPECIALIDADE_SOLICITANTE");

                entity.Property(e => e.IdFaixaEtaria).HasColumnName("ID_FAIXA_ETARIA");

                entity.Property(e => e.IdGrupoOperadora)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_GRUPO_OPERADORA");

                entity.Property(e => e.IdInternoExterno).HasColumnName("ID_INTERNO_EXTERNO");

                entity.Property(e => e.IdMedicoAlta).HasColumnName("ID_MEDICO_ALTA");

                entity.Property(e => e.IdMedicoCirurgia).HasColumnName("ID_MEDICO_CIRURGIA");

                entity.Property(e => e.IdMedicoEntrada).HasColumnName("ID_MEDICO_ENTRADA");

                entity.Property(e => e.IdMedicoSolicitante).HasColumnName("ID_MEDICO_SOLICITANTE");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdOperadoraTipo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OPERADORA_TIPO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdParticular).HasColumnName("ID_PARTICULAR");

                entity.Property(e => e.IdPessoaLocalidade).HasColumnName("ID_PESSOA_LOCALIDADE");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.IdSexo).HasColumnName("ID_SEXO");

                entity.Property(e => e.IdTipoSetorAtendimento).HasColumnName("ID_TIPO_SETOR_ATENDIMENTO");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.IdUnidadeAtendimento).HasColumnName("ID_UNIDADE_ATENDIMENTO");

                entity.Property(e => e.IdUnidadeOrganizacionalFaturamento).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_FATURAMENTO");

                entity.Property(e => e.InAtendimentoCirurgico).HasColumnName("IN_ATENDIMENTO_CIRURGICO");

                entity.Property(e => e.InPa).HasColumnName("IN_PA");

                entity.Property(e => e.Mes).HasColumnName("MES");

                entity.Property(e => e.PermanenciaTotal).HasColumnName("PERMANENCIA_TOTAL");

                entity.Property(e => e.PermanenciaUi).HasColumnName("PERMANENCIA_UI");

                entity.Property(e => e.PermanenciaUti).HasColumnName("PERMANENCIA_UTI");

                entity.Property(e => e.VlFaturado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlFaturamentoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FATURAMENTO_ACRESCIMO");

                entity.Property(e => e.VlFaturamentoIndevido)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FATURAMENTO_INDEVIDO");

                entity.Property(e => e.VlFaturamentoLiquido)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FATURAMENTO_LIQUIDO");

                entity.Property(e => e.VlGlosado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_GLOSADO");
            });

            modelBuilder.Entity<FaturaFinanceira>(entity =>
            {
                entity.HasKey(e => e.IdFaturafinanceira)
                    .HasName("FaturaFinanceira_PK");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtPreparacaoFinalizada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREPARACAO_FINALIZADA");

                entity.Property(e => e.DtReferencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REFERENCIA");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdTipoFatura).HasColumnName("ID_TIPO_FATURA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioFinalizacao).HasColumnName("ID_USUARIO_FINALIZACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InGeraTributo).HasColumnName("IN_GERA_TRIBUTO");

                entity.Property(e => e.InPagar)
                    .IsRequired()
                    .HasColumnName("IN_PAGAR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrDiaFixoVencimentoParcelas).HasColumnName("NR_DIA_FIXO_VENCIMENTO_PARCELAS");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.TxIdentificacao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICACAO");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimoGeral)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO_GERAL");

                entity.Property(e => e.VlDescontoGeral)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO_GERAL");

                entity.Property(e => e.VlFaturafinanceira)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FATURAFINANCEIRA");

                entity.Property(e => e.VlTotalAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_ACRESCIMOS");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.Property(e => e.VlTotalDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_DESCONTOS");

                entity.Property(e => e.VlTotalPendente)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_PENDENTE");

                entity.HasOne(d => d.IdCondicaoPagamentoNavigation)
                    .WithMany(p => p.FaturaFinanceira)
                    .HasForeignKey(d => d.IdCondicaoPagamento);

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.FaturaFinanceira)
                    .HasForeignKey(d => d.IdPessoa);

                entity.HasOne(d => d.IdTipoDocumentoNavigation)
                    .WithMany(p => p.FaturaFinanceira)
                    .HasForeignKey(d => d.IdTipoDocumento);

                entity.HasOne(d => d.IdTipoFaturaNavigation)
                    .WithMany(p => p.FaturaFinanceira)
                    .HasForeignKey(d => d.IdTipoFatura)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FaturaFinanceiraIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioFinalizacaoNavigation)
                    .WithMany(p => p.FaturaFinanceiraIdUsuarioFinalizacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioFinalizacao);
            });

            modelBuilder.Entity<FaturaFinanceiraLog>(entity =>
            {
                entity.HasKey(e => e.IdFaturafinanceiraLog);

                entity.ToTable("FaturaFinanceira_Log");

                entity.Property(e => e.IdFaturafinanceiraLog).HasColumnName("ID_FATURAFINANCEIRA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtPreparacaoFinalizada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREPARACAO_FINALIZADA");

                entity.Property(e => e.DtReferencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REFERENCIA");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdTipoFatura).HasColumnName("ID_TIPO_FATURA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioFinalizacao).HasColumnName("ID_USUARIO_FINALIZACAO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InGeraTributo).HasColumnName("IN_GERA_TRIBUTO");

                entity.Property(e => e.InPagar).HasColumnName("IN_PAGAR");

                entity.Property(e => e.NrDiaFixoVencimentoParcelas).HasColumnName("NR_DIA_FIXO_VENCIMENTO_PARCELAS");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.TxIdentificacao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICACAO");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimoGeral)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO_GERAL");

                entity.Property(e => e.VlDescontoGeral)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO_GERAL");

                entity.Property(e => e.VlFaturafinanceira)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FATURAFINANCEIRA");

                entity.Property(e => e.VlTotalAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_ACRESCIMOS");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.Property(e => e.VlTotalDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_DESCONTOS");

                entity.Property(e => e.VlTotalPendente)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_PENDENTE");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.FaturaFinanceiraLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<FaturamentoBaixaGrupo>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentobaixagrupo)
                    .HasName("FaturamentoBaixaGrupo_PK");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdTipoBaixa).HasColumnName("ID_TIPO_BAIXA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.VlTotalAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_ACRESCIMOS");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.Property(e => e.VlTotalDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_DESCONTO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.FaturamentoBaixaGrupo)
                    .HasForeignKey(d => d.IdConta);

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.FaturamentoBaixaGrupo)
                    .HasForeignKey(d => d.IdLancamentoBancario);

                entity.HasOne(d => d.IdTipoBaixaNavigation)
                    .WithMany(p => p.FaturamentoBaixaGrupo)
                    .HasForeignKey(d => d.IdTipoBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FaturamentoBaixaGrupo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaReceber)
                    .WithMany(p => p.FaturamentoBaixaGrupo)
                    .HasForeignKey(d => new { d.IdContaReceber, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoBaixaGrupo_ParcelaContaReceber_ID_CR_NR_PARC");
            });

            modelBuilder.Entity<FaturamentoBaixaGrupoLog>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentobaixagrupoLog);

                entity.ToTable("FaturamentoBaixaGrupo_Log");

                entity.Property(e => e.IdFaturamentobaixagrupoLog).HasColumnName("ID_FATURAMENTOBAIXAGRUPO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdTipoBaixa).HasColumnName("ID_TIPO_BAIXA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.VlTotalAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_ACRESCIMOS");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.FaturamentoBaixaGrupoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<FaturamentoConta>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentoConta)
                    .HasName("FaturamentoConta_PK");

                entity.HasIndex(e => e.IdOperadora, "IX_FaturamentoConta")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdFaturamentoConta).HasColumnName("ID_FATURAMENTO_CONTA");

                entity.Property(e => e.CdCooperativaOperadora)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CD_COOPERATIVA_OPERADORA");

                entity.Property(e => e.CdHospitalOperadora)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_HOSPITAL_OPERADORA");

                entity.Property(e => e.CdUnificadoOperadora)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIFICADO_OPERADORA");

                entity.Property(e => e.DtEnvioFatura).HasColumnName("DT_ENVIO_FATURA");

                entity.Property(e => e.IdCidExternoPadrao).HasColumnName("ID_CID_EXTERNO_PADRAO");

                entity.Property(e => e.IdCobrancaTipo).HasColumnName("ID_COBRANCA_TIPO");

                entity.Property(e => e.IdCodificacaoFaturamentoDiariasetaxas)
                    .HasColumnName("ID_CODIFICACAO_FATURAMENTO_DIARIASETAXAS")
                    .HasDefaultValueSql("((4555))");

                entity.Property(e => e.IdCodificacaoFaturamentoProcedimento)
                    .HasColumnName("ID_CODIFICACAO_FATURAMENTO_PROCEDIMENTO")
                    .HasDefaultValueSql("((4555))");

                entity.Property(e => e.IdCompetencia)
                    .HasColumnName("ID_COMPETENCIA")
                    .HasDefaultValueSql("((44178))");

                entity.Property(e => e.IdCronogramaRecebimentoConta).HasColumnName("ID_CRONOGRAMA_RECEBIMENTO_CONTA");

                entity.Property(e => e.IdDiaMesTipo)
                    .HasColumnName("ID_DIA_MES_TIPO")
                    .HasDefaultValueSql("((4828))");

                entity.Property(e => e.IdDiaMesTipoRecebimento)
                    .HasColumnName("ID_DIA_MES_TIPO_RECEBIMENTO")
                    .HasDefaultValueSql("((4828))");

                entity.Property(e => e.IdIdentificadorOperadoraTipo).HasColumnName("ID_IDENTIFICADOR_OPERADORA_TIPO");

                entity.Property(e => e.IdIdentificadorTabelaProdutoTipo).HasColumnName("ID_IDENTIFICADOR_TABELA_PRODUTO_TIPO");

                entity.Property(e => e.IdIndicadorEconomicoTipo).HasColumnName("ID_INDICADOR_ECONOMICO_TIPO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPeriodicidadeConta).HasColumnName("ID_PERIODICIDADE_CONTA");

                entity.Property(e => e.IdPeriodicidadeContaParcial).HasColumnName("ID_PERIODICIDADE_CONTA_PARCIAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCidObrigatorioEntradaExterno).HasColumnName("IN_CID_OBRIGATORIO_ENTRADA_EXTERNO");

                entity.Property(e => e.InCidObrigatorioEntradaInterno).HasColumnName("IN_CID_OBRIGATORIO_ENTRADA_INTERNO");

                entity.Property(e => e.InCidObrigatorioSaidaExterno).HasColumnName("IN_CID_OBRIGATORIO_SAIDA_EXTERNO");

                entity.Property(e => e.InCidObrigatorioSaidaInterno).HasColumnName("IN_CID_OBRIGATORIO_SAIDA_INTERNO");

                entity.Property(e => e.InCns).HasColumnName("IN_CNS");

                entity.Property(e => e.InContaMeioMagnetico).HasColumnName("IN_CONTA_MEIO_MAGNETICO");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InFaturada)
                    .IsRequired()
                    .HasColumnName("IN_FATURADA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InFaturarProcedimentosZerados)
                    .HasColumnName("IN_FATURAR_PROCEDIMENTOS_ZERADOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InHonorarioAnestesistaCooperativa).HasColumnName("IN_HONORARIO_ANESTESISTA_COOPERATIVA");

                entity.Property(e => e.InHonorárioCooperativa).HasColumnName("IN_HONORÁRIO_COOPERATIVA");

                entity.Property(e => e.InInterno).HasColumnName("IN_INTERNO");

                entity.Property(e => e.InPadrãoTiss).HasColumnName("IN_PADRÃO_TISS");

                entity.Property(e => e.InPermiteProcedimentoNaoCobertoGuia)
                    .IsRequired()
                    .HasColumnName("IN_PERMITE_PROCEDIMENTO_NAO_COBERTO_GUIA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InPrevisaoRecebimento).HasColumnName("IN_PREVISAO_RECEBIMENTO");

                entity.Property(e => e.NrCnpjTerceiro)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NR_CNPJ_TERCEIRO");

                entity.Property(e => e.NrDiaEntrega).HasColumnName("NR_DIA_ENTREGA");

                entity.Property(e => e.NrTamanhoMatricula).HasColumnName("NR_TAMANHO_MATRICULA");

                entity.Property(e => e.NrTamanhoMatriculaMax).HasColumnName("NR_TAMANHO_MATRICULA_MAX");

                entity.Property(e => e.NrTamanhoNumeroGuia).HasColumnName("NR_TAMANHO_NUMERO_GUIA");

                entity.Property(e => e.NrTamanhoNumeroGuiaMax).HasColumnName("NR_TAMANHO_NUMERO_GUIA_MAX");

                entity.Property(e => e.NrTamanhoSenhaGuia).HasColumnName("NR_TAMANHO_SENHA_GUIA");

                entity.Property(e => e.NrTamanhoSenhaGuiaMax).HasColumnName("NR_TAMANHO_SENHA_GUIA_MAX");

                entity.Property(e => e.PrIssGeral)
                    .HasColumnName("PR_ISS_GERAL")
                    .HasDefaultValueSql("((3.00))");

                entity.Property(e => e.PrJurosAtraso).HasColumnName("PR_JUROS_ATRASO");

                entity.Property(e => e.PrMultaAtraso).HasColumnName("PR_MULTA_ATRASO");

                entity.Property(e => e.QnContaMaximoLote)
                    .HasColumnName("QN_CONTA_MAXIMO_LOTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnContaMinimoLote).HasColumnName("QN_CONTA_MINIMO_LOTE");

                entity.Property(e => e.QnMaximaDiaRetornoAmbulatorio).HasColumnName("QN_MAXIMA_DIA_RETORNO_AMBULATORIO");

                entity.Property(e => e.QnMaximaHoraRetornoProntoAtendimento).HasColumnName("QN_MAXIMA_HORA_RETORNO_PRONTO_ATENDIMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacoesContrato)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES_CONTRATO");

                entity.Property(e => e.VlCotaAgendamentoMensal)
                    .HasColumnName("VL_COTA_AGENDAMENTO_MENSAL")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdCobrancaTipoNavigation)
                    .WithMany(p => p.FaturamentoContaIdCobrancaTipoNavigation)
                    .HasForeignKey(d => d.IdCobrancaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_FaturamentoConta_FK3");

                entity.HasOne(d => d.IdCodificacaoFaturamentoDiariasetaxasNavigation)
                    .WithMany(p => p.FaturamentoContaIdCodificacaoFaturamentoDiariasetaxasNavigation)
                    .HasForeignKey(d => d.IdCodificacaoFaturamentoDiariasetaxas)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoConta_TipoDiversos1");

                entity.HasOne(d => d.IdCodificacaoFaturamentoProcedimentoNavigation)
                    .WithMany(p => p.FaturamentoContaIdCodificacaoFaturamentoProcedimentoNavigation)
                    .HasForeignKey(d => d.IdCodificacaoFaturamentoProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_faturamentoconta_tipodiversos");

                entity.HasOne(d => d.IdCronogramaRecebimentoContaNavigation)
                    .WithMany(p => p.FaturamentoConta)
                    .HasForeignKey(d => d.IdCronogramaRecebimentoConta)
                    .HasConstraintName("CronogramaRecebimentoConta_FaturamentoConta_FK1");

                entity.HasOne(d => d.IdDiaMesTipoNavigation)
                    .WithMany(p => p.FaturamentoContaIdDiaMesTipoNavigation)
                    .HasForeignKey(d => d.IdDiaMesTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_FaturamentoConta_FK5");

                entity.HasOne(d => d.IdDiaMesTipoRecebimentoNavigation)
                    .WithMany(p => p.FaturamentoContaIdDiaMesTipoRecebimentoNavigation)
                    .HasForeignKey(d => d.IdDiaMesTipoRecebimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_FaturamentoConta_FK6");

                entity.HasOne(d => d.IdIndicadorEconomicoTipoNavigation)
                    .WithMany(p => p.FaturamentoContaIdIndicadorEconomicoTipoNavigation)
                    .HasForeignKey(d => d.IdIndicadorEconomicoTipo)
                    .HasConstraintName("TipoDiversos_FaturamentoConta_FK4");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.FaturamentoConta)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_FaturamentoConta_FK1");

                entity.HasOne(d => d.IdPeriodicidadeContaNavigation)
                    .WithMany(p => p.FaturamentoContaIdPeriodicidadeContaNavigation)
                    .HasForeignKey(d => d.IdPeriodicidadeConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_FaturamentoConta_FK1");

                entity.HasOne(d => d.IdPeriodicidadeContaParcialNavigation)
                    .WithMany(p => p.FaturamentoContaIdPeriodicidadeContaParcialNavigation)
                    .HasForeignKey(d => d.IdPeriodicidadeContaParcial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_FaturamentoConta_FK2");
            });

            modelBuilder.Entity<FaturamentoContaTipo>(entity =>
            {
                entity.HasKey(e => e.IdOperadora)
                    .HasName("FaturamentoContaTipo_FK");

                entity.Property(e => e.IdOperadora)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InFaturada).HasColumnName("IN_FATURADA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithOne(p => p.FaturamentoContaTipo)
                    .HasForeignKey<FaturamentoContaTipo>(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_FaturamentoContaTipo_FK");
            });

            modelBuilder.Entity<FaturamentoContaTiss>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentoContaTiss);

                entity.ToTable("FaturamentoConta_Tiss");

                entity.Property(e => e.IdFaturamentoContaTiss).HasColumnName("ID_FATURAMENTO_CONTA_TISS");

                entity.Property(e => e.CdCodigoMaterialGenerico)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_CODIGO_MATERIAL_GENERICO");

                entity.Property(e => e.CdCodigoMedicamentoGenerico)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_CODIGO_MEDICAMENTO_GENERICO");

                entity.Property(e => e.CdCodigoOpmeGenerico)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_CODIGO_OPME_GENERICO");

                entity.Property(e => e.CdMaterial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_MATERIAL");

                entity.Property(e => e.CdMedicamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_MEDICAMENTO");

                entity.Property(e => e.CdOpm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPM");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipoTabelaTissPacote).HasColumnName("ID_TIPO_TABELA_TISS_PACOTE");

                entity.Property(e => e.NrGuiaOperadoraXml)
                    .HasColumnName("NR_GUIA_OPERADORA_XML")
                    .HasDefaultValueSql("((9669))");

                entity.Property(e => e.NrGuiaPrestadorGuiaimpressa)
                    .HasColumnName("NR_GUIA_PRESTADOR_GUIAIMPRESSA")
                    .HasDefaultValueSql("((9669))");

                entity.Property(e => e.NrGuiaPrestadorXml)
                    .HasColumnName("NR_GUIA_PRESTADOR_XML")
                    .HasDefaultValueSql("((9670))");

                entity.Property(e => e.NrQuantidadeCaractere).HasColumnName("NR_QUANTIDADE_CARACTERE");

                entity.Property(e => e.QnCaractereMaterial).HasColumnName("QN_CARACTERE_MATERIAL");

                entity.Property(e => e.QnCaractereMedicamento).HasColumnName("QN_CARACTERE_MEDICAMENTO");

                entity.Property(e => e.QnCaractereOpm).HasColumnName("QN_CARACTERE_OPM");

                entity.Property(e => e.TxCaractere)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TX_CARACTERE");

                entity.Property(e => e.TxMaterial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_MATERIAL");

                entity.Property(e => e.TxMedicamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_MEDICAMENTO");

                entity.Property(e => e.TxOpm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_OPM");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.FaturamentoContaTiss)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoConta_Tiss_Pessoa");

                entity.HasOne(d => d.IdTipoTabelaTissPacoteNavigation)
                    .WithMany(p => p.FaturamentoContaTiss)
                    .HasForeignKey(d => d.IdTipoTabelaTissPacote)
                    .HasConstraintName("FK_FaturamentoConta_Tiss_TipoDiverso");
            });

            modelBuilder.Entity<FaturamentoContasDiarioReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Faturamento_Contas_Diario_Report");

                entity.Property(e => e.DataFaturamento)
                    .HasColumnType("datetime")
                    .HasColumnName("Data_Faturamento");

                entity.Property(e => e.TipoConta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Conta");

                entity.Property(e => e.Valor).HasColumnType("decimal(13, 5)");
            });

            modelBuilder.Entity<FaturamentoContasHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdFaturamentoConta, e.DtOcorrencia })
                    .HasName("FaturmanetoContas_Historico_PK");

                entity.ToTable("FaturamentoContas_Historico");

                entity.Property(e => e.IdFaturamentoConta).HasColumnName("ID_FATURAMENTO_CONTA");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InInsercao).HasColumnName("IN_INSERCAO");

                entity.HasOne(d => d.IdFaturamentoContaNavigation)
                    .WithMany(p => p.FaturamentoContasHistorico)
                    .HasForeignKey(d => d.IdFaturamentoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FaturamentoConta_FaturmanetoContas_Historico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FaturamentoContasHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_FaturmanetoContas_Historico_FK1");
            });

            modelBuilder.Entity<FaturamentoContasParadasDiarioReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Faturamento_Contas_Paradas_Diario_Report");

                entity.Property(e => e.DataFaturamento)
                    .HasColumnType("datetime")
                    .HasColumnName("Data_Faturamento");

                entity.Property(e => e.Valor).HasColumnType("decimal(13, 5)");
            });

            modelBuilder.Entity<FaturamentoDiarioReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Faturamento_Diario_Report");

                entity.Property(e => e.DataFaturamento)
                    .HasColumnType("datetime")
                    .HasColumnName("Data_Faturamento");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.VlFaturado)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_FATURADO");
            });

            modelBuilder.Entity<FaturamentoIndevido>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtFaturamentoIndevido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FATURAMENTO_INDEVIDO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdJustificativa)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdMovimentacaocontaparcelabaixada).HasColumnName("ID_MOVIMENTACAOCONTAPARCELABAIXADA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacionalAuditoria).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_AUDITORIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.InPreparandoContaLimpa).HasColumnName("IN_PREPARANDO_CONTA_LIMPA");

                entity.Property(e => e.QnFi).HasColumnName("QN_FI");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.HasOne(d => d.IdFaturamentobaixagrupoNavigation)
                    .WithMany(p => p.FaturamentoIndevido)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupo);

                entity.HasOne(d => d.IdJustificativaNavigation)
                    .WithMany(p => p.FaturamentoIndevido)
                    .HasForeignKey(d => d.IdJustificativa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoIndevido_JustificativaGlosaFI");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FaturamentoIndevido)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_FaturamentoIndevido_FK1");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.FaturamentoIndevido)
                    .HasForeignKey<FaturamentoIndevido>(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FaturamentoIndevido_FechamentoItem");
            });

            modelBuilder.Entity<FaturamentoIndevidoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentoindevidoHistorico);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_FaturamentoIndevidoHistorico_ID_CONTA_ID_FECHAMENTO_ITEM")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdFaturamentoindevidoHistorico).HasColumnName("ID_FATURAMENTOINDEVIDO_HISTORICO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtFaturamentoIndevido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FATURAMENTO_INDEVIDO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativa)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacionalAuditoria).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_AUDITORIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.InPreparandoContaLimpa).HasColumnName("IN_PREPARANDO_CONTA_LIMPA");

                entity.Property(e => e.QnFi).HasColumnName("QN_FI");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FaturamentoIndevidoHistoricoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_FaturamentoIndevidoHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.FaturamentoIndevidoHistoricoIdUsuarioOperacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("Usuario_FaturamentoIndevidoHistorico_FK2");
            });

            modelBuilder.Entity<FaturamentoPerda>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentoperda)
                    .HasName("FaturamentoPerda_PK");

                entity.Property(e => e.IdFaturamentoperda).HasColumnName("ID_FATURAMENTOPERDA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdFaturamentobaixagrupoEstorno).HasColumnName("ID_FATURAMENTOBAIXAGRUPO_ESTORNO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdTipoPerda).HasColumnName("ID_TIPO_PERDA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InCancelada).HasColumnName("IN_CANCELADA");

                entity.Property(e => e.VlBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BAIXA");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.FaturamentoPerda)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdFaturamentobaixagrupoNavigation)
                    .WithMany(p => p.FaturamentoPerdaIdFaturamentobaixagrupoNavigation)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupo)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdFaturamentobaixagrupoEstornoNavigation)
                    .WithMany(p => p.FaturamentoPerdaIdFaturamentobaixagrupoEstornoNavigation)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupoEstorno);

                entity.HasOne(d => d.IdTipoPerdaNavigation)
                    .WithMany(p => p.FaturamentoPerda)
                    .HasForeignKey(d => d.IdTipoPerda)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FaturamentoPerda)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<FaturamentoPerdaLog>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentoperdaLog);

                entity.ToTable("FaturamentoPerda_Log");

                entity.Property(e => e.IdFaturamentoperdaLog).HasColumnName("ID_FATURAMENTOPERDA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdFaturamentobaixagrupoEstorno).HasColumnName("ID_FATURAMENTOBAIXAGRUPO_ESTORNO");

                entity.Property(e => e.IdFaturamentoperda).HasColumnName("ID_FATURAMENTOPERDA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdTipoPerda).HasColumnName("ID_TIPO_PERDA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCancelada).HasColumnName("IN_CANCELADA");

                entity.Property(e => e.VlBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BAIXA");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.FaturamentoPerdaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<FechamentoItem>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItemPai }, "IX_FechamentoItem_K1_K16_10_2_3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.VlFechamentoItem, e.VlCustoOperacional, e.IdFechamentoItemPai, e.IdTipoItem }, "IX_FechamentoItem_K1_K2_K10_K14_K17_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.IdTipoItem }, "IX_FechamentoItem_K1_K2_K3")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdTipoItem, e.IdConta, e.IdFechamentoItemPai, e.IdMedico, e.IdFechamentoItem }, "IX_FechamentoItem_K3_K1_K17_K18_K2_10")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NmUnidadeOrganizacional, "IX_FechamentoItem_NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdClassificacaoPai).HasColumnName("ID_CLASSIFICACAO_PAI");

                entity.Property(e => e.IdFechamentoItemPai).HasColumnName("ID_FECHAMENTO_ITEM_PAI");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.IdUnidadeFaturamento).HasColumnName("ID_UNIDADE_FATURAMENTO");

                entity.Property(e => e.InAgrupado)
                    .HasColumnName("IN_AGRUPADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InProcedimentoPrincipalSus)
                    .HasColumnName("IN_PROCEDIMENTO_PRINCIPAL_SUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONSUMO_MINIMO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrAlicotaIss).HasColumnName("NR_ALICOTA_ISS");

                entity.Property(e => e.NrReducaoAcrescimo)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("NR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QdFiContaLimpa).HasColumnName("QD_FI_CONTA_LIMPA");

                entity.Property(e => e.QdGlosaContaLimpa).HasColumnName("QD_GLOSA_CONTA_LIMPA");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlFiContaLimpa).HasColumnName("VL_FI_CONTA_LIMPA");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlGlosaContaLimpa).HasColumnName("VL_GLOSA_CONTA_LIMPA");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlTerceiro).HasColumnName("VL_TERCEIRO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.IdTipoItemNavigation)
                    .WithMany(p => p.FechamentoItem)
                    .HasForeignKey(d => d.IdTipoItem)
                    .HasConstraintName("TipoDiversos_FechamentoItem_FK1");
            });

            modelBuilder.Entity<FechamentoItemContaCorrente>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.HasIndex(e => e.IdFuncao, "IX_FechamentoItemContaCorrente_ID_FUNCAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdFechamentoItemPai).HasColumnName("ID_FECHAMENTO_ITEM_PAI");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.InAgrupado)
                    .HasColumnName("IN_AGRUPADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InProcedimentoPrincipalSus)
                    .HasColumnName("IN_PROCEDIMENTO_PRINCIPAL_SUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONSUMO_MINIMO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrAlicotaIss).HasColumnName("NR_ALICOTA_ISS");

                entity.Property(e => e.NrReducaoAcrescimo)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("NR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.IdTipoItemNavigation)
                    .WithMany(p => p.FechamentoItemContaCorrente)
                    .HasForeignKey(d => d.IdTipoItem)
                    .HasConstraintName("TipoDiversos_FechamentoItemContaCorrente_FK1");
            });

            modelBuilder.Entity<FechamentoItemCustos>(entity =>
            {
                entity.HasKey(e => new { e.IdFechamentoItem, e.IdConta })
                    .HasName("FechamentoItem_Custos_PK");

                entity.ToTable("FechamentoItem_Custos");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONSUMO_MINIMO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrAlicotaIss).HasColumnName("NR_ALICOTA_ISS");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<FechamentoItemHonorarioCooperado>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.ToTable("FechamentoItem_HonorarioCooperado");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.FechamentoItemHonorarioCooperado)
                    .HasForeignKey<FechamentoItemHonorarioCooperado>(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FechamentoItem_HonorarioCooperado_FechamentoItem_FK1");
            });

            modelBuilder.Entity<FechamentoItemRepasse>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.ToTable("FechamentoItem_Repasse");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdClassificacaoPai).HasColumnName("ID_CLASSIFICACAO_PAI");

                entity.Property(e => e.IdFechamentoItemPai).HasColumnName("ID_FECHAMENTO_ITEM_PAI");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.IdUnidadeFaturamento).HasColumnName("ID_UNIDADE_FATURAMENTO");

                entity.Property(e => e.InAgrupado).HasColumnName("IN_AGRUPADO");

                entity.Property(e => e.InProcedimentoPrincipalSus).HasColumnName("IN_PROCEDIMENTO_PRINCIPAL_SUS");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONSUMO_MINIMO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrAlicotaIss).HasColumnName("NR_ALICOTA_ISS");

                entity.Property(e => e.NrReducaoAcrescimo)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("NR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QdFiContaLimpa).HasColumnName("QD_FI_CONTA_LIMPA");

                entity.Property(e => e.QdGlosaContaLimpa).HasColumnName("QD_GLOSA_CONTA_LIMPA");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlFiContaLimpa).HasColumnName("VL_FI_CONTA_LIMPA");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlGlosaContaLimpa).HasColumnName("VL_GLOSA_CONTA_LIMPA");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlTerceiro).HasColumnName("VL_TERCEIRO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.IdTipoItemNavigation)
                    .WithMany(p => p.FechamentoItemRepasse)
                    .HasForeignKey(d => d.IdTipoItem)
                    .HasConstraintName("TipoDiversos_FechamentoItem_Repasse_FK1");
            });

            modelBuilder.Entity<FechamentoItemTk98834>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FechamentoItemTK98834");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdClassificacaoPai).HasColumnName("ID_CLASSIFICACAO_PAI");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFechamentoItemPai).HasColumnName("ID_FECHAMENTO_ITEM_PAI");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.IdUnidadeFaturamento).HasColumnName("ID_UNIDADE_FATURAMENTO");

                entity.Property(e => e.InAgrupado).HasColumnName("IN_AGRUPADO");

                entity.Property(e => e.InProcedimentoPrincipalSus).HasColumnName("IN_PROCEDIMENTO_PRINCIPAL_SUS");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONSUMO_MINIMO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrAlicotaIss).HasColumnName("NR_ALICOTA_ISS");

                entity.Property(e => e.NrReducaoAcrescimo)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("NR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QdFiContaLimpa).HasColumnName("QD_FI_CONTA_LIMPA");

                entity.Property(e => e.QdGlosaContaLimpa).HasColumnName("QD_GLOSA_CONTA_LIMPA");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlFiContaLimpa).HasColumnName("VL_FI_CONTA_LIMPA");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlGlosaContaLimpa).HasColumnName("VL_GLOSA_CONTA_LIMPA");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<FechamentoItemValorLiberado>(entity =>
            {
                entity.HasKey(e => e.IdFechamentoitemvalorliberado)
                    .HasName("FechamentoItemValorLiberado_PK");

                entity.Property(e => e.IdFechamentoitemvalorliberado).HasColumnName("ID_FECHAMENTOITEMVALORLIBERADO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(CONVERT([date],getdate(),0))");

                entity.Property(e => e.DtCredito)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CREDITO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFechamentoitemvalorliberadoSomatorio).HasColumnName("ID_FECHAMENTOITEMVALORLIBERADO_SOMATORIO");

                entity.Property(e => e.IdRetornoArquivoProcessamento).HasColumnName("ID_RETORNO_ARQUIVO_PROCESSAMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlLiberado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_LIBERADO");

                entity.Property(e => e.VlProcessado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PROCESSADO");

                entity.HasOne(d => d.IdRetornoArquivoProcessamentoNavigation)
                    .WithMany(p => p.FechamentoItemValorLiberado)
                    .HasForeignKey(d => d.IdRetornoArquivoProcessamento)
                    .HasConstraintName("RetornoArquivoProcessamento_FechamentoItemValorLiberado_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.FechamentoItemValorLiberado)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .HasConstraintName("FechamentoItem_FechamentoItemValorLiberado_FK1");
            });

            modelBuilder.Entity<FechamentoMensalInventario>(entity =>
            {
                entity.HasKey(e => e.IdFechamentoMensalInventario);

                entity.ToTable("FechamentoMensal_Inventario");

                entity.Property(e => e.IdFechamentoMensalInventario)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_FECHAMENTO_MENSAL_INVENTARIO");

                entity.Property(e => e.DtFim)
                    .HasColumnType("date")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("date")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdFechamentoMensal).HasColumnName("ID_FECHAMENTO_MENSAL");
            });

            modelBuilder.Entity<Feriado>(entity =>
            {
                entity.HasKey(e => e.IdFeriado)
                    .HasName("Feriado_PK");

                entity.Property(e => e.IdFeriado).HasColumnName("ID_FERIADO");

                entity.Property(e => e.IdFeriadoTipo).HasColumnName("ID_FERIADO_TIPO");

                entity.Property(e => e.IdLocalidade).HasColumnName("ID_LOCALIDADE");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.InFeriadoFixo)
                    .IsRequired()
                    .HasColumnName("IN_FERIADO_FIXO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdLocalidadeNavigation)
                    .WithMany(p => p.Feriado)
                    .HasForeignKey(d => d.IdLocalidade)
                    .HasConstraintName("LOG_LOCALIDADE_Feriado_FK1");

                entity.HasOne(d => d.IdUfNavigation)
                    .WithMany(p => p.Feriado)
                    .HasForeignKey(d => d.IdUf)
                    .HasConstraintName("UF_Feriado_FK1");
            });

            modelBuilder.Entity<FeriadoData>(entity =>
            {
                entity.HasKey(e => new { e.IdFeriado, e.DtFeriado })
                    .HasName("FeriadoData_PK");

                entity.Property(e => e.IdFeriado).HasColumnName("ID_FERIADO");

                entity.Property(e => e.DtFeriado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FERIADO");

                entity.Property(e => e.RvVersaLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSA_LINHA");

                entity.HasOne(d => d.IdFeriadoNavigation)
                    .WithMany(p => p.FeriadoData)
                    .HasForeignKey(d => d.IdFeriado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Feriado_FeriadoData_FK1");
            });

            modelBuilder.Entity<FilaConta>(entity =>
            {
                entity.HasKey(e => e.IdFilaConta);

                entity.Property(e => e.IdFilaConta).HasColumnName("ID_FILA_CONTA");

                entity.Property(e => e.DtInclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INCLUSAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFilaContaAcaoTipo).HasColumnName("ID_FILA_CONTA_ACAO_TIPO");

                entity.Property(e => e.IdFilaContaTipo).HasColumnName("ID_FILA_CONTA_TIPO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPriorizar).HasColumnName("IN_PRIORIZAR");

                entity.Property(e => e.InProcessada).HasColumnName("IN_PROCESSADA");

                entity.Property(e => e.NrItens).HasColumnName("NR_ITENS");

                entity.Property(e => e.NrTentativas).HasColumnName("NR_TENTATIVAS");

                entity.Property(e => e.TxParametros)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_PARAMETROS");

                entity.HasOne(d => d.IdFilaContaAcaoTipoNavigation)
                    .WithMany(p => p.FilaConta)
                    .HasForeignKey(d => d.IdFilaContaAcaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FilaConta_FilaConta_Acao_Tipo1");

                entity.HasOne(d => d.IdFilaContaTipoNavigation)
                    .WithMany(p => p.FilaConta)
                    .HasForeignKey(d => d.IdFilaContaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FilaConta_FilaConta_Tipo1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FilaConta)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FilaConta_Usuario");
            });

            modelBuilder.Entity<FilaContaAcaoTipo>(entity =>
            {
                entity.HasKey(e => e.IdFilaContaAcaoTipo);

                entity.ToTable("FilaConta_Acao_Tipo");

                entity.Property(e => e.IdFilaContaAcaoTipo).HasColumnName("ID_FILA_CONTA_ACAO_TIPO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<FilaContaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdHistoricoFilaConta);

                entity.ToTable("FilaConta_Historico");

                entity.Property(e => e.IdHistoricoFilaConta).HasColumnName("ID_HISTORICO_FILA_CONTA");

                entity.Property(e => e.DtFim)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdFilaConta).HasColumnName("ID_FILA_CONTA");

                entity.Property(e => e.TxMsgErro)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ERRO");

                entity.HasOne(d => d.IdFilaContaNavigation)
                    .WithMany(p => p.FilaContaHistorico)
                    .HasForeignKey(d => d.IdFilaConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FilaConta_Historico_FilaConta");
            });

            modelBuilder.Entity<FilaContaTipo>(entity =>
            {
                entity.HasKey(e => e.IdFilaContaTipo);

                entity.ToTable("FilaConta_Tipo");

                entity.Property(e => e.IdFilaContaTipo).HasColumnName("ID_FILA_CONTA_TIPO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<FilaPa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FilaPA");

                entity.Property(e => e.IdClassificacaoFila)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_CLASSIFICACAO_FILA");

                entity.Property(e => e.NmFila)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_FILA");
            });

            modelBuilder.Entity<Filme>(entity =>
            {
                entity.HasKey(e => e.IdFilme)
                    .HasName("Filme_PK");

                entity.Property(e => e.IdFilme).HasColumnName("ID_FILME");

                entity.Property(e => e.MdFilme).HasColumnName("MD_FILME");

                entity.Property(e => e.TxDescriçãoFilme)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRIÇÃO_FILME");
            });

            modelBuilder.Entity<FinalidaderecursoGlosa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("finalidaderecursoGlosa");

                entity.Property(e => e.DtGravacao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DT_GRAVACAO");

                entity.Property(e => e.IdFinalidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.IdFinalidadeCampoValor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_FINALIDADE_CAMPO_VALOR");

                entity.Property(e => e.IdFonteDados)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_FONTE_DADOS");

                entity.Property(e => e.IdOperadora)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_OPERADORA");

                entity.Property(e => e.NmCampo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMPO");

                entity.Property(e => e.TxNomeCampo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_CAMPO");

                entity.Property(e => e.TxValorCampo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_CAMPO");

                entity.Property(e => e.TxXpathCampo)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_XPATH_CAMPO");
            });

            modelBuilder.Entity<FinalizacaoRefeicaoEspecial>(entity =>
            {
                entity.HasKey(e => e.IdFinalizacaoRefeicaoEspecial);

                entity.Property(e => e.IdFinalizacaoRefeicaoEspecial).HasColumnName("ID_FINALIZACAO_REFEICAO_ESPECIAL");

                entity.Property(e => e.DtFinalizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINALIZACAO");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdTipoRefeicao).HasColumnName("ID_TIPO_REFEICAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdTipoRefeicaoNavigation)
                    .WithMany(p => p.FinalizacaoRefeicaoEspecial)
                    .HasForeignKey(d => d.IdTipoRefeicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FinalizacaoRefeicaoEspecial_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FinalizacaoRefeicaoEspecial)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FinalizacaoRefeicaoEspecial_Usuario");
            });

            modelBuilder.Entity<FinanciamentoSusHistorico>(entity =>
            {
                entity.HasKey(e => e.IdFinanciamentoHistorico)
                    .HasName("PK__Financia__1B809A4144687816");

                entity.ToTable("FinanciamentoSus_Historico");

                entity.Property(e => e.IdFinanciamentoHistorico).HasColumnName("ID_FINANCIAMENTO_HISTORICO");

                entity.Property(e => e.IdTipoFinanciamento).HasColumnName("ID_TIPO_FINANCIAMENTO");

                entity.Property(e => e.TxCompetencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.HasOne(d => d.IdTipoFinanciamentoNavigation)
                    .WithMany(p => p.FinanciamentoSusHistorico)
                    .HasForeignKey(d => d.IdTipoFinanciamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoFinanciamentoSUS_FinanciamentoSus_Historico");
            });

            modelBuilder.Entity<FisioterapeutaETerapeutaOcupacional>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Fisioterapeuta_e_Terapeuta_Ocupacional");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<Fluxo>(entity =>
            {
                entity.HasKey(e => e.IdFluxo)
                    .HasName("Fluxo_PK");

                entity.Property(e => e.IdFluxo).HasColumnName("ID_FLUXO");

                entity.Property(e => e.NmFluxo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_FLUXO");

                entity.Property(e => e.QnPrazoEntrega).HasColumnName("QN_PRAZO_ENTREGA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<FluxoEtapa>(entity =>
            {
                entity.HasKey(e => new { e.NrEtapa, e.NrOrdem, e.IdFluxo, e.IdEtapaTipo })
                    .HasName("Fluxo_Etapa_PK");

                entity.ToTable("Fluxo_Etapa");

                entity.Property(e => e.NrEtapa).HasColumnName("NR_ETAPA");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.IdFluxo).HasColumnName("ID_FLUXO");

                entity.Property(e => e.IdEtapaTipo).HasColumnName("ID_ETAPA_TIPO");

                entity.Property(e => e.IdPrestador).HasColumnName("ID_PRESTADOR");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.QnPrazo).HasColumnName("QN_PRAZO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEtapaTipoNavigation)
                    .WithMany(p => p.FluxoEtapa)
                    .HasForeignKey(d => d.IdEtapaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Fluxo_Etapa_FK1");

                entity.HasOne(d => d.IdFluxoNavigation)
                    .WithMany(p => p.FluxoEtapa)
                    .HasForeignKey(d => d.IdFluxo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fluxo_Fluxo_Etapa_FK1");

                entity.HasOne(d => d.IdPrestadorNavigation)
                    .WithMany(p => p.FluxoEtapa)
                    .HasForeignKey(d => d.IdPrestador)
                    .HasConstraintName("Pessoa_Fluxo_Etapa_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.FluxoEtapa)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("UnidadeOrganizacional_Fluxo_Etapa_FK1");
            });

            modelBuilder.Entity<Folhadesala>(entity =>
            {
                entity.HasKey(e => new { e.IdProcedimentoPrincipal, e.IdCheckinEnfermagem });

                entity.HasIndex(e => e.IdCheckinEnfermagem, "IX_Folhadesala_CheckinEnfermagem")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.HrInicio, "IX_Folhadesala_HR_INICIO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InPreenchimentoConcluido, "IX_Folhadesala_IN_PREENCHIMENTO_CONCLUIDO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProcedimentoPrincipal).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.DtFinalizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINALIZACAO");

                entity.Property(e => e.HrAnestesiaFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_ANESTESIA_FIM");

                entity.Property(e => e.HrAnestesiaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_ANESTESIA_INICIO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAnestesia).HasColumnName("ID_ANESTESIA");

                entity.Property(e => e.IdCaraterCirurgia).HasColumnName("ID_CARATER_CIRURGIA");

                entity.Property(e => e.IdTipoAsa).HasColumnName("ID_TIPO_ASA");

                entity.Property(e => e.IdTipoGrauContaminacao).HasColumnName("ID_TIPO_GRAU_CONTAMINACAO");

                entity.Property(e => e.IdUsuarioConcluiuPreenchimento).HasColumnName("ID_USUARIO_CONCLUIU_PREENCHIMENTO");

                entity.Property(e => e.InFolhaDeSalaPrincipal).HasColumnName("IN_FOLHA_DE_SALA_PRINCIPAL");

                entity.Property(e => e.InPreenchimentoConcluido).HasColumnName("IN_PREENCHIMENTO_CONCLUIDO");

                entity.Property(e => e.NrFolhaDeSala).HasColumnName("NR_FOLHA_DE_SALA");

                entity.Property(e => e.TxFilme)
                    .HasColumnType("text")
                    .HasColumnName("TX_FILME");

                entity.Property(e => e.TxJustificativaMatmedCirurgiao)
                    .HasColumnType("text")
                    .HasColumnName("TX_JUSTIFICATIVA_MATMED_CIRURGIAO");

                entity.Property(e => e.TxKv)
                    .HasColumnType("text")
                    .HasColumnName("TX_KV");

                entity.Property(e => e.TxMa)
                    .HasColumnType("text")
                    .HasColumnName("TX_MA");

                entity.Property(e => e.TxObservacoes)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACOES");

                entity.HasOne(d => d.IdAnestesiaNavigation)
                    .WithMany(p => p.FolhadesalaIdAnestesiaNavigation)
                    .HasForeignKey(d => d.IdAnestesia)
                    .HasConstraintName("FK_Folhadesala_Anestesia");

                entity.HasOne(d => d.IdCheckinEnfermagemNavigation)
                    .WithMany(p => p.Folhadesala)
                    .HasForeignKey(d => d.IdCheckinEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Folhadesala_CheckinEnfermagem");

                entity.HasOne(d => d.IdProcedimentoPrincipalNavigation)
                    .WithMany(p => p.Folhadesala)
                    .HasForeignKey(d => d.IdProcedimentoPrincipal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Folhadesala_ProcedimentoPrincipal");

                entity.HasOne(d => d.IdTipoAsaNavigation)
                    .WithMany(p => p.FolhadesalaIdTipoAsaNavigation)
                    .HasForeignKey(d => d.IdTipoAsa)
                    .HasConstraintName("FK_Folhadesala_Asa");

                entity.HasOne(d => d.IdTipoGrauContaminacaoNavigation)
                    .WithMany(p => p.FolhadesalaIdTipoGrauContaminacaoNavigation)
                    .HasForeignKey(d => d.IdTipoGrauContaminacao)
                    .HasConstraintName("FK_Folhadesala_GrauContaminacao");

                entity.HasOne(d => d.IdUsuarioConcluiuPreenchimentoNavigation)
                    .WithMany(p => p.Folhadesala)
                    .HasForeignKey(d => d.IdUsuarioConcluiuPreenchimento)
                    .HasConstraintName("FK_Folhadesala_Usuario");
            });

            modelBuilder.Entity<FolhadesalaPedidoSangue>(entity =>
            {
                entity.HasKey(e => e.IdPedidosangueFolhadesala);

                entity.HasIndex(e => new { e.IdCheckinEnfermagem, e.IdServico }, "IX_FolhadesalaPedidoSangue_ID_CHECKIN_ENFERMAGEM_ID_SERVICO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdPedidosangueFolhadesala).HasColumnName("ID_PEDIDOSANGUE_FOLHADESALA");

                entity.Property(e => e.DtPedido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.NrBolsa)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NR_BOLSA");

                entity.Property(e => e.TxHemocomponente)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_HEMOCOMPONENTE");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.FolhadesalaPedidoSangue)
                    .HasForeignKey(d => new { d.IdCheckinEnfermagem, d.IdServico })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FolhadesalaPedidoSangue_Servico_CheckinEnfermagem");
            });

            modelBuilder.Entity<Fonoaudiologo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Fonoaudiologo");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<FormaPagamento>(entity =>
            {
                entity.HasKey(e => e.IdFormaPagamento)
                    .HasName("Key1");

                entity.Property(e => e.IdFormaPagamento)
                    .HasColumnName("ID_FORMA_PAGAMENTO")
                    .HasComment("Identificador da forma de recebimento de uma nota fiscal emitida pelo sistema ");

                entity.Property(e => e.IdTipoFormaPagamento)
                    .HasColumnName("ID_TIPO_FORMA_PAGAMENTO")
                    .HasComment("Identificador do tipo da forma de pagamento (cartão de crédito, dinheiro, etc.)");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasComment("Indicador de forma de recebimento de uma nota fiscal emitida ativa ou excluída logicamente ");

                entity.Property(e => e.NmFormaPagamento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FORMA_PAGAMENTO")
                    .HasComment("Descrição da forma de recebimento de uma nota fiscal emitida pelo sistema ");

                entity.HasOne(d => d.IdTipoFormaPagamentoNavigation)
                    .WithMany(p => p.FormaPagamento)
                    .HasForeignKey(d => d.IdTipoFormaPagamento)
                    .HasConstraintName("FK_FormaPagamento_TipoDiversos");
            });

            modelBuilder.Entity<Fornecedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Fornecedor");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdInscricaoEstadual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_ESTADUAL");

                entity.Property(e => e.CdInscricaoMunicipal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_MUNICIPAL");

                entity.Property(e => e.IdImpostoRendaRetido)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_IMPOSTO_RENDA_RETIDO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InPessoaTipo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_PESSOA_TIPO");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL");

                entity.Property(e => e.TxSite)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITE");
            });

            modelBuilder.Entity<FornecedorAnvisaSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FornecedorANVISA_SUS");

                entity.HasIndex(e => e.CdCnpj, "IX_FornecedorAnvisa_SUS")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)85);

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.NmFornecedor)
                    .HasMaxLength(255)
                    .HasColumnName("NM_FORNECEDOR");
            });

            modelBuilder.Entity<FornecedorContaDespesaReceita>(entity =>
            {
                entity.HasKey(e => e.IdFornecedorContadespesareceita);

                entity.ToTable("Fornecedor_ContaDespesaReceita");

                entity.Property(e => e.IdFornecedorContadespesareceita).HasColumnName("ID_FORNECEDOR_CONTADESPESARECEITA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContadespesareceita).HasColumnName("ID_CONTADESPESARECEITA");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdContadespesareceitaNavigation)
                    .WithMany(p => p.FornecedorContaDespesaReceita)
                    .HasForeignKey(d => d.IdContadespesareceita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fornecedor_ContaDespesaReceita_ContaDespesaReceita");
            });

            modelBuilder.Entity<FornecedorMarcus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FornecedorMarcus");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdInscricaoEstadual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_ESTADUAL");

                entity.Property(e => e.CdInscricaoMunicipal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_MUNICIPAL");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdImpostoRendaRetido)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_IMPOSTO_RENDA_RETIDO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmFornecedor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FORNECEDOR");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL");

                entity.Property(e => e.TxSite)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITE");
            });

            modelBuilder.Entity<FornecedorTributoAliquota>(entity =>
            {
                entity.HasKey(e => e.IdFornecedorTributoAliquota);

                entity.ToTable("Fornecedor_TributoAliquota");

                entity.Property(e => e.IdFornecedorTributoAliquota).HasColumnName("ID_FORNECEDOR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.CdRecolhimento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_RECOLHIMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdTributoAliquota).HasColumnName("ID_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.FornecedorTributoAliquota)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fornecedor_TributoAliquota_Pessoa");

                entity.HasOne(d => d.IdTributoAliquotaNavigation)
                    .WithMany(p => p.FornecedorTributoAliquota)
                    .HasForeignKey(d => d.IdTributoAliquota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fornecedor_TributoAliquota_TributoAliquota");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FornecedorTributoAliquota)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fornecedor_TributoAliquota_Usuario");
            });

            modelBuilder.Entity<FtAgenda>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FT_AGENDA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdTempoAgendamento).HasColumnName("ID_TEMPO_AGENDAMENTO");

                entity.Property(e => e.IdTempoMarcacao).HasColumnName("ID_TEMPO_MARCACAO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TotalEncaixe).HasColumnName("TOTAL_ENCAIXE");

                entity.Property(e => e.TotalMarcacao).HasColumnName("TOTAL_MARCACAO");

                entity.Property(e => e.TotalPrimeiraConsulta).HasColumnName("TOTAL_PRIMEIRA_CONSULTA");

                entity.Property(e => e.TotalRemarcacao).HasColumnName("TOTAL_REMARCACAO");

                entity.Property(e => e.TotalRetorno).HasColumnName("TOTAL_RETORNO");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("DIM_MEDICO_FT_AGENDA_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("DIM_OPERADORA_FT_AGENDA_FK1");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("DIM_RECURSO_FT_AGENDA_FK1");

                entity.HasOne(d => d.IdTempoAgendamentoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdTempoAgendamento)
                    .HasConstraintName("DIM_TEMPO_FT_AGENDA_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("DIM_UNIDADE_ORGANIZACIONAL_FT_AGENDA_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("DIM_USUARIO_FT_AGENDA_FK1");
            });

            modelBuilder.Entity<FtAnaliseMapa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FT_ANALISE_MAPA");

                entity.Property(e => e.IdClassificacaoLancamento).HasColumnName("ID_CLASSIFICACAO_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("id_conta");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGrupoTabela)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_grupo_tabela");

                entity.Property(e => e.IdJustificativaFi)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("id_justificativa_fi");

                entity.Property(e => e.IdJustificativaGlosa)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("id_justificativa_glosa");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTempo).HasColumnName("ID_TEMPO");

                entity.Property(e => e.IdUnidadeAtendimento).HasColumnName("id_unidade_atendimento");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.QtFaturado).HasColumnName("QT_FATURADO");

                entity.Property(e => e.QtFi).HasColumnName("QT_FI");

                entity.Property(e => e.QtGlosado).HasColumnName("QT_GLOSADO");

                entity.Property(e => e.VlAcatado).HasColumnName("VL_ACATADO");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");

                entity.Property(e => e.VlAcrescimoGenerico).HasColumnName("VL_ACRESCIMO_GENERICO");

                entity.Property(e => e.VlFaturado).HasColumnName("VL_FATURADO");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlGlosadoGenerico).HasColumnName("VL_GLOSADO_GENERICO");

                entity.Property(e => e.VlPerda).HasColumnName("VL_PERDA");

                entity.Property(e => e.VlRecebido).HasColumnName("VL_RECEBIDO");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRecursadoGenerico).HasColumnName("VL_RECURSADO_GENERICO");

                entity.Property(e => e.VlReverticoGenerico).HasColumnName("VL_REVERTICO_GENERICO");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");
            });

            modelBuilder.Entity<GabaritoTransporte>(entity =>
            {
                entity.HasKey(e => e.IdGabaritoTransporte);

                entity.Property(e => e.IdGabaritoTransporte).HasColumnName("ID_GABARITO_TRANSPORTE");

                entity.Property(e => e.CdItem)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM");

                entity.Property(e => e.CdPacote)
                    .IsUnicode(false)
                    .HasColumnName("CD_PACOTE");

                entity.Property(e => e.LocalUso)
                    .IsUnicode(false)
                    .HasColumnName("LOCAL_USO");

                entity.Property(e => e.Quantidade)
                    .IsUnicode(false)
                    .HasColumnName("QUANTIDADE");

                entity.Property(e => e.TipoItem)
                    .IsUnicode(false)
                    .HasColumnName("TIPO_ITEM");

                entity.Property(e => e.TxDescricaoItem)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_ITEM");

                entity.Property(e => e.TxDescricaoPacote)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_PACOTE");
            });

            modelBuilder.Entity<GeraProntuario>(entity =>
            {
                entity.HasKey(e => e.IdNumeroProntuario)
                    .HasName("PK_GERA_PRONTUARIO");

                entity.HasIndex(e => e.IdPessoa, "IX_GERA_PRONTUARIO_PESSOA")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdNumeroProntuario).HasColumnName("ID_NUMERO_PRONTUARIO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithOne(p => p.GeraProntuario)
                    .HasForeignKey<GeraProntuario>(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_GeraProntuario_FK1");
            });

            modelBuilder.Entity<GeracaoAjusteServicoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdGeracaoAjusteServicoHistorico);

                entity.Property(e => e.IdGeracaoAjusteServicoHistorico).HasColumnName("ID_GERACAO_AJUSTE_SERVICO_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoGrupo).HasColumnName("ID_SERVICO_GRUPO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.VlReajuste).HasColumnName("VL_REAJUSTE");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.GeracaoAjusteServicoHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeracaoAjusteServicoHistorico_Pessoa");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.GeracaoAjusteServicoHistorico)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK_GeracaoAjusteServicoHistorico_Plano");

                entity.HasOne(d => d.IdServicoCategoriaNavigation)
                    .WithMany(p => p.GeracaoAjusteServicoHistorico)
                    .HasForeignKey(d => d.IdServicoCategoria)
                    .HasConstraintName("FK_GeracaoAjusteServicoHistorico_ServicoProdutoCategoria");

                entity.HasOne(d => d.IdServicoGrupoNavigation)
                    .WithMany(p => p.GeracaoAjusteServicoHistorico)
                    .HasForeignKey(d => d.IdServicoGrupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeracaoAjusteServicoHistorico_Servico");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GeracaoAjusteServicoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeracaoAjusteServicoHistorico_Usuario");
            });

            modelBuilder.Entity<GiroEstoqueMediaMensal>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Ano).HasColumnName("ANO");

                entity.Property(e => e.AnoMesGiroEstoque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ANO_MES_GIRO_ESTOQUE");

                entity.Property(e => e.DataGiroestoque)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_GIROESTOQUE");

                entity.Property(e => e.GiroEstoque)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("GIRO_ESTOQUE");

                entity.Property(e => e.MediaMensalGiroEstoque)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("MEDIA_MENSAL_GIRO_ESTOQUE");

                entity.Property(e => e.Mes).HasColumnName("MES");
            });

            modelBuilder.Entity<Glosa>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem });

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.DtGlosa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdJustificativa)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdJustificativaComplementar)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA_COMPLEMENTAR");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacionalAuditoria).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_AUDITORIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAdministrativa).HasColumnName("IN_ADMINISTRATIVA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InGlosaMista).HasColumnName("IN_GLOSA_MISTA");

                entity.Property(e => e.InPreparandoContaLimpa).HasColumnName("IN_PREPARANDO_CONTA_LIMPA");

                entity.Property(e => e.InRecorrer).HasColumnName("IN_RECORRER");

                entity.Property(e => e.NrOrigemUnimed).HasColumnName("NR_ORIGEM_UNIMED");

                entity.Property(e => e.QnGlosada).HasColumnName("QN_GLOSADA");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlUnitarioPago)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_UNITARIO_PAGO")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdJustificativaNavigation)
                    .WithMany(p => p.Glosa)
                    .HasForeignKey(d => d.IdJustificativa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Glosa_JustificativaGlosaFI");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.Glosa)
                    .HasForeignKey<Glosa>(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Glosa_FechamentoItem");
            });

            modelBuilder.Entity<GlosaAcatada>(entity =>
            {
                entity.HasKey(e => new { e.IdFechamentoItem, e.IdConta });

                entity.ToTable("Glosa_Acatada");

                entity.HasIndex(e => e.IdConta, "IX_Glosa_Acatada_ID_CONTA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.DtAcato)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACATO");

                entity.Property(e => e.IdJustificativaAcato).HasColumnName("ID_JUSTIFICATIVA_ACATO");

                entity.Property(e => e.IdMovimentacaocontaparcelabaixada).HasColumnName("ID_MOVIMENTACAOCONTAPARCELABAIXADA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ACATADO")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdJustificativaAcatoNavigation)
                    .WithMany(p => p.GlosaAcatada)
                    .HasForeignKey(d => d.IdJustificativaAcato)
                    .HasConstraintName("FK_Glosa_Acatada_Justificativa_Acato");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GlosaAcatada)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Glosa_Acatada_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.GlosaAcatada)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Glosa_Acatada_Glosa_FK1");
            });

            modelBuilder.Entity<GlosaAcatadaLog>(entity =>
            {
                entity.HasKey(e => e.IdGlosaAcatadaLog);

                entity.ToTable("Glosa_Acatada_Log");

                entity.Property(e => e.IdGlosaAcatadaLog).HasColumnName("ID_GLOSA_ACATADA_LOG");

                entity.Property(e => e.DtAcato)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACATO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativaAcato).HasColumnName("ID_JUSTIFICATIVA_ACATO");

                entity.Property(e => e.IdMovimentacaocontaparcelabaixada).HasColumnName("ID_MOVIMENTACAOCONTAPARCELABAIXADA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ACATADO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.GlosaAcatadaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<GlosaAcatadaParcial>(entity =>
            {
                entity.HasKey(e => e.IdGlosaAcatadaParcial);

                entity.ToTable("Glosa_Acatada_Parcial");

                entity.Property(e => e.IdGlosaAcatadaParcial).HasColumnName("ID_GLOSA_ACATADA_PARCIAL");

                entity.Property(e => e.DtAcato)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACATO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAcatoConjunto).HasColumnName("ID_ACATO_CONJUNTO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativaAcato).HasColumnName("ID_JUSTIFICATIVA_ACATO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ACATADO");

                entity.HasOne(d => d.IdAcatoConjuntoNavigation)
                    .WithMany(p => p.GlosaAcatadaParcial)
                    .HasForeignKey(d => d.IdAcatoConjunto);

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.GlosaAcatadaParcial)
                    .HasForeignKey(d => d.IdCartarecurso)
                    .HasConstraintName("FK_Glosa_Acatada_Parcial_CartaRecurso");

                entity.HasOne(d => d.IdFaturamentobaixagrupoNavigation)
                    .WithMany(p => p.GlosaAcatadaParcial)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupo)
                    .HasConstraintName("FK_Glosa_Acatada_Parcial_FaturamentoBaixaGrupo");

                entity.HasOne(d => d.IdJustificativaAcatoNavigation)
                    .WithMany(p => p.GlosaAcatadaParcial)
                    .HasForeignKey(d => d.IdJustificativaAcato)
                    .HasConstraintName("FK_Glosa_Acatada_Parcial_Justificativa_Acato");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GlosaAcatadaParcial)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Glosa_Acatada_Parcial_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.GlosaAcatadaParcial)
                    .HasForeignKey(d => new { d.IdFechamentoItem, d.IdConta })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Glosa_Acatada_Parcial_Glosa_Acatada");
            });

            modelBuilder.Entity<GlosaAcatadaParcialLog>(entity =>
            {
                entity.HasKey(e => e.IdGlosaAcatadaParcialLog);

                entity.ToTable("Glosa_Acatada_Parcial_Log");

                entity.Property(e => e.IdGlosaAcatadaParcialLog).HasColumnName("ID_GLOSA_ACATADA_PARCIAL_LOG");

                entity.Property(e => e.DtAcato)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACATO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGlosaAcatadaParcial).HasColumnName("ID_GLOSA_ACATADA_PARCIAL");

                entity.Property(e => e.IdJustificativaAcato).HasColumnName("ID_JUSTIFICATIVA_ACATO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ACATADO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.GlosaAcatadaParcialLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("FK_Glosa_Acatada_Parcial_Usuario_ID_USUARIO_OPERACAO");
            });

            modelBuilder.Entity<GlosaAcatadaTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GlosaAcatada_Total");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.VlAcatado).HasColumnName("VL_ACATADO");

                entity.Property(e => e.VlAcatadoGen)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_ACATADO_GEN");

                entity.Property(e => e.VlAcatadoItens).HasColumnName("VL_ACATADO_ITENS");
            });

            modelBuilder.Entity<GlosaFechamentoItemValorLiberado>(entity =>
            {
                entity.HasKey(e => e.IdGlosaFechamentoItemValorLiberado)
                    .HasName("Glosa_FechamentoItemValorLiberado_PK");

                entity.ToTable("Glosa_FechamentoItemValorLiberado");

                entity.Property(e => e.IdGlosaFechamentoItemValorLiberado).HasColumnName("ID_GLOSA_FECHAMENTO_ITEM_VALOR_LIBERADO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFechamentoitemvalorliberado).HasColumnName("ID_FECHAMENTOITEMVALORLIBERADO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdFechamentoitemvalorliberadoNavigation)
                    .WithMany(p => p.GlosaFechamentoItemValorLiberado)
                    .HasForeignKey(d => d.IdFechamentoitemvalorliberado)
                    .HasConstraintName("FechamentoItemValorLiberado_Glosa_FechamentoItemValorLiberado_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GlosaFechamentoItemValorLiberado)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Glosa_FechamentoItemValorLiberado_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.GlosaFechamentoItemValorLiberado)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FechamentoItem_Glosa_FechamentoItemValorLiberado_FK1");
            });

            modelBuilder.Entity<GlosaGenericaAcatada>(entity =>
            {
                entity.HasKey(e => e.IdGlosaGenericaAcatada);

                entity.Property(e => e.IdGlosaGenericaAcatada).HasColumnName("ID_GLOSA_GENERICA_ACATADA");

                entity.Property(e => e.DtAcato)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACATO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdJustificativaAcato).HasColumnName("ID_JUSTIFICATIVA_ACATO");

                entity.Property(e => e.IdMovimentacaocontaparcelabaixada).HasColumnName("ID_MOVIMENTACAOCONTAPARCELABAIXADA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACATADO");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.GlosaGenericaAcatada)
                    .HasForeignKey(d => d.IdCartarecurso);

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.GlosaGenericaAcatada)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Conta_GlosaGenericaAcatada_FK1");

                entity.HasOne(d => d.IdFaturamentobaixagrupoNavigation)
                    .WithMany(p => p.GlosaGenericaAcatada)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupo);

                entity.HasOne(d => d.IdJustificativaAcatoNavigation)
                    .WithMany(p => p.GlosaGenericaAcatada)
                    .HasForeignKey(d => d.IdJustificativaAcato)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GlosaGenericaAcatada_Justificativa_Acato_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GlosaGenericaAcatada)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GlosaGenericaAcatada_Usuario_FK1");
            });

            modelBuilder.Entity<GlosaGenericaAcatadaLog>(entity =>
            {
                entity.HasKey(e => e.IdGlosaGenericaAcatadaLog);

                entity.ToTable("GlosaGenericaAcatada_Log");

                entity.Property(e => e.IdGlosaGenericaAcatadaLog).HasColumnName("ID_GLOSA_GENERICA_ACATADA_LOG");

                entity.Property(e => e.DtAcato)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACATO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdGlosaGenericaAcatada).HasColumnName("ID_GLOSA_GENERICA_ACATADA");

                entity.Property(e => e.IdJustificativaAcato).HasColumnName("ID_JUSTIFICATIVA_ACATO");

                entity.Property(e => e.IdMovimentacaocontaparcelabaixada).HasColumnName("ID_MOVIMENTACAOCONTAPARCELABAIXADA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InBaixouContaReceber).HasColumnName("IN_BAIXOU_CONTA_RECEBER");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcatado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACATADO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.GlosaGenericaAcatadaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<GlosaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdGlosaHistorico);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_GlosaHistorico_ID_CONTA_ID_FECHAMENTO_ITEM")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdGlosaHistorico).HasColumnName("ID_GLOSA_HISTORICO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtGlosa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativa)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacionalAuditoria).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_AUDITORIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAdministrativa).HasColumnName("IN_ADMINISTRATIVA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InPreparandoContaLimpa).HasColumnName("IN_PREPARANDO_CONTA_LIMPA");

                entity.Property(e => e.NrOrigemUnimed).HasColumnName("NR_ORIGEM_UNIMED");

                entity.Property(e => e.QnGlosada).HasColumnName("QN_GLOSADA");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GlosaHistoricoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_GlosaHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.GlosaHistoricoIdUsuarioOperacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("Usuario_GlosaHistorico_FK2");
            });

            modelBuilder.Entity<GlosaJustificativaSecundaria>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdFechamentoItem, e.IdJustificativa })
                    .HasName("PK_Glosa_Justificativa_Secundaria_1");

                entity.ToTable("Glosa_Justificativa_Secundaria");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativa)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.HasOne(d => d.IdJustificativaNavigation)
                    .WithMany(p => p.GlosaJustificativaSecundaria)
                    .HasForeignKey(d => d.IdJustificativa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Glosa_Justificativa_Secundaria_JustificativaGlosaFI");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.GlosaJustificativaSecundaria)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Glosa_Justificativa_Secundaria_Glosa");
            });

            modelBuilder.Entity<GrupoBacteria>(entity =>
            {
                entity.HasKey(e => e.IdGrupoBacteria)
                    .HasName("GrupoBacteria_PK");

                entity.Property(e => e.IdGrupoBacteria).HasColumnName("ID_GRUPO_BACTERIA");

                entity.Property(e => e.NmGrupoBacteria)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_GRUPO_BACTERIA");
            });

            modelBuilder.Entity<GrupoBacteriaAntibiotico>(entity =>
            {
                entity.HasKey(e => new { e.IdAntibiotico, e.IdGrupoBacteria, e.TxTipoPaciente })
                    .HasName("GrupoBacteria_Antibiotico_PK");

                entity.ToTable("GrupoBacteria_Antibiotico");

                entity.Property(e => e.IdAntibiotico).HasColumnName("ID_ANTIBIOTICO");

                entity.Property(e => e.IdGrupoBacteria).HasColumnName("ID_GRUPO_BACTERIA");

                entity.Property(e => e.TxTipoPaciente)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_PACIENTE")
                    .IsFixedLength(true);

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdAntibioticoNavigation)
                    .WithMany(p => p.GrupoBacteriaAntibiotico)
                    .HasForeignKey(d => d.IdAntibiotico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Antibiotico_GrupoBacteria_Antibiotico_FK1");

                entity.HasOne(d => d.IdGrupoBacteriaNavigation)
                    .WithMany(p => p.GrupoBacteriaAntibiotico)
                    .HasForeignKey(d => d.IdGrupoBacteria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GrupoBacteria_GrupoBacteria_Antibiotico_FK1");
            });

            modelBuilder.Entity<GrupoBacteriaBacteria>(entity =>
            {
                entity.HasKey(e => new { e.IdGrupoBacteria, e.IdBacteria })
                    .HasName("GrupoBacteria_Bacteria_PK");

                entity.ToTable("GrupoBacteria_Bacteria");

                entity.Property(e => e.IdGrupoBacteria).HasColumnName("ID_GRUPO_BACTERIA");

                entity.Property(e => e.IdBacteria).HasColumnName("ID_BACTERIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdBacteriaNavigation)
                    .WithMany(p => p.GrupoBacteriaBacteria)
                    .HasForeignKey(d => d.IdBacteria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Bacteria_GrupoBacteria_Bacteria_FK1");

                entity.HasOne(d => d.IdGrupoBacteriaNavigation)
                    .WithMany(p => p.GrupoBacteriaBacteria)
                    .HasForeignKey(d => d.IdGrupoBacteria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GrupoBacteria_GrupoBacteria_Bacteria_FK1");
            });

            modelBuilder.Entity<GrupoExame>(entity =>
            {
                entity.HasKey(e => e.IdGrupoExame)
                    .HasName("GrupoExame_PK");

                entity.Property(e => e.IdGrupoExame).HasColumnName("ID_GRUPO_EXAME");

                entity.Property(e => e.NmGrupoExame)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_GRUPO_EXAME");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<GrupoFaixaEtaria>(entity =>
            {
                entity.HasKey(e => e.IdGrupoFaixaEtaria)
                    .HasName("GrupoFaixaEtaria_PK");

                entity.Property(e => e.IdGrupoFaixaEtaria)
                    .HasColumnName("ID_GRUPO_FAIXA_ETARIA")
                    .HasComment("identificador único do grupo de faixa etária");

                entity.Property(e => e.NmGrupoFaixaEtaria)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_GRUPO_FAIXA_ETARIA")
                    .HasComment("nome do grupo de faixa etaria");

                entity.Property(e => e.NrIdadeFim)
                    .HasColumnName("NR_IDADE_FIM")
                    .HasComment("idade final para classificar um individuo em um grupo de faixa etaria");

                entity.Property(e => e.NrIdadeInicio)
                    .HasColumnName("NR_IDADE_INICIO")
                    .HasComment("idade inicial para classificar um individuo em um grupo de faixa etaria");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<GrupoHabilitacaoSus>(entity =>
            {
                entity.HasKey(e => e.IdGrupoHabilitacao)
                    .HasName("PK__Grupo_Ha__E450AE3F4CC8B3ED");

                entity.ToTable("Grupo_HabilitacaoSus");

                entity.Property(e => e.IdGrupoHabilitacao).HasColumnName("ID_GRUPO_HABILITACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmGrupoHabilitacao)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_GRUPO_HABILITACAO");

                entity.Property(e => e.NrGrupoHabilitacao)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_GRUPO_HABILITACAO");

                entity.Property(e => e.TxDescGrupoHabilitacao)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_GRUPO_HABILITACAO");
            });

            modelBuilder.Entity<GrupoHorarioHorarioDiaSemana>(entity =>
            {
                entity.HasKey(e => new { e.IdGrupoHorario, e.IdHorarioDiaSemana })
                    .HasName("GrupoHorario_HorarioDiaSemana_PK");

                entity.ToTable("GrupoHorario_HorarioDiaSemana");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdHorarioDiaSemana).HasColumnName("ID_HORARIO_DIA_SEMANA");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.GrupoHorarioHorarioDiaSemana)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GrupoHorario_HorarioDiaSemana_TipoDiversos");

                entity.HasOne(d => d.IdHorarioDiaSemanaNavigation)
                    .WithMany(p => p.GrupoHorarioHorarioDiaSemana)
                    .HasForeignKey(d => d.IdHorarioDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("HorarioDiaSemana_GrupoHorario_HorarioDiaSemana_FK1");
            });

            modelBuilder.Entity<GrupoImposto>(entity =>
            {
                entity.HasKey(e => e.IdGrupoImposto);

                entity.Property(e => e.IdGrupoImposto).HasColumnName("ID_GRUPO_IMPOSTO");

                entity.Property(e => e.IdImposto).HasColumnName("ID_IMPOSTO");

                entity.Property(e => e.IdTipoImposto).HasColumnName("ID_TIPO_IMPOSTO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrGrupoImposto).HasColumnName("NR_GRUPO_IMPOSTO");

                entity.Property(e => e.VlAliquota)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ALIQUOTA");

                entity.Property(e => e.VlFaixaFinal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FAIXA_FINAL");

                entity.Property(e => e.VlFaixaInicial)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FAIXA_INICIAL");

                entity.HasOne(d => d.IdImpostoNavigation)
                    .WithMany(p => p.GrupoImpostoIdImpostoNavigation)
                    .HasForeignKey(d => d.IdImposto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GrupoImposto_Imposto");

                entity.HasOne(d => d.IdTipoImpostoNavigation)
                    .WithMany(p => p.GrupoImpostoIdTipoImpostoNavigation)
                    .HasForeignKey(d => d.IdTipoImposto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GrupoImposto_TipoImposto");
            });

            modelBuilder.Entity<GrupoImpostoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdGrupoImpostoHistorico);

                entity.Property(e => e.IdGrupoImpostoHistorico).HasColumnName("ID_GRUPO_IMPOSTO_HISTORICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.IdGrupoImposto).HasColumnName("ID_GRUPO_IMPOSTO");

                entity.Property(e => e.IdImposto).HasColumnName("ID_IMPOSTO");

                entity.Property(e => e.IdTipoImposto).HasColumnName("ID_TIPO_IMPOSTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrGrupoImposto).HasColumnName("NR_GRUPO_IMPOSTO");

                entity.Property(e => e.VlAliquota)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ALIQUOTA");

                entity.Property(e => e.VlFaixaFinal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FAIXA_FINAL");

                entity.Property(e => e.VlFaixaInicial)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FAIXA_INICIAL");

                entity.HasOne(d => d.IdGrupoImpostoNavigation)
                    .WithMany(p => p.GrupoImpostoHistorico)
                    .HasForeignKey(d => d.IdGrupoImposto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GrupoImpostoHistorico_GrupoImposto_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GrupoImpostoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("GrupoImpostoHistorico_Usuario_FK2");
            });

            modelBuilder.Entity<GrupoInspecaoRecebimento>(entity =>
            {
                entity.HasKey(e => e.IdGrupoInspecaoRecebimento);

                entity.Property(e => e.IdGrupoInspecaoRecebimento).HasColumnName("ID_GRUPO_INSPECAO_RECEBIMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdTipoNota).HasColumnName("ID_TIPO_NOTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioExcluiu).HasColumnName("ID_USUARIO_EXCLUIU");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmGrupo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_GRUPO");

                entity.Property(e => e.VlPeso).HasColumnName("VL_PESO");

                entity.HasOne(d => d.IdTipoNotaNavigation)
                    .WithMany(p => p.GrupoInspecaoRecebimento)
                    .HasForeignKey(d => d.IdTipoNota)
                    .HasConstraintName("FK_NotaEntrada_Tipo");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GrupoInspecaoRecebimentoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario");

                entity.HasOne(d => d.IdUsuarioExcluiuNavigation)
                    .WithMany(p => p.GrupoInspecaoRecebimentoIdUsuarioExcluiuNavigation)
                    .HasForeignKey(d => d.IdUsuarioExcluiu)
                    .HasConstraintName("FK_Usuario_Excluiu");
            });

            modelBuilder.Entity<Guia>(entity =>
            {
                entity.HasKey(e => e.IdGuia);

                entity.HasIndex(e => e.NumPermanencia, "IX_Guia_")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdMedico, "IX_Guia_ID_MEDICO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdMedicoExecutante, "IX_Guia_ID_MEDICO_EXECUTANTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_Guia_ID_UNIDADE_ORGANIZACIONAL")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdConta, "IX_Guia_K3_24_25");

                entity.HasIndex(e => new { e.NrGuia, e.NrAutorizacao }, "IX_Guia_NR_GUIA_NR_AUTORIZACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdOperadora, "IX_Guia_Pessoa_ID_OPERADORA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.AnoProtocoloSams).HasColumnName("ANO_PROTOCOLO_SAMS");

                entity.Property(e => e.CdConvenio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONVENIO");

                entity.Property(e => e.CdConvenioMedExecutante)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONVENIO_MED_EXECUTANTE");

                entity.Property(e => e.DtAlteracaoDiasAutorizados)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO_DIAS_AUTORIZADOS");

                entity.Property(e => e.DtAlteracaoDiasMinimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO_DIAS_MINIMO");

                entity.Property(e => e.DtAlteracaoDiasSolicitados)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO_DIAS_SOLICITADOS");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtFinalApac)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_APAC");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtInicialApac)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIAL_APAC");

                entity.Property(e => e.DtInicioPermanencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PERMANENCIA");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdCid).HasColumnName("ID_CID");

                entity.Property(e => e.IdCidCausaAssociada).HasColumnName("ID_CID_CAUSA_ASSOCIADA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdMedicoAutorizador).HasColumnName("ID_MEDICO_AUTORIZADOR");

                entity.Property(e => e.IdMedicoExecutante).HasColumnName("ID_MEDICO_EXECUTANTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipoApac).HasColumnName("ID_TIPO_APAC");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeSolicitante).HasColumnName("ID_UNIDADE_SOLICITANTE");

                entity.Property(e => e.IdUsuarioDiasAutorizados).HasColumnName("ID_USUARIO_DIAS_AUTORIZADOS");

                entity.Property(e => e.IdUsuarioDiasMinimo).HasColumnName("ID_USUARIO_DIAS_MINIMO");

                entity.Property(e => e.IdUsuarioDiasSolicitados).HasColumnName("ID_USUARIO_DIAS_SOLICITADOS");

                entity.Property(e => e.InContrato).HasColumnName("IN_CONTRATO");

                entity.Property(e => e.InInterconsulta).HasColumnName("IN_INTERCONSULTA");

                entity.Property(e => e.InPermanencia).HasColumnName("IN_PERMANENCIA");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrDiasAutorizados).HasColumnName("NR_DIAS_AUTORIZADOS");

                entity.Property(e => e.NrDiasMinimo).HasColumnName("NR_DIAS_MINIMO");

                entity.Property(e => e.NrDiasSolicitados).HasColumnName("NR_DIAS_SOLICITADOS");

                entity.Property(e => e.NrGuia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrGuiaOperadora).HasColumnName("NR_GUIA_OPERADORA");

                entity.Property(e => e.NrLaudo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NR_LAUDO");

                entity.Property(e => e.NrOrdemSadtBpm).HasColumnName("NR_ORDEM_SADT_BPM");

                entity.Property(e => e.NrPedido)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NR_PEDIDO");

                entity.Property(e => e.NrProtocoloSams)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_PROTOCOLO_SAMS");

                entity.Property(e => e.NumPermanencia).HasColumnName("NUM_PERMANENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.GuiaIdMedicoNavigation)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_Medico_Guia");

                entity.HasOne(d => d.IdMedicoAutorizadorNavigation)
                    .WithMany(p => p.GuiaIdMedicoAutorizadorNavigation)
                    .HasForeignKey(d => d.IdMedicoAutorizador)
                    .HasConstraintName("FK_Guia_AutorizadorSus");

                entity.HasOne(d => d.IdMedicoExecutanteNavigation)
                    .WithMany(p => p.GuiaIdMedicoExecutanteNavigation)
                    .HasForeignKey(d => d.IdMedicoExecutante)
                    .HasConstraintName("FK_MedicoExecutante_Guia");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.GuiaIdOperadoraNavigation)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Guia_FK1");

                entity.HasOne(d => d.IdUnidadeSolicitanteNavigation)
                    .WithMany(p => p.Guia)
                    .HasForeignKey(d => d.IdUnidadeSolicitante)
                    .HasConstraintName("GUIA_UNIDADESOLICITANTE_FK1");

                entity.HasOne(d => d.IdUsuarioDiasAutorizadosNavigation)
                    .WithMany(p => p.GuiaIdUsuarioDiasAutorizadosNavigation)
                    .HasForeignKey(d => d.IdUsuarioDiasAutorizados)
                    .HasConstraintName("FK__Guia__ID_USUARIO__3DE7F9BE");

                entity.HasOne(d => d.IdUsuarioDiasMinimoNavigation)
                    .WithMany(p => p.GuiaIdUsuarioDiasMinimoNavigation)
                    .HasForeignKey(d => d.IdUsuarioDiasMinimo)
                    .HasConstraintName("FK__Guia__ID_USUARIO__3EDC1DF7");

                entity.HasOne(d => d.IdUsuarioDiasSolicitadosNavigation)
                    .WithMany(p => p.GuiaIdUsuarioDiasSolicitadosNavigation)
                    .HasForeignKey(d => d.IdUsuarioDiasSolicitados)
                    .HasConstraintName("FK__Guia__ID_USUARIO__3CF3D585");
            });

            modelBuilder.Entity<GuiaAtendimento>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdGuia })
                    .IsClustered(false);

                entity.ToTable("Guia_Atendimento");

                entity.HasIndex(e => e.IdGuia, "IX_GUIA")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.IdAtendimento, "IX_Guia_Atendimento_K1")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtual, e.IdAtendimento, e.IdGuia }, "IX_Guia_Atendimento_K4_K1_K2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrDiasUtilizados).HasColumnName("NR_DIAS_UTILIZADOS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.GuiaAtendimento)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Guia_Atendimento_Atendimento");

                entity.HasOne(d => d.IdGuiaNavigation)
                    .WithOne(p => p.GuiaAtendimento)
                    .HasForeignKey<GuiaAtendimento>(d => d.IdGuia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Guia_Atendimento_Guia");
            });

            modelBuilder.Entity<GuiaFaixaNumeracao>(entity =>
            {
                entity.HasKey(e => e.IdGuiaFaixaNumeracao)
                    .HasName("Guia_FaixaNumeracao_PK");

                entity.ToTable("Guia_FaixaNumeracao");

                entity.Property(e => e.IdGuiaFaixaNumeracao).HasColumnName("ID_GUIA_FAIXA_NUMERACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdSituacaoFaixaNumeracao).HasColumnName("ID_SITUACAO_FAIXA_NUMERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrAtTemp).HasColumnName("NR_AT_TEMP");

                entity.Property(e => e.NrFTemp).HasColumnName("NR_F_TEMP");

                entity.Property(e => e.NrFinal).HasColumnName("NR_FINAL");

                entity.Property(e => e.NrGuiaAtual).HasColumnName("NR_GUIA_ATUAL");

                entity.Property(e => e.NrITemp).HasColumnName("NR_I_TEMP");

                entity.Property(e => e.NrInicial).HasColumnName("NR_INICIAL");

                entity.Property(e => e.QnDisponivel).HasColumnName("QN_DISPONIVEL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.GuiaFaixaNumeracao)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Guia_FaixaNumeracao_FK1");

                entity.HasOne(d => d.IdSituacaoFaixaNumeracaoNavigation)
                    .WithMany(p => p.GuiaFaixaNumeracao)
                    .HasForeignKey(d => d.IdSituacaoFaixaNumeracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Guia_FaixaNumeracao_FK1");
            });

            modelBuilder.Entity<GuiaFiscal>(entity =>
            {
                entity.HasKey(e => e.IdGuiafiscal);

                entity.Property(e => e.IdGuiafiscal).HasColumnName("ID_GUIAFISCAL");

                entity.Property(e => e.CdRecolhimento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_RECOLHIMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.IdTipoTributo).HasColumnName("ID_TIPO_TRIBUTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxIdentificacao)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICACAO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlGuia)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GUIA");

                entity.HasOne(d => d.IdImpostoRetidoNavigation)
                    .WithMany(p => p.GuiaFiscal)
                    .HasForeignKey(d => d.IdImpostoRetido)
                    .HasConstraintName("FK_GUIAFISCAL_IMPOSTORETIDO");

                entity.HasOne(d => d.IdTipoTributoNavigation)
                    .WithMany(p => p.GuiaFiscal)
                    .HasForeignKey(d => d.IdTipoTributo);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GuiaFiscal)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<GuiaFiscalContaPagarTributoAliquota>(entity =>
            {
                entity.HasKey(e => e.IdGuiafiscalContaPagarTributoAliquota);

                entity.ToTable("GuiaFiscal_ContaPagar_TributoAliquota");

                entity.Property(e => e.IdGuiafiscalContaPagarTributoAliquota).HasColumnName("ID_GUIAFISCAL_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaPagarTributoAliquota).HasColumnName("ID_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdGuiafiscal).HasColumnName("ID_GUIAFISCAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdContaPagarTributoAliquotaNavigation)
                    .WithMany(p => p.GuiaFiscalContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdContaPagarTributoAliquota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuiaFiscal_ContaPagar_TributoAliquota_ContaPagar_TributoAliquota");

                entity.HasOne(d => d.IdGuiafiscalNavigation)
                    .WithMany(p => p.GuiaFiscalContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdGuiafiscal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuiaFiscal_ContaPagar_TributoAliquota_GuiaFiscal");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GuiaFiscalContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuiaFiscal_ContaPagar_TributoAliquota_Usuario");
            });

            modelBuilder.Entity<GuiaFiscalContaPagarTributoAliquotaLog>(entity =>
            {
                entity.HasKey(e => e.IdGuiafiscalContapagarTributoaliquotaLog);

                entity.ToTable("GuiaFiscal_ContaPagar_TributoAliquota_Log");

                entity.Property(e => e.IdGuiafiscalContapagarTributoaliquotaLog).HasColumnName("ID_GUIAFISCAL_CONTAPAGAR_TRIBUTOALIQUOTA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaPagarTributoAliquota).HasColumnName("ID_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdGuiafiscal).HasColumnName("ID_GUIAFISCAL");

                entity.Property(e => e.IdGuiafiscalContaPagarTributoAliquota).HasColumnName("ID_GUIAFISCAL_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.GuiaFiscalContaPagarTributoAliquotaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<GuiaFiscalImposto>(entity =>
            {
                entity.HasKey(e => e.IdGuiafiscalImposto);

                entity.ToTable("GuiaFiscal_Imposto");

                entity.Property(e => e.IdGuiafiscalImposto).HasColumnName("ID_GUIAFISCAL_IMPOSTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdGuiafiscal).HasColumnName("ID_GUIAFISCAL");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdGuiafiscalNavigation)
                    .WithMany(p => p.GuiaFiscalImposto)
                    .HasForeignKey(d => d.IdGuiafiscal)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.GuiaFiscalImposto)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.GuiaFiscalImposto)
                    .HasForeignKey(d => new { d.IdContaPagar, d.IdImpostoRetido })
                    .HasConstraintName("FK_GFImposto__ContaPagar_ImpostoRetido_IDCP_IDIR");
            });

            modelBuilder.Entity<GuiaFiscalLog>(entity =>
            {
                entity.HasKey(e => e.IdGuiafiscalLog);

                entity.ToTable("GuiaFiscal_Log");

                entity.Property(e => e.IdGuiafiscalLog).HasColumnName("ID_GUIAFISCAL_LOG");

                entity.Property(e => e.CdRecolhimento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_RECOLHIMENTO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdGuiafiscal).HasColumnName("ID_GUIAFISCAL");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.IdTipoTributo).HasColumnName("ID_TIPO_TRIBUTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxIdentificacao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICACAO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlGuia)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GUIA");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.GuiaFiscalLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("FK_GuiaFiscal_Usuario_ID_USUARIO_OPERACAO");
            });

            modelBuilder.Entity<HabilitacaoSusCredenciada>(entity =>
            {
                entity.HasKey(e => e.IdHabilitacaoSusCredenciada)
                    .HasName("PK__Habilita__3830064E573133C7");

                entity.Property(e => e.IdHabilitacaoSusCredenciada).HasColumnName("ID_HABILITACAO_SUS_CREDENCIADA");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtCompetenciaFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COMPETENCIA_FINAL");

                entity.Property(e => e.DtCompetenciaIncial)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COMPETENCIA_INCIAL");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtPortaria)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PORTARIA");

                entity.Property(e => e.IdTipoHabilitacao).HasColumnName("ID_TIPO_HABILITACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InOrigem).HasColumnName("IN_ORIGEM");

                entity.Property(e => e.QnLeitoSus)
                    .HasColumnName("QN_LEITO_SUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxDescPortaria)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_PORTARIA");
            });

            modelBuilder.Entity<HabilitacaoSusHistorico>(entity =>
            {
                entity.HasKey(e => e.IdTipoHabilitacaoHistorico)
                    .HasName("PK__Habilita__86A846CF518D690A");

                entity.ToTable("HabilitacaoSus_Historico");

                entity.Property(e => e.IdTipoHabilitacaoHistorico).HasColumnName("ID_TIPO_HABILITACAO_HISTORICO");

                entity.Property(e => e.IdTipoHabilitacao).HasColumnName("ID_TIPO_HABILITACAO");

                entity.Property(e => e.TxCompetencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.HasOne(d => d.IdTipoHabilitacaoNavigation)
                    .WithMany(p => p.HabilitacaoSusHistorico)
                    .HasForeignKey(d => d.IdTipoHabilitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoHabilitacaoSus_HabilitacaoSus_Historico");
            });

            modelBuilder.Entity<HemoProcedimento>(entity =>
            {
                entity.HasKey(e => e.IdHemoProcedimento);

                entity.HasIndex(e => e.CdProcedimento, "UK_HemoProcedimento_CD_PROCEDIMENTO")
                    .IsUnique();

                entity.Property(e => e.IdHemoProcedimento).HasColumnName("ID_HEMO_PROCEDIMENTO");

                entity.Property(e => e.CdProcedimento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_PROCEDIMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoGrupo)
                    .HasColumnName("ID_TIPO_GRUPO")
                    .HasDefaultValueSql("((54506))");

                entity.Property(e => e.IdTipoProcedimento).HasColumnName("ID_TIPO_PROCEDIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.HemoProcedimento)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HemoProcedimento_Servico");

                entity.HasOne(d => d.IdTipoGrupoNavigation)
                    .WithMany(p => p.HemoProcedimentoIdTipoGrupoNavigation)
                    .HasForeignKey(d => d.IdTipoGrupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HemoProcedimento_TipoGrupo");

                entity.HasOne(d => d.IdTipoProcedimentoNavigation)
                    .WithMany(p => p.HemoProcedimentoIdTipoProcedimentoNavigation)
                    .HasForeignKey(d => d.IdTipoProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HemoProcedimento_TipoProcedimento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.HemoProcedimento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HemoProcedimento_Usuario");
            });

            modelBuilder.Entity<HorarioDiaSemana>(entity =>
            {
                entity.HasKey(e => e.IdHorarioDiaSemana)
                    .HasName("HorarioDiaSemana_PK");

                entity.Property(e => e.IdHorarioDiaSemana).HasColumnName("ID_HORARIO_DIA_SEMANA");

                entity.Property(e => e.HrFim)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_FIM")
                    .IsFixedLength(true);

                entity.Property(e => e.HrInicio)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_INICIO")
                    .IsFixedLength(true);

                entity.Property(e => e.IdDiaSemana).HasColumnName("ID_DIA_SEMANA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDiaSemanaNavigation)
                    .WithMany(p => p.HorarioDiaSemana)
                    .HasForeignKey(d => d.IdDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_HorarioDiaSemana_FK1");
            });

            modelBuilder.Entity<HorarioHemodinamica>(entity =>
            {
                entity.HasKey(e => e.IdHorario)
                    .HasName("HorariosHemodinamica_PK");

                entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");

                entity.Property(e => e.HrHora)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORA");

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.HorarioHemodinamica)
                    .HasForeignKey(d => d.IdTipoDiversos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_HorariosHemodinamica_FK1");
            });

            modelBuilder.Entity<HorarioLaboratorio>(entity =>
            {
                entity.HasKey(e => e.IdHorarioLaboratorio)
                    .HasName("HorarioLaboratorio_PK");

                entity.Property(e => e.IdHorarioLaboratorio).HasColumnName("ID_HORARIO_LABORATORIO");

                entity.Property(e => e.NmHorarioLaboratorio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_HORARIO_LABORATORIO");
            });

            modelBuilder.Entity<HorarioLaboratorioDiaSemana>(entity =>
            {
                entity.HasKey(e => new { e.IdDiaSemanaTipo, e.HrInicio, e.HrFim });

                entity.ToTable("HorarioLaboratorio_DiaSemana");

                entity.Property(e => e.IdDiaSemanaTipo).HasColumnName("ID_DIA_SEMANA_TIPO");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.IdHorarioLaboratorio).HasColumnName("ID_HORARIO_LABORATORIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDiaSemanaTipoNavigation)
                    .WithMany(p => p.HorarioLaboratorioDiaSemana)
                    .HasForeignKey(d => d.IdDiaSemanaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_HorarioLaboratorio_DiaSemana_FK1");

                entity.HasOne(d => d.IdHorarioLaboratorioNavigation)
                    .WithMany(p => p.HorarioLaboratorioDiaSemana)
                    .HasForeignKey(d => d.IdHorarioLaboratorio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("HorarioLaboratorio_HorarioLaboratorio_DiaSemana_FK1");
            });

            modelBuilder.Entity<HorarioPlantao>(entity =>
            {
                entity.HasKey(e => e.IdHorarioPlantao)
                    .HasName("HorarioPlantao_PK");

                entity.Property(e => e.IdHorarioPlantao).HasColumnName("ID_HORARIO_PLANTAO");

                entity.Property(e => e.DtHorarioPlantao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HORARIO_PLANTAO");

                entity.Property(e => e.HrFim)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_FIM")
                    .IsFixedLength(true);

                entity.Property(e => e.HrInicio)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_INICIO")
                    .IsFixedLength(true);

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.HorarioPlantao)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_HorarioPlantao_TipoDiversos");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.HorarioPlantao)
                    .HasForeignKey(d => new { d.IdPessoaEntidade, d.IdPessoa })
                    .HasConstraintName("FK_HorarioPlantao_Relacionamento");
            });

            modelBuilder.Entity<HospitalarAtendimentoTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HospitalarAtendimento_TESTE");

                entity.Property(e => e.DtEntrada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTRADA");

                entity.Property(e => e.IdAtendimentoTipo).HasColumnName("ID_ATENDIMENTO_TIPO");

                entity.Property(e => e.IdCentroCusto).HasColumnName("ID_CENTRO_CUSTO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");
            });

            modelBuilder.Entity<HospitalarSolicitacaoSuprimentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HospitalarSolicitacaoSuprimentos");

                entity.Property(e => e.IdCentroCustosPrestador).HasColumnName("ID_CENTRO_CUSTOS_PRESTADOR");

                entity.Property(e => e.IdCentroCustosReceptor).HasColumnName("ID_CENTRO_CUSTOS_RECEPTOR");

                entity.Property(e => e.NrAno).HasColumnName("NR_ANO");

                entity.Property(e => e.NrMes).HasColumnName("NR_MES");

                entity.Property(e => e.QnSolicitacao).HasColumnName("QN_SOLICITACAO");
            });

            modelBuilder.Entity<HospitaleBionexoTraducao>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalhe);

                entity.Property(e => e.IdProdutoDetalhe)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoBionexo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_PRODUTO_BIONEXO");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithOne(p => p.HospitaleBionexoTraducao)
                    .HasForeignKey<HospitaleBionexoTraducao>(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HospitaleBionexoTraducao_ProdutoDetalhe");
            });

            modelBuilder.Entity<HospitaleLogScript>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data que foi executado o script");

                entity.Property(e => e.IdWorkItem).HasColumnName("ID_WORK_ITEM");

                entity.Property(e => e.NmArquivo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO")
                    .HasComment("nome do arquivo do script");

                entity.Property(e => e.NmSprint)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SPRINT")
                    .HasComment("nome do sprint do script executado");

                entity.Property(e => e.NmWorkItem)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NM_WORK_ITEM");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("legenda do arquivo de script");
            });

            modelBuilder.Entity<Imagem>(entity =>
            {
                entity.HasKey(e => e.IdImagem);

                entity.Property(e => e.IdImagem).HasColumnName("ID_IMAGEM");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxImagem)
                    .HasMaxLength(109)
                    .IsUnicode(false)
                    .HasColumnName("TX_IMAGEM")
                    .HasComputedColumnSql("('Aquisição'+CONVERT([varchar](100),[id_imagem],(0)))", false);
            });

            modelBuilder.Entity<ImovelTipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Imovel_Tipo");

                entity.Property(e => e.Abr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ABR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Ti)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TI");
            });

            modelBuilder.Entity<Importacao>(entity =>
            {
                entity.HasKey(e => e.IdImportacao);

                entity.Property(e => e.IdImportacao).HasColumnName("ID_IMPORTACAO");

                entity.Property(e => e.InImportado).HasColumnName("IN_IMPORTADO");

                entity.Property(e => e.InSucesso).HasColumnName("IN_SUCESSO");

                entity.Property(e => e.TxArquivo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO");

                entity.Property(e => e.TxResultado)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESULTADO");
            });

            modelBuilder.Entity<ImportacaoBionexo>(entity =>
            {
                entity.HasKey(e => e.IdImportacaoBionexo);

                entity.Property(e => e.IdImportacaoBionexo).HasColumnName("ID_IMPORTACAO_BIONEXO");

                entity.Property(e => e.DtImportacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPORTACAO");

                entity.Property(e => e.IdCotacao).HasColumnName("ID_COTACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InSucesso).HasColumnName("IN_SUCESSO");

                entity.Property(e => e.TxLog)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOG");

                entity.Property(e => e.XmArquivo)
                    .HasColumnType("text")
                    .HasColumnName("XM_ARQUIVO");

                entity.HasOne(d => d.IdCotacaoNavigation)
                    .WithMany(p => p.ImportacaoBionexo)
                    .HasForeignKey(d => d.IdCotacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImportacaoBionexo_Cotacao");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ImportacaoBionexo)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ImportacaoBionexo_Usuario");
            });

            modelBuilder.Entity<ImportacaoBionexoBackup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtImportacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPORTACAO");

                entity.Property(e => e.IdCotacao).HasColumnName("ID_COTACAO");

                entity.Property(e => e.IdImportacaoBionexo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_IMPORTACAO_BIONEXO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InSucesso).HasColumnName("IN_SUCESSO");

                entity.Property(e => e.TxLog)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOG");

                entity.Property(e => e.XmArquivo)
                    .HasColumnType("text")
                    .HasColumnName("XM_ARQUIVO");
            });

            modelBuilder.Entity<ImportacaoDesativarProdutoDetalhe>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Produto).HasMaxLength(255);
            });

            modelBuilder.Entity<ImportacaoDespadronizarProdutoDetalhe>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Produto).HasMaxLength(150);
            });

            modelBuilder.Entity<ImportacaoNotaFiscal>(entity =>
            {
                entity.HasKey(e => e.IdNfse);

                entity.Property(e => e.IdNfse).HasColumnName("ID_NFSE");

                entity.Property(e => e.Aliquota).IsUnicode(false);

                entity.Property(e => e.BaseCalculo).IsUnicode(false);

                entity.Property(e => e.CodigoMunicipio).IsUnicode(false);

                entity.Property(e => e.CodigoTributacaoMunicipio).IsUnicode(false);

                entity.Property(e => e.CodigoVerificacao).IsUnicode(false);

                entity.Property(e => e.Competencia).IsUnicode(false);

                entity.Property(e => e.DataEmissao).IsUnicode(false);

                entity.Property(e => e.DataEmissaoRps).IsUnicode(false);

                entity.Property(e => e.Discriminacao).IsUnicode(false);

                entity.Property(e => e.IdentificacaoRpsNumero)
                    .IsUnicode(false)
                    .HasColumnName("IdentificacaoRps_Numero");

                entity.Property(e => e.IdentificacaoRpsSerie)
                    .IsUnicode(false)
                    .HasColumnName("IdentificacaoRps_Serie");

                entity.Property(e => e.IdentificacaoRpsTipo)
                    .IsUnicode(false)
                    .HasColumnName("IdentificacaoRps_Tipo");

                entity.Property(e => e.IncentivadorCultural).IsUnicode(false);

                entity.Property(e => e.InfNfseId)
                    .IsUnicode(false)
                    .HasColumnName("InfNfse_Id");

                entity.Property(e => e.IssRetido).IsUnicode(false);

                entity.Property(e => e.ItemListaServico).IsUnicode(false);

                entity.Property(e => e.NaturezaOperacao).IsUnicode(false);

                entity.Property(e => e.NfseCancelamentoCodigoCancelamento)
                    .IsUnicode(false)
                    .HasColumnName("NfseCancelamento_CodigoCancelamento");

                entity.Property(e => e.NfseCancelamentoConfirmacaoId)
                    .IsUnicode(false)
                    .HasColumnName("NfseCancelamento_Confirmacao_Id");

                entity.Property(e => e.NfseCancelamentoDataHora)
                    .IsUnicode(false)
                    .HasColumnName("NfseCancelamento_DataHora");

                entity.Property(e => e.NfseCancelamentoInfPedidoCancelamentoId)
                    .IsUnicode(false)
                    .HasColumnName("NfseCancelamento_InfPedidoCancelamento_Id");

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.OptanteSimplesNacional).IsUnicode(false);

                entity.Property(e => e.OrgaoGeradorCodigoMunicipio)
                    .IsUnicode(false)
                    .HasColumnName("OrgaoGerador_CodigoMunicipio");

                entity.Property(e => e.OrgaoGeradorUf)
                    .IsUnicode(false)
                    .HasColumnName("OrgaoGerador_Uf");

                entity.Property(e => e.OutrasRetencoes).IsUnicode(false);

                entity.Property(e => e.PrestadorServicoBairro)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Bairro");

                entity.Property(e => e.PrestadorServicoCep)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Cep");

                entity.Property(e => e.PrestadorServicoCnpj)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Cnpj");

                entity.Property(e => e.PrestadorServicoCodigoMunicipio)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_CodigoMunicipio");

                entity.Property(e => e.PrestadorServicoEmail)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Email");

                entity.Property(e => e.PrestadorServicoEndereco)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Endereco");

                entity.Property(e => e.PrestadorServicoInscricaoMunicipal)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_InscricaoMunicipal");

                entity.Property(e => e.PrestadorServicoNumero)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Numero");

                entity.Property(e => e.PrestadorServicoRazaoSocial)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_RazaoSocial");

                entity.Property(e => e.PrestadorServicoTelefone)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Telefone");

                entity.Property(e => e.PrestadorServicoUf)
                    .IsUnicode(false)
                    .HasColumnName("PrestadorServico_Uf");

                entity.Property(e => e.TomadorServicoBairro)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_Bairro");

                entity.Property(e => e.TomadorServicoCep)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_Cep");

                entity.Property(e => e.TomadorServicoCodigoMunicipio)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_CodigoMunicipio");

                entity.Property(e => e.TomadorServicoComplemento)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_Complemento");

                entity.Property(e => e.TomadorServicoCpfCnpj)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_CpfCnpj");

                entity.Property(e => e.TomadorServicoEndereco)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_Endereco");

                entity.Property(e => e.TomadorServicoNumero)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_Numero");

                entity.Property(e => e.TomadorServicoRazaoSocial)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_RazaoSocial");

                entity.Property(e => e.TomadorServicoUf)
                    .IsUnicode(false)
                    .HasColumnName("TomadorServico_Uf");

                entity.Property(e => e.ValorCofins).IsUnicode(false);

                entity.Property(e => e.ValorCsll).IsUnicode(false);

                entity.Property(e => e.ValorDeducoes).IsUnicode(false);

                entity.Property(e => e.ValorInss).IsUnicode(false);

                entity.Property(e => e.ValorIr).IsUnicode(false);

                entity.Property(e => e.ValorIss).IsUnicode(false);

                entity.Property(e => e.ValorLiquidoNfse).IsUnicode(false);

                entity.Property(e => e.ValorPis).IsUnicode(false);

                entity.Property(e => e.ValorServicos).IsUnicode(false);
            });

            modelBuilder.Entity<Imposto>(entity =>
            {
                entity.HasKey(e => e.IdImposto);

                entity.Property(e => e.IdImposto).HasColumnName("ID_IMPOSTO");

                entity.Property(e => e.CdImposto).HasColumnName("CD_IMPOSTO");

                entity.Property(e => e.IdRecolhimentoTipo).HasColumnName("ID_RECOLHIMENTO_TIPO");

                entity.Property(e => e.IdTipoImposto).HasColumnName("ID_TIPO_IMPOSTO");

                entity.Property(e => e.NmImposto)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_IMPOSTO");

                entity.Property(e => e.VlAliquota).HasColumnName("VL_ALIQUOTA");

                entity.Property(e => e.VlCofins).HasColumnName("VL_COFINS");

                entity.Property(e => e.VlCsll).HasColumnName("VL_CSLL");

                entity.Property(e => e.VlPis).HasColumnName("VL_PIS");
            });

            modelBuilder.Entity<ImpostoRetido>(entity =>
            {
                entity.HasKey(e => e.IdImpostoRetido)
                    .HasName("ImpostoRetido_PK");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.IdTipoImpostoRetido).HasColumnName("ID_TIPO_IMPOSTO_RETIDO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmImpostoRetido)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_IMPOSTO_RETIDO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdTipoImpostoRetidoNavigation)
                    .WithMany(p => p.ImpostoRetido)
                    .HasForeignKey(d => d.IdTipoImpostoRetido);
            });

            modelBuilder.Entity<ImpressaoEtiqueta>(entity =>
            {
                entity.HasKey(e => e.IdImpresaoEtiqueta)
                    .HasName("PK_ImpressaoEtiqueta_1");

                entity.Property(e => e.IdImpresaoEtiqueta)
                    .HasColumnName("ID_IMPRESAO_ETIQUETA")
                    .HasComment("identificador único do texto da impressao");

                entity.Property(e => e.IdTipoImpressao)
                    .HasColumnName("ID_TIPO_IMPRESSAO")
                    .HasComment("tipo da impressao, tipo tabela 409");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxImpressao)
                    .IsRequired()
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("TX_IMPRESSAO")
                    .HasComment("texto com códi; que será enviado a impressora");

                entity.Property(e => e.TxInstrucoes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_INSTRUCOES")
                    .HasComment("armazena as variaveis que o usuario pode utilizar");

                entity.HasOne(d => d.IdTipoImpressaoNavigation)
                    .WithMany(p => p.ImpressaoEtiqueta)
                    .HasForeignKey(d => d.IdTipoImpressao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpressaoEtiqueta_TipoDiversos");
            });

            modelBuilder.Entity<ImpressoraUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => e.IdImpressoraUnidadeOrganizacional);

                entity.Property(e => e.IdImpressoraUnidadeOrganizacional).HasColumnName("ID_IMPRESSORA_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmImpressora)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_IMPRESSORA");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ImpressoraUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpressoraUnidadeOrganizacional_UnidadeOrganizacional");
            });

            modelBuilder.Entity<IndicadorEconomico>(entity =>
            {
                entity.HasKey(e => e.IdIndicadorEconomico)
                    .HasName("IndicadorEconomico_PK");

                entity.Property(e => e.IdIndicadorEconomico).HasColumnName("ID_INDICADOR_ECONOMICO");

                entity.Property(e => e.IdIndicadorEconomicoTipo).HasColumnName("ID_INDICADOR_ECONOMICO_TIPO");

                entity.Property(e => e.NrAno).HasColumnName("NR_ANO");

                entity.Property(e => e.NrMes).HasColumnName("NR_MES");

                entity.Property(e => e.PrIndicadorEconomico).HasColumnName("PR_INDICADOR_ECONOMICO");

                entity.HasOne(d => d.IdIndicadorEconomicoTipoNavigation)
                    .WithMany(p => p.IndicadorEconomico)
                    .HasForeignKey(d => d.IdIndicadorEconomicoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_IndicadorEconomico_FK1");
            });

            modelBuilder.Entity<InspecaoRecebimento>(entity =>
            {
                entity.HasKey(e => e.IdInspecaoRecebimento);

                entity.HasIndex(e => e.IdFornecedor, "IX_InspecaoRecebimento_ID_FORNECEDOR")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdFornecedor, e.DtRecebimento, e.InAtivo, e.IdInspecaoRecebimento, e.IdTipoEntrega, e.IdTipoNotaEntrada, e.IdUsuario, e.NrNotaFiscal }, "IX_InspecaoRecebimento_K3_K2_K13_K1_K7_K6_K12_K4_10")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdInspecaoRecebimento).HasColumnName("ID_INSPECAO_RECEBIMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.DtRecolhimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECOLHIMENTO");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdTipoEntrega).HasColumnName("ID_TIPO_ENTREGA");

                entity.Property(e => e.IdTipoNotaEntrada).HasColumnName("ID_TIPO_NOTA_ENTRADA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioExcluiu).HasColumnName("ID_USUARIO_EXCLUIU");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmTransportadora)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_TRANSPORTADORA");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.InspecaoRecebimento)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspecaoRecebimento_Pessoa");

                entity.HasOne(d => d.IdTipoEntregaNavigation)
                    .WithMany(p => p.InspecaoRecebimentoIdTipoEntregaNavigation)
                    .HasForeignKey(d => d.IdTipoEntrega)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspecaoRecebimento_TipoDiversos1");

                entity.HasOne(d => d.IdTipoNotaEntradaNavigation)
                    .WithMany(p => p.InspecaoRecebimentoIdTipoNotaEntradaNavigation)
                    .HasForeignKey(d => d.IdTipoNotaEntrada)
                    .HasConstraintName("FK_InspecaoRecebimento_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.InspecaoRecebimentoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspecaoRecebimento_Usuario");

                entity.HasOne(d => d.IdUsuarioExcluiuNavigation)
                    .WithMany(p => p.InspecaoRecebimentoIdUsuarioExcluiuNavigation)
                    .HasForeignKey(d => d.IdUsuarioExcluiu)
                    .HasConstraintName("FK_InspecaoRecebimento_Usuario1");
            });

            modelBuilder.Entity<InspecaoRecebimentoOrdemCompra>(entity =>
            {
                entity.HasKey(e => new { e.IdInspecaoRecebimento, e.IdOrdemCompra });

                entity.ToTable("InspecaoRecebimento_OrdemCompra");

                entity.Property(e => e.IdInspecaoRecebimento).HasColumnName("ID_INSPECAO_RECEBIMENTO");

                entity.Property(e => e.IdOrdemCompra).HasColumnName("ID_ORDEM_COMPRA");

                entity.HasOne(d => d.IdInspecaoRecebimentoNavigation)
                    .WithMany(p => p.InspecaoRecebimentoOrdemCompra)
                    .HasForeignKey(d => d.IdInspecaoRecebimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspecaoRecebimento_OrdemCompra_InspecaoRecebimento");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.InspecaoRecebimentoOrdemCompra)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspecaoRecebimento_OrdemCompra_OrdemCompra");
            });

            modelBuilder.Entity<InspecaoRecebimentoParametroAvaliacao>(entity =>
            {
                entity.HasKey(e => new { e.IdInspecaoRecebimento, e.IdParametroAvaliacao });

                entity.ToTable("InspecaoRecebimento_ParametroAvaliacao");

                entity.HasIndex(e => e.IdParametroAvaliacao, "IX_InspecaoRecebimento_ParametroAvaliacao_K2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdInspecaoRecebimento).HasColumnName("ID_INSPECAO_RECEBIMENTO");

                entity.Property(e => e.IdParametroAvaliacao).HasColumnName("ID_PARAMETRO_AVALIACAO");

                entity.HasOne(d => d.IdInspecaoRecebimentoNavigation)
                    .WithMany(p => p.InspecaoRecebimentoParametroAvaliacao)
                    .HasForeignKey(d => d.IdInspecaoRecebimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspecaoRecebimento_ParametroAvaliacao_InspecaoRecebimento");

                entity.HasOne(d => d.IdParametroAvaliacaoNavigation)
                    .WithMany(p => p.InspecaoRecebimentoParametroAvaliacao)
                    .HasForeignKey(d => d.IdParametroAvaliacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InspecaoRecebimento_ParametroAvaliacao_ParametroAvaliacaoRecebimento");
            });

            modelBuilder.Entity<IntegraSistemaLegado>(entity =>
            {
                entity.HasKey(e => new { e.IdHospitale, e.IdSistemaLegado, e.IdEntidadeTipo })
                    .HasName("IntegraSistemaLegado_PK");

                entity.HasIndex(e => e.IdEntidadeTipo, "IX_INTEGRASISTEMALEGADO_K1")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdSistemaLegado, e.IdEntidadeTipo }, "IX_IntegraSistemaLegado_ID_SISTEMA_LEGADO_ID_ENTIDADE_TIPO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdHospitale).HasColumnName("ID_HOSPITALE");

                entity.Property(e => e.IdSistemaLegado).HasColumnName("ID_SISTEMA_LEGADO");

                entity.Property(e => e.IdEntidadeTipo).HasColumnName("ID_ENTIDADE_TIPO");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.IdSistemaLegadoString)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID_SISTEMA_LEGADO_STRING");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEntidadeTipoNavigation)
                    .WithMany(p => p.IntegraSistemaLegado)
                    .HasForeignKey(d => d.IdEntidadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_IntegraSistemaLegado_FK1");
            });

            modelBuilder.Entity<IntegracaoAgendaAgendamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Agendamentos");

                entity.Property(e => e.DataHoraAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("data_hora_agenda");

                entity.Property(e => e.DataHoraMarcacao)
                    .HasColumnType("datetime")
                    .HasColumnName("data_hora_marcacao");

                entity.Property(e => e.EMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("e_mail");

                entity.Property(e => e.IdAgenda).HasColumnName("id_agenda");

                entity.Property(e => e.IdPaciente).HasColumnName("id_paciente");

                entity.Property(e => e.IdProcedimento).HasColumnName("id_procedimento");

                entity.Property(e => e.IdSetor).HasColumnName("id_setor");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_medico");

                entity.Property(e => e.NomeHospital)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("nome_hospital");

                entity.Property(e => e.Paciente)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("paciente");

                entity.Property(e => e.Procedimento)
                    .IsUnicode(false)
                    .HasColumnName("procedimento");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("telefone");

                entity.Property(e => e.TelefoneHospital)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("telefone_hospital");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("tipo");

                entity.Property(e => e.Unidade)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("unidade");
            });

            modelBuilder.Entity<IntegracaoAgendaAtendimentosPaciente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Atendimentos_Paciente");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_atendimento");

                entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdOperadora).HasColumnName("id_operadora");

                entity.Property(e => e.IdPaciente).HasColumnName("id_paciente");

                entity.Property(e => e.IdRecurso).HasColumnName("id_recurso");

                entity.Property(e => e.IdServico).HasColumnName("id_servico");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.PrazoRetorno).HasColumnName("prazo_retorno");
            });

            modelBuilder.Entity<IntegracaoAgendaHorarios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Horarios");

                entity.Property(e => e.Horario)
                    .HasColumnType("datetime")
                    .HasColumnName("horario");

                entity.Property(e => e.IdAgendaConfig).HasColumnName("id_agenda_config");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdRecurso).HasColumnName("id_recurso");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.NrDuracao).HasColumnName("nr_duracao");
            });

            modelBuilder.Entity<IntegracaoAgendaHorariosChatBot>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Horarios_ChatBot");

                entity.Property(e => e.Horario)
                    .HasColumnType("datetime")
                    .HasColumnName("horario");

                entity.Property(e => e.IdAgendaConfig).HasColumnName("id_agenda_config");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdRecurso).HasColumnName("id_recurso");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.InOnline).HasColumnName("IN_ONLINE");

                entity.Property(e => e.InPrimeiraConsulta).HasColumnName("IN_PRIMEIRA_CONSULTA");

                entity.Property(e => e.InRetorno).HasColumnName("IN_RETORNO");

                entity.Property(e => e.InTelemedicina).HasColumnName("IN_TELEMEDICINA");

                entity.Property(e => e.NrDuracao).HasColumnName("nr_duracao");
            });

            modelBuilder.Entity<IntegracaoAgendaHorariosChatBotTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Horarios_ChatBotTeste");

                entity.Property(e => e.Horario)
                    .HasColumnType("datetime")
                    .HasColumnName("horario");

                entity.Property(e => e.IdAgendaConfig).HasColumnName("id_agenda_config");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdRecurso).HasColumnName("id_recurso");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.InOnline).HasColumnName("IN_ONLINE");

                entity.Property(e => e.InPrimeiraConsulta).HasColumnName("IN_PRIMEIRA_CONSULTA");

                entity.Property(e => e.InRetorno).HasColumnName("IN_RETORNO");

                entity.Property(e => e.NrDuracao).HasColumnName("nr_duracao");
            });

            modelBuilder.Entity<IntegracaoAgendaHorariosTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Horarios_Teste");

                entity.Property(e => e.Horario)
                    .HasColumnType("datetime")
                    .HasColumnName("horario");

                entity.Property(e => e.IdAgendaConfig).HasColumnName("id_agenda_config");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdRecurso).HasColumnName("id_recurso");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.NrDuracao).HasColumnName("nr_duracao");
            });

            modelBuilder.Entity<IntegracaoAgendaMarcacoesPaciente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Marcacoes_Paciente");

                entity.Property(e => e.DtAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_agenda");

                entity.Property(e => e.Equipamento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("equipamento");

                entity.Property(e => e.IdAgendamento).HasColumnName("id_agendamento");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdPaciente).HasColumnName("id_paciente");

                entity.Property(e => e.IdProcedimento).HasColumnName("id_procedimento");

                entity.Property(e => e.IdUnidade).HasColumnName("id_unidade");

                entity.Property(e => e.Medico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("medico");

                entity.Property(e => e.Operadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("operadora");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("paciente");

                entity.Property(e => e.Procedimento)
                    .IsUnicode(false)
                    .HasColumnName("procedimento");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Unidade)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("unidade");
            });

            modelBuilder.Entity<IntegracaoAgendaMedico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Medico");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdUnidade).HasColumnName("id_unidade");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(202)
                    .IsUnicode(false)
                    .HasColumnName("nm_medico");
            });

            modelBuilder.Entity<IntegracaoAgendaMedicoRecurso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Medico_Recurso");

                entity.Property(e => e.IdAgenda)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_agenda");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdRecurso).HasColumnName("id_recurso");
            });

            modelBuilder.Entity<IntegracaoAgendaOperadora>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Operadora");

                entity.Property(e => e.IdOperadora).HasColumnName("id_operadora");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_operadora");
            });

            modelBuilder.Entity<IntegracaoAgendaPaciente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Paciente");

                entity.Property(e => e.CdArea)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CD_AREA");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdIdentidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE");

                entity.Property(e => e.CdProntuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRONTUARIO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdSexo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmMae)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NrTelefone)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("NR_TELEFONE");
            });

            modelBuilder.Entity<IntegracaoAgendaPlano>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Plano");

                entity.Property(e => e.IdOperadora).HasColumnName("id_operadora");

                entity.Property(e => e.IdPlano)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_plano");

                entity.Property(e => e.NmPlano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("nm_plano");
            });

            modelBuilder.Entity<IntegracaoAgendaProcedimento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Procedimento");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cd_servico");

                entity.Property(e => e.Duracao).HasColumnName("duracao");

                entity.Property(e => e.IdServico).HasColumnName("id_servico");

                entity.Property(e => e.IdServicoPreparo).HasColumnName("ID_SERVICO_PREPARO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.TxDescricaoPreparo)
                    .IsUnicode(false)
                    .HasColumnName("tx_descricao_preparo");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("tx_descricao_servico");
            });

            modelBuilder.Entity<IntegracaoAgendaProcedimentoUnidadeOperadora>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Procedimento_Unidade_Operadora");

                entity.Property(e => e.IdOperadora).HasColumnName("id_operadora");

                entity.Property(e => e.IdServico).HasColumnName("id_servico");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("tx_descricao_servico");
            });

            modelBuilder.Entity<IntegracaoAgendaUnidade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Integracao_Agenda_Unidade");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("nm_unidade_organizacional");

                entity.Property(e => e.TipoUnidade)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("tipo_unidade");
            });

            modelBuilder.Entity<IntegracaoConnect>(entity =>
            {
                entity.HasKey(e => e.IdIntegracao);

                entity.Property(e => e.IdIntegracao).HasColumnName("ID_INTEGRACAO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioExterno).HasColumnName("ID_USUARIO_EXTERNO");

                entity.Property(e => e.IdUsuarioExternoAutomatico).HasColumnName("ID_USUARIO_EXTERNO_AUTOMATICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxLoginAutomatico)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN_AUTOMATICO");

                entity.Property(e => e.TxSenhaAutomatica)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_SENHA_AUTOMATICA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.IntegracaoConnect)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntegracaoConnect_Pessoa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.IntegracaoConnect)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntegracaoConnect_Usuario");
            });

            modelBuilder.Entity<IntegracaoRecursoAgenda>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INTEGRACAO_RECURSO_AGENDA");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.NumAgendaAnt).HasColumnName("NUM_AGENDA_ANT");
            });

            modelBuilder.Entity<InteracaoMedicamentosa>(entity =>
            {
                entity.HasKey(e => e.IdInteracaoMedicamentosa)
                    .HasName("InteracaoMedicamentosa_PK");

                entity.Property(e => e.IdInteracaoMedicamentosa).HasColumnName("ID_INTERACAO_MEDICAMENTOSA");

                entity.Property(e => e.IdGrauSeveridade).HasColumnName("ID_GRAU_SEVERIDADE");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxDescricaoInteracao)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_INTERACAO");

                entity.HasOne(d => d.IdGrauSeveridadeNavigation)
                    .WithMany(p => p.InteracaoMedicamentosa)
                    .HasForeignKey(d => d.IdGrauSeveridade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_InteracaoMedicamentosa_FK1");
            });

            modelBuilder.Entity<InteracaoMedicamentosaPrincipioAtivo>(entity =>
            {
                entity.HasKey(e => new { e.IdInteracaoMedicamentosa, e.IdPrincipioAtivo })
                    .HasName("InteracaoMedicamentosa_PrincipioAtivo_PK");

                entity.ToTable("InteracaoMedicamentosa_PrincipioAtivo");

                entity.Property(e => e.IdInteracaoMedicamentosa).HasColumnName("ID_INTERACAO_MEDICAMENTOSA");

                entity.Property(e => e.IdPrincipioAtivo).HasColumnName("ID_PRINCIPIO_ATIVO");

                entity.HasOne(d => d.IdInteracaoMedicamentosaNavigation)
                    .WithMany(p => p.InteracaoMedicamentosaPrincipioAtivo)
                    .HasForeignKey(d => d.IdInteracaoMedicamentosa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("InteracaoMedicamentosa_InteracaoMedicamentosa_PrincipioAtivo_FK1");

                entity.HasOne(d => d.IdPrincipioAtivoNavigation)
                    .WithMany(p => p.InteracaoMedicamentosaPrincipioAtivo)
                    .HasForeignKey(d => d.IdPrincipioAtivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_InteracaoMedicamentosa_PrincipioAtivo_FK1");
            });

            modelBuilder.Entity<Interconsulta>(entity =>
            {
                entity.HasKey(e => e.IdInterconsulta)
                    .HasName("PK_Interconsulta_1");

                entity.Property(e => e.IdInterconsulta).HasColumnName("ID_INTERCONSULTA");

                entity.Property(e => e.DtPedidoInterconsulta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO_INTERCONSULTA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidadeInterconsulta).HasColumnName("ID_ESPECIALIDADE_INTERCONSULTA");

                entity.Property(e => e.IdMedicoResponsavel).HasColumnName("ID_MEDICO_RESPONSAVEL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.Interconsulta)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterConsulta_Atendimento");

                entity.HasOne(d => d.IdEspecialidadeInterconsultaNavigation)
                    .WithMany(p => p.Interconsulta)
                    .HasForeignKey(d => d.IdEspecialidadeInterconsulta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterConsulta_EspecialidadeTipo");

                entity.HasOne(d => d.IdMedicoResponsavelNavigation)
                    .WithMany(p => p.Interconsulta)
                    .HasForeignKey(d => d.IdMedicoResponsavel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterConsulta_PessoaMedico");
            });

            modelBuilder.Entity<InterconsultaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdInterconsultaHistorico);

                entity.Property(e => e.IdInterconsultaHistorico).HasColumnName("ID_INTERCONSULTA_HISTORICO");

                entity.Property(e => e.DtInterconsultaHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INTERCONSULTA_HISTORICO");

                entity.Property(e => e.DtPedidoInterconsulta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO_INTERCONSULTA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidadeInterconsulta).HasColumnName("ID_ESPECIALIDADE_INTERCONSULTA");

                entity.Property(e => e.IdInterconsulta).HasColumnName("ID_INTERCONSULTA");

                entity.Property(e => e.IdMedicoResponsavel).HasColumnName("ID_MEDICO_RESPONSAVEL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");
            });

            modelBuilder.Entity<Interface>(entity =>
            {
                entity.HasKey(e => e.IdInterface)
                    .HasName("Interface_PK");

                entity.Property(e => e.IdInterface).HasColumnName("ID_INTERFACE");

                entity.Property(e => e.NmInterface)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_INTERFACE");
            });

            modelBuilder.Entity<IntervaloAplicacaoMedicamento>(entity =>
            {
                entity.HasKey(e => e.IdIntervaloAplicacaoMedicamento)
                    .HasName("Intervalo_Aplicacao_Medicamento_PK");

                entity.Property(e => e.IdIntervaloAplicacaoMedicamento)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_INTERVALO_APLICACAO_MEDICAMENTO");

                entity.Property(e => e.HrInicioHorarioPadrao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO_HORARIO_PADRAO");

                entity.Property(e => e.IdTipoIntervalo).HasColumnName("ID_TIPO_INTERVALO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.TxAbrevIntervalo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABREV_INTERVALO");

                entity.Property(e => e.TxDescricaoIntervalo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_INTERVALO");

                entity.Property(e => e.VlIntervalo).HasColumnName("VL_INTERVALO");

                entity.HasOne(d => d.IdIntervaloAplicacaoMedicamentoNavigation)
                    .WithOne(p => p.IntervaloAplicacaoMedicamento)
                    .HasForeignKey<IntervaloAplicacaoMedicamento>(d => d.IdIntervaloAplicacaoMedicamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntervaloAplicacaoMedicamento_TipoIntervalo");
            });

            modelBuilder.Entity<Inventario>(entity =>
            {
                entity.HasKey(e => e.IdInventario);

                entity.Property(e => e.IdInventario).HasColumnName("ID_INVENTARIO");

                entity.Property(e => e.DtAtualizacaoInventario)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO_INVENTARIO");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.DtInventario)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INVENTARIO");

                entity.Property(e => e.IdCoordenador).HasColumnName("ID_COORDENADOR");

                entity.Property(e => e.IdResponsavelAutorizacao).HasColumnName("ID_RESPONSAVEL_AUTORIZACAO");

                entity.Property(e => e.IdStatusInventario).HasColumnName("ID_STATUS_INVENTARIO");

                entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InBloquearMovimentacao)
                    .HasColumnName("IN_BLOQUEAR_MOVIMENTACAO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InRastreabilidade).HasColumnName("IN_RASTREABILIDADE");

                entity.HasOne(d => d.IdCoordenadorNavigation)
                    .WithMany(p => p.InventarioIdCoordenadorNavigation)
                    .HasForeignKey(d => d.IdCoordenador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventario_Usuario");

                entity.HasOne(d => d.IdResponsavelAutorizacaoNavigation)
                    .WithMany(p => p.InventarioIdResponsavelAutorizacaoNavigation)
                    .HasForeignKey(d => d.IdResponsavelAutorizacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventario_Usuario1");

                entity.HasOne(d => d.IdStatusInventarioNavigation)
                    .WithMany(p => p.Inventario)
                    .HasForeignKey(d => d.IdStatusInventario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventario_StatusInventario");

                entity.HasOne(d => d.IdTipoInventarioNavigation)
                    .WithMany(p => p.Inventario)
                    .HasForeignKey(d => d.IdTipoInventario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventario_TipoInventario");
            });

            modelBuilder.Entity<InventarioAtualizacao>(entity =>
            {
                entity.HasKey(e => new { e.IdInventario, e.IdProdutoDetalhe, e.IdFabricante })
                    .HasName("PK_InventarioAtualizacao_ProdutoDetalhe");

                entity.Property(e => e.IdInventario).HasColumnName("ID_INVENTARIO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.DtAtualizacaoEstoque)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO_ESTOQUE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioAtualizou).HasColumnName("ID_USUARIO_ATUALIZOU");

                entity.Property(e => e.QnAtualizadaEntrada).HasColumnName("QN_ATUALIZADA_ENTRADA");

                entity.Property(e => e.QnAtualizadaSaida).HasColumnName("QN_ATUALIZADA_SAIDA");

                entity.HasOne(d => d.IdInventarioNavigation)
                    .WithMany(p => p.InventarioAtualizacao)
                    .HasForeignKey(d => d.IdInventario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventarioAtualizacao_Inventario");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.InventarioAtualizacao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventarioAtualizacao_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioAtualizouNavigation)
                    .WithMany(p => p.InventarioAtualizacao)
                    .HasForeignKey(d => d.IdUsuarioAtualizou)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventarioAtualizacao_Usuario");
            });

            modelBuilder.Entity<InventarioProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => new { e.IdInventario, e.IdProdutoDetalhe, e.IdFabricante });

                entity.ToTable("Inventario_ProdutoDetalhe");

                entity.Property(e => e.IdInventario).HasColumnName("ID_INVENTARIO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.DtContagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONTAGEM");

                entity.Property(e => e.DtCorte)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CORTE");

                entity.Property(e => e.IdStatusContagem).HasColumnName("ID_STATUS_CONTAGEM");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InUltimaContagem).HasColumnName("IN_ULTIMA_CONTAGEM");

                entity.Property(e => e.QnEstoqueAtual).HasColumnName("QN_ESTOQUE_ATUAL");

                entity.Property(e => e.QnPrimeiraContagem).HasColumnName("QN_PRIMEIRA_CONTAGEM");

                entity.Property(e => e.QnSegundaContagem).HasColumnName("QN_SEGUNDA_CONTAGEM");

                entity.Property(e => e.QnTerceiraContagem).HasColumnName("QN_TERCEIRA_CONTAGEM");

                entity.HasOne(d => d.IdInventarioNavigation)
                    .WithMany(p => p.InventarioProdutoDetalhe)
                    .HasForeignKey(d => d.IdInventario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventario_ProdutoDetalhe_Inventario");

                entity.HasOne(d => d.IdStatusContagemNavigation)
                    .WithMany(p => p.InventarioProdutoDetalhe)
                    .HasForeignKey(d => d.IdStatusContagem)
                    .HasConstraintName("FK_Inventario_ProdutoDetalhe_StatusInventarioProdutoDetalhe");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.InventarioProdutoDetalhe)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_Inventario_ProdutoDetalhe_TipoDiversos");
            });

            modelBuilder.Entity<InventarioProdutoDetalheLoteProdutoItem>(entity =>
            {
                entity.HasKey(e => new { e.IdLoteProdutoItem, e.IdInventario, e.IdFabricante, e.IdProdutoDetalhe });

                entity.ToTable("Inventario_ProdutoDetalhe_LoteProdutoItem");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdInventario).HasColumnName("ID_INVENTARIO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InPrimeiraContagem).HasColumnName("IN_PRIMEIRA_CONTAGEM");

                entity.Property(e => e.InSegundaContagem).HasColumnName("IN_SEGUNDA_CONTAGEM");

                entity.Property(e => e.InTerceiraContagem).HasColumnName("IN_TERCEIRA_CONTAGEM");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.InventarioProdutoDetalheLoteProdutoItem)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventario_ProdutoDetalhe_LoteProdutoItem_LoteProdutoItem");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.InventarioProdutoDetalheLoteProdutoItem)
                    .HasForeignKey(d => new { d.IdInventario, d.IdProdutoDetalhe, d.IdFabricante })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventario_ProdutoDetalhe_LoteProdutoItem_Inventario_ProdutoDetalhe");
            });

            modelBuilder.Entity<Iss>(entity =>
            {
                entity.HasKey(e => e.IdUnidadeOrganizacional)
                    .HasName("ISS_PK");

                entity.ToTable("ISS");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.PrIss).HasColumnName("PR_ISS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithOne(p => p.Iss)
                    .HasForeignKey<Iss>(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_ISS_FK1");
            });

            modelBuilder.Entity<IssInternoExterno>(entity =>
            {
                entity.HasKey(e => e.IdFaturamentoConta)
                    .HasName("ISS_Interno_Externo_PK");

                entity.ToTable("ISS_Interno_Externo");

                entity.Property(e => e.IdFaturamentoConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_FATURAMENTO_CONTA");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InInterno).HasColumnName("IN_INTERNO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFaturamentoContaNavigation)
                    .WithOne(p => p.IssInternoExterno)
                    .HasForeignKey<IssInternoExterno>(d => d.IdFaturamentoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FaturamentoConta_ISS_Interno_Externo_FK1");
            });

            modelBuilder.Entity<ItemClassificacao>(entity =>
            {
                entity.HasKey(e => e.IdItemClassificacao);

                entity.Property(e => e.IdItemClassificacao).HasColumnName("ID_ITEM_CLASSIFICACAO");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdGrupoFaixaEtaria).HasColumnName("ID_GRUPO_FAIXA_ETARIA");

                entity.Property(e => e.IdSexo).HasColumnName("ID_SEXO");

                entity.Property(e => e.IdTabelaClassificacao).HasColumnName("ID_TABELA_CLASSIFICACAO");

                entity.Property(e => e.TxFormulaCondicao)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMULA_CONDICAO");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ItemClassificacaoIdClassificacaoNavigation)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemClassificacao_TipoDiversos1");

                entity.HasOne(d => d.IdGrupoFaixaEtariaNavigation)
                    .WithMany(p => p.ItemClassificacao)
                    .HasForeignKey(d => d.IdGrupoFaixaEtaria)
                    .HasConstraintName("FK_ItemClassificacao_GrupoFaixaEtaria");

                entity.HasOne(d => d.IdSexoNavigation)
                    .WithMany(p => p.ItemClassificacaoIdSexoNavigation)
                    .HasForeignKey(d => d.IdSexo)
                    .HasConstraintName("FK_ItemClassificacao_TipoDiversos");

                entity.HasOne(d => d.IdTabelaClassificacaoNavigation)
                    .WithMany(p => p.ItemClassificacao)
                    .HasForeignKey(d => d.IdTabelaClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemClassificacao_TabelaClassificacao");
            });

            modelBuilder.Entity<ItemExame>(entity =>
            {
                entity.HasKey(e => e.IdItemExame)
                    .HasName("ItemExame_PK");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.IdItemValorTotal).HasColumnName("ID_ITEM_VALOR_TOTAL");

                entity.Property(e => e.InUsaCampoPercentualDigitacao).HasColumnName("IN_USA_CAMPO_PERCENTUAL_DIGITACAO");

                entity.Property(e => e.NmItemExame)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ITEM_EXAME");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdItemValorTotalNavigation)
                    .WithMany(p => p.InverseIdItemValorTotalNavigation)
                    .HasForeignKey(d => d.IdItemValorTotal)
                    .HasConstraintName("FK_ItemExame_ItemExame");
            });

            modelBuilder.Entity<JanusAlta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JANUS_ALTA");

                entity.Property(e => e.Codespecialidade).HasColumnName("CODESPECIALIDADE");

                entity.Property(e => e.Codunidade).HasColumnName("CODUNIDADE");

                entity.Property(e => e.Convenio)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONVENIO");

                entity.Property(e => e.Dataadmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAADMISSAO");

                entity.Property(e => e.Dataalta)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAALTA");

                entity.Property(e => e.Datanascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DATANASCIMENTO");

                entity.Property(e => e.Nomeespecialidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEESPECIALIDADE");

                entity.Property(e => e.Nomepaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEPACIENTE");

                entity.Property(e => e.Nomeunidade)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NOMEUNIDADE");

                entity.Property(e => e.NrLeito)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_LEITO");

                entity.Property(e => e.Prontuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");

                entity.Property(e => e.Tipoalta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOALTA");
            });

            modelBuilder.Entity<JanusAntibiograma>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JANUS_ANTIBIOGRAMA");

                entity.Property(e => e.Codespecialidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODESPECIALIDADE");

                entity.Property(e => e.Codigoantibiotico)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOANTIBIOTICO");

                entity.Property(e => e.Codigogerme)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOGERME");

                entity.Property(e => e.Codigomaterial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOMATERIAL");

                entity.Property(e => e.Codigounidadeclinica)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOUNIDADECLINICA");

                entity.Property(e => e.Datacultura)
                    .HasColumnType("datetime")
                    .HasColumnName("DATACULTURA");

                entity.Property(e => e.Material)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MATERIAL");

                entity.Property(e => e.Ncolonias)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NCOLONIAS");

                entity.Property(e => e.Nomeantibiotico)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEANTIBIOTICO");

                entity.Property(e => e.Nomeespecialidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEESPECIALIDADE");

                entity.Property(e => e.Nomegerme)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEGERME");

                entity.Property(e => e.Nomepaciente)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEPACIENTE");

                entity.Property(e => e.Nomeunidadeclinica)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEUNIDADECLINICA");

                entity.Property(e => e.Prontuario)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");

                entity.Property(e => e.Registro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REGISTRO");

                entity.Property(e => e.Sensibilidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SENSIBILIDADE");
            });

            modelBuilder.Entity<JanusInternacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JANUS_INTERNACAO");

                entity.Property(e => e.Bairro)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.Cep)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP")
                    .IsFixedLength(true);

                entity.Property(e => e.Cidade)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Codconvenio).HasColumnName("CODCONVENIO");

                entity.Property(e => e.Codespecialidade).HasColumnName("CODESPECIALIDADE");

                entity.Property(e => e.Codunidade).HasColumnName("CODUNIDADE");

                entity.Property(e => e.Codunidadeinternacao)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("CODUNIDADEINTERNACAO");

                entity.Property(e => e.Dataadmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAADMISSAO");

                entity.Property(e => e.Datanascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DATANASCIMENTO");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdUnidadeInternacao).HasColumnName("ID_UNIDADE_INTERNACAO");

                entity.Property(e => e.Nomeconvenio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMECONVENIO");

                entity.Property(e => e.Nomeespecialidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEESPECIALIDADE");

                entity.Property(e => e.Nomepaciente)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEPACIENTE");

                entity.Property(e => e.Nomeunidade)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NOMEUNIDADE");

                entity.Property(e => e.Prontuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");

                entity.Property(e => e.Rua)
                    .HasMaxLength(56)
                    .IsUnicode(false)
                    .HasColumnName("RUA");

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE");
            });

            modelBuilder.Entity<JanusInternacaoNova>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JANUS_INTERNACAO_NOVA");

                entity.Property(e => e.Bairro)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.Cep)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.Cidade)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Codconvenio)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODCONVENIO");

                entity.Property(e => e.Codespecialidade)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CODESPECIALIDADE")
                    .IsFixedLength(true);

                entity.Property(e => e.Codunidade)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODUNIDADE");

                entity.Property(e => e.Codunidadeinternacao)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("CODUNIDADEINTERNACAO");

                entity.Property(e => e.Dataadmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAADMISSAO");

                entity.Property(e => e.Dataalta)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAALTA");

                entity.Property(e => e.Datanascimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DATANASCIMENTO");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdUnidadeInternacao).HasColumnName("ID_UNIDADE_INTERNACAO");

                entity.Property(e => e.Nomeconvenio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMECONVENIO");

                entity.Property(e => e.Nomeespecialidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEESPECIALIDADE");

                entity.Property(e => e.Nomepaciente)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEPACIENTE");

                entity.Property(e => e.Nomeunidade)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NOMEUNIDADE");

                entity.Property(e => e.Prontuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");

                entity.Property(e => e.Rua)
                    .HasMaxLength(56)
                    .IsUnicode(false)
                    .HasColumnName("RUA");

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE");

                entity.Property(e => e.Tipoalta)
                    .HasMaxLength(33)
                    .IsUnicode(false)
                    .HasColumnName("TIPOALTA");
            });

            modelBuilder.Entity<JanusUsoAntibiotico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JANUS_USO_ANTIBIOTICO");

                entity.Property(e => e.Abreviaturaunidadeconcentracao)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ABREVIATURAUNIDADECONCENTRACAO");

                entity.Property(e => e.Apresentacao)
                    .HasMaxLength(1269)
                    .IsUnicode(false)
                    .HasColumnName("APRESENTACAO");

                entity.Property(e => e.Codclinica)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CODCLINICA");

                entity.Property(e => e.Codespecialidade)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CODESPECIALIDADE")
                    .IsFixedLength(true);

                entity.Property(e => e.Codmedico).HasColumnName("CODMEDICO");

                entity.Property(e => e.Codunidadeconcentracao).HasColumnName("CODUNIDADECONCENTRACAO");

                entity.Property(e => e.Concentracao).HasColumnName("CONCENTRACAO");

                entity.Property(e => e.Crm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CRM");

                entity.Property(e => e.Data)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA");

                entity.Property(e => e.Nome)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOME");

                entity.Property(e => e.Nomeantibiotico)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NOMEANTIBIOTICO");

                entity.Property(e => e.Nomeclinica)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMECLINICA");

                entity.Property(e => e.Nomeespecialidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEESPECIALIDADE");

                entity.Property(e => e.Nomemedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEMEDICO");

                entity.Property(e => e.Nomeunidadeconcentracao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEUNIDADECONCENTRACAO");

                entity.Property(e => e.Numantibiotico)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("NUMANTIBIOTICO");

                entity.Property(e => e.Prontuario)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");

                entity.Property(e => e.Quantidade).HasColumnName("QUANTIDADE");
            });

            modelBuilder.Entity<JustificativaAcato>(entity =>
            {
                entity.HasKey(e => e.IdJustificativaAcato);

                entity.ToTable("Justificativa_Acato");

                entity.Property(e => e.IdJustificativaAcato).HasColumnName("ID_JUSTIFICATIVA_ACATO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxJustificativaAcato)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_ACATO");
            });

            modelBuilder.Entity<JustificativaBloqueio>(entity =>
            {
                entity.HasKey(e => e.IdJustificativaBloqueio);

                entity.Property(e => e.IdJustificativaBloqueio)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_JUSTIFICATIVA_BLOQUEIO");

                entity.Property(e => e.TxDescricaoJustBloqueio)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_JUST_BLOQUEIO");
            });

            modelBuilder.Entity<JustificativaCancelamento>(entity =>
            {
                entity.HasKey(e => e.IdJustificativaCancelamento);

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.TxDescricaoJustCancelamento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_JUST_CANCELAMENTO");
            });

            modelBuilder.Entity<JustificativaGlosaFi>(entity =>
            {
                entity.HasKey(e => e.IdJustificativa);

                entity.ToTable("JustificativaGlosaFI");

                entity.Property(e => e.IdJustificativa)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdJustificativaGlosaFi)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_JUSTIFICATIVA_GLOSA_FI");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InJustGlosa).HasColumnName("IN_JUST_GLOSA");

                entity.Property(e => e.InUnimed).HasColumnName("IN_UNIMED");

                entity.Property(e => e.TxDescJustificativa)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_JUSTIFICATIVA");
            });

            modelBuilder.Entity<JustificativaGlosaFiComplementar>(entity =>
            {
                entity.HasKey(e => e.IdJustificativaComplementar);

                entity.Property(e => e.IdJustificativaComplementar).HasColumnName("ID_JUSTIFICATIVA_COMPLEMENTAR");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativaGlosa)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA_GLOSA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdJustificativaGlosaNavigation)
                    .WithMany(p => p.JustificativaGlosaFiComplementar)
                    .HasForeignKey(d => d.IdJustificativaGlosa)
                    .HasConstraintName("FK_JustificativaGlosaFiComplementar_JustificativaGlosaFI");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.JustificativaGlosaFiComplementar)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .HasConstraintName("FK_JustificativaGlosaFiComplementar_Glosa");
            });

            modelBuilder.Entity<JustificativaGlosaUnimed>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Codigo).HasMaxLength(10);

                entity.Property(e => e.Descricao).HasMaxLength(200);
            });

            modelBuilder.Entity<JustificativaOcorrenciaCti>(entity =>
            {
                entity.HasKey(e => e.IdJustificativaOcorrenciaCti)
                    .HasName("JustificativaOcorrenciaCTI_PK");

                entity.ToTable("JustificativaOcorrenciaCTI");

                entity.Property(e => e.IdJustificativaOcorrenciaCti).HasColumnName("ID_JUSTIFICATIVA_OCORRENCIA_CTI");

                entity.Property(e => e.TxJustificativa)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<JustificativaRecurso>(entity =>
            {
                entity.HasKey(e => e.IdJustificativaRecurso)
                    .HasName("Justificativa_Recurso_PK");

                entity.ToTable("Justificativa_Recurso");

                entity.Property(e => e.IdJustificativaRecurso).HasColumnName("ID_JUSTIFICATIVA_RECURSO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxTitulo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_TITULO");
            });

            modelBuilder.Entity<Kit>(entity =>
            {
                entity.HasKey(e => e.IdKit)
                    .HasName("Kit_PK");

                entity.HasIndex(e => e.NmKit, "IX_KIT_")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_KIT_PRODUTODETALHE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTipoKit).HasColumnName("ID_TIPO_KIT");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmKit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_KIT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.Kit)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_Kit_ProdutoDetalhe");
            });

            modelBuilder.Entity<KitComposicaoKit>(entity =>
            {
                entity.HasKey(e => new { e.IdKitPai, e.IdKitFilho })
                    .HasName("KitComposicao_Kit_PK");

                entity.ToTable("KitComposicao_Kit");

                entity.Property(e => e.IdKitPai).HasColumnName("ID_KIT_PAI");

                entity.Property(e => e.IdKitFilho).HasColumnName("ID_KIT_FILHO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InOpcional).HasColumnName("IN_OPCIONAL");

                entity.Property(e => e.QnKit).HasColumnName("QN_KIT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdKitFilhoNavigation)
                    .WithMany(p => p.KitComposicaoKitIdKitFilhoNavigation)
                    .HasForeignKey(d => d.IdKitFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Kit_KitComposicao_Kit_FK2");

                entity.HasOne(d => d.IdKitPaiNavigation)
                    .WithMany(p => p.KitComposicaoKitIdKitPaiNavigation)
                    .HasForeignKey(d => d.IdKitPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Kit_KitComposicao_Kit_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.KitComposicaoKit)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KitComposicao_Kit_TipoDiversos");
            });

            modelBuilder.Entity<KitComposicaoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdKit, e.IdProdutoDetalhe })
                    .HasName("KitComposicao_Produto_PK");

                entity.ToTable("KitComposicao_Produto");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InImpressoPrescricao).HasColumnName("IN_IMPRESSO_PRESCRICAO");

                entity.Property(e => e.InOpcional).HasColumnName("IN_OPCIONAL");

                entity.Property(e => e.InOpcionalPrescricao).HasColumnName("IN_OPCIONAL_PRESCRICAO");

                entity.Property(e => e.QnProduto)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("QN_PRODUTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.KitComposicaoProduto)
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Kit_KitComposicao_Produto_FK1");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.KitComposicaoProduto)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_KitComposicao_Produto_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.KitComposicaoProduto)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_KitComposicao_Produto_FK1");
            });

            modelBuilder.Entity<KitHistorico>(entity =>
            {
                entity.HasKey(e => e.IdKitHistorico)
                    .HasName("KitHistorico_PK");

                entity.Property(e => e.IdKitHistorico).HasColumnName("ID_KIT_HISTORICO");

                entity.Property(e => e.DtHistoricoKit)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO_KIT");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdTipoHistoricoKit).HasColumnName("ID_TIPO_HISTORICO_KIT");

                entity.Property(e => e.IdUnidadeAtual).HasColumnName("ID_UNIDADE_ATUAL");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.KitHistorico)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LoteProdutoItem_KitHistorico_FK1");

                entity.HasOne(d => d.IdTipoHistoricoKitNavigation)
                    .WithMany(p => p.KitHistorico)
                    .HasForeignKey(d => d.IdTipoHistoricoKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_KitHistorico_FK1");

                entity.HasOne(d => d.IdUnidadeAtualNavigation)
                    .WithMany(p => p.KitHistoricoIdUnidadeAtualNavigation)
                    .HasForeignKey(d => d.IdUnidadeAtual)
                    .HasConstraintName("UnidadeEstoqueAtual_FK");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.KitHistoricoIdUnidadeOrganizacionalNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_KitHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.KitHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_KitHistorico_FK1");
            });

            modelBuilder.Entity<KitLoteProdutoItem>(entity =>
            {
                entity.HasKey(e => e.IdKitLoteProdutoItem);

                entity.ToTable("Kit_LoteProdutoItem");

                entity.HasIndex(e => e.IdLoteProdutoItem, "IX_Kit_LoteProdutoItem_ID_LOTE_PRODUTO_ITEM");

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_Kit_LoteProdutoItem_ID_PRODUTO_DETALHE_ID_FABRICANTE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLoteProdutoItem, e.IdProdutoDetalhe, e.IdFabricante }, "IX_Kit_LoteProdutoItem_K2_K4_K5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdLoteProdutoItemCompoe, "IX_Kit_LoteProdutoItem_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_Kit_LoteProdutoItem_K4_2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdKitLoteProdutoItem).HasColumnName("ID_KIT_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdLoteProdutoItemCompoe).HasColumnName("ID_LOTE_PRODUTO_ITEM_COMPOE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.KitLoteProdutoItemIdLoteProdutoItemNavigation)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Kit_LoteProdutoItem_LoteProdutoItem");

                entity.HasOne(d => d.IdLoteProdutoItemCompoeNavigation)
                    .WithMany(p => p.KitLoteProdutoItemIdLoteProdutoItemCompoeNavigation)
                    .HasForeignKey(d => d.IdLoteProdutoItemCompoe)
                    .HasConstraintName("FK_Kit_LoteProdutoItem_LoteProdutoItem1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.KitLoteProdutoItem)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("FK_Kit_LoteProdutoItem_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<KitMontagem>(entity =>
            {
                entity.HasKey(e => e.IdKitMontagem);

                entity.Property(e => e.IdKitMontagem).HasColumnName("ID_KIT_MONTAGEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            });

            modelBuilder.Entity<KitMontagemHistorico>(entity =>
            {
                entity.HasKey(e => e.IdKitMontagemHistorico);

                entity.Property(e => e.IdKitMontagemHistorico).HasColumnName("ID_KIT_MONTAGEM_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdKitMontagem).HasColumnName("ID_KIT_MONTAGEM");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            });

            modelBuilder.Entity<KitProcedimentoServico>(entity =>
            {
                entity.HasKey(e => e.IdKitProcedimentoServico);

                entity.ToTable("Kit_Procedimento_Servico");

                entity.Property(e => e.IdKitProcedimentoServico).HasColumnName("ID_KIT_PROCEDIMENTO_SERVICO");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.KitProcedimentoServico)
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Kit_Procedimento_Servico_Kit");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.KitProcedimentoServico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Kit_Procedimento_Servico_Pessoa");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.KitProcedimentoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Kit_Procedimento_Servico_Servico");
            });

            modelBuilder.Entity<KitProduto>(entity =>
            {
                entity.HasKey(e => e.IdKit)
                    .HasName("Kit_Produto_PK");

                entity.ToTable("Kit_Produto");

                entity.Property(e => e.IdKit)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_KIT");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdViaAdministracao).HasColumnName("ID_VIA_ADMINISTRACAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithOne(p => p.KitProduto)
                    .HasForeignKey<KitProduto>(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Kit_Kit_Produto_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.KitProduto)
                    .HasForeignKey(d => new { d.IdProdutoDetalhe, d.IdViaAdministracao })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Kit_Produto_ProdutoDetalhe_ViaAdministracao");
            });

            modelBuilder.Entity<KitServico>(entity =>
            {
                entity.HasKey(e => new { e.IdKit, e.IdServico })
                    .HasName("Kit_Servico_PK");

                entity.ToTable("Kit_Servico");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.KitServico)
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Kit_Kit_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.KitServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Kit_Servico_FK1");
            });

            modelBuilder.Entity<KitTaxasGases>(entity =>
            {
                entity.HasKey(e => e.IdKit)
                    .HasName("KitTaxasGases_PK");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTipoKit).HasColumnName("ID_TIPO_KIT");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InKitEditavel).HasColumnName("IN_KIT_EDITAVEL");

                entity.Property(e => e.NmKit)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_KIT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.KitTaxasGases)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_KitTaxasGases_Operadora");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.KitTaxasGases)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_Kit_ProdDet_TaxasGases");
            });

            modelBuilder.Entity<KitTaxasGasesOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdKit, e.IdOperadora })
                    .HasName("KitTaxasGases_Operadora_PK");

                entity.ToTable("KitTaxasGases_Operadora");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.KitTaxasGasesOperadora)
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("KitTaxasGases_KitTaxasGases_Operadora_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.KitTaxasGasesOperadora)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_KitTaxasGases_Operadora_FK1");
            });

            modelBuilder.Entity<KitTaxasGasesProcedimento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KitTaxasGases_Procedimento");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KitTaxasGases_Procedimento_KitTaxasGases");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KitTaxasGases_Procedimento_Procedimento");
            });

            modelBuilder.Entity<KitTaxasGasesUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdKit, e.IdUnidadeOrganizacional })
                    .HasName("KitTaxasGases_UnidadeOrganizacional_PK");

                entity.ToTable("KitTaxasGases_UnidadeOrganizacional");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.KitTaxasGasesUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("KitTaxasGases_KitTaxasGases_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.KitTaxasGasesUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_KitTaxasGases_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<KitUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdKit, e.IdUnidadeOrganizacional })
                    .HasName("Kit_UnidadeOrganizacional_PK");

                entity.ToTable("Kit_UnidadeOrganizacional");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.KitUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Kit_Kit_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.KitUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Kit_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<LaboratorioHemocultura>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioHemocultura);

                entity.Property(e => e.IdLaboratorioHemocultura)
                    .HasColumnName("ID_LABORATORIO_HEMOCULTURA")
                    .HasComment("código único da etiqueta de hemocultura");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data e hora do sistema que foi criada a etiqueta de hemocultura");

                entity.Property(e => e.TxEtiqueta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_ETIQUETA");
            });

            modelBuilder.Entity<LaboratorioLote>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioLote);

                entity.Property(e => e.IdLaboratorioLote)
                    .HasColumnName("ID_LABORATORIO_LOTE")
                    .HasComment("identificador único do lote");

                entity.Property(e => e.DtEnvio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO")
                    .HasComment("data que o lote foi enviado para o laboratório de apoio");

                entity.Property(e => e.IdSessaoTecnica).HasColumnName("ID_SESSAO_TECNICA");

                entity.Property(e => e.IdStatusLote)
                    .HasColumnName("ID_STATUS_LOTE")
                    .HasComment("tipo tabela 395");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("usuário que criou o lote");

                entity.HasOne(d => d.IdSessaoTecnicaNavigation)
                    .WithMany(p => p.LaboratorioLote)
                    .HasForeignKey(d => d.IdSessaoTecnica)
                    .HasConstraintName("FK_LaboratorioLote_UnidadeOrganizacional");

                entity.HasOne(d => d.IdStatusLoteNavigation)
                    .WithMany(p => p.LaboratorioLote)
                    .HasForeignKey(d => d.IdStatusLote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioLote_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaboratorioLote)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioLote_Usuario");
            });

            modelBuilder.Entity<LaboratorioMaterial>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LaboratorioMaterial");

                entity.Property(e => e.Cod)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cod");

                entity.Property(e => e.IdTipoDiversos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_tipo_diversos");
            });

            modelBuilder.Entity<LaboratorioMetodo>(entity =>
            {
                entity.HasKey(e => e.IdMetodo);

                entity.Property(e => e.IdMetodo)
                    .HasColumnName("ID_METODO")
                    .HasComment("identificador único do método de realização do exame");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.TxMetodo)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_METODO")
                    .HasComment("descritivo do método de realização do exame");
            });

            modelBuilder.Entity<LaboratorioMetodoEquipamento>(entity =>
            {
                entity.HasKey(e => new { e.IdMetodo, e.IdEquipamento });

                entity.ToTable("LaboratorioMetodo_Equipamento");

                entity.Property(e => e.IdMetodo)
                    .HasColumnName("ID_METODO")
                    .HasComment("identificador do método");

                entity.Property(e => e.IdEquipamento)
                    .HasColumnName("ID_EQUIPAMENTO")
                    .HasComment("identificador do equipamento relacionado");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.HasOne(d => d.IdEquipamentoNavigation)
                    .WithMany(p => p.LaboratorioMetodoEquipamento)
                    .HasForeignKey(d => d.IdEquipamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioMetodo_Equipamento_TipoDiversos");

                entity.HasOne(d => d.IdMetodoNavigation)
                    .WithMany(p => p.LaboratorioMetodoEquipamento)
                    .HasForeignKey(d => d.IdMetodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioMetodo_Equipamento_LABORATORIOMETODO");
            });

            modelBuilder.Entity<LaboratorioPedido>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedido);

                entity.HasIndex(e => new { e.IdAtendimento, e.InAtivo }, "IX_LaboratorioPedido_ID_ATENDIMENTO_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLeito, e.IdSolicitacaoPdEnfermagemhorarioadministracao }, "IX_LaboratorioPedido_ID_LEITO_ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdMedicoSolicitante, e.InAtivo }, "IX_LaboratorioPedido_ID_MEDICO_SOLICITANTE_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdMedicoSolicitante, e.InAtivo, e.DtPedido, e.IdUnidadeSolicitante }, "IX_LaboratorioPedido_ID_MEDICO_SOLICITANTE_IN_ATIVO_DT_PEDIDO_ID_UNIDADE_SOLICITANTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdPaciente, "IX_LaboratorioPedido_ID_PACIENTE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeSolicitante, e.DtPedido }, "IX_LaboratorioPedido_ID_UNIDADE_SOLICITANTE_DT_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeSolicitante, e.InAtivo, e.DtPedido }, "IX_LaboratorioPedido_ID_UNIDADE_SOLICITANTE_IN_ATIVO_DT_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeSolicitante, e.InAtivo, e.IdStatusPedido }, "IX_LaboratorioPedido_ID_UNIDADE_SOLICITANTE_IN_ATIVO_ID_STATUS_PEDIDO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InAtivo, "IX_LaboratorioPedido_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtivo, e.DtPedido }, "IX_LaboratorioPedido_IN_ATIVO_DT_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtivo, e.DtPedido, e.IdStatusPedido }, "IX_LaboratorioPedido_IN_ATIVO_DT_PEDIDO_ID_STATUS_PEDIDO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InAtivo, e.IdLaboratorioPedido, e.IdStatusPedido }, "IX_LaboratorioPedido_IN_ATIVO_ID_LABORATORIO_PEDIDO_ID_STATUS_PEDIDO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InAtivo, e.IdSolicitacaoPdEnfermagemhorarioadministracao }, "IX_LaboratorioPedido_IN_ATIVO_ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InAtivo, e.IdDispensacaoEnfermagem }, "IX_LaboratorioPedido_K15_K19_1")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao, "IX_LaboratorioPedido_PK_10")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLaboratorioPedido)
                    .HasColumnName("ID_LABORATORIO_PEDIDO")
                    .HasComment("identificador único do pedido");

                entity.Property(e => e.DtCriacaoPedido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO_PEDIDO")
                    .HasComment("data do sistema que foi criado o sistema");

                entity.Property(e => e.DtPedido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO")
                    .HasComment("data que o médico escolhe para realizar os exames do pedido");

                entity.Property(e => e.IdAtendimento)
                    .HasColumnName("ID_ATENDIMENTO")
                    .HasComment("atendimento para qual o pedido foi gerado");

                entity.Property(e => e.IdDispensacaoEnfermagem)
                    .HasColumnName("ID_DISPENSACAO_ENFERMAGEM")
                    .HasComment("integração com a dispensação quando não há prescrição");

                entity.Property(e => e.IdEntidadeSolicitante)
                    .HasColumnName("ID_ENTIDADE_SOLICITANTE")
                    .HasDefaultValueSql("((8))");

                entity.Property(e => e.IdLeito)
                    .HasColumnName("ID_LEITO")
                    .HasComment("número do leito que o paciente estava, geralmente para interno");

                entity.Property(e => e.IdMedicoSolicitante)
                    .HasColumnName("ID_MEDICO_SOLICITANTE")
                    .HasComment("médico solicitante responsável");

                entity.Property(e => e.IdMotivoPrioridade)
                    .HasColumnName("ID_MOTIVO_PRIORIDADE")
                    .HasComment("quando o pedido for prioridade emergencial deve-se preencher o motivo");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdPrioridade)
                    .HasColumnName("ID_PRIORIDADE")
                    .HasComment("prioridade do pedido, tipo tabela 104");

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO")
                    .HasComment("integração com a prescrição, caso glicemia capilar");

                entity.Property(e => e.IdStatusPedido)
                    .HasColumnName("ID_STATUS_PEDIDO")
                    .HasComment("status da situação geral do pedido, utilizada somente de formas estéticas, todo filtro utiliza o status do item");

                entity.Property(e => e.IdUnidadeSolicitante)
                    .HasColumnName("ID_UNIDADE_SOLICITANTE")
                    .HasComment("unidade organizacional qual o paciente está na hora do pedido");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.InDieta)
                    .HasColumnName("IN_DIETA")
                    .HasComment("se o paciente está fazendo dieta");

                entity.Property(e => e.InMedicamentos)
                    .HasColumnName("IN_MEDICAMENTOS")
                    .HasComment("se o paciente está fazendo uso de medicamentos");

                entity.Property(e => e.InOxigenio)
                    .HasColumnName("IN_OXIGENIO")
                    .HasComment("se o paciente faz uso de oxigênio");

                entity.Property(e => e.InParcial)
                    .HasColumnName("IN_PARCIAL")
                    .HasComment("um pedido pode estar liberado mas com exames que ainda não foram liberados, aí ele é parcial");

                entity.Property(e => e.QdArquivos).HasColumnName("QD_ARQUIVOS");

                entity.Property(e => e.TxEmailAviso)
                    .IsUnicode(false)
                    .HasColumnName("TX_EMAIL_AVISO")
                    .HasComment("email que será enviado quando o exame é liberado");

                entity.Property(e => e.TxMedicamentos)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_MEDICAMENTOS")
                    .HasComment("quais medicamentos que o paciente está fazendo uso");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("descrição preenchida pelo médico");

                entity.Property(e => e.TxSuspeitaClinica)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_SUSPEITA_CLINICA")
                    .HasComment("suspeita clínica preenchida pelo médico");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.LaboratorioPedido)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_Atendimento");

                entity.HasOne(d => d.IdDispensacaoEnfermagemNavigation)
                    .WithMany(p => p.LaboratorioPedido)
                    .HasForeignKey(d => d.IdDispensacaoEnfermagem)
                    .HasConstraintName("FK_LaboratorioPedido_DispensacaoEnfermagem");

                entity.HasOne(d => d.IdEntidadeSolicitanteNavigation)
                    .WithMany(p => p.LaboratorioPedido)
                    .HasForeignKey(d => d.IdEntidadeSolicitante)
                    .HasConstraintName("FK__Laborator__ID_EN__528D4592");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.LaboratorioPedido)
                    .HasForeignKey(d => d.IdLeito)
                    .HasConstraintName("FK_LaboratorioPedido_Leito");

                entity.HasOne(d => d.IdMedicoSolicitanteNavigation)
                    .WithMany(p => p.LaboratorioPedidoIdMedicoSolicitanteNavigation)
                    .HasForeignKey(d => d.IdMedicoSolicitante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_Pessoa");

                entity.HasOne(d => d.IdMotivoPrioridadeNavigation)
                    .WithMany(p => p.LaboratorioPedidoIdMotivoPrioridadeNavigation)
                    .HasForeignKey(d => d.IdMotivoPrioridade)
                    .HasConstraintName("FK_LaboratorioPedido_TipoDiversos2");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.LaboratorioPedidoIdPacienteNavigation)
                    .HasForeignKey(d => d.IdPaciente)
                    .HasConstraintName("FK_LaboratorioPedido_Pessoa1");

                entity.HasOne(d => d.IdPrioridadeNavigation)
                    .WithMany(p => p.LaboratorioPedidoIdPrioridadeNavigation)
                    .HasForeignKey(d => d.IdPrioridade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_TipoDiversos");

                entity.HasOne(d => d.IdProtocoloNavigation)
                    .WithMany(p => p.LaboratorioPedido)
                    .HasForeignKey(d => d.IdProtocolo)
                    .HasConstraintName("FK_LABORATORIOPEDIDO_PROTOCOLO");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoNavigation)
                    .WithMany(p => p.LaboratorioPedido)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .HasConstraintName("FK_LaboratorioPedido_Solicitacao_PD_EnfermagemHorarioAdministracao");

                entity.HasOne(d => d.IdStatusPedidoNavigation)
                    .WithMany(p => p.LaboratorioPedidoIdStatusPedidoNavigation)
                    .HasForeignKey(d => d.IdStatusPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_TipoDiversos1");

                entity.HasOne(d => d.IdUnidadeSolicitanteNavigation)
                    .WithMany(p => p.LaboratorioPedido)
                    .HasForeignKey(d => d.IdUnidadeSolicitante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_UnidadeOrganizacional");
            });

            modelBuilder.Entity<LaboratorioPedidoColeta>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoColeta);

                entity.HasIndex(e => e.IdLaboratorioPedidoItem, "IX_LABORATORIO_PEDIDO_ITEM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InAtivo, "IX_LaboratorioPedidoColeta_IN_ATIVO");

                entity.Property(e => e.IdLaboratorioPedidoColeta)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_COLETA")
                    .HasComment("identificador único da coleta");

                entity.Property(e => e.DtColeta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COLETA")
                    .HasComment("data e hora que foi coletado");

                entity.Property(e => e.IdColetador)
                    .HasColumnName("ID_COLETADOR")
                    .HasComment("identificador da pessoa que coletou");

                entity.Property(e => e.IdLaboratorioPedidoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM")
                    .HasComment("identificador do item do pedido");

                entity.Property(e => e.IdMotivoCancelado)
                    .HasColumnName("ID_MOTIVO_CANCELADO")
                    .HasComment("se foi recoleta, preenche o motivo");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.TxColetador)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COLETADOR")
                    .HasComment("se não existir uma pessoa que coletou tem um texto de quem coletou");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("observações da coleta");

                entity.HasOne(d => d.IdColetadorNavigation)
                    .WithMany(p => p.LaboratorioPedidoColeta)
                    .HasForeignKey(d => d.IdColetador)
                    .HasConstraintName("FK_LaboratorioPedidoColeta_LaboratorioPedidoItem");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoColeta)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColeta_LaboratorioPedidoItem1");

                entity.HasOne(d => d.IdMotivoCanceladoNavigation)
                    .WithMany(p => p.LaboratorioPedidoColeta)
                    .HasForeignKey(d => d.IdMotivoCancelado)
                    .HasConstraintName("FK_LaboratorioPedidoColeta_TipoDiversos");
            });

            modelBuilder.Entity<LaboratorioPedidoColetaEnfermagem>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoColetaEnfermagem);

                entity.Property(e => e.IdLaboratorioPedidoColetaEnfermagem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_COLETA_ENFERMAGEM")
                    .HasComment("identificador único da coleta da enfermagem");

                entity.Property(e => e.DtColeta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COLETA")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data que foi coletada a amostra");

                entity.Property(e => e.IdLaboratorioPedidoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM")
                    .HasComment("identifica o exame da amostra do material do pedido");

                entity.Property(e => e.IdMotivoCancelado)
                    .HasColumnName("ID_MOTIVO_CANCELADO")
                    .HasComment("tabela 221");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("identificação do usuário que coletou");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica da coleta da enfermagem. 1 está ativo");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaEnfermagem)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaEnfermagem_LaboratorioPedidoItem");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaEnfermagem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaEnfermagem_Usuario");
            });

            modelBuilder.Entity<LaboratorioPedidoColetaItem>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoColetaItem);

                entity.Property(e => e.IdLaboratorioPedidoColetaItem).HasColumnName("ID_LABORATORIO_PEDIDO_COLETA_ITEM");

                entity.Property(e => e.IdExameItemColeta).HasColumnName("ID_EXAME_ITEM_COLETA");

                entity.Property(e => e.IdLaboratorioPedidoColeta).HasColumnName("ID_LABORATORIO_PEDIDO_COLETA");

                entity.Property(e => e.IdLaboratorioPedidoItem).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxValor)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR");

                entity.HasOne(d => d.IdExameItemColetaNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaItem)
                    .HasForeignKey(d => d.IdExameItemColeta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaItem_ExameItemColeta_1");

                entity.HasOne(d => d.IdLaboratorioPedidoColetaNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaItem)
                    .HasForeignKey(d => d.IdLaboratorioPedidoColeta)
                    .HasConstraintName("FK_LaboratorioPedidoColetaItem_LaboratorioPedidoColeta_1");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaItem)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .HasConstraintName("FK_LaboratorioPedidoColetaItem_LaboratorioPedidoItem");
            });

            modelBuilder.Entity<LaboratorioPedidoColetaItemOld>(entity =>
            {
                entity.HasKey(e => new { e.IdLaboratorioPedidoColeta, e.IdExameItemColeta })
                    .HasName("PK_LaboratorioPedidoColetaItem_1");

                entity.ToTable("LaboratorioPedidoColetaItem_Old");

                entity.Property(e => e.IdLaboratorioPedidoColeta)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_COLETA")
                    .HasComment("identificador da coleta");

                entity.Property(e => e.IdExameItemColeta)
                    .HasColumnName("ID_EXAME_ITEM_COLETA")
                    .HasComment("identificador do item de metadado da coleta no exame");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.TxValor)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR")
                    .HasComment("valor do metadado");

                entity.HasOne(d => d.IdExameItemColetaNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaItemOld)
                    .HasForeignKey(d => d.IdExameItemColeta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaItem_ExameItemColeta");

                entity.HasOne(d => d.IdLaboratorioPedidoColetaNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaItemOld)
                    .HasForeignKey(d => d.IdLaboratorioPedidoColeta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaItem_LaboratorioPedidoColeta");
            });

            modelBuilder.Entity<LaboratorioPedidoColetaObservacao>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoColetaObservacao);

                entity.HasIndex(e => e.IdLaboratorioPedido, "IX_LaboratorioPedidoColetaObservacao_ID_LABORATORIO_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLaboratorioPedidoColetaObservacao)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_COLETA_OBSERVACAO")
                    .HasComment("identificador única da observação da coleta por pedido");

                entity.Property(e => e.DtObservacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OBSERVACAO")
                    .HasComment("data que foi lançada a observação");

                entity.Property(e => e.IdLaboratorioPedido)
                    .HasColumnName("ID_LABORATORIO_PEDIDO")
                    .HasComment("identificador do pedido");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("usuário que digitou a observação");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("observação da coleta por pedido");

                entity.HasOne(d => d.IdLaboratorioPedidoNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaObservacao)
                    .HasForeignKey(d => d.IdLaboratorioPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaObservacao_LaboratorioPedido");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaObservacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_LaboratorioPedidoColetaObservacao_Usuario");
            });

            modelBuilder.Entity<LaboratorioPedidoColetaRestricaoAmostra>(entity =>
            {
                entity.HasKey(e => new { e.IdLaboratorioPedidoColeta, e.IdRestricaoAmostra });

                entity.ToTable("LaboratorioPedidoColeta_RestricaoAmostra");

                entity.Property(e => e.IdLaboratorioPedidoColeta).HasColumnName("ID_LABORATORIO_PEDIDO_COLETA");

                entity.Property(e => e.IdRestricaoAmostra).HasColumnName("ID_RESTRICAO_AMOSTRA");

                entity.HasOne(d => d.IdLaboratorioPedidoColetaNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaRestricaoAmostra)
                    .HasForeignKey(d => d.IdLaboratorioPedidoColeta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaRestricaoAmostra_LaboratorioPedidoColeta");

                entity.HasOne(d => d.IdRestricaoAmostraNavigation)
                    .WithMany(p => p.LaboratorioPedidoColetaRestricaoAmostra)
                    .HasForeignKey(d => d.IdRestricaoAmostra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoColetaRestricaoAmostra_RestricaoAmostra");
            });

            modelBuilder.Entity<LaboratorioPedidoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoHistorico);

                entity.HasIndex(e => new { e.IdLaboratorioPedido, e.IdStatusPedido, e.InAtivo }, "IX_LaboratorioPedidoHistorico_ID_LABORATORIO_PEDIDO_ID_STATUS_PEDIDO_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdLaboratorioPedidoHistorico).HasColumnName("ID_LABORATORIO_PEDIDO_HISTORICO");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.IdLaboratorioPedido).HasColumnName("ID_LABORATORIO_PEDIDO");

                entity.Property(e => e.IdStatusPedido).HasColumnName("ID_STATUS_PEDIDO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdLaboratorioPedidoNavigation)
                    .WithMany(p => p.LaboratorioPedidoHistorico)
                    .HasForeignKey(d => d.IdLaboratorioPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoHistorico_LaboratorioPedidoHistorico");
            });

            modelBuilder.Entity<LaboratorioPedidoImpedimentoColeta>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoImpedimentoColeta);

                entity.ToTable("LaboratorioPedido_ImpedimentoColeta");

                entity.Property(e => e.IdLaboratorioPedidoImpedimentoColeta).HasColumnName("ID_LABORATORIO_PEDIDO_IMPEDIMENTO_COLETA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdImpedimentoColeta).HasColumnName("ID_IMPEDIMENTO_COLETA");

                entity.Property(e => e.IdLaboratorioPedido).HasColumnName("ID_LABORATORIO_PEDIDO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdImpedimentoColetaNavigation)
                    .WithMany(p => p.LaboratorioPedidoImpedimentoColeta)
                    .HasForeignKey(d => d.IdImpedimentoColeta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_ImpedimentoColeta_TipoDiversos");

                entity.HasOne(d => d.IdLaboratorioPedidoNavigation)
                    .WithMany(p => p.LaboratorioPedidoImpedimentoColeta)
                    .HasForeignKey(d => d.IdLaboratorioPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_ImpedimentoColeta_LaboratorioPedido");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaboratorioPedidoImpedimentoColeta)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedido_ImpedimentoColeta_Usuario");
            });

            modelBuilder.Entity<LaboratorioPedidoItem>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoItem)
                    .HasName("PK_LaboratorioPedidoItem_1");

                entity.HasIndex(e => new { e.IdExame, e.InAtivo }, "IX_LaboratorioPedidoItem_ID_EXAME_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdExame, e.InAtivo, e.IdStatusItem }, "IX_LaboratorioPedidoItem_ID_EXAME_IN_ATIVO_ID_STATUS_ITEM")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatusItem, e.InAtivo }, "IX_LaboratorioPedidoItem_ID_STATUS_ITEM_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatusItem, e.InAtivo, e.InGerouArquivo }, "IX_LaboratorioPedidoItem_ID_STATUS_ITEM_IN_ATIVO_IN_GEROU_ARQUIVO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InAtivo, e.IdStatusItem }, "IX_LaboratorioPedidoItem_IN_ATIVO_ID_STATUS_ITEM")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtivo, e.TxCodigoAmostra }, "IX_LaboratorioPedidoItem_IN_ATIVO_TX_CODIGO_AMOSTRA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLaboratorioPedido, e.InAtivo }, "IX_LaboratorioPedidoItem_K2_K10")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdLaboratorioPedidoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM")
                    .HasComment("identificador único para o exame no pedido");

                entity.Property(e => e.DtPrazoLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PRAZO_LIBERACAO");

                entity.Property(e => e.IdExame)
                    .HasColumnName("ID_EXAME")
                    .HasComment("identificador do exame");

                entity.Property(e => e.IdLaboratorioLote)
                    .HasColumnName("ID_LABORATORIO_LOTE")
                    .HasComment("se o item foi enviado em lote para laboratório de apoio");

                entity.Property(e => e.IdLaboratorioPedido)
                    .HasColumnName("ID_LABORATORIO_PEDIDO")
                    .HasComment("identificador do pedido");

                entity.Property(e => e.IdMaterial)
                    .HasColumnName("ID_MATERIAL")
                    .HasComment("identificador do material que será utilizado, tipo tabela 123");

                entity.Property(e => e.IdStatusItem)
                    .HasColumnName("ID_STATUS_ITEM")
                    .HasComment("status do exame no pedido");

                entity.Property(e => e.IdUnidadeTempo)
                    .HasColumnName("ID_UNIDADE_TEMPO")
                    .HasComment("unidade de tempo entre amostras");

                entity.Property(e => e.InAmostraApoio).HasColumnName("IN_AMOSTRA_APOIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.InGerouArquivo).HasColumnName("IN_GEROU_ARQUIVO");

                entity.Property(e => e.InGerouAutomate).HasColumnName("IN_GEROU_AUTOMATE");

                entity.Property(e => e.NrAmostra)
                    .HasColumnName("NR_AMOSTRA")
                    .HasComment("número da amostra");

                entity.Property(e => e.NrIntervalo)
                    .HasColumnName("NR_INTERVALO")
                    .HasComment("intervalo de tempo entre amostras");

                entity.Property(e => e.TxCodigoAmostra)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_CODIGO_AMOSTRA");

                entity.Property(e => e.TxMaterial)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_MATERIAL")
                    .HasComment("quando o material é diversos, o médico escreve o material que será coletado");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.LaboratorioPedidoItem)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItem_Exame");

                entity.HasOne(d => d.IdLaboratorioPedidoNavigation)
                    .WithMany(p => p.LaboratorioPedidoItem)
                    .HasForeignKey(d => d.IdLaboratorioPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItem_LaboratorioPedido");

                entity.HasOne(d => d.IdMaterialNavigation)
                    .WithMany(p => p.LaboratorioPedidoItemIdMaterialNavigation)
                    .HasForeignKey(d => d.IdMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItem_TipoDiversos2");

                entity.HasOne(d => d.IdStatusItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoItemIdStatusItemNavigation)
                    .HasForeignKey(d => d.IdStatusItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItem_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeTempoNavigation)
                    .WithMany(p => p.LaboratorioPedidoItemIdUnidadeTempoNavigation)
                    .HasForeignKey(d => d.IdUnidadeTempo)
                    .HasConstraintName("FK_LaboratorioPedidoItem_TipoDiversos1");
            });

            modelBuilder.Entity<LaboratorioPedidoItemContaItem>(entity =>
            {
                entity.HasKey(e => new { e.IdLaboratorioPedidoItem, e.IdContaItem });

                entity.ToTable("LaboratorioPedidoItem_ContaItem");

                entity.HasIndex(e => e.IdContaItem, "IX_LaboratorioPedidoItem_ContaItem_ID_CONTA_ITEM");

                entity.Property(e => e.IdLaboratorioPedidoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM")
                    .HasComment("identificador do item do pedido");

                entity.Property(e => e.IdContaItem)
                    .HasColumnName("ID_CONTA_ITEM")
                    .HasComment("identificador do item na conta");
            });

            modelBuilder.Entity<LaboratorioPedidoItemHistorico>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoItemHistorico);

                entity.HasIndex(e => new { e.IdLaboratorioPedidoItem, e.InAtivo }, "IX_LaboratorioPedidoItemHistorico_ID_LABORATORIO_PEDIDO_ITEM_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatusPedido, e.InAtivo, e.IdLaboratorioPedidoItem }, "IX_LaboratorioPedidoItemHistorico_ID_STATUS_PEDIDO_IN_ATIVO_ID_LABORATORIO_PEDIDO_ITEM")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLaboratorioPedidoItemHistorico).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM_HISTORICO");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.IdLaboratorioPedidoItem).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM");

                entity.Property(e => e.IdStatusPedido).HasColumnName("ID_STATUS_PEDIDO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoItemHistorico)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItemHistorico_LaboratorioPedidoItemHistorico");
            });

            modelBuilder.Entity<LaboratorioPedidoItemInterfaceamentoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoItemInterfaceamento);

                entity.Property(e => e.IdLaboratorioPedidoItemInterfaceamento).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM_INTERFACEAMENTO");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdLaboratorioPedidoItem).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM");

                entity.Property(e => e.InSucesso).HasColumnName("IN_SUCESSO");

                entity.Property(e => e.TxArquivo)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO");

                entity.Property(e => e.TxCaminhoArquivo)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_CAMINHO_ARQUIVO");

                entity.Property(e => e.TxMensagem)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_MENSAGEM");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoItemInterfaceamentoHistorico)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItemInterfaceamentoHistorico_LaboratorioPedidoItem");
            });

            modelBuilder.Entity<LaboratorioPedidoItemObservacao>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoItemObservacao);

                entity.HasIndex(e => e.IdLaboratorioPedidoItem, "IX_LABORATORIO_PEDIDO_ITEM")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdLaboratorioPedidoItemObservacao)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM_OBSERVACAO")
                    .HasComment("identificador único da observação do item do pedido");

                entity.Property(e => e.DtObservacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OBSERVACAO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data e hora que o usuário lançou o registro");

                entity.Property(e => e.IdLaboratorioPedidoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM")
                    .HasComment("cada exame de um pedido");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("usuário que lançou a observação");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("observação da coleta");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoItemObservacao)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItemObservacao_LaboratorioPedidoItem");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaboratorioPedidoItemObservacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItemObservacao_Usuario");
            });

            modelBuilder.Entity<LaboratorioPedidoLaudo>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoLaudo);

                entity.HasIndex(e => e.DtImpressao, "IX_LaboratorioPedidoLaudo_DT_IMPRESSAO");

                entity.HasIndex(e => e.IdLaboratorioPedidoItem, "IX_LaboratorioPedidoLaudo_ID_LABORATORIO_PEDIDO_ITEM")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdLaboratorioPedidoLaudo)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_LAUDO")
                    .HasComment("identificador único da impressão do laudo");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data e hora que o usuário imprimiu o laudo");

                entity.Property(e => e.IdLaboratorioPedidoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM")
                    .HasComment("identificador do item do pedido");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("usuário que imprimiu o exame");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoLaudo)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoLaudo_LaboratorioPedidoItem");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaboratorioPedidoLaudo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoLaudo_Usuario");
            });

            modelBuilder.Entity<LaboratorioPedidoResultado>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoResultado);

                entity.HasIndex(e => e.IdLaboratorioPedidoItem, "IX_LaboratorioPedidoResultado_ID_LABORATORIO_PEDIDO_ITEM")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdLaboratorioPedidoResultado)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO")
                    .HasComment("identificador único do resultado");

                entity.Property(e => e.AdArquivo).HasColumnName("AD_ARQUIVO");

                entity.Property(e => e.DtDigitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DIGITACAO")
                    .HasComment("data e hora do sistema que foi digitado o resultado");

                entity.Property(e => e.DtLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO")
                    .HasComment("data e hora do sistema que foi liberado o resultado");

                entity.Property(e => e.IdEquipamento)
                    .HasColumnName("ID_EQUIPAMENTO")
                    .HasComment("equipamento utilizado para realizar o resultado");

                entity.Property(e => e.IdExameMaterial)
                    .HasColumnName("ID_EXAME_MATERIAL")
                    .HasComment("identificador do exame, método e equipamento utilizado");

                entity.Property(e => e.IdLaboratorioPedidoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_ITEM")
                    .HasComment("identificador do exame do pedido");

                entity.Property(e => e.IdMetodo)
                    .HasColumnName("ID_METODO")
                    .HasComment("método utilizado");

                entity.Property(e => e.IdUsuarioDigitou)
                    .HasColumnName("ID_USUARIO_DIGITOU")
                    .HasComment("usuário que lançou o resultado");

                entity.Property(e => e.IdUsuarioLiberou)
                    .HasColumnName("ID_USUARIO_LIBEROU")
                    .HasComment("usuário que liberou o resultado");

                entity.Property(e => e.IdUsuarioRetificou)
                    .HasColumnName("ID_USUARIO_RETIFICOU")
                    .HasComment("usuário que retificou o resultado");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.InResultadoAutomatico).HasColumnName("IN_RESULTADO_AUTOMATICO");

                entity.Property(e => e.InResultadoCritico)
                    .HasColumnName("IN_RESULTADO_CRITICO")
                    .HasComment("se o resultado é crítico");

                entity.Property(e => e.InResultadoRetificado)
                    .HasColumnName("IN_RESULTADO_RETIFICADO")
                    .HasComment("se o resultado foi retificado");

                entity.Property(e => e.InSucessoComunicacao)
                    .HasColumnName("IN_SUCESSO_COMUNICACAO")
                    .HasComment("se houve sucesso na comunicação com o médico sobre o resultado crítico");

                entity.Property(e => e.TxHash)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_HASH");

                entity.Property(e => e.TxMetodo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_METODO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("observações do resultado, aparece no laudo");

                entity.HasOne(d => d.IdEquipamentoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultado)
                    .HasForeignKey(d => d.IdEquipamento)
                    .HasConstraintName("FK_LaboratorioPedidoResultado_TipoDiversos1");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultado)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultado_LaboratorioPedidoItem");

                entity.HasOne(d => d.IdMetodoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultado)
                    .HasForeignKey(d => d.IdMetodo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultado_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioDigitouNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoIdUsuarioDigitouNavigation)
                    .HasForeignKey(d => d.IdUsuarioDigitou)
                    .HasConstraintName("FK_LaboratorioPedidoResultado_Usuario");

                entity.HasOne(d => d.IdUsuarioLiberouNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoIdUsuarioLiberouNavigation)
                    .HasForeignKey(d => d.IdUsuarioLiberou)
                    .HasConstraintName("FK_LaboratorioPedidoResultado_Usuario1");

                entity.HasOne(d => d.IdUsuarioRetificouNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoIdUsuarioRetificouNavigation)
                    .HasForeignKey(d => d.IdUsuarioRetificou)
                    .HasConstraintName("FK_LaboratorioPedidoResultado_Usuario2");
            });

            modelBuilder.Entity<LaboratorioPedidoResultadoAgrupado>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoResultadoAgrupado);

                entity.Property(e => e.IdLaboratorioPedidoResultadoAgrupado).HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO_AGRUPADO");

                entity.Property(e => e.AdArquivoAgrupado).HasColumnName("AD_ARQUIVO_AGRUPADO");

                entity.Property(e => e.DtLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdLaboratorioPedido).HasColumnName("ID_LABORATORIO_PEDIDO");

                entity.Property(e => e.IdUsuarioLiberou).HasColumnName("ID_USUARIO_LIBEROU");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdLaboratorioPedidoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoAgrupado)
                    .HasForeignKey(d => d.IdLaboratorioPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoAgrupado_LaboratorioPedido");

                entity.HasOne(d => d.IdUsuarioLiberouNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoAgrupado)
                    .HasForeignKey(d => d.IdUsuarioLiberou)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoAgrupado_Usuario");
            });

            modelBuilder.Entity<LaboratorioPedidoResultadoAntibiotico>(entity =>
            {
                entity.HasKey(e => new { e.IdLaboratorioPedidoResultado, e.IdGerme, e.IdAntibiotico });

                entity.Property(e => e.IdLaboratorioPedidoResultado)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO")
                    .HasComment("identificador do resultado do exame");

                entity.Property(e => e.IdGerme)
                    .HasColumnName("ID_GERME")
                    .HasComment("identificador do germe do resultado, tipo tabela 232");

                entity.Property(e => e.IdAntibiotico)
                    .HasColumnName("ID_ANTIBIOTICO")
                    .HasComment("identificador do antibiotico, tipo tabela 233");

                entity.Property(e => e.TxResistente)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESISTENTE")
                    .HasComment("valor do resultado, s - sensível, i - intermediario, r- resistente, - - não testado");

                entity.HasOne(d => d.IdAntibioticoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoAntibioticoIdAntibioticoNavigation)
                    .HasForeignKey(d => d.IdAntibiotico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoAntibiotico_TipoDiversos");

                entity.HasOne(d => d.IdGermeNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoAntibioticoIdGermeNavigation)
                    .HasForeignKey(d => d.IdGerme)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoAntibiotico_TipoDiversos1");

                entity.HasOne(d => d.IdLaboratorioPedidoResultadoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoAntibiotico)
                    .HasForeignKey(d => d.IdLaboratorioPedidoResultado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoAntibiotico_LaboratorioPedidoResultado");
            });

            modelBuilder.Entity<LaboratorioPedidoResultadoGermes>(entity =>
            {
                entity.HasKey(e => new { e.IdLaboratorioPedidoResultado, e.IdGerme });

                entity.Property(e => e.IdLaboratorioPedidoResultado)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO")
                    .HasComment("identificador do resultado");

                entity.Property(e => e.IdGerme)
                    .HasColumnName("ID_GERME")
                    .HasComment("identificador do germe lançado no resultado, tipo tabela 232");

                entity.Property(e => e.NrOrdem)
                    .HasColumnName("NR_ORDEM")
                    .HasComment("ordem que foi lançado o germe, 1,2,3 e 4");

                entity.Property(e => e.TxQuantitativo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_QUANTITATIVO")
                    .HasComment("texto quantitativo de cada germe");

                entity.HasOne(d => d.IdGermeNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoGermes)
                    .HasForeignKey(d => d.IdGerme)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoGermes_TipoDiversos");

                entity.HasOne(d => d.IdLaboratorioPedidoResultadoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoGermes)
                    .HasForeignKey(d => d.IdLaboratorioPedidoResultado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoGermes_LaboratorioPedidoResultado");
            });

            modelBuilder.Entity<LaboratorioPedidoResultadoItem>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoResultadoItem);

                entity.HasIndex(e => new { e.IdLaboratorioPedidoResultado, e.InAtivo }, "IX_LaboratorioPedidoResultadoItem_ID_LABORATORIO_PEDIDO_RESULTADO_IN_ATIVO");

                entity.Property(e => e.IdLaboratorioPedidoResultadoItem)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO_ITEM")
                    .HasComment("identificador único de cada ítem do resultado");

                entity.Property(e => e.AdImagem)
                    .HasColumnType("image")
                    .HasColumnName("AD_IMAGEM");

                entity.Property(e => e.IdExameItemMaterial)
                    .HasColumnName("ID_EXAME_ITEM_MATERIAL")
                    .HasComment("identificador do item do exame");

                entity.Property(e => e.IdLaboratorioPedidoResultado)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO")
                    .HasComment("identificador do resultado");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.InForaRange).HasColumnName("IN_FORA_RANGE");

                entity.Property(e => e.InForaRangeVermelho).HasColumnName("IN_FORA_RANGE_VERMELHO");

                entity.Property(e => e.InRetificado)
                    .HasColumnName("IN_RETIFICADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxValor)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR")
                    .HasComment("valor do resultado");

                entity.Property(e => e.TxValorReferencia)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_REFERENCIA")
                    .HasComment("armazena o valor de referência no momento que foi lançado o resultado");

                entity.HasOne(d => d.IdExameItemMaterialNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoItem)
                    .HasForeignKey(d => d.IdExameItemMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoItem_ExameItemMaterial");

                entity.HasOne(d => d.IdLaboratorioPedidoResultadoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoItem)
                    .HasForeignKey(d => d.IdLaboratorioPedidoResultado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoItem_LaboratorioPedidoResultado");
            });

            modelBuilder.Entity<LaboratorioPedidoResultadoItemHistorico>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdLaboratorioPedidoResultadoItem, "IX_LaboratorioPedidoResultadoItemHistorico_ID_LABORATORIO_PEDIDO_RESULTADO_ITEM")
                    .HasFillFactor((byte)75);

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdLaboratorioPedidoResultadoItem).HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO_ITEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxValor)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoItemHistorico_Usuario");
            });

            modelBuilder.Entity<LaboratorioPedidoResultadoRepeticao>(entity =>
            {
                entity.HasKey(e => new { e.IdLaboratorioPedidoResultado, e.IdMotivoRepeticao });

                entity.Property(e => e.IdLaboratorioPedidoResultado)
                    .HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO")
                    .HasComment("identificador do resultado");

                entity.Property(e => e.IdMotivoRepeticao)
                    .HasColumnName("ID_MOTIVO_REPETICAO")
                    .HasComment("motivo da repetição, tipo tabela 222");

                entity.Property(e => e.NrRepeticao)
                    .HasColumnName("NR_REPETICAO")
                    .HasComment("quantidade de repetições");

                entity.HasOne(d => d.IdLaboratorioPedidoResultadoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoRepeticao)
                    .HasForeignKey(d => d.IdLaboratorioPedidoResultado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoRepeticao_LaboratorioPedidoResultado");

                entity.HasOne(d => d.IdMotivoRepeticaoNavigation)
                    .WithMany(p => p.LaboratorioPedidoResultadoRepeticao)
                    .HasForeignKey(d => d.IdMotivoRepeticao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoResultadoRepeticao_TipoDiversos");
            });

            modelBuilder.Entity<LaboratorioUnidadeSolicitante>(entity =>
            {
                entity.HasKey(e => e.IdUnidadeOrganizacional)
                    .HasName("PK_Laboratorio_Unidades_Solicitantes_1");

                entity.ToTable("Laboratorio_Unidade_Solicitante");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL")
                    .HasComment("unidade organizacional que pode qualquer exame");

                entity.Property(e => e.IdPrioridadeTipo)
                    .HasColumnName("ID_PRIORIDADE_TIPO")
                    .HasComment("ao solicitar o pedido para esta unidade será lançada a prioridade, TIPO TABELA 104");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.HasOne(d => d.IdPrioridadeTipoNavigation)
                    .WithMany(p => p.LaboratorioUnidadeSolicitante)
                    .HasForeignKey(d => d.IdPrioridadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Laboratorio_Unidades_Solicitantes_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithOne(p => p.LaboratorioUnidadeSolicitante)
                    .HasForeignKey<LaboratorioUnidadeSolicitante>(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Laboratorio_Unidades_Solicitantes_UnidadeOrganizacional");
            });

            modelBuilder.Entity<LaboratorioUnidadeSolicitanteExcecao>(entity =>
            {
                entity.HasKey(e => new { e.IdExame, e.IdUnidadeOrganizacional });

                entity.ToTable("Laboratorio_Unidade_Solicitante_Excecao");

                entity.Property(e => e.IdExame)
                    .HasColumnName("ID_EXAME")
                    .HasComment("exame que não será permitido lançar para a unidade");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL")
                    .HasComment("unidade que não poderá lançar o exame");

                entity.Property(e => e.IdPrioridadeTipo)
                    .HasColumnName("ID_PRIORIDADE_TIPO")
                    .HasComment("campo não utilizado,tipo tabela 104");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.LaboratorioUnidadeSolicitanteExcecao)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Laboratorio_Unidade_Solicitante_Excecao_Exame");

                entity.HasOne(d => d.IdPrioridadeTipoNavigation)
                    .WithMany(p => p.LaboratorioUnidadeSolicitanteExcecao)
                    .HasForeignKey(d => d.IdPrioridadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Laboratorio_Unidade_Solicitante_Excecao_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.LaboratorioUnidadeSolicitanteExcecao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Laboratorio_Unidade_Solicitante_Excecao_UnidadeOrganizacional");
            });

            modelBuilder.Entity<Laboratoriopedidoitemhistoricoamostra>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoItemHistoricoAmostra)
                    .HasName("PK_LaboratorioPedidoItemHistoricoAmostra");

                entity.ToTable("LABORATORIOPEDIDOITEMHISTORICOAMOSTRA");

                entity.Property(e => e.IdLaboratorioPedidoItemHistoricoAmostra).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM_HISTORICO_AMOSTRA");

                entity.Property(e => e.IdLaboratorioPedidoItem).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM");

                entity.Property(e => e.IdMaterial).HasColumnName("ID_MATERIAL");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxCodigoAmostra)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_CODIGO_AMOSTRA");

                entity.Property(e => e.TxMaterial)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_MATERIAL");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.Laboratoriopedidoitemhistoricoamostra)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaboratorioPedidoItemHistoricoAmostra_LaboratorioPedidoItem");
            });

            modelBuilder.Entity<Laboratoriopedidoresultadohistorico>(entity =>
            {
                entity.HasKey(e => e.IdLaboratorioPedidoResultadoHistorico)
                    .HasName("PK_ID_LABORATORIO_PEDIDO_RESULTADO_HISTORICO");

                entity.ToTable("LABORATORIOPEDIDORESULTADOHISTORICO");

                entity.Property(e => e.IdLaboratorioPedidoResultadoHistorico).HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO_HISTORICO");

                entity.Property(e => e.DtDigitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DIGITACAO");

                entity.Property(e => e.DtLaboratorioPedidoResultadoHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LABORATORIO_PEDIDO_RESULTADO_HISTORICO");

                entity.Property(e => e.DtLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO");

                entity.Property(e => e.IdEquipamento).HasColumnName("ID_EQUIPAMENTO");

                entity.Property(e => e.IdExameMaterial).HasColumnName("ID_EXAME_MATERIAL");

                entity.Property(e => e.IdLaboratorioPedidoItem).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM");

                entity.Property(e => e.IdLaboratorioPedidoResultado).HasColumnName("ID_LABORATORIO_PEDIDO_RESULTADO");

                entity.Property(e => e.IdMetodo).HasColumnName("ID_METODO");

                entity.Property(e => e.IdUsuarioDigitou).HasColumnName("ID_USUARIO_DIGITOU");

                entity.Property(e => e.IdUsuarioLiberou).HasColumnName("ID_USUARIO_LIBEROU");

                entity.Property(e => e.IdUsuarioRetificou).HasColumnName("ID_USUARIO_RETIFICOU");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InResultadoAutomatico).HasColumnName("IN_RESULTADO_AUTOMATICO");

                entity.Property(e => e.InResultadoCritico).HasColumnName("IN_RESULTADO_CRITICO");

                entity.Property(e => e.InResultadoRetificado).HasColumnName("IN_RESULTADO_RETIFICADO");

                entity.Property(e => e.InSucessoComunicacao).HasColumnName("IN_SUCESSO_COMUNICACAO");

                entity.Property(e => e.TxHash)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_HASH");

                entity.Property(e => e.TxMetodo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_METODO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<LancamentoBancario>(entity =>
            {
                entity.HasKey(e => e.IdLancamentoBancario)
                    .HasName("LancamentoBancario_PK");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtCompensacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COMPENSACAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdCredorFavorecido).HasColumnName("ID_CREDOR_FAVORECIDO");

                entity.Property(e => e.IdExterno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXTERNO");

                entity.Property(e => e.IdFormaPagamento).HasColumnName("ID_FORMA_PAGAMENTO");

                entity.Property(e => e.IdLancamentoOrigem).HasColumnName("ID_LANCAMENTO_ORIGEM");

                entity.Property(e => e.IdNotaemitidaFormapagamento).HasColumnName("ID_NOTAEMITIDA_FORMAPAGAMENTO");

                entity.Property(e => e.IdOperadoraResponsavelCredito).HasColumnName("ID_OPERADORA_RESPONSAVEL_CREDITO");

                entity.Property(e => e.IdParcelacontapagarBaixaEstorno).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_ESTORNO");

                entity.Property(e => e.IdSaidaFisica).HasColumnName("ID_SAIDA_FISICA");

                entity.Property(e => e.IdTipoLancamentoBancario).HasColumnName("ID_TIPO_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAdiantamentoCliente).HasColumnName("IN_ADIANTAMENTO_CLIENTE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InChequeCliente).HasColumnName("IN_CHEQUE_CLIENTE");

                entity.Property(e => e.InCompensado)
                    .IsRequired()
                    .HasColumnName("IN_COMPENSADO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InEstornado).HasColumnName("IN_ESTORNADO");

                entity.Property(e => e.InPrevisao).HasColumnName("IN_PREVISAO");

                entity.Property(e => e.InSaiuFisicamenteTransferido).HasColumnName("IN_SAIU_FISICAMENTE_TRANSFERIDO");

                entity.Property(e => e.NrLancamento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LANCAMENTO");

                entity.Property(e => e.TxDebitoCredito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_DEBITO_CREDITO");

                entity.Property(e => e.TxHistorico)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.VlLancamento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_LANCAMENTO");

                entity.Property(e => e.VlVinculadoPagar)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VL_VINCULADO_PAGAR");

                entity.Property(e => e.VlVinculadoPago)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VL_VINCULADO_PAGO");

                entity.HasOne(d => d.IdBorderoNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdBordero)
                    .HasConstraintName("LancamentoBancario_Bordero_FK1");

                entity.HasOne(d => d.IdChequeNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdCheque)
                    .HasConstraintName("Cheque_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdContaBancaria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaBancaria_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdContaCorrenteNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdContaCorrente);

                entity.HasOne(d => d.IdCredorFavorecidoNavigation)
                    .WithMany(p => p.LancamentoBancarioIdCredorFavorecidoNavigation)
                    .HasForeignKey(d => d.IdCredorFavorecido)
                    .HasConstraintName("Pessoa_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdFormaPagamentoNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdFormaPagamento)
                    .HasConstraintName("FK_LancamentoBancario_TipoDiversos");

                entity.HasOne(d => d.IdLancamentoOrigemNavigation)
                    .WithMany(p => p.InverseIdLancamentoOrigemNavigation)
                    .HasForeignKey(d => d.IdLancamentoOrigem)
                    .HasConstraintName("LancamentoBancario_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdNotaemitidaFormapagamentoNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdNotaemitidaFormapagamento);

                entity.HasOne(d => d.IdOperadoraResponsavelCreditoNavigation)
                    .WithMany(p => p.LancamentoBancarioIdOperadoraResponsavelCreditoNavigation)
                    .HasForeignKey(d => d.IdOperadoraResponsavelCredito)
                    .HasConstraintName("LancamentoBancario_Pessoa_FK1");

                entity.HasOne(d => d.IdParcelacontapagarBaixaEstornoNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixaEstorno)
                    .HasConstraintName("FK_LancamentoBancario_PCP_Baixa_ID_PARCELACONTAPAGAR_BAIXA_ESTORNO");

                entity.HasOne(d => d.IdTipoLancamentoBancarioNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdTipoLancamentoBancario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoLancamentoBancario_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LancamentoBancario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LancamentoBancario_Usuario_FK1");
            });

            modelBuilder.Entity<LancamentoBancarioComplemento>(entity =>
            {
                entity.HasKey(e => e.IdLancamentoBancarioComplemento);

                entity.Property(e => e.IdLancamentoBancarioComplemento).HasColumnName("ID_LANCAMENTO_BANCARIO_COMPLEMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NrAgencia)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_AGENCIA");

                entity.Property(e => e.NrConta)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONTA");

                entity.Property(e => e.NrCpfCnpj)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CPF_CNPJ");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.LancamentoBancarioComplemento)
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_LancamentoBancarioComplemento_Banco");

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.LancamentoBancarioComplemento)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LancamentoBancarioComplemento_LancamentoBancario");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LancamentoBancarioComplemento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LancamentoBancarioComplemento_Usuario");
            });

            modelBuilder.Entity<LancamentoBancarioConciliacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LancamentoBancarioConciliacao");

                entity.Property(e => e.CdAgencia).HasColumnName("CD_AGENCIA");

                entity.Property(e => e.CdBanco)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_BANCO");

                entity.Property(e => e.CdConta).HasColumnName("CD_CONTA");

                entity.Property(e => e.DtBaixaConvenio).HasColumnName("DT_BAIXA_CONVENIO");

                entity.Property(e => e.DtLancamentoBancario)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdBanco).HasColumnName("ID_BANCO");

                entity.Property(e => e.IdExterno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXTERNO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.InEstornado).HasColumnName("IN_ESTORNADO");

                entity.Property(e => e.NmAgencia)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_AGENCIA");

                entity.Property(e => e.NmBanco)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_BANCO");

                entity.Property(e => e.NmOperadora)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NrLancamentoBancario)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LANCAMENTO_BANCARIO");

                entity.Property(e => e.TxDescricaoOperadorarecebimento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_OPERADORARECEBIMENTO");

                entity.Property(e => e.TxSituacaoLancamentoBancario)
                    .IsRequired()
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITUACAO_LANCAMENTO_BANCARIO");

                entity.Property(e => e.VlDespesa)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_DESPESA");

                entity.Property(e => e.VlRecebido)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RECEBIDO");

                entity.Property(e => e.VlSaldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_SALDO");
            });

            modelBuilder.Entity<LancamentoBancarioConciliacaoNotaEmitida>(entity =>
            {
                entity.HasKey(e => e.IdLancamentoBancarioConciliacaoNotaEmitida)
                    .HasName("LancamentoBancarioConciliacao_NotaEmitida_PK");

                entity.ToTable("LancamentoBancarioConciliacao_NotaEmitida");

                entity.Property(e => e.IdLancamentoBancarioConciliacaoNotaEmitida).HasColumnName("ID_LANCAMENTO_BANCARIO_CONCILIACAO_NOTA_EMITIDA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioExclusao).HasColumnName("ID_USUARIO_EXCLUSAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrLancamentoBancario).HasColumnName("NR_LANCAMENTO_BANCARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlImpostos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_IMPOSTOS");

                entity.Property(e => e.VlUtilizado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_UTILIZADO");

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.LancamentoBancarioConciliacaoNotaEmitida)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .HasConstraintName("LBCNE_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.LancamentoBancarioConciliacaoNotaEmitida)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("NotaEmitida_LancamentoBancarioConciliacao_NotaEmitida_FK1");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.LancamentoBancarioConciliacaoNotaEmitidaIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UsuarioCadastro_LancamentoBancarioConciliacao_NotaEmitida_FK1");

                entity.HasOne(d => d.IdUsuarioExclusaoNavigation)
                    .WithMany(p => p.LancamentoBancarioConciliacaoNotaEmitidaIdUsuarioExclusaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioExclusao)
                    .HasConstraintName("UsuarioExclusao_LancamentoBancarioConciliacao_NotaEmitida_FK1");
            });

            modelBuilder.Entity<LancamentoBancarioContaPagar>(entity =>
            {
                entity.HasKey(e => e.IdLancamentoBancarioContaPagar);

                entity.ToTable("LancamentoBancario_ContaPagar");

                entity.Property(e => e.IdLancamentoBancarioContaPagar).HasColumnName("ID_LANCAMENTO_BANCARIO_CONTA_PAGAR");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.LancamentoBancarioContaPagar)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LancamentoBancario_ContaPagar_ContaPagar");

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.LancamentoBancarioContaPagar)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LancamentoBancario_ContaPagar_LancamentoBancario");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LancamentoBancarioContaPagar)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LancamentoBancario_ContaPagar_Usuario");
            });

            modelBuilder.Entity<LancamentoBancarioLog>(entity =>
            {
                entity.HasKey(e => e.IdLancamentoBancarioLog);

                entity.ToTable("LancamentoBancario_Log");

                entity.Property(e => e.IdLancamentoBancarioLog).HasColumnName("ID_LANCAMENTO_BANCARIO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtCompensacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COMPENSACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdCredorFavorecido).HasColumnName("ID_CREDOR_FAVORECIDO");

                entity.Property(e => e.IdExterno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXTERNO");

                entity.Property(e => e.IdFormaPagamento).HasColumnName("ID_FORMA_PAGAMENTO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLancamentoOrigem).HasColumnName("ID_LANCAMENTO_ORIGEM");

                entity.Property(e => e.IdNotaemitidaFormapagamento).HasColumnName("ID_NOTAEMITIDA_FORMAPAGAMENTO");

                entity.Property(e => e.IdOperadoraResponsavelCredito).HasColumnName("ID_OPERADORA_RESPONSAVEL_CREDITO");

                entity.Property(e => e.IdParcelacontapagarBaixaEstorno).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_ESTORNO");

                entity.Property(e => e.IdSaidaFisica).HasColumnName("ID_SAIDA_FISICA");

                entity.Property(e => e.IdTipoLancamentoBancario).HasColumnName("ID_TIPO_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAdiantamentoCliente).HasColumnName("IN_ADIANTAMENTO_CLIENTE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InChequeCliente).HasColumnName("IN_CHEQUE_CLIENTE");

                entity.Property(e => e.InCompensado).HasColumnName("IN_COMPENSADO");

                entity.Property(e => e.InEstornado).HasColumnName("IN_ESTORNADO");

                entity.Property(e => e.InPrevisao).HasColumnName("IN_PREVISAO");

                entity.Property(e => e.InSaiuFisicamenteTransferido).HasColumnName("IN_SAIU_FISICAMENTE_TRANSFERIDO");

                entity.Property(e => e.NrLancamento)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LANCAMENTO");

                entity.Property(e => e.TxDebitoCredito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_DEBITO_CREDITO");

                entity.Property(e => e.TxHistorico)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.Property(e => e.VlLancamento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_LANCAMENTO");

                entity.Property(e => e.VlVinculadoPagar)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VL_VINCULADO_PAGAR");

                entity.Property(e => e.VlVinculadoPago)
                    .HasColumnType("decimal(15, 2)")
                    .HasColumnName("VL_VINCULADO_PAGO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.LancamentoBancarioLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<LancamentoBancárioTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LancamentoBancário_Teste");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtLancamentoBancario)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.NmOperadora)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NrLancamentoBancario).HasColumnName("NR_LANCAMENTO_BANCARIO");

                entity.Property(e => e.TxSituacaoLancamentoBancario)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITUACAO_LANCAMENTO_BANCARIO");

                entity.Property(e => e.VlRecebido)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RECEBIDO");
            });

            modelBuilder.Entity<Laudo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Laudo");

                entity.Property(e => e.AssinaturaAprovacao)
                    .HasColumnType("image")
                    .HasColumnName("ASSINATURA_APROVACAO");

                entity.Property(e => e.AssinaturaDigitacao)
                    .HasColumnType("image")
                    .HasColumnName("ASSINATURA_DIGITACAO");

                entity.Property(e => e.Crm)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CRM")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DataColeta)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_COLETA");

                entity.Property(e => e.DtResultado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RESULTADO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdExameMaterialMeioMetodo).HasColumnName("ID_EXAME_MATERIAL_MEIO_METODO");

                entity.Property(e => e.IdFaixaEtaria).HasColumnName("ID_FAIXA_ETARIA");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdUsuarioAprovacao).HasColumnName("ID_USUARIO_APROVACAO");

                entity.Property(e => e.IdUsuarioDigitacao).HasColumnName("ID_USUARIO_DIGITACAO");

                entity.Property(e => e.InPesquisaBacteria).HasColumnName("IN_PESQUISA_BACTERIA");

                entity.Property(e => e.InUsaCampoPercentualDigitacao).HasColumnName("IN_USA_CAMPO_PERCENTUAL_DIGITACAO");

                entity.Property(e => e.Material)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MATERIAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmAntibiotico)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_ANTIBIOTICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmExame)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_EXAME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmItemExame)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ITEM_EXAME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmMedicoSolicitante)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO_SOLICITANTE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmUsuarioAprovacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_USUARIO_APROVACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmUsuarioDigitacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_USUARIO_DIGITACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NrDiferencaIdade).HasColumnName("NR_DIFERENCA_IDADE");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.NrResultado).HasColumnName("NR_RESULTADO");

                entity.Property(e => e.Percentual).HasColumnName("PERCENTUAL");

                entity.Property(e => e.TxDocAprovacao)
                    .HasMaxLength(259)
                    .IsUnicode(false)
                    .HasColumnName("TX_DOC_APROVACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDocDigitacao)
                    .HasMaxLength(259)
                    .IsUnicode(false)
                    .HasColumnName("TX_DOC_DIGITACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxMetodo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_METODO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxResultado)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESULTADO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxResultadoAntibiograma)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESULTADO_ANTIBIOGRAMA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Unidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.UnidadeAbertura)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_ABERTURA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ValorReferencia)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VALOR_REFERENCIA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<LaudoLaboratorioIntegracaoConnect>(entity =>
            {
                entity.HasKey(e => new { e.IdLaboratorioPedidoItem, e.IdIntegracao });

                entity.ToTable("LaudoLaboratorio_IntegracaoConnect");

                entity.Property(e => e.IdLaboratorioPedidoItem).HasColumnName("ID_LABORATORIO_PEDIDO_ITEM");

                entity.Property(e => e.IdIntegracao).HasColumnName("ID_INTEGRACAO");

                entity.Property(e => e.GuidIntegracao)
                    .HasColumnName("GUID_INTEGRACAO")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdIntegracaoNavigation)
                    .WithMany(p => p.LaudoLaboratorioIntegracaoConnect)
                    .HasForeignKey(d => d.IdIntegracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaudoLaboratorio_IntegracaoConnect_IntegracaoConnect");

                entity.HasOne(d => d.IdLaboratorioPedidoItemNavigation)
                    .WithMany(p => p.LaudoLaboratorioIntegracaoConnect)
                    .HasForeignKey(d => d.IdLaboratorioPedidoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaudoLaboratorio_IntegracaoConnect_LaboratorioPedidoItem");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaudoLaboratorioIntegracaoConnect)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaudoLaboratorio_IntegracaoConnect_Usuario");
            });

            modelBuilder.Entity<LaudoSadt>(entity =>
            {
                entity.HasKey(e => e.IdLaudoSadt);

                entity.ToTable("LaudoSADT");

                entity.HasIndex(e => new { e.IdCheckinEnfermagem, e.IdProcedimentoPrincipalFolhadesala }, "IX_LaudoSADT_CheckinEnfermagemProcedimentoPrincipal")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdStatusLaudo, "IX_LaudoSADT_ID_STATUS_LAUDO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLaudoSadt).HasColumnName("ID_LAUDO_SADT");

                entity.Property(e => e.AdAudioLaudo)
                    .HasMaxLength(50)
                    .HasColumnName("AD_AUDIO_LAUDO")
                    .IsFixedLength(true);

                entity.Property(e => e.AdPdfLaudo).HasColumnName("AD_PDF_LAUDO");

                entity.Property(e => e.DtLaudo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LAUDO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdModeloLaudoSadt).HasColumnName("ID_MODELO_LAUDO_SADT");

                entity.Property(e => e.IdProcedimentoPrincipalFolhadesala).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL_FOLHADESALA");

                entity.Property(e => e.IdProcedimentoSecundarioFolhadesala).HasColumnName("ID_PROCEDIMENTO_SECUNDARIO_FOLHADESALA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdStatusLaudo).HasColumnName("ID_STATUS_LAUDO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmDestinatarioLaudo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_DESTINATARIO_LAUDO");

                entity.Property(e => e.NmEntregadorLaudo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ENTREGADOR_LAUDO");

                entity.Property(e => e.NrAccession)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_ACCESSION")
                    .HasComment("accession number, número que identifica o exame no PACS");

                entity.Property(e => e.PatientId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PATIENT_ID");

                entity.Property(e => e.Rn)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("RN");

                entity.Property(e => e.TxDocumentosCancelados)
                    .HasColumnType("text")
                    .HasColumnName("TX_DOCUMENTOS_CANCELADOS");

                entity.Property(e => e.TxEnderecoEntrega)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO_ENTREGA");

                entity.Property(e => e.TxHtmlLaudo)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_LAUDO");

                entity.Property(e => e.TxTextoLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_TEXTO_LAUDO");

                entity.HasOne(d => d.IdModeloLaudoSadtNavigation)
                    .WithMany(p => p.LaudoSadt)
                    .HasForeignKey(d => d.IdModeloLaudoSadt)
                    .HasConstraintName("FK_LaudoSADT_ModeloLaudoSADT");
            });

            modelBuilder.Entity<LaudoSadtIntegracaoConnect>(entity =>
            {
                entity.HasKey(e => new { e.IdLaudoSadt, e.IdIntegracao });

                entity.ToTable("LaudoSADT_IntegracaoConnect");

                entity.Property(e => e.IdLaudoSadt).HasColumnName("ID_LAUDO_SADT");

                entity.Property(e => e.IdIntegracao).HasColumnName("ID_INTEGRACAO");

                entity.Property(e => e.GuidIntegracao)
                    .HasColumnName("GUID_INTEGRACAO")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdIntegracaoNavigation)
                    .WithMany(p => p.LaudoSadtIntegracaoConnect)
                    .HasForeignKey(d => d.IdIntegracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaudoSADT_IntegracaoConnect_IntegracaoConnect");

                entity.HasOne(d => d.IdLaudoSadtNavigation)
                    .WithMany(p => p.LaudoSadtIntegracaoConnect)
                    .HasForeignKey(d => d.IdLaudoSadt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaudoSADT_IntegracaoConnect_LaudoSADT");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LaudoSadtIntegracaoConnect)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LaudoSADT_IntegracaoConnect_Usuario");
            });

            modelBuilder.Entity<LaudoSadthistorico>(entity =>
            {
                entity.HasKey(e => e.IdLaudoSadtHistorico);

                entity.ToTable("LaudoSADTHistorico");

                entity.HasIndex(e => new { e.IdLaudoSadt, e.IdStatusLaudo }, "IX_LaudoSADTHistorico_K1_K2_14_15")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLaudoSadtHistorico).HasColumnName("ID_LAUDO_SADT_HISTORICO");

                entity.Property(e => e.AdAudioLaudo)
                    .HasMaxLength(50)
                    .HasColumnName("AD_AUDIO_LAUDO")
                    .IsFixedLength(true);

                entity.Property(e => e.DtVersaoLaudo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VERSAO_LAUDO");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdLaudoSadt).HasColumnName("ID_LAUDO_SADT");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdModeloLaudoSadt).HasColumnName("ID_MODELO_LAUDO_SADT");

                entity.Property(e => e.IdProcedimentoPrincipalFolhadesala).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL_FOLHADESALA");

                entity.Property(e => e.IdProcedimentoSecundarioFolhadesala).HasColumnName("ID_PROCEDIMENTO_SECUNDARIO_FOLHADESALA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdStatusLaudo).HasColumnName("ID_STATUS_LAUDO");

                entity.Property(e => e.IdUsuarioVersao).HasColumnName("ID_USUARIO_VERSAO");

                entity.Property(e => e.NmDestinatarioLaudo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_DESTINATARIO_LAUDO");

                entity.Property(e => e.NmEntregadorLaudo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ENTREGADOR_LAUDO");

                entity.Property(e => e.Rn)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("RN");

                entity.Property(e => e.TxEnderecoEntrega)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO_ENTREGA");

                entity.Property(e => e.TxHtmlLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_LAUDO");

                entity.Property(e => e.TxTextoLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_TEXTO_LAUDO");

                entity.HasOne(d => d.IdModeloLaudoSadtNavigation)
                    .WithMany(p => p.LaudoSadthistorico)
                    .HasForeignKey(d => d.IdModeloLaudoSadt)
                    .HasConstraintName("FK_LaudoSADTHistorico_ModeloLaudoSADT");
            });

            modelBuilder.Entity<Leito>(entity =>
            {
                entity.HasKey(e => e.IdLeito)
                    .HasName("Leito_PK");

                entity.HasIndex(e => e.IdStatusLeito, "IX_Leito_TipoDiversos_ID_STATUS_LEITO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_Leito_UnidadeOrganizacional")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.DtPrevisaoLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO_LIBERACAO");

                entity.Property(e => e.IdAndar).HasColumnName("ID_ANDAR");

                entity.Property(e => e.IdBloco).HasColumnName("ID_BLOCO");

                entity.Property(e => e.IdLeitoTipo).HasColumnName("ID_LEITO_TIPO");

                entity.Property(e => e.IdSexo).HasColumnName("ID_SEXO");

                entity.Property(e => e.IdStatusLeito).HasColumnName("ID_STATUS_LEITO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeResponsavelTipo).HasColumnName("ID_UNIDADE_RESPONSAVEL_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InVisivel)
                    .IsRequired()
                    .HasColumnName("IN_VISIVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrLeito)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_LEITO");

                entity.Property(e => e.NrRamal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_RAMAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdLeitoTipoNavigation)
                    .WithMany(p => p.LeitoIdLeitoTipoNavigation)
                    .HasForeignKey(d => d.IdLeitoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Leito_FK1");

                entity.HasOne(d => d.IdSexoNavigation)
                    .WithMany(p => p.LeitoIdSexoNavigation)
                    .HasForeignKey(d => d.IdSexo)
                    .HasConstraintName("TipoDiversos_Leito_FK3");

                entity.HasOne(d => d.IdStatusLeitoNavigation)
                    .WithMany(p => p.LeitoIdStatusLeitoNavigation)
                    .HasForeignKey(d => d.IdStatusLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Leito_FK2");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.LeitoIdUnidadeOrganizacionalNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Leito_FK1");

                entity.HasOne(d => d.IdUnidadeResponsavelTipoNavigation)
                    .WithMany(p => p.LeitoIdUnidadeResponsavelTipoNavigation)
                    .HasForeignKey(d => d.IdUnidadeResponsavelTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Leito_FK2");
            });

            modelBuilder.Entity<LeitoCaracteristica>(entity =>
            {
                entity.HasKey(e => new { e.IdLeito, e.IdCaracteristica });

                entity.ToTable("Leito_Caracteristica");

                entity.Property(e => e.IdLeito)
                    .HasColumnName("ID_LEITO")
                    .HasComment("identificador do leito que a caracteristica está relacionada. tabela Leitos - ID_LEITO");

                entity.Property(e => e.IdCaracteristica)
                    .HasColumnName("ID_CARACTERISTICA")
                    .HasComment("caracteristica do leito, tipo tabela Características de leito (384)");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica. 0 está excluído e não pode ser listado");

                entity.HasOne(d => d.IdCaracteristicaNavigation)
                    .WithMany(p => p.LeitoCaracteristica)
                    .HasForeignKey(d => d.IdCaracteristica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Leito_Caracteristica_TipoDiversos");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.LeitoCaracteristica)
                    .HasForeignKey(d => d.IdLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Leito_Caracteristica_Leito");
            });

            modelBuilder.Entity<LeitoCnesAcomodacao>(entity =>
            {
                entity.HasKey(e => e.IdLeitoCnesAcomodacao)
                    .HasName("PK__LeitoCne__37523F367753EA96");

                entity.ToTable("LeitoCnes_Acomodacao");

                entity.Property(e => e.IdLeitoCnesAcomodacao).HasColumnName("ID_LEITO_CNES_ACOMODACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdAcomodacao).HasColumnName("ID_ACOMODACAO");

                entity.Property(e => e.IdLeitoCnes).HasColumnName("ID_LEITO_CNES");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioExclusao).HasColumnName("ID_USUARIO_EXCLUSAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdAcomodacaoNavigation)
                    .WithMany(p => p.LeitoCnesAcomodacao)
                    .HasForeignKey(d => d.IdAcomodacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoCnes_Acomodacao_Acomodacao");

                entity.HasOne(d => d.IdLeitoCnesNavigation)
                    .WithMany(p => p.LeitoCnesAcomodacao)
                    .HasForeignKey(d => d.IdLeitoCnes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoCnes_Acomodacao_LeitoSus_Cnes");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.LeitoCnesAcomodacao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_LeitoCnes_Acomodacao_UnidadeOrganizacional");
            });

            modelBuilder.Entity<LeitoEventoLeito>(entity =>
            {
                entity.HasKey(e => e.IdEventoLeito)
                    .HasName("Leito_EventoLeito_PK");

                entity.ToTable("Leito_EventoLeito");

                entity.Property(e => e.IdEventoLeito).HasColumnName("ID_EVENTO_LEITO");

                entity.Property(e => e.DtEncerramento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENCERRAMENTO");

                entity.Property(e => e.DtPrevisaoInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO_INICIO");

                entity.Property(e => e.DtPrevisaoLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO_LIBERACAO");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

                entity.Property(e => e.IdJustPadraoEventoleito).HasColumnName("ID_JUST_PADRAO_EVENTOLEITO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdResponsavel).HasColumnName("ID_RESPONSAVEL");

                entity.Property(e => e.IdSituacaoLeitoTipo).HasColumnName("ID_SITUACAO_LEITO_TIPO");

                entity.Property(e => e.IdUsuarioAcesso).HasColumnName("ID_USUARIO_ACESSO");

                entity.Property(e => e.InInicioLeitoDesocupado).HasColumnName("IN_INICIO_LEITO_DESOCUPADO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdEventoNavigation)
                    .WithMany(p => p.LeitoEventoLeito)
                    .HasForeignKey(d => d.IdEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EventoLeito_Leito_EventoLeito_FK1");

                entity.HasOne(d => d.IdJustPadraoEventoleitoNavigation)
                    .WithMany(p => p.LeitoEventoLeitoIdJustPadraoEventoleitoNavigation)
                    .HasForeignKey(d => d.IdJustPadraoEventoleito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Leito_EventoLeito_FK1");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.LeitoEventoLeito)
                    .HasForeignKey(d => d.IdLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Leito_Leito_EventoLeito_FK1");

                entity.HasOne(d => d.IdResponsavelNavigation)
                    .WithMany(p => p.LeitoEventoLeito)
                    .HasForeignKey(d => d.IdResponsavel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Leito_EventoLeito_FK1");

                entity.HasOne(d => d.IdSituacaoLeitoTipoNavigation)
                    .WithMany(p => p.LeitoEventoLeitoIdSituacaoLeitoTipoNavigation)
                    .HasForeignKey(d => d.IdSituacaoLeitoTipo)
                    .HasConstraintName("TipoDiversos_Leito_EventoLeito_FK2");

                entity.HasOne(d => d.IdUsuarioAcessoNavigation)
                    .WithMany(p => p.LeitoEventoLeito)
                    .HasForeignKey(d => d.IdUsuarioAcesso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Leito_EventoLeito_Usuario");
            });

            modelBuilder.Entity<LeitoReserva>(entity =>
            {
                entity.HasKey(e => e.IdReserva)
                    .HasName("LeitoReserva_PK");

                entity.Property(e => e.IdReserva).HasColumnName("ID_RESERVA");

                entity.Property(e => e.DtFimReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_RESERVA");

                entity.Property(e => e.DtInicioReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_RESERVA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdAndar).HasColumnName("ID_ANDAR");

                entity.Property(e => e.IdBloco).HasColumnName("ID_BLOCO");

                entity.Property(e => e.IdColaborador).HasColumnName("ID_COLABORADOR");

                entity.Property(e => e.IdJustPadraoReservaleito).HasColumnName("ID_JUST_PADRAO_RESERVALEITO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdLeitoTipo).HasColumnName("ID_LEITO_TIPO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdUsuarioAcesso).HasColumnName("ID_USUARIO_ACESSO");

                entity.Property(e => e.InCancelada).HasColumnName("IN_CANCELADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAndarNavigation)
                    .WithMany(p => p.LeitoReservaIdAndarNavigation)
                    .HasForeignKey(d => d.IdAndar)
                    .HasConstraintName("UnidadeOrganizacional_LeitoReserva_FK2");

                entity.HasOne(d => d.IdBlocoNavigation)
                    .WithMany(p => p.LeitoReservaIdBlocoNavigation)
                    .HasForeignKey(d => d.IdBloco)
                    .HasConstraintName("UnidadeOrganizacional_LeitoReserva_FK1");

                entity.HasOne(d => d.IdColaboradorNavigation)
                    .WithMany(p => p.LeitoReservaIdColaboradorNavigation)
                    .HasForeignKey(d => d.IdColaborador)
                    .HasConstraintName("Pessoa_LeitoReserva_FK2");

                entity.HasOne(d => d.IdJustPadraoReservaleitoNavigation)
                    .WithMany(p => p.LeitoReservaIdJustPadraoReservaleitoNavigation)
                    .HasForeignKey(d => d.IdJustPadraoReservaleito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_LeitoReserva_FK1");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.LeitoReserva)
                    .HasForeignKey(d => d.IdLeito)
                    .HasConstraintName("FK_LeitoReserva_Leito");

                entity.HasOne(d => d.IdLeitoTipoNavigation)
                    .WithMany(p => p.LeitoReservaIdLeitoTipoNavigation)
                    .HasForeignKey(d => d.IdLeitoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_LeitoReserva_FK2");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.LeitoReservaIdPacienteNavigation)
                    .HasForeignKey(d => d.IdPaciente)
                    .HasConstraintName("Pessoa_LeitoReserva_FK1");

                entity.HasOne(d => d.IdUsuarioAcessoNavigation)
                    .WithMany(p => p.LeitoReserva)
                    .HasForeignKey(d => d.IdUsuarioAcesso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_LeitoReserva_FK1");
            });

            modelBuilder.Entity<LeitoSolicitacao>(entity =>
            {
                entity.HasKey(e => e.IdLeitoSolicitacao);

                entity.Property(e => e.IdLeitoSolicitacao)
                    .HasColumnName("ID_LEITO_SOLICITACAO")
                    .HasComment("identificador único da solicitação de transferência");

                entity.Property(e => e.DtSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data de criação da solicitação");

                entity.Property(e => e.IdAtendimento)
                    .HasColumnName("ID_ATENDIMENTO")
                    .HasComment("identificador do atendimento, mostra para qual atendimento foi solicitado a transferência do paciente.");

                entity.Property(e => e.IdLeitoAtual)
                    .HasColumnName("ID_LEITO_ATUAL")
                    .HasComment("identificador do leito que o paciente estava quando a solicitação foi feita");

                entity.Property(e => e.IdLeitoProposto)
                    .HasColumnName("ID_LEITO_PROPOSTO")
                    .HasComment("identificador do leito que foi indicado na resposta da solicitação");

                entity.Property(e => e.IdStatusSolicitacao)
                    .HasColumnName("ID_STATUS_SOLICITACAO")
                    .HasComment("tipotabela 385. Identificador do status da solicitação");

                entity.Property(e => e.TxResposta)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESPOSTA")
                    .HasComment("texto contendo a resposta do setor de administração de leitos contendo o motivo da indicação do leito");

                entity.Property(e => e.TxSolicitacao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_SOLICITACAO")
                    .HasComment("texto descritivo do estado do paciente preenchido pela enfermagem na solicitação, esta informação é importante para o setor responsável");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.LeitoSolicitacao)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoSolicitacao_Atendimento");

                entity.HasOne(d => d.IdLeitoAtualNavigation)
                    .WithMany(p => p.LeitoSolicitacaoIdLeitoAtualNavigation)
                    .HasForeignKey(d => d.IdLeitoAtual)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoSolicitacao_Leito");

                entity.HasOne(d => d.IdLeitoPropostoNavigation)
                    .WithMany(p => p.LeitoSolicitacaoIdLeitoPropostoNavigation)
                    .HasForeignKey(d => d.IdLeitoProposto)
                    .HasConstraintName("FK_LeitoSolicitacao_Leito1");

                entity.HasOne(d => d.IdStatusSolicitacaoNavigation)
                    .WithMany(p => p.LeitoSolicitacao)
                    .HasForeignKey(d => d.IdStatusSolicitacao)
                    .HasConstraintName("FK_LeitoSolicitacao_TipoDiversos");
            });

            modelBuilder.Entity<LeitoSolicitacaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdLeitoSolicitacaoHistorico);

                entity.Property(e => e.IdLeitoSolicitacaoHistorico).HasColumnName("ID_LEITO_SOLICITACAO_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdLeitoSolicitacao).HasColumnName("ID_LEITO_SOLICITACAO");

                entity.Property(e => e.IdStatusSolicitacao).HasColumnName("ID_STATUS_SOLICITACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdLeitoSolicitacaoNavigation)
                    .WithMany(p => p.LeitoSolicitacaoHistorico)
                    .HasForeignKey(d => d.IdLeitoSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoSolicitacaoHistorico_LeitoSolicitacao");

                entity.HasOne(d => d.IdStatusSolicitacaoNavigation)
                    .WithMany(p => p.LeitoSolicitacaoHistorico)
                    .HasForeignKey(d => d.IdStatusSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoSolicitacaoHistorico_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LeitoSolicitacaoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoSolicitacaoHistorico_Usuario");
            });

            modelBuilder.Entity<LeitoSusCnes>(entity =>
            {
                entity.HasKey(e => e.IdLeitoCnes)
                    .HasName("PK__LeitoSus__AA6CC7A270A6ED07");

                entity.ToTable("LeitoSus_Cnes");

                entity.Property(e => e.IdLeitoCnes).HasColumnName("ID_LEITO_CNES");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdTipoEspecialidadeLeitoCnes).HasColumnName("ID_TIPO_ESPECIALIDADE_LEITO_CNES");

                entity.Property(e => e.IdTipoLeitoCnes).HasColumnName("ID_TIPO_LEITO_CNES");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioExclusao).HasColumnName("ID_USUARIO_EXCLUSAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnLeito).HasColumnName("QN_LEITO");

                entity.HasOne(d => d.IdTipoEspecialidadeLeitoCnesNavigation)
                    .WithMany(p => p.LeitoSusCnesIdTipoEspecialidadeLeitoCnesNavigation)
                    .HasForeignKey(d => d.IdTipoEspecialidadeLeitoCnes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoSus_Cnes_TipoEspecialidadeLeitoCnes");

                entity.HasOne(d => d.IdTipoLeitoCnesNavigation)
                    .WithMany(p => p.LeitoSusCnesIdTipoLeitoCnesNavigation)
                    .HasForeignKey(d => d.IdTipoLeitoCnes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeitoSus_Cnes_TipoLeitoCnes");
            });

            modelBuilder.Entity<LeitoUnidadeFluxo>(entity =>
            {
                entity.HasKey(e => e.IdLeitoUnidadeFluxo)
                    .HasName("LeitoUnidadeFluxo_PK");

                entity.Property(e => e.IdLeitoUnidadeFluxo).HasColumnName("ID_LEITO_UNIDADE_FLUXO");

                entity.Property(e => e.IdStatusFinal).HasColumnName("ID_STATUS_FINAL");

                entity.Property(e => e.IdStatusInicial).HasColumnName("ID_STATUS_INICIAL");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InPodeCancelar)
                    .IsRequired()
                    .HasColumnName("IN_PODE_CANCELAR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrTempoEspera)
                    .HasColumnName("NR_TEMPO_ESPERA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdStatusFinalNavigation)
                    .WithMany(p => p.LeitoUnidadeFluxoIdStatusFinalNavigation)
                    .HasForeignKey(d => d.IdStatusFinal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_LeitoUnidadeFluxo_FK2");

                entity.HasOne(d => d.IdStatusInicialNavigation)
                    .WithMany(p => p.LeitoUnidadeFluxoIdStatusInicialNavigation)
                    .HasForeignKey(d => d.IdStatusInicial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_LeitoUnidadeFluxo_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.LeitoUnidadeFluxo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_LeitoUnidadeFluxo_FK1");
            });

            modelBuilder.Entity<LgpdLog>(entity =>
            {
                entity.HasKey(e => e.IdLgpdLog);

                entity.Property(e => e.IdLgpdLog).HasColumnName("ID_LGPD_LOG");

                entity.Property(e => e.DtLog)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LOG");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdPagina).HasColumnName("ID_PAGINA");

                entity.Property(e => e.IdSessao).HasColumnName("ID_SESSAO");

                entity.Property(e => e.IdTipoChave).HasColumnName("ID_TIPO_CHAVE");

                entity.Property(e => e.NmArquivoXml)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_XML");

                entity.Property(e => e.TxValorLog)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_LOG");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.LgpdLog)
                    .HasForeignKey(d => d.IdAtendimento);

                entity.HasOne(d => d.IdPaginaNavigation)
                    .WithMany(p => p.LgpdLog)
                    .HasForeignKey(d => d.IdPagina)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LgpdLog_Pagina");

                entity.HasOne(d => d.IdSessaoNavigation)
                    .WithMany(p => p.LgpdLog)
                    .HasForeignKey(d => d.IdSessao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LgpdLog_Sessao");

                entity.HasOne(d => d.IdTipoChaveNavigation)
                    .WithMany(p => p.LgpdLog)
                    .HasForeignKey(d => d.IdTipoChave)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LgpdLog_TipoChave");
            });

            modelBuilder.Entity<LinhaArquivoRetorno>(entity =>
            {
                entity.HasKey(e => e.IdLinhaArquivo);

                entity.ToTable("LINHA_ARQUIVO_RETORNO");

                entity.HasIndex(e => e.IdArquivoUnimed, "IX_LINHA_ARQUIVO_RETORNO_ID_ARQUIVO_UNIMED");

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_LINHA_ARQUIVO_RETORNO_K6_K3_2_3_10")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLinhaArquivo).HasColumnName("ID_LINHA_ARQUIVO");

                entity.Property(e => e.DtLeituraLinha)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LEITURA_LINHA");

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdErroArquivo).HasColumnName("ID_ERRO_ARQUIVO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.InSucessoLeitura).HasColumnName("IN_SUCESSO_LEITURA");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.NrTipoRegistro).HasColumnName("NR_TIPO_REGISTRO");

                entity.Property(e => e.TxLinhaArquivo)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_ARQUIVO");

                entity.HasOne(d => d.IdArquivoUnimedNavigation)
                    .WithMany(p => p.LinhaArquivoRetorno)
                    .HasForeignKey(d => d.IdArquivoUnimed)
                    .HasConstraintName("FK_LINHA_ARQUIVO_RETORNO_ARQUIVO_UNIMED");

                entity.HasOne(d => d.IdErroArquivoNavigation)
                    .WithMany(p => p.LinhaArquivoRetorno)
                    .HasForeignKey(d => d.IdErroArquivo)
                    .HasConstraintName("FK_LINHA_ARQUIVO_RETORNO_TipoDiversos");
            });

            modelBuilder.Entity<LinhaRetornoUnimed>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoUnimed, e.NrOrdemLinha })
                    .HasName("LinhaRetornoUnimed_PK");

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.NrTipoLinha).HasColumnName("NR_TIPO_LINHA");

                entity.HasOne(d => d.IdArquivoUnimedNavigation)
                    .WithMany(p => p.LinhaRetornoUnimed)
                    .HasForeignKey(d => d.IdArquivoUnimed)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinhaRetornoUnimed_ARQUIVO_UNIMED_FK");
            });

            modelBuilder.Entity<LinhaRetornoUnimedConta>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoUnimed, e.NrOrdemLinha })
                    .HasName("LinhaRetornoUnimed_Conta_PK");

                entity.ToTable("LinhaRetornoUnimed_Conta");

                entity.HasIndex(e => e.IdConta, "IX_LinhaRUnimed_Conta_k3")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.NmCliente)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLIENTE");

                entity.Property(e => e.NmPlano)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrCodigoCliente)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_CLIENTE");

                entity.Property(e => e.NrProntuario)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRONTUARIO");

                entity.Property(e => e.TxAcomodacao)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_ACOMODACAO")
                    .IsFixedLength(true);

                entity.Property(e => e.TxCid)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_CID");

                entity.Property(e => e.TxIdentificador1)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICADOR1");

                entity.Property(e => e.TxIdentificador2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_IDENTIFICADOR2");

                entity.Property(e => e.TxMesanoCompetencia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_MESANO_COMPETENCIA");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.LinhaRetornoUnimedConta)
                    .HasForeignKey(d => d.IdConta)
                    .HasConstraintName("LinRetUnmd_Conta_Conta_FK");

                entity.HasOne(d => d.LinhaRetornoUnimed)
                    .WithOne(p => p.LinhaRetornoUnimedConta)
                    .HasForeignKey<LinhaRetornoUnimedConta>(d => new { d.IdArquivoUnimed, d.NrOrdemLinha })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_Conta_LinhaRetornoUnimed_FK");
            });

            modelBuilder.Entity<LinhaRetornoUnimedErro>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoUnimed, e.NrOrdemLinha })
                    .HasName("LinhaRetornoUnimed_Erro_PK");

                entity.ToTable("LinhaRetornoUnimed_Erro");

                entity.HasIndex(e => e.IdConta, "IX_LinhaRUnimed_Erro_k3")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdJustificativa)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.InReapresentavel)
                    .IsRequired()
                    .HasColumnName("IN_REAPRESENTAVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxMsgErro)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ERRO");

                entity.Property(e => e.VlConsultas)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_CONSULTAS");

                entity.Property(e => e.VlDiarias)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_DIARIAS");

                entity.Property(e => e.VlExames)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_EXAMES");

                entity.Property(e => e.VlGabaritos)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_GABARITOS");

                entity.Property(e => e.VlHonorarios)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_HONORARIOS");

                entity.Property(e => e.VlMateriais)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_MATERIAIS");

                entity.Property(e => e.VlMedicamentos)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_MEDICAMENTOS");

                entity.Property(e => e.VlTaxas)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_TAXAS");

                entity.HasOne(d => d.LinhaRetornoUnimed)
                    .WithOne(p => p.LinhaRetornoUnimedErro)
                    .HasForeignKey<LinhaRetornoUnimedErro>(d => new { d.IdArquivoUnimed, d.NrOrdemLinha })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_Erro_LinhaRetornoUnimed_FK");
            });

            modelBuilder.Entity<LinhaRetornoUnimedItem>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoUnimed, e.NrOrdemLinha })
                    .HasName("LinhaRetornoUnimed_Item_PK");

                entity.ToTable("LinhaRetornoUnimed_Item");

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.CdPrestadorCobr }, "IX_LinhaRUnimed_Item_k3_k4_k6")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.CdPrestadorCobr, "IX_LinhaRUnimed_Item_k6")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdTipoItem, e.CdPrestadorCobr }, "IX_LinhaRUnimed_Item_k8_k6")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.CdAdequacao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_ADEQUACAO");

                entity.Property(e => e.CdItem)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM");

                entity.Property(e => e.CdPrestadorCobr)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_COBR");

                entity.Property(e => e.CdPrestadorExec)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_EXEC");

                entity.Property(e => e.DtRealizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZACAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.InComplPagto).HasColumnName("IN_COMPL_PAGTO");

                entity.Property(e => e.PrPagamento).HasColumnName("PR_PAGAMENTO");

                entity.Property(e => e.QdCobrada)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_COBRADA");

                entity.Property(e => e.QdFilme)
                    .HasColumnType("decimal(7, 5)")
                    .HasColumnName("QD_FILME");

                entity.Property(e => e.QdPaga)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_PAGA");

                entity.Property(e => e.QdUt)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_UT");

                entity.Property(e => e.TxMesanoCompetencia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_MESANO_COMPETENCIA");

                entity.Property(e => e.TxMsgAdequacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ADEQUACAO");

                entity.Property(e => e.TxUsoLivre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_USO_LIVRE");

                entity.Property(e => e.VlCobrado)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_COBRADO");

                entity.Property(e => e.VlFilmePago)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_FILME_PAGO");

                entity.Property(e => e.VlPago)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_PAGO");

                entity.Property(e => e.VlUt)
                    .HasColumnType("decimal(5, 3)")
                    .HasColumnName("VL_UT");

                entity.HasOne(d => d.LinhaRetornoUnimed)
                    .WithOne(p => p.LinhaRetornoUnimedItem)
                    .HasForeignKey<LinhaRetornoUnimedItem>(d => new { d.IdArquivoUnimed, d.NrOrdemLinha })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_Item_LinhaRetornoUnimed_FK");
            });

            modelBuilder.Entity<LinhaRetornoUnimedItemAdequacao>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoUnimed, e.NrOrdemLinha })
                    .HasName("LinhaRetornoUnimed_ItemAdequacao_PK");

                entity.ToTable("LinhaRetornoUnimed_ItemAdequacao");

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_LinhaRUnimed_ItemAdequacao_k4_k5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.CdItem, "IX_LinhaRUnimed_ItemAdequacao_k7")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.CdItem)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.NrOrdemLinhaPai).HasColumnName("NR_ORDEM_LINHA_PAI");

                entity.Property(e => e.PrPagamento).HasColumnName("PR_PAGAMENTO");

                entity.Property(e => e.QdPaga)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_PAGA");

                entity.Property(e => e.QdUt)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_UT");

                entity.Property(e => e.TxMesanoCompetencia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_MESANO_COMPETENCIA");

                entity.Property(e => e.TxMesanoPgAnterior)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_MESANO_PG_ANTERIOR");

                entity.Property(e => e.VlPago)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_PAGO");

                entity.Property(e => e.VlPagoAnterior)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_PAGO_ANTERIOR");

                entity.Property(e => e.VlSeriaPago)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_SERIA_PAGO");

                entity.Property(e => e.VlUt)
                    .HasColumnType("decimal(5, 3)")
                    .HasColumnName("VL_UT");

                entity.HasOne(d => d.LinhaRetornoUnimed)
                    .WithOne(p => p.LinhaRetornoUnimedItemAdequacao)
                    .HasForeignKey<LinhaRetornoUnimedItemAdequacao>(d => new { d.IdArquivoUnimed, d.NrOrdemLinha })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_ItemAdequacao_LinhaRetornoUnimed_FK");

                entity.HasOne(d => d.LinhaRetornoUnimedItem)
                    .WithMany(p => p.LinhaRetornoUnimedItemAdequacao)
                    .HasForeignKey(d => new { d.IdArquivoUnimed, d.NrOrdemLinhaPai })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_ItemAdequacao_LinRetUnmd_Item_FK");
            });

            modelBuilder.Entity<LinhaRetornoUnimedItemCreditoEstorno>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoUnimed, e.NrOrdemLinha })
                    .HasName("LinhaRetornoUnimed_ItemCreditoEstorno_PK");

                entity.ToTable("LinhaRetornoUnimed_ItemCreditoEstorno");

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.CdPrestadorCobr }, "IX_LinhaRUnimed_ItemCredEstorno_k4_k5_k7")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.CdPrestadorCobr, e.InCredito }, "IX_LinhaRUnimed_ItemCredEstorno_k7_k14")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.CdItem)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM");

                entity.Property(e => e.CdPrestadorCobr)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_COBR");

                entity.Property(e => e.CdPrestadorExec)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_EXEC");

                entity.Property(e => e.DtRealizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZACAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdMotivo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ID_MOTIVO");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.InCredito)
                    .IsRequired()
                    .HasColumnName("IN_CREDITO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrOrdemLinhaPai).HasColumnName("NR_ORDEM_LINHA_PAI");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.TxMotivo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO");

                entity.Property(e => e.VlCreditoestorno)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_CREDITOESTORNO");

                entity.HasOne(d => d.LinhaRetornoUnimed)
                    .WithOne(p => p.LinhaRetornoUnimedItemCreditoEstorno)
                    .HasForeignKey<LinhaRetornoUnimedItemCreditoEstorno>(d => new { d.IdArquivoUnimed, d.NrOrdemLinha })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_ItemCreditoEstorno_LinhaRetornoUnimed_FK");

                entity.HasOne(d => d.LinhaRetornoUnimedItem)
                    .WithMany(p => p.LinhaRetornoUnimedItemCreditoEstorno)
                    .HasForeignKey(d => new { d.IdArquivoUnimed, d.NrOrdemLinhaPai })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_ItemCreditoEstorno_LinRetUnmd_Item_FK");
            });

            modelBuilder.Entity<LinhaRetornoUnimedItemErro>(entity =>
            {
                entity.HasKey(e => new { e.IdArquivoUnimed, e.NrOrdemLinha })
                    .HasName("LinhaRetornoUnimed_ItemErro_PK");

                entity.ToTable("LinhaRetornoUnimed_ItemErro");

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_LinhaRUnimed_ItemErro_k4_k5")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativa)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.InReapresentavel)
                    .IsRequired()
                    .HasColumnName("IN_REAPRESENTAVEL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrOrdemLinhaPai).HasColumnName("NR_ORDEM_LINHA_PAI");

                entity.Property(e => e.TxMsgErro)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ERRO");

                entity.HasOne(d => d.LinhaRetornoUnimed)
                    .WithOne(p => p.LinhaRetornoUnimedItemErro)
                    .HasForeignKey<LinhaRetornoUnimedItemErro>(d => new { d.IdArquivoUnimed, d.NrOrdemLinha })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_ItemErro_LinhaRetornoUnimed_FK");

                entity.HasOne(d => d.LinhaRetornoUnimedItem)
                    .WithMany(p => p.LinhaRetornoUnimedItemErro)
                    .HasForeignKey(d => new { d.IdArquivoUnimed, d.NrOrdemLinhaPai })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LinRetUnmd_ItemErro_LinRetUnmd_Item_FK");
            });

            modelBuilder.Entity<ListaCid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaCid");

                entity.Property(e => e.IdCid).HasColumnName("ID_CID");

                entity.Property(e => e.TxDescricao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<ListaMateriais>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaMateriais");

                entity.Property(e => e.Apresentacao)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdProduto).HasColumnName("id_produto");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InFabricante).HasColumnName("IN_FABRICANTE");

                entity.Property(e => e.InPadronizado).HasColumnName("IN_PADRONIZADO");

                entity.Property(e => e.NmClassificacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nm_produto");

                entity.Property(e => e.Padronizado)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.QnConsumoMinimo).HasColumnName("QN_CONSUMO_MINIMO");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.TxLogin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN");

                entity.Property(e => e.UnidadeDeCompra)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Compra");

                entity.Property(e => e.UnidadeDeConsumo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Consumo");
            });

            modelBuilder.Entity<ListaMateriaisCadastrados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaMateriaisCadastrados");

                entity.Property(e => e.Apresentacao)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdProduto).HasColumnName("id_produto");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InPadronizado).HasColumnName("IN_PADRONIZADO");

                entity.Property(e => e.NmClassificacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nm_produto");

                entity.Property(e => e.Padronizado)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.QnConsumoMinimo).HasColumnName("QN_CONSUMO_MINIMO");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.UnidadeDeCompra)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Compra");

                entity.Property(e => e.UnidadeDeConsumo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Consumo");
            });

            modelBuilder.Entity<ListaMedicamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaMedicamento");

                entity.Property(e => e.Aresentação)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BaseKit)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Base Kit");

                entity.Property(e => e.ConsumoMínimo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Consumo Mínimo");

                entity.Property(e => e.Descrição)
                    .HasMaxLength(516)
                    .IsUnicode(false);

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.FormaFarmaceutica)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Forma Farmaceutica");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdProduto).HasColumnName("id_produto");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InFabricante).HasColumnName("IN_FABRICANTE");

                entity.Property(e => e.InPadronizado).HasColumnName("IN_PADRONIZADO");

                entity.Property(e => e.NmClassificacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmListaMedControlado)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_LISTA_MED_CONTROLADO");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nm_produto");

                entity.Property(e => e.Padronizado)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.TxLogin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN");

                entity.Property(e => e.UnidadeDeCompra)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Compra");

                entity.Property(e => e.UnidadeDeConsumo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Consumo");

                entity.Property(e => e.ValorBase)
                    .HasMaxLength(516)
                    .IsUnicode(false)
                    .HasColumnName("Valor Base");

                entity.Property(e => e.ViaAdministracao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ADMINISTRACAO");
            });

            modelBuilder.Entity<ListaMedicamentoCadastrado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaMedicamentoCadastrado");

                entity.Property(e => e.Aresentação)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BaseKit)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Base Kit");

                entity.Property(e => e.ConsumoMínimo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Consumo Mínimo");

                entity.Property(e => e.Descrição)
                    .HasMaxLength(516)
                    .IsUnicode(false);

                entity.Property(e => e.FormaFarmaceutica)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Forma Farmaceutica");

                entity.Property(e => e.IdProduto).HasColumnName("id_produto");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.InPadronizado).HasColumnName("IN_PADRONIZADO");

                entity.Property(e => e.NmClassificacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmCompleto)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMPLETO");

                entity.Property(e => e.NmListaMedControlado)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_LISTA_MED_CONTROLADO");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nm_produto");

                entity.Property(e => e.Padronizado)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.UnidadeDeCompra)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Compra");

                entity.Property(e => e.UnidadeDeConsumo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Unidade de Consumo");

                entity.Property(e => e.ValorBase)
                    .HasMaxLength(516)
                    .IsUnicode(false)
                    .HasColumnName("Valor Base");
            });

            modelBuilder.Entity<ListaMedicamentoControlado>(entity =>
            {
                entity.HasKey(e => e.IdListaMedControlado)
                    .HasName("ListaMedicamentoControlado_PK");

                entity.Property(e => e.IdListaMedControlado)
                    .HasColumnName("ID_LISTA_MED_CONTROLADO")
                    .HasComment("PK da Tabela. Identificador Único.");

                entity.Property(e => e.IdClassificacaoLista)
                    .HasColumnName("ID_CLASSIFICACAO_LISTA")
                    .HasComment("Classificação da Lista. FK com TipoDiversos.\r\n");

                entity.Property(e => e.IdReceituarioTipo)
                    .HasColumnName("ID_RECEITUARIO_TIPO")
                    .HasComment("Cor determinada para cada tipo de Lista. FK com TipoDiversos.");

                entity.Property(e => e.NmListaMedControlado)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_LISTA_MED_CONTROLADO")
                    .HasComment("Nome da Lista.\r\n");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdClassificacaoListaNavigation)
                    .WithMany(p => p.ListaMedicamentoControladoIdClassificacaoListaNavigation)
                    .HasForeignKey(d => d.IdClassificacaoLista)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ListaMedicamentoControlado_TipoDiversos");

                entity.HasOne(d => d.IdReceituarioTipoNavigation)
                    .WithMany(p => p.ListaMedicamentoControladoIdReceituarioTipoNavigation)
                    .HasForeignKey(d => d.IdReceituarioTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ListaMedicamentoControlado_FK1");
            });

            modelBuilder.Entity<ListaMedicamentoResumida>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaMedicamentoResumida");

                entity.Property(e => e.IdMdConsumoMinimo).HasColumnName("id_md_consumo_minimo");

                entity.Property(e => e.IdProduto).HasColumnName("id_produto");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.QnConsumoMinimo).HasColumnName("qn_consumo_minimo");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(2005)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<ListaMedicoResumida>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaMedicoResumida");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.NmMedico)
                    .IsRequired()
                    .HasMaxLength(361)
                    .IsUnicode(false)
                    .HasColumnName("nm_medico");
            });

            modelBuilder.Entity<ListaPadraoRequisicao>(entity =>
            {
                entity.HasKey(e => e.IdListaPadraoRequisicao);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_ListaPadraoRequisicao_ID_UNIDADE_ORGANIZACIONAL")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_ListaPadraoRequisicao_K2_3_4")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdListaPadraoRequisicao).HasColumnName("ID_LISTA_PADRAO_REQUISICAO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmListaPadraoRequisicao)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_LISTA_PADRAO_REQUISICAO");

                entity.Property(e => e.QnPadronizado).HasColumnName("QN_PADRONIZADO");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ListaPadraoRequisicao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ListaPadraoRequisicao_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ListaPadraoRequisicao)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ListaPadraoRequisicao_Usuario");
            });

            modelBuilder.Entity<ListaTecnicoEnfermagemResumida>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ListaTecnicoEnfermagemResumida");

                entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(361)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");
            });

            modelBuilder.Entity<LocalidadeAtualizacao>(entity =>
            {
                entity.HasKey(e => e.LocNuSequencial)
                    .HasName("LOG_LOCALIDADE_ATUALIZACAO_PK")
                    .IsClustered(false);

                entity.ToTable("LOCALIDADE_ATUALIZACAO");

                entity.Property(e => e.LocNuSequencial)
                    .ValueGeneratedNever()
                    .HasColumnName("LOC_NU_SEQUENCIAL");

                entity.Property(e => e.Cep)
                    .HasMaxLength(16)
                    .HasColumnName("CEP");

                entity.Property(e => e.LocInSituacao).HasColumnName("LOC_IN_SITUACAO");

                entity.Property(e => e.LocInTipoLocalidade)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("LOC_IN_TIPO_LOCALIDADE");

                entity.Property(e => e.LocKeyDne)
                    .HasMaxLength(16)
                    .HasColumnName("LOC_KEY_DNE");

                entity.Property(e => e.LocNo)
                    .HasMaxLength(60)
                    .HasColumnName("LOC_NO");

                entity.Property(e => e.LocNosub)
                    .HasMaxLength(50)
                    .HasColumnName("LOC_NOSUB");

                entity.Property(e => e.LocNuSequencialSub).HasColumnName("LOC_NU_SEQUENCIAL_SUB");

                entity.Property(e => e.Temp)
                    .HasMaxLength(8)
                    .HasColumnName("TEMP");

                entity.Property(e => e.UfeSg)
                    .HasMaxLength(2)
                    .HasColumnName("UFE_SG");
            });

            modelBuilder.Entity<LogBairro>(entity =>
            {
                entity.HasKey(e => e.BaiNu)
                    .HasName("LOG_BAIRRO_PK");

                entity.ToTable("LOG_BAIRRO");

                entity.HasIndex(e => e.BaiNo, "IX_LOG_BAIRRO_BAI_NO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.LocNu, e.InAtivo }, "IX_LOG_BAIRRO_LOC_NU_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.BaiNu).HasColumnName("BAI_NU");

                entity.Property(e => e.BaiNo)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("BAI_NO");

                entity.Property(e => e.BaiNoAbrev)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("BAI_NO_ABREV");

                entity.Property(e => e.BaiNuEct).HasColumnName("BAI_NU_ECT");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOrigemCadastroTipoNavigation)
                    .WithMany(p => p.LogBairro)
                    .HasForeignKey(d => d.IdOrigemCadastroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOG_BAIRRO_TipoDiversos");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.LogBairro)
                    .HasForeignKey(d => d.LocNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOCALIDADE_LOG_BAIRRO_FK1");
            });

            modelBuilder.Entity<LogCpc>(entity =>
            {
                entity.HasKey(e => e.CpcNu)
                    .HasName("LOG_CPC_PK");

                entity.ToTable("LOG_CPC");

                entity.Property(e => e.CpcNu).HasColumnName("CPC_NU");

                entity.Property(e => e.Cep)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP")
                    .IsFixedLength(true);

                entity.Property(e => e.CpcEndereco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CPC_ENDERECO");

                entity.Property(e => e.CpcNo)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("CPC_NO");

                entity.Property(e => e.CpcNuEct).HasColumnName("CPC_NU_ECT");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.LogCpc)
                    .HasForeignKey(d => d.LocNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOCALIDADE_LOG_CPC_FK1");
            });

            modelBuilder.Entity<LogEnvioSms>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LogEnvioSMS");

                entity.Property(e => e.DesMensagem)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DES_MENSAGEM");

                entity.Property(e => e.DtLog)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LOG")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.IdLogEnvioSms)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_LOG_ENVIO_SMS");

                entity.Property(e => e.InSucesso).HasColumnName("IN_SUCESSO");
            });

            modelBuilder.Entity<LogErroLoteConta>(entity =>
            {
                entity.HasKey(e => e.IdLogErroLoteConta)
                    .HasName("PK__LogErroL__0ED9F8D700940764");

                entity.Property(e => e.IdLogErroLoteConta).HasColumnName("ID_LOG_ERRO_LOTE_CONTA");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.InErroTratado)
                    .HasColumnName("IN_ERRO_TRATADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxDescricaoErro)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_ERRO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<LogFaixaBairro>(entity =>
            {
                entity.HasKey(e => new { e.FcbCepIni, e.BaiNu })
                    .HasName("LOG_FAIXA_BAIRRO_PK");

                entity.ToTable("LOG_FAIXA_BAIRRO");

                entity.HasIndex(e => e.BaiNu, "IX_LOG_FAIXA_BAIRRO_BAI_NU");

                entity.HasIndex(e => e.BaiNuEct, "IX_LOG_FAIXA_BAIRRO_BAI_NU_ECT");

                entity.Property(e => e.FcbCepIni)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FCB_CEP_INI")
                    .IsFixedLength(true);

                entity.Property(e => e.BaiNu).HasColumnName("BAI_NU");

                entity.Property(e => e.BaiNuEct).HasColumnName("BAI_NU_ECT");

                entity.Property(e => e.FcbCepFim)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("FCB_CEP_FIM")
                    .IsFixedLength(true);

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.BaiNuNavigation)
                    .WithMany(p => p.LogFaixaBairro)
                    .HasForeignKey(d => d.BaiNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_BAIRRO_LOG_FAIXA_BAIRRO_FK1");
            });

            modelBuilder.Entity<LogFaixaCpc>(entity =>
            {
                entity.HasKey(e => new { e.CpcInicial, e.CpcNu })
                    .HasName("LOG_FAIXA_CPC_PK");

                entity.ToTable("LOG_FAIXA_CPC");

                entity.Property(e => e.CpcInicial)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CPC_INICIAL");

                entity.Property(e => e.CpcNu).HasColumnName("CPC_NU");

                entity.Property(e => e.CpcFinal)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CPC_FINAL");

                entity.Property(e => e.CpcNuEct).HasColumnName("CPC_NU_ECT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.CpcNuNavigation)
                    .WithMany(p => p.LogFaixaCpc)
                    .HasForeignKey(d => d.CpcNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_CPC_LOG_FAIXA_CPC_FK1");
            });

            modelBuilder.Entity<LogFaixaLocalidade>(entity =>
            {
                entity.HasKey(e => new { e.LocCepIni, e.LocNu })
                    .HasName("LOG_FAIXA_LOCALIDADE_PK");

                entity.ToTable("LOG_FAIXA_LOCALIDADE");

                entity.Property(e => e.LocCepIni)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CEP_INI")
                    .IsFixedLength(true);

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LocCepFim)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("LOC_CEP_FIM")
                    .IsFixedLength(true);

                entity.Property(e => e.LocNuEct).HasColumnName("LOC_NU_ECT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.LogFaixaLocalidade)
                    .HasForeignKey(d => d.LocNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOCALIDADE_LOG_FAIXA_LOCALIDADE_FK1");
            });

            modelBuilder.Entity<LogFaixaUf>(entity =>
            {
                entity.HasKey(e => new { e.IdUf, e.UfeCepIni })
                    .HasName("LOG_FAIXA_UF_PK");

                entity.ToTable("LOG_FAIXA_UF");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.UfeCepIni)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("UFE_CEP_INI")
                    .IsFixedLength(true);

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.UfeCepFim)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("UFE_CEP_FIM")
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdUfNavigation)
                    .WithMany(p => p.LogFaixaUf)
                    .HasForeignKey(d => d.IdUf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UF_LOG_FAIXA_UF_FK1");
            });

            modelBuilder.Entity<LogGrandeUsuario>(entity =>
            {
                entity.HasKey(e => e.GruNu)
                    .HasName("LOG_GRANDE_USUARIO_PK");

                entity.ToTable("LOG_GRANDE_USUARIO");

                entity.HasIndex(e => e.LogNu, "IX_LOG_GRANDE_USUARIO_LOG_NU")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.GruNu).HasColumnName("GRU_NU");

                entity.Property(e => e.Cep)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP")
                    .IsFixedLength(true);

                entity.Property(e => e.GruEndereco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GRU_ENDERECO");

                entity.Property(e => e.GruNo)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("GRU_NO");

                entity.Property(e => e.GruNuEct)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GRU_NU_ECT")
                    .IsFixedLength(true);

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LogNu).HasColumnName("LOG_NU");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.LogGrandeUsuario)
                    .HasForeignKey(d => d.LocNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOCALIDADE_LOG_GRANDE_USUARIO_FK1");

                entity.HasOne(d => d.LogNuNavigation)
                    .WithMany(p => p.LogGrandeUsuario)
                    .HasForeignKey(d => d.LogNu)
                    .HasConstraintName("LOG_LOGRADOURO_LOG_GRANDE_USUARIO_FK1");
            });

            modelBuilder.Entity<LogImportaArquivoUnimed>(entity =>
            {
                entity.HasKey(e => e.IdLogImportaArquivoUnimed)
                    .HasName("PK_LOG_IMPORTA_ARQUIVO_UNIMED");

                entity.Property(e => e.IdLogImportaArquivoUnimed).HasColumnName("ID_LOG_IMPORTA_ARQUIVO_UNIMED");

                entity.Property(e => e.DtGravacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GRAVACAO");

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdLinhaArquivo).HasColumnName("ID_LINHA_ARQUIVO");

                entity.Property(e => e.TxLinhaLog)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_LOG");
            });

            modelBuilder.Entity<LogImpressao>(entity =>
            {
                entity.HasKey(e => e.IdLogImpressao);

                entity.Property(e => e.IdLogImpressao).HasColumnName("ID_LOG_IMPRESSAO");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdTipoEtiqueta).HasColumnName("ID_TIPO_ETIQUETA");

                entity.Property(e => e.IdUsuarioImpressao).HasColumnName("ID_USUARIO_IMPRESSAO");

                entity.Property(e => e.TxComando)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_COMANDO");

                entity.Property(e => e.TxXml)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_XML");

                entity.HasOne(d => d.IdTipoEtiquetaNavigation)
                    .WithMany(p => p.LogImpressao)
                    .HasForeignKey(d => d.IdTipoEtiqueta)
                    .HasConstraintName("FK_LogImpressao_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioImpressaoNavigation)
                    .WithMany(p => p.LogImpressao)
                    .HasForeignKey(d => d.IdUsuarioImpressao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogImpressao_Usuario");
            });

            modelBuilder.Entity<LogLocalidade>(entity =>
            {
                entity.HasKey(e => e.LocNu)
                    .HasName("LOG_LOCALIDADE_PK");

                entity.ToTable("LOG_LOCALIDADE");

                entity.HasIndex(e => e.Cep, "IX_LOG_LOCALIDADE_CEP")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUf, e.InAtivo }, "IX_LOG_LOCALIDADE_ID_UF_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.LocNo, "IX_LOG_LOCALIDADE_LOC_NO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.CdIbge)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_IBGE");

                entity.Property(e => e.Cep)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.IdMicrorregiao).HasColumnName("ID_MICRORREGIAO");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.IdRegional).HasColumnName("ID_REGIONAL");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocInSit)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LOC_IN_SIT")
                    .IsFixedLength(true);

                entity.Property(e => e.LocInTipoLoc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LOC_IN_TIPO_LOC")
                    .IsFixedLength(true);

                entity.Property(e => e.LocNo)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("LOC_NO");

                entity.Property(e => e.LocNuEct).HasColumnName("LOC_NU_ECT");

                entity.Property(e => e.LocNuSub).HasColumnName("LOC_NU_SUB");

                entity.Property(e => e.NrPopulacao).HasColumnName("NR_POPULACAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdMicrorregiaoNavigation)
                    .WithMany(p => p.LogLocalidadeIdMicrorregiaoNavigation)
                    .HasForeignKey(d => d.IdMicrorregiao)
                    .HasConstraintName("LOG_LOCALIDADE_TipoDiversos_FK1");

                entity.HasOne(d => d.IdRegionalNavigation)
                    .WithMany(p => p.LogLocalidadeIdRegionalNavigation)
                    .HasForeignKey(d => d.IdRegional)
                    .HasConstraintName("LOG_LOCALIDADE_TipoDiversos_FK2");

                entity.HasOne(d => d.IdUfNavigation)
                    .WithMany(p => p.LogLocalidade)
                    .HasForeignKey(d => d.IdUf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UF_LOG_LOCALIDADE_FK1");
            });

            modelBuilder.Entity<LogLogradouro>(entity =>
            {
                entity.HasKey(e => e.LogNu)
                    .HasName("LOG_LOGRADOURO_PK");

                entity.ToTable("LOG_LOGRADOURO");

                entity.HasIndex(e => e.LocNu, "FK_LOG_LOGRADOURO_LOC_NU")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.BaiNuFim, "IX_LOG_LOGRADOURO_BAI_NU_FIM")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.BaiNuIni, "IX_LOG_LOGRADOURO_BAI_NU_INI")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.Cep, e.InAtivo }, "IX_LOG_LOGRADOURO_CEP_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.InAtivo, "IX_LOG_LOGRADOURO_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.LocNu, e.InAtivo }, "IX_LOG_LOGRADOURO_LOC_NU_IN_ATIVO");

                entity.HasIndex(e => new { e.LocNu, e.LogNo, e.InAtivo }, "IX_LOG_LOGRADOURO_LOC_NU_LOG_NO_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.LogNo, "IX_LOG_LOGRADOURO_LOG_NO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.Cep, "LOG_LOGRADOURO_CEP")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LogNu).HasColumnName("LOG_NU");

                entity.Property(e => e.BaiNuFim).HasColumnName("BAI_NU_FIM");

                entity.Property(e => e.BaiNuIni).HasColumnName("BAI_NU_INI");

                entity.Property(e => e.Cep)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.IdLogradouroTipo).HasColumnName("ID_LOGRADOURO_TIPO");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LogComplemento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LOG_COMPLEMENTO");

                entity.Property(e => e.LogNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LOG_NO");

                entity.Property(e => e.LogNuEct).HasColumnName("LOG_NU_ECT");

                entity.Property(e => e.LogStaTlo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LOG_STA_TLO")
                    .IsFixedLength(true);

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdLogradouroTipoNavigation)
                    .WithMany(p => p.LogLogradouroIdLogradouroTipoNavigation)
                    .HasForeignKey(d => d.IdLogradouroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_LOG_LOGRADOURO_FK2");

                entity.HasOne(d => d.IdOrigemCadastroTipoNavigation)
                    .WithMany(p => p.LogLogradouroIdOrigemCadastroTipoNavigation)
                    .HasForeignKey(d => d.IdOrigemCadastroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOG_LOGRADOURO_TipoDiversos1");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.LogLogradouro)
                    .HasForeignKey(d => d.LocNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOCALIDADE_LOG_LOGRADOURO_FK1");
            });

            modelBuilder.Entity<LogNumSec>(entity =>
            {
                entity.HasKey(e => e.LogNu)
                    .HasName("LOG_NUM_SEC_PK");

                entity.ToTable("LOG_NUM_SEC");

                entity.Property(e => e.LogNu)
                    .ValueGeneratedNever()
                    .HasColumnName("LOG_NU");

                entity.Property(e => e.LogNuEct).HasColumnName("LOG_NU_ECT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SecInLado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEC_IN_LADO")
                    .IsFixedLength(true);

                entity.Property(e => e.SecNuFim)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEC_NU_FIM");

                entity.Property(e => e.SecNuIni)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEC_NU_INI");

                entity.HasOne(d => d.LogNuNavigation)
                    .WithOne(p => p.LogNumSec)
                    .HasForeignKey<LogNumSec>(d => d.LogNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOGRADOURO_LOG_NUM_SEC_FK1");
            });

            modelBuilder.Entity<LogSmsenviadoPaciente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LogSMSEnviadoPaciente");

                entity.HasIndex(e => new { e.DtLogSmsEnviado, e.DesDestinatario }, "IX_LogSMSEnviadoPaciente_DT_LOG_SMS_ENVIADO_DES_DESTINATARIO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdAgenda, "IX_LogSMSEnviadoPaciente_ID_AGENDA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.DesDestinatario)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DES_DESTINATARIO");

                entity.Property(e => e.DesRetornoWs)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DES_RETORNO_WS");

                entity.Property(e => e.DesSms)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("DES_SMS");

                entity.Property(e => e.DesTelefone)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DES_TELEFONE");

                entity.Property(e => e.DtLogSmsEnviado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LOG_SMS_ENVIADO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdLogSmsEnviado)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_LOG_SMS_ENVIADO");
            });

            modelBuilder.Entity<LogVarBai>(entity =>
            {
                entity.HasKey(e => new { e.VdbNu, e.BaiNu })
                    .HasName("LOG_VAR_BAI_PK");

                entity.ToTable("LOG_VAR_BAI");

                entity.HasIndex(e => e.BaiNu, "IX_LOG_VAR_BAI_BAI_NU");

                entity.Property(e => e.VdbNu).HasColumnName("VDB_NU");

                entity.Property(e => e.BaiNu).HasColumnName("BAI_NU");

                entity.Property(e => e.BaiNuEct).HasColumnName("BAI_NU_ECT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VdbTx)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("VDB_TX");

                entity.HasOne(d => d.BaiNuNavigation)
                    .WithMany(p => p.LogVarBai)
                    .HasForeignKey(d => d.BaiNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_BAIRRO_LOG_VAR_BAI_FK1");
            });

            modelBuilder.Entity<LogVarLoc>(entity =>
            {
                entity.HasKey(e => new { e.ValNu, e.LocNu })
                    .HasName("LOG_VAR_LOC_PK");

                entity.ToTable("LOG_VAR_LOC");

                entity.Property(e => e.ValNu).HasColumnName("VAL_NU");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LocNuEct).HasColumnName("LOC_NU_ECT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.ValTx)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("VAL_TX");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.LogVarLoc)
                    .HasForeignKey(d => d.LocNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOCALIDADE_LOG_VAR_LOC_FK1");
            });

            modelBuilder.Entity<LogVarLog>(entity =>
            {
                entity.HasKey(e => new { e.LogNu, e.VloNu })
                    .HasName("LOG_VAR_LOG_PK");

                entity.ToTable("LOG_VAR_LOG");

                entity.Property(e => e.LogNu).HasColumnName("LOG_NU");

                entity.Property(e => e.VloNu).HasColumnName("VLO_NU");

                entity.Property(e => e.IdLogradouroTipo).HasColumnName("ID_LOGRADOURO_TIPO");

                entity.Property(e => e.LogNuEct).HasColumnName("LOG_NU_ECT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VloTx)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("VLO_TX");

                entity.HasOne(d => d.IdLogradouroTipoNavigation)
                    .WithMany(p => p.LogVarLog)
                    .HasForeignKey(d => d.IdLogradouroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_LOG_VAR_LOG_FK1");

                entity.HasOne(d => d.LogNuNavigation)
                    .WithMany(p => p.LogVarLog)
                    .HasForeignKey(d => d.LogNu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LOG_LOGRADOURO_LOG_VAR_LOG_FK1");
            });

            modelBuilder.Entity<LogWebServices>(entity =>
            {
                entity.HasKey(e => e.IdLogWs);

                entity.Property(e => e.IdLogWs).HasColumnName("ID_LOG_WS");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.NnWebService)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NN_WEB_SERVICE");

                entity.Property(e => e.TxEntrada)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENTRADA");

                entity.Property(e => e.TxSaida)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_SAIDA");
            });

            modelBuilder.Entity<LogradourosTipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Logradouros_Tipo");

                entity.Property(e => e.Abr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ABR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Tlg)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TLG");
            });

            modelBuilder.Entity<LoteCobranca>(entity =>
            {
                entity.HasKey(e => e.IdLote)
                    .HasName("LoteCobranca_PK");

                entity.Property(e => e.IdLote)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_LOTE");

                entity.Property(e => e.DtCobrancaPreventiva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COBRANCA_PREVENTIVA");

                entity.Property(e => e.DtCredito)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CREDITO");

                entity.Property(e => e.DtLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO");

                entity.Property(e => e.DtPrometida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROMETIDA");

                entity.Property(e => e.IdSituacaoLote).HasColumnName("ID_SITUACAO_LOTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioAnaliseCritica).HasColumnName("ID_USUARIO_ANALISE_CRITICA");

                entity.Property(e => e.TxAnaliseCritica)
                    .IsUnicode(false)
                    .HasColumnName("TX_ANALISE_CRITICA");

                entity.Property(e => e.TxObsCp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_CP");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");

                entity.Property(e => e.VlAcrescimoGenerico).HasColumnName("VL_ACRESCIMO_GENERICO");

                entity.Property(e => e.VlCobrado).HasColumnName("VL_COBRADO");

                entity.Property(e => e.VlCredito).HasColumnName("VL_CREDITO");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.Property(e => e.VlGlosa).HasColumnName("VL_GLOSA");

                entity.Property(e => e.VlGlosaGenerica).HasColumnName("VL_GLOSA_GENERICA");

                entity.Property(e => e.VlPendente).HasColumnName("VL_PENDENTE");

                entity.Property(e => e.VlPrometido).HasColumnName("VL_PROMETIDO");

                entity.Property(e => e.VlRecebido).HasColumnName("VL_RECEBIDO");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");

                entity.Property(e => e.VlTotalFiContaLimpa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_FI_CONTA_LIMPA");

                entity.Property(e => e.VlTotalGlosasContaLimpa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_GLOSAS_CONTA_LIMPA");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithOne(p => p.LoteCobranca)
                    .HasForeignKey<LoteCobranca>(d => d.IdLote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LoteConta_LoteCobranca_FK1");

                entity.HasOne(d => d.IdSituacaoLoteNavigation)
                    .WithMany(p => p.LoteCobranca)
                    .HasForeignKey(d => d.IdSituacaoLote)
                    .HasConstraintName("SituacaoLote_LoteCobranca_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LoteCobranca)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_LoteCobranca_FK1");
            });

            modelBuilder.Entity<LoteConta>(entity =>
            {
                entity.HasKey(e => e.IdLote)
                    .HasName("LoteConta_PK");

                entity.HasIndex(e => e.IdLoteContaMapa, "IX_LoteConta_ID_LOTE_CONTA_MAPA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdLoteContaMapa, e.DtEnvioLote }, "IX_LoteConta_ID_LOTE_CONTA_MAPA_DT_ENVIO_LOTE")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdOperadora, "IX_LoteConta_ID_OPERADORA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdOperadora, e.IdLoteContaStatusTipo }, "IX_LoteConta_ID_OPERADORA_ID_LOTE_CONTA_STATUS_TIPO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.CdCnpjOrigem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ_ORIGEM");

                entity.Property(e => e.CdConvenio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONVENIO");

                entity.Property(e => e.DtEmissaoProtocolo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO_PROTOCOLO");

                entity.Property(e => e.DtEnvioLote)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO_LOTE");

                entity.Property(e => e.DtFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL");

                entity.Property(e => e.DtGeracaoLote)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO_LOTE");

                entity.Property(e => e.DtInicial)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIAL");

                entity.Property(e => e.DtVencimentoLote)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO_LOTE");

                entity.Property(e => e.IdLoteContaConvenioTipo).HasColumnName("ID_LOTE_CONTA_CONVENIO_TIPO");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdLoteContaStatusTipo)
                    .HasColumnName("ID_LOTE_CONTA_STATUS_TIPO")
                    .HasDefaultValueSql("((44741))");

                entity.Property(e => e.IdLoteContaSusTipo).HasColumnName("ID_LOTE_CONTA_SUS_TIPO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InRejeitada).HasColumnName("IN_REJEITADA");

                entity.Property(e => e.NrCampoControle).HasColumnName("NR_CAMPO_CONTROLE");

                entity.Property(e => e.NrCartaRemessa).HasColumnName("NR_CARTA_REMESSA");

                entity.Property(e => e.NrInicioFolhaBpac).HasColumnName("NR_INICIO_FOLHA_BPAC");

                entity.Property(e => e.NrInicioFolhaBpai).HasColumnName("NR_INICIO_FOLHA_BPAI");

                entity.Property(e => e.NrProtocolo).HasColumnName("NR_PROTOCOLO");

                entity.Property(e => e.NrTotalProducao).HasColumnName("NR_TOTAL_PRODUCAO");

                entity.Property(e => e.NrTotalRegistrosSus).HasColumnName("NR_TOTAL_REGISTROS_SUS");

                entity.Property(e => e.QnContasProcessadas).HasColumnName("QN_CONTAS_PROCESSADAS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxNomeArquivoSus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_ARQUIVO_SUS");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlTotalLote)
                    .HasColumnName("VL_TOTAL_LOTE")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdLoteContaConvenioTipoNavigation)
                    .WithMany(p => p.LoteContaIdLoteContaConvenioTipoNavigation)
                    .HasForeignKey(d => d.IdLoteContaConvenioTipo)
                    .HasConstraintName("FK_LoteConta_TipoDiversos2");

                entity.HasOne(d => d.IdLoteContaMapaNavigation)
                    .WithMany(p => p.LoteConta)
                    .HasForeignKey(d => d.IdLoteContaMapa)
                    .HasConstraintName("LoteContaMapa_LoteConta_FK1");

                entity.HasOne(d => d.IdLoteContaStatusTipoNavigation)
                    .WithMany(p => p.LoteContaIdLoteContaStatusTipoNavigation)
                    .HasForeignKey(d => d.IdLoteContaStatusTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LoteConta_TipoDiversos");

                entity.HasOne(d => d.IdLoteContaSusTipoNavigation)
                    .WithMany(p => p.LoteContaIdLoteContaSusTipoNavigation)
                    .HasForeignKey(d => d.IdLoteContaSusTipo)
                    .HasConstraintName("FK_LoteConta_TipoDiversos1");
            });

            modelBuilder.Entity<LoteContaComplemento>(entity =>
            {
                entity.HasKey(e => e.IdLote)
                    .HasName("PK_LoteSelMapa");

                entity.HasIndex(e => e.InMapa, "IX_LoteContaComplemento_IN_MAPA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdLote)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_LOTE");

                entity.Property(e => e.IdUsuarioFechou).HasColumnName("ID_USUARIO_FECHOU");

                entity.Property(e => e.IdUsuarioMapa).HasColumnName("ID_USUARIO_MAPA");

                entity.Property(e => e.InFechado).HasColumnName("IN_FECHADO");

                entity.Property(e => e.InMapa).HasColumnName("IN_MAPA");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithOne(p => p.LoteContaComplemento)
                    .HasForeignKey<LoteContaComplemento>(d => d.IdLote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LoteContaComplemento_LoteConta");
            });

            modelBuilder.Entity<LoteContaMapa>(entity =>
            {
                entity.HasKey(e => e.IdLoteContaMapa)
                    .HasName("LoteContaMapa_PK");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.AnoMapa).HasColumnName("ANO_MAPA");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.IdUsuarioResponsavel).HasColumnName("ID_USUARIO_RESPONSAVEL");

                entity.Property(e => e.InAberto).HasColumnName("IN_ABERTO");

                entity.Property(e => e.MesMapa).HasColumnName("MES_MAPA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<LotePrescricao>(entity =>
            {
                entity.HasKey(e => e.IdLotePrescricaoItem)
                    .HasName("LotePrescricao_PK");

                entity.HasIndex(e => e.InCancelamento, "IX_LotePrescricao_IN_CANCELAMENTO");

                entity.HasIndex(e => new { e.NrAssociacao, e.IdSolicitacaoPdEnfermagem }, "IX_LotePrescricao_NR_ASSOCIACAO_ID_SOLICITACAO_PD_ENFERMAGEM")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagem, "IX_SOLICITACAO_PD_ENFERMAGEM")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdLotePrescricaoItem).HasColumnName("ID_LOTE_PRESCRICAO_ITEM");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InCancelamento).HasColumnName("IN_CANCELAMENTO");

                entity.Property(e => e.NrAssociacao).HasColumnName("NR_ASSOCIACAO");

                entity.Property(e => e.NrLotePrescricao).HasColumnName("NR_LOTE_PRESCRICAO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.LotePrescricao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_LotePrescricao_FK1");

                entity.HasOne(d => d.SolicitacaoPdEnfermagem)
                    .WithMany(p => p.LotePrescricao)
                    .HasPrincipalKey(p => new { p.IdSolicitacaoPdEnfermagem, p.NrAssociacao })
                    .HasForeignKey(d => new { d.IdSolicitacaoPdEnfermagem, d.NrAssociacao })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_PD_Enfermagem_LotePrescricao_FK1");
            });

            modelBuilder.Entity<LotePrescricaoRegistroAlergiaPrincipioAtivo>(entity =>
            {
                entity.HasKey(e => e.IdLoteprescricaoregistroalergiaprincipioativo);

                entity.Property(e => e.IdLoteprescricaoregistroalergiaprincipioativo).HasColumnName("ID_LOTEPRESCRICAOREGISTROALERGIAPRINCIPIOATIVO");

                entity.Property(e => e.IdLotePrescricaoItem).HasColumnName("ID_LOTE_PRESCRICAO_ITEM");

                entity.Property(e => e.IdPrincipioAtivo).HasColumnName("ID_PRINCIPIO_ATIVO");

                entity.Property(e => e.IdUsuarioConcordante).HasColumnName("ID_USUARIO_CONCORDANTE");

                entity.Property(e => e.NrLotePrescricaoConcordancia).HasColumnName("NR_LOTE_PRESCRICAO_CONCORDANCIA");

                entity.HasOne(d => d.IdLotePrescricaoItemNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroAlergiaPrincipioAtivo)
                    .HasForeignKey(d => d.IdLotePrescricaoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LotePrescricaoRegistroAlergiaPrincipioAtivo_LotePrescricao");

                entity.HasOne(d => d.IdPrincipioAtivoNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroAlergiaPrincipioAtivo)
                    .HasForeignKey(d => d.IdPrincipioAtivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LotePrescricaoRegistroAlergiaPrincipioAtivo_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioConcordanteNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroAlergiaPrincipioAtivo)
                    .HasForeignKey(d => d.IdUsuarioConcordante)
                    .HasConstraintName("FK_LotePrescricaoRegistroAlergiaPrincipioAtivo_Usuario");
            });

            modelBuilder.Entity<LotePrescricaoRegistroInteracao>(entity =>
            {
                entity.HasKey(e => e.IdLoteprescricaoregistrointeracao)
                    .HasName("LotePrescricaoRegistroInteracao_PK");

                entity.Property(e => e.IdLoteprescricaoregistrointeracao).HasColumnName("ID_LOTEPRESCRICAOREGISTROINTERACAO");

                entity.Property(e => e.IdInteracaoMedicamentosa).HasColumnName("ID_INTERACAO_MEDICAMENTOSA");

                entity.Property(e => e.IdLotePrescricaoItem).HasColumnName("ID_LOTE_PRESCRICAO_ITEM");

                entity.Property(e => e.IdUsuarioConcordante).HasColumnName("ID_USUARIO_CONCORDANTE");

                entity.Property(e => e.NrLotePrescricaoConcordancia).HasColumnName("NR_LOTE_PRESCRICAO_CONCORDANCIA");

                entity.HasOne(d => d.IdInteracaoMedicamentosaNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroInteracao)
                    .HasForeignKey(d => d.IdInteracaoMedicamentosa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("InteracaoMedicamentosa_LotePrescricaoRegistroInteracao_FK1");

                entity.HasOne(d => d.IdLotePrescricaoItemNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroInteracao)
                    .HasForeignKey(d => d.IdLotePrescricaoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LotePrescricao_LotePrescricaoRegistroInteracao_FK1");

                entity.HasOne(d => d.IdUsuarioConcordanteNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroInteracao)
                    .HasForeignKey(d => d.IdUsuarioConcordante)
                    .HasConstraintName("Usuario_LotePrescricaoRegistroInteracao_FK1");
            });

            modelBuilder.Entity<LotePrescricaoRegistroRiscoTev>(entity =>
            {
                entity.HasKey(e => e.IdLotePrescricaoRegistroRiscoTev);

                entity.ToTable("LotePrescricaoRegistroRiscoTEV");

                entity.Property(e => e.IdLotePrescricaoRegistroRiscoTev).HasColumnName("ID_LOTE_PRESCRICAO_REGISTRO_RISCO_TEV");

                entity.Property(e => e.IdLotePrescricaoItem).HasColumnName("ID_LOTE_PRESCRICAO_ITEM");

                entity.Property(e => e.IdRiscoTev).HasColumnName("ID_RISCO_TEV");

                entity.Property(e => e.IdUsuarioConcordante).HasColumnName("ID_USUARIO_CONCORDANTE");

                entity.Property(e => e.NrLotePrescricaoConcordancia).HasColumnName("NR_LOTE_PRESCRICAO_CONCORDANCIA");

                entity.HasOne(d => d.IdLotePrescricaoItemNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroRiscoTev)
                    .HasForeignKey(d => d.IdLotePrescricaoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LotePrescricaoRegistroRiscoTEV_LotePrescricao");

                entity.HasOne(d => d.IdRiscoTevNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroRiscoTev)
                    .HasForeignKey(d => d.IdRiscoTev)
                    .HasConstraintName("FK_LotePrescricaoRegistroRiscoTEV_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioConcordanteNavigation)
                    .WithMany(p => p.LotePrescricaoRegistroRiscoTev)
                    .HasForeignKey(d => d.IdUsuarioConcordante)
                    .HasConstraintName("FK_LotePrescricaoRegistroRiscoTEV_Usuario");
            });

            modelBuilder.Entity<LoteProduto>(entity =>
            {
                entity.HasKey(e => e.IdLoteProduto)
                    .HasName("LoteProduto_PK");

                entity.HasIndex(e => new { e.IdDocumentoEntradaProduto, e.IdTipoDocumentoEntrada }, "IX_LOTEPRODOUTO_TIPO_DOCUMENTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.IdEmbalagemPai, e.IdEmbalagemFilho }, "IX_LoteProduto_K3_K4_K5_K6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NrLote, "IX_LoteProduto_NR_LOTE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdLoteProduto).HasColumnName("ID_LOTE_PRODUTO");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdDocumentoEntradaProduto).HasColumnName("ID_DOCUMENTO_ENTRADA_PRODUTO");

                entity.Property(e => e.IdEmbalagemFilho).HasColumnName("ID_EMBALAGEM_FILHO");

                entity.Property(e => e.IdEmbalagemPai).HasColumnName("ID_EMBALAGEM_PAI");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTipoDocumentoEntrada).HasColumnName("ID_TIPO_DOCUMENTO_ENTRADA");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.NrLote)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.LoteProduto)
                    .HasForeignKey(d => new { d.IdProdutoDetalhe, d.IdFabricante, d.IdEmbalagemPai, d.IdEmbalagemFilho })
                    .HasConstraintName("Embalagem_ProdutoDetalhe_LoteProduto_FK1");
            });

            modelBuilder.Entity<LoteProdutoItem>(entity =>
            {
                entity.HasKey(e => e.IdLoteProdutoItem)
                    .HasName("LoteProdutoItem_PK");

                entity.HasIndex(e => e.IdSituacaoItemProduto, "IX_LoteProdutoItem")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdLoteProduto, "IX_LoteProdutoItem_ID_LOTE_PRODUTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdSituacaoItemProduto, "IX_LoteProdutoItem_K3")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLoteProdutoItem)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdLoteProduto).HasColumnName("ID_LOTE_PRODUTO");

                entity.Property(e => e.IdSituacaoItemProduto).HasColumnName("ID_SITUACAO_ITEM_PRODUTO");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.IdUnidade).HasColumnName("ID_UNIDADE");

                entity.Property(e => e.QnProdutoUtilizado).HasColumnName("QN_PRODUTO_UTILIZADO");

                entity.HasOne(d => d.IdLoteProdutoNavigation)
                    .WithMany(p => p.LoteProdutoItem)
                    .HasForeignKey(d => d.IdLoteProduto)
                    .HasConstraintName("LoteProduto_LoteProdutoItem_FK1");
            });

            modelBuilder.Entity<LoteProdutoItemHistoricoStatus>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtEvento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EVENTO");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdSituacaoItemProduto).HasColumnName("ID_SITUACAO_ITEM_PRODUTO");
            });

            modelBuilder.Entity<LoteProdutoItemImpressao>(entity =>
            {
                entity.HasKey(e => e.IdLoteProdutoItemImpressao);

                entity.HasIndex(e => e.IdLoteProdutoItem, "ix_LoteProdutoItemImpressao_ID_LOTE_PRODUTO_ITEM")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLoteProdutoItemImpressao).HasColumnName("ID_LOTE_PRODUTO_ITEM_IMPRESSAO");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxJustificativa)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");
            });

            modelBuilder.Entity<LoteProdutoItemLiberacaoEtiqueta>(entity =>
            {
                entity.HasKey(e => e.IdLoteProdutoItemLiberacaoEtiqueta);

                entity.Property(e => e.IdLoteProdutoItemLiberacaoEtiqueta).HasColumnName("ID_LOTE_PRODUTO_ITEM_LIBERACAO_ETIQUETA");

                entity.Property(e => e.DtLiberacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdSituacaoEtiqueta).HasColumnName("ID_SITUACAO_ETIQUETA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
            });

            modelBuilder.Entity<LoteProdutoRelacionamento>(entity =>
            {
                entity.HasKey(e => e.IdLoteProdutoRelacionamento);

                entity.Property(e => e.IdLoteProdutoRelacionamento).HasColumnName("ID_LOTE_PRODUTO_RELACIONAMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdLoteProdutoFilho).HasColumnName("ID_LOTE_PRODUTO_FILHO");

                entity.Property(e => e.IdLoteProdutoPai).HasColumnName("ID_LOTE_PRODUTO_PAI");

                entity.HasOne(d => d.IdLoteProdutoFilhoNavigation)
                    .WithMany(p => p.LoteProdutoRelacionamentoIdLoteProdutoFilhoNavigation)
                    .HasForeignKey(d => d.IdLoteProdutoFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LoteProdutoRelacionamento_LoteProduto1");

                entity.HasOne(d => d.IdLoteProdutoPaiNavigation)
                    .WithMany(p => p.LoteProdutoRelacionamentoIdLoteProdutoPaiNavigation)
                    .HasForeignKey(d => d.IdLoteProdutoPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LoteProdutoRelacionamento_LoteProduto");
            });

            modelBuilder.Entity<MapaCancel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MapaCancel");

                entity.Property(e => e.Anestesia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANESTESIA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Anestesistas)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("ANESTESISTAS")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Bloco)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("BLOCO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Cirurgiao)
                    .IsRequired()
                    .HasMaxLength(356)
                    .IsUnicode(false)
                    .HasColumnName("CIRURGIAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Data)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DATA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DtAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDA");

                entity.Property(e => e.Hora)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HORA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdBloco).HasColumnName("ID_BLOCO");

                entity.Property(e => e.IdSala).HasColumnName("ID_SALA");

                entity.Property(e => e.Idade).HasColumnName("IDADE");

                entity.Property(e => e.Leito)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LEITO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.MateriaisEquipamentos)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("MATERIAIS/EQUIPAMENTOS")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Nome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Observacoes)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBSERVACOES")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OperadoraPlano)
                    .HasMaxLength(131)
                    .IsUnicode(false)
                    .HasColumnName("OPERADORA/PLANO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Procedimentos)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("PROCEDIMENTOS")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Sala)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SALA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<MapaCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MapaCC");

                entity.Property(e => e.Anestesia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ANESTESIA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Anestesistas)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("ANESTESISTAS")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Bloco)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("BLOCO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Cirurgiao)
                    .IsRequired()
                    .HasMaxLength(356)
                    .IsUnicode(false)
                    .HasColumnName("CIRURGIAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Data)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DATA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Hora)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("HORA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

                entity.Property(e => e.IdBloco).HasColumnName("ID_BLOCO");

                entity.Property(e => e.IdSala).HasColumnName("ID_SALA");

                entity.Property(e => e.Idade).HasColumnName("IDADE");

                entity.Property(e => e.Leito)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LEITO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.MateriaisEquipamentos)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("MATERIAIS/EQUIPAMENTOS")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Nome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Observacoes)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBSERVACOES")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OperadoraPlano)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPERADORA/PLANO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Procedimentos)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("PROCEDIMENTOS")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Sala)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("SALA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<MapaRecebimento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MapaRecebimento");

                entity.Property(e => e.Banco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANCO");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConciliacao).HasColumnName("ID_CONCILIACAO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.Operadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPERADORA");

                entity.Property(e => e.TxSerie)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE");

                entity.Property(e => e.VlConciliado)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_CONCILIADO");

                entity.Property(e => e.VlLancamento).HasColumnName("VL_LANCAMENTO");

                entity.Property(e => e.VlLiquidoNota)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_LIQUIDO_NOTA");

                entity.Property(e => e.VlNotaEmitida)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_NOTA_EMITIDA");
            });

            modelBuilder.Entity<MaquinaClienteUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.NmMaquinaCliente, e.IdUnidadeOrganizacional })
                    .HasName("MaquinaCliente_UnidadeOrganizacional_PK");

                entity.ToTable("MaquinaCliente_UnidadeOrganizacional");

                entity.Property(e => e.NmMaquinaCliente)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAQUINA_CLIENTE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxIpMaquinaCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_IP_MAQUINA_CLIENTE");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.MaquinaClienteUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_MaquinaCliente_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<MaquinaImpressoraPadrao>(entity =>
            {
                entity.HasKey(e => e.IdMaquinaPadrao)
                    .HasName("PK__MaquinaI__E4854C60156FF410");

                entity.Property(e => e.IdMaquinaPadrao).HasColumnName("ID_MAQUINA_PADRAO");

                entity.Property(e => e.NmImpressora)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_IMPRESSORA");

                entity.Property(e => e.NmMaquina)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAQUINA");

                entity.Property(e => e.TxIpMaquina)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_IP_MAQUINA");

                entity.Property(e => e.TxTipoEtiqueta)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_ETIQUETA");

                entity.Property(e => e.TxTipoImpressora)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_IMPRESSORA");
            });

            modelBuilder.Entity<MconnectAmostra>(entity =>
            {
                entity.HasKey(e => e.Amostra)
                    .HasName("MCONNECT_Amostra_PK");

                entity.ToTable("MCONNECT_Amostra");

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Agrupamento)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.DataColeta)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Data_coleta");

                entity.Property(e => e.Diluicao)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Escaninho)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.HoraColeta)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Hora_coleta");

                entity.Property(e => e.Instrumento)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Laboratorio)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Material)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Observacao)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Origem)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Rack)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Registro)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MconnectExame>(entity =>
            {
                entity.HasKey(e => new { e.Exame, e.Amostra, e.SequenciaRepeticao })
                    .HasName("MCONNECT_Exame_PK");

                entity.ToTable("MCONNECT_Exame");

                entity.Property(e => e.Exame)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.SequenciaRepeticao).HasColumnName("Sequencia_repeticao");

                entity.Property(e => e.DataLiberacao)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Data_liberacao");

                entity.Property(e => e.DataResultado)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Data_resultado");

                entity.Property(e => e.HoraLiberacao)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Hora_liberacao");

                entity.Property(e => e.HoraResultado)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Hora_resultado");

                entity.Property(e => e.Operador)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.AmostraNavigation)
                    .WithMany(p => p.MconnectExame)
                    .HasForeignKey(d => d.Amostra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MCONNECT_Amostra_MCONNECT_Exame_FK1");
            });

            modelBuilder.Entity<MconnectFlag>(entity =>
            {
                entity.HasKey(e => new { e.Exame, e.Amostra, e.SequenciaRepeticao, e.Flag })
                    .HasName("MCONNECT_Flag_PK");

                entity.ToTable("MCONNECT_Flag");

                entity.Property(e => e.Exame)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.SequenciaRepeticao).HasColumnName("Sequencia_repeticao");

                entity.Property(e => e.Flag)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.HasOne(d => d.MconnectExame)
                    .WithMany(p => p.MconnectFlag)
                    .HasForeignKey(d => new { d.Exame, d.Amostra, d.SequenciaRepeticao })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MCONNECT_Exame_MCONNECT_Flag_FK1");
            });

            modelBuilder.Entity<MconnectOcorrencias>(entity =>
            {
                entity.HasKey(e => new { e.Instrumento, e.Sequencia })
                    .HasName("MCONNECT_Ocorrencias_PK");

                entity.ToTable("MCONNECT_Ocorrencias");

                entity.Property(e => e.Instrumento)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.DataExportacao)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Data_exportacao");

                entity.Property(e => e.DataOcorrencia)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Data_ocorrencia");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Detalhes)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.HoraExportacao)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Hora_exportacao");

                entity.Property(e => e.HoraOcorrencia)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Hora_ocorrencia");

                entity.Property(e => e.Porta)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TipoLog)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_log");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.AmostraNavigation)
                    .WithMany(p => p.MconnectOcorrencias)
                    .HasForeignKey(d => d.Amostra)
                    .HasConstraintName("MCONNECT_Amostra_MCONNECT_Ocorrencias_FK1");
            });

            modelBuilder.Entity<MconnectResultado>(entity =>
            {
                entity.HasKey(e => new { e.Parametro, e.SequenciaRepeticao, e.Amostra, e.Exame })
                    .HasName("MCONNECT_Resultado_PK");

                entity.ToTable("MCONNECT_Resultado");

                entity.Property(e => e.Parametro)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SequenciaRepeticao).HasColumnName("Sequencia_repeticao");

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Exame)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Resultado)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.HasOne(d => d.MconnectExame)
                    .WithMany(p => p.MconnectResultado)
                    .HasForeignKey(d => new { d.Exame, d.Amostra, d.SequenciaRepeticao })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MCONNECT_Exame_MCONNECT_Resultado_FK1");
            });

            modelBuilder.Entity<Medicamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Medicamento");

                entity.Property(e => e.IdMdConsumoMinimo).HasColumnName("id_md_consumo_minimo");

                entity.Property(e => e.IdProduto).HasColumnName("id_produto");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nm_produto");

                entity.Property(e => e.QnConsumoMinimo).HasColumnName("qn_consumo_minimo");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1749)
                    .IsUnicode(false)
                    .HasColumnName("tx_apresentacao");
            });

            modelBuilder.Entity<MedicamentoNaoPadronizado>(entity =>
            {
                entity.HasKey(e => e.IdMedicamentoNaoPadronizado)
                    .HasName("MedicamentoNaoPadronizado_PK");

                entity.Property(e => e.IdMedicamentoNaoPadronizado).HasColumnName("ID_MEDICAMENTO_NAO_PADRONIZADO");

                entity.Property(e => e.DtPedido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdStatus)
                    .HasColumnName("ID_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdUnidadeMedidaPrescrita).HasColumnName("ID_UNIDADE_MEDIDA_PRESCRITA");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrDiasTratamento).HasColumnName("NR_DIAS_TRATAMENTO");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.TxConcentracao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONCENTRACAO");

                entity.Property(e => e.TxDescricaoFarmacos)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_FARMACOS");

                entity.Property(e => e.TxFormaFarmaceutica)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMA_FARMACEUTICA");

                entity.Property(e => e.TxJustificativaPedido)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_PEDIDO");

                entity.Property(e => e.TxMotivoNaoAutorizado)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_NAO_AUTORIZADO");

                entity.Property(e => e.TxNomeComercial)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_COMERCIAL");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.MedicamentoNaoPadronizadoIdStatusNavigation)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MedicamentoNaoPadronizado_TipoDiversosStatus");

                entity.HasOne(d => d.IdUnidadeMedidaPrescritaNavigation)
                    .WithMany(p => p.MedicamentoNaoPadronizadoIdUnidadeMedidaPrescritaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedidaPrescrita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_MedicamentoNaoPadronizado_FK1");
            });

            modelBuilder.Entity<MedicamentoNaoPadronizadoSolicitacaoPdenfermagem>(entity =>
            {
                entity.HasKey(e => new { e.IdMedicamentoNaoPadronizado, e.IdSolicitacaoPdEnfermagem })
                    .HasName("MedicamentoNaoPadronizado_SolicitacaoPDEnfermagem_PK");

                entity.ToTable("MedicamentoNaoPadronizado_SolicitacaoPDEnfermagem");

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagem, "IX_MedicamentoNaoPadronizado_SolicitacaoPDEnfermagem_ID_SOLICITACAO_PD_ENFERMAGEM")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdMedicamentoNaoPadronizado).HasColumnName("ID_MEDICAMENTO_NAO_PADRONIZADO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoInicial).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_INICIAL");

                entity.HasOne(d => d.IdMedicamentoNaoPadronizadoNavigation)
                    .WithMany(p => p.MedicamentoNaoPadronizadoSolicitacaoPdenfermagem)
                    .HasForeignKey(d => d.IdMedicamentoNaoPadronizado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MedicamentoNaoPadronizado_MedicamentoNaoPadronizado_SolicitacaoPDEnfermagem_FK1");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemNavigation)
                    .WithMany(p => p.MedicamentoNaoPadronizadoSolicitacaoPdenfermagem)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_PD_Enfermagem_MedicamentoNaoPadronizado_SolicitacaoPDEnfermagem_FK1");
            });

            modelBuilder.Entity<MedicamentoPrincipioAtivo>(entity =>
            {
                entity.HasKey(e => new { e.IdMedicamento, e.IdPrincipioAtivo });

                entity.ToTable("Medicamento_PrincipioAtivo");

                entity.Property(e => e.IdMedicamento).HasColumnName("ID_MEDICAMENTO");

                entity.Property(e => e.IdPrincipioAtivo).HasColumnName("ID_PRINCIPIO_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdMedicamentoNavigation)
                    .WithMany(p => p.MedicamentoPrincipioAtivo)
                    .HasForeignKey(d => d.IdMedicamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Medicamento_PrincipioAtivo_Produto");

                entity.HasOne(d => d.IdPrincipioAtivoNavigation)
                    .WithMany(p => p.MedicamentoPrincipioAtivo)
                    .HasForeignKey(d => d.IdPrincipioAtivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Medicamento_PrincipioAtivo_TipoDiversos");
            });

            modelBuilder.Entity<MedicamentoReceituario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MedicamentoReceituario");

                entity.Property(e => e.IdCondicaoMedicamento)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_CONDICAO_MEDICAMENTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmCondicaoMedicamento)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONDICAO_MEDICAMENTO");
            });

            modelBuilder.Entity<MedicamentoReceituarioCondicao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MedicamentoReceituario_Condicao");

                entity.Property(e => e.IdCondicaoMedicamento)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_CONDICAO_MEDICAMENTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmCondicaoMedicamento)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONDICAO_MEDICAMENTO");
            });

            modelBuilder.Entity<MedicamentoTudo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Medicamento_Tudo");

                entity.Property(e => e.IdMdConsumoMinimo).HasColumnName("ID_MD_CONSUMO_MINIMO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.QnConsumoMinimo).HasColumnName("QN_CONSUMO_MINIMO");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1269)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<MedicamentosAntibioticos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MEDICAMENTOS_ANTIBIOTICOS");

                entity.Property(e => e.IdAntibiotico).HasColumnName("ID_ANTIBIOTICO");

                entity.Property(e => e.NmAntibiotico)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_ANTIBIOTICO");
            });

            modelBuilder.Entity<MedicamentosTodosSemNomeComercial>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MedicamentosTodosSemNomeComercial");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(2005)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<Medico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Medico");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCoordenador)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_COORDENADOR");

                entity.Property(e => e.InEstrategico)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_ESTRATEGICO");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_MEDICO_CADASTRO_COMPLETO");

                entity.Property(e => e.InMedicoFrequente)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_MEDICO_FREQUENTE");

                entity.Property(e => e.InResidente)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_RESIDENTE");

                entity.Property(e => e.NmMedico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.UfCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CRM");
            });

            modelBuilder.Entity<Medico1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Medico_");

                entity.HasIndex(e => e.IdMedico, "IX_MEDICO_K1")
                    .IsUnique();

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCoordenador)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_COORDENADOR");

                entity.Property(e => e.InEstrategico)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_ESTRATEGICO");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_MEDICO_CADASTRO_COMPLETO");

                entity.Property(e => e.InMedicoFrequente)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_MEDICO_FREQUENTE");

                entity.Property(e => e.InResidente)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_RESIDENTE");

                entity.Property(e => e.NmMedico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.UfCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CRM");
            });

            modelBuilder.Entity<Medico3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Medico3");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCoordenador)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_COORDENADOR");

                entity.Property(e => e.InEstrategico)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_ESTRATEGICO");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_MEDICO_CADASTRO_COMPLETO");

                entity.Property(e => e.InMedicoFrequente)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_MEDICO_FREQUENTE");

                entity.Property(e => e.InResidente)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_RESIDENTE");

                entity.Property(e => e.NmMedico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.UfCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CRM");
            });

            modelBuilder.Entity<MedicoEspecialidade>(entity =>
            {
                entity.HasKey(e => new { e.IdMedico, e.IdEspecialidade })
                    .HasName("Medico_Especialidade_PK");

                entity.ToTable("Medico_Especialidade");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.InApurarValoresSus).HasColumnName("IN_APURAR_VALORES_SUS");

                entity.Property(e => e.InPrioridade).HasColumnName("IN_PRIORIDADE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.MedicoEspecialidade)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Medico_Especialidade_FK1");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.MedicoEspecialidade)
                    .HasForeignKey(d => d.IdMedico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Medico_Especialidade_FK1");
            });

            modelBuilder.Entity<MedicoExterno>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Crm, "IX_CRM")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Situacao, "IX_SITUACAO");

                entity.Property(e => e.Crm).HasColumnName("CRM");

                entity.Property(e => e.Nome)
                    .HasMaxLength(255)
                    .HasColumnName("NOME");

                entity.Property(e => e.Situacao)
                    .HasMaxLength(255)
                    .HasColumnName("SITUACAO");

                entity.Property(e => e.Uf)
                    .HasMaxLength(255)
                    .HasColumnName("UF");
            });

            modelBuilder.Entity<MedicoExternoAtivo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdCrm).HasColumnName("CD_CRM");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.TxUf)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TX_UF");
            });

            modelBuilder.Entity<MedicoInterno>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MedicoInterno");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(7900)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm).HasColumnName("NR_CRM");

                entity.Property(e => e.UfCrm)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("UF_CRM")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<MedicoProcedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdProcedimento, e.IdMedico })
                    .HasName("Medico_Procedimento_PK");

                entity.ToTable("Medico_Procedimento");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.MedicoProcedimento)
                    .HasForeignKey(d => new { d.IdAtendimento, d.IdProcedimento })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_Procedimento_Medico_Procedimento_FK1");
            });

            modelBuilder.Entity<MedicoRajacoop>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Medico_Rajacoop");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.NmMedico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");
            });

            modelBuilder.Entity<MeioColeta>(entity =>
            {
                entity.HasKey(e => e.IdMeioColeta)
                    .HasName("MeioColeta_PK");

                entity.Property(e => e.IdMeioColeta).HasColumnName("ID_MEIO_COLETA");

                entity.Property(e => e.IdUnidadeTipo).HasColumnName("ID_UNIDADE_TIPO");

                entity.Property(e => e.NmMeioColeta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEIO_COLETA");

                entity.Property(e => e.NrVolumeMaximo).HasColumnName("NR_VOLUME_MAXIMO");

                entity.Property(e => e.NrVolumeMinimo).HasColumnName("NR_VOLUME_MINIMO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdUnidadeTipoNavigation)
                    .WithMany(p => p.MeioColeta)
                    .HasForeignKey(d => d.IdUnidadeTipo)
                    .HasConstraintName("FK_MeioColeta_TipoDiversos");
            });

            modelBuilder.Entity<Mensagem>(entity =>
            {
                entity.HasKey(e => e.IdMensagem)
                    .HasName("Mensagem_PK");

                entity.HasIndex(e => e.IdMensagemPai, "IX_Mensagem_ID_MENSAGEM_PAI")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdStatusMensagem, "IX_Mensagem_ID_STATUS_MENSAGEM")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.DtEnvioMensagem, e.IdTipoMensagem }, "IX_Mensagem_K8_K4_1")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdStatusMensagem, "ix_Mensagem_ID_STATUS_MENSAGEM_includes")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.DtEnvioMensagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO_MENSAGEM");

                entity.Property(e => e.DtValidadeMensagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_MENSAGEM");

                entity.Property(e => e.HtmlMensagem)
                    .IsUnicode(false)
                    .HasColumnName("HTML_MENSAGEM");

                entity.Property(e => e.IdMensagemPai).HasColumnName("ID_MENSAGEM_PAI");

                entity.Property(e => e.IdStatusMensagem).HasColumnName("ID_STATUS_MENSAGEM");

                entity.Property(e => e.IdTipoMensagem).HasColumnName("ID_TIPO_MENSAGEM");

                entity.Property(e => e.IdUsuarioRemetente).HasColumnName("ID_USUARIO_REMETENTE");

                entity.Property(e => e.InAceito).HasColumnName("IN_ACEITO");

                entity.Property(e => e.TxAssunto)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TX_ASSUNTO");

                entity.HasOne(d => d.IdStatusMensagemNavigation)
                    .WithMany(p => p.Mensagem)
                    .HasForeignKey(d => d.IdStatusMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Mensagem_FK1");

                entity.HasOne(d => d.IdTipoMensagemNavigation)
                    .WithMany(p => p.Mensagem)
                    .HasForeignKey(d => d.IdTipoMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MensagemTipo_Mensagem_FK1");

                entity.HasOne(d => d.IdUsuarioRemetenteNavigation)
                    .WithMany(p => p.Mensagem)
                    .HasForeignKey(d => d.IdUsuarioRemetente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Mensagem_FK1");
            });

            modelBuilder.Entity<MensagemBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mensagem_backup");

                entity.Property(e => e.DtEnvioMensagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO_MENSAGEM");

                entity.Property(e => e.DtValidadeMensagem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_MENSAGEM");

                entity.Property(e => e.HtmlMensagem)
                    .HasColumnType("text")
                    .HasColumnName("HTML_MENSAGEM");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdMensagemPai).HasColumnName("ID_MENSAGEM_PAI");

                entity.Property(e => e.IdStatusMensagem).HasColumnName("ID_STATUS_MENSAGEM");

                entity.Property(e => e.IdTipoMensagem).HasColumnName("ID_TIPO_MENSAGEM");

                entity.Property(e => e.IdUsuarioRemetente).HasColumnName("ID_USUARIO_REMETENTE");

                entity.Property(e => e.InAceito).HasColumnName("IN_ACEITO");

                entity.Property(e => e.TxAssunto)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TX_ASSUNTO");
            });

            modelBuilder.Entity<MensagemNovoControle>(entity =>
            {
                entity.HasKey(e => new { e.IdControle, e.IdMensagem })
                    .HasName("Mensagem_NovoControle_PK");

                entity.ToTable("Mensagem_NovoControle");

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.HasOne(d => d.IdControleNavigation)
                    .WithMany(p => p.MensagemNovoControle)
                    .HasForeignKey(d => d.IdControle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Novo_Controle_Mensagem_NovoControle_FK1");

                entity.HasOne(d => d.IdMensagemNavigation)
                    .WithMany(p => p.MensagemNovoControle)
                    .HasForeignKey(d => d.IdMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Mensagem_Mensagem_NovoControle_FK1");
            });

            modelBuilder.Entity<MensagemNovoControleBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mensagem_NovoControle_backup");

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");
            });

            modelBuilder.Entity<MensagemPerfil>(entity =>
            {
                entity.HasKey(e => new { e.IdMensagem, e.IdPerfil })
                    .HasName("Mensagem_Perfil_PK");

                entity.ToTable("Mensagem_Perfil");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.HasOne(d => d.IdMensagemNavigation)
                    .WithMany(p => p.MensagemPerfil)
                    .HasForeignKey(d => d.IdMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Mensagem_Mensagem_Perfil_FK1");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.MensagemPerfil)
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Perfil_Mensagem_Perfil_FK1");
            });

            modelBuilder.Entity<MensagemPerfilBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mensagem_Perfil_backup");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");
            });

            modelBuilder.Entity<MensagemPerfilEnvioPerfil>(entity =>
            {
                entity.HasKey(e => new { e.IdPerfilRemetente, e.IdPerfilDestinatario })
                    .HasName("MensagemPerfilEnvioPerfil_PK");

                entity.Property(e => e.IdPerfilRemetente).HasColumnName("ID_PERFIL_REMETENTE");

                entity.Property(e => e.IdPerfilDestinatario).HasColumnName("ID_PERFIL_DESTINATARIO");

                entity.HasOne(d => d.IdPerfilDestinatarioNavigation)
                    .WithMany(p => p.MensagemPerfilEnvioPerfilIdPerfilDestinatarioNavigation)
                    .HasForeignKey(d => d.IdPerfilDestinatario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Perfil_MensagemPerfilEnvioPerfil_FK2");

                entity.HasOne(d => d.IdPerfilRemetenteNavigation)
                    .WithMany(p => p.MensagemPerfilEnvioPerfilIdPerfilRemetenteNavigation)
                    .HasForeignKey(d => d.IdPerfilRemetente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Perfil_MensagemPerfilEnvioPerfil_FK1");
            });

            modelBuilder.Entity<MensagemSolicitacao>(entity =>
            {
                entity.HasKey(e => new { e.IdMensagem, e.IdSolicitacao })
                    .HasName("Mensagem_Solicitacao_PK");

                entity.ToTable("Mensagem_Solicitacao");

                entity.HasIndex(e => e.IdSolicitacao, "IX_Mensagem_Solicitacao_ID_SOLICITACAO")
                    .HasFillFactor((byte)75);

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.HasOne(d => d.IdMensagemNavigation)
                    .WithMany(p => p.MensagemSolicitacao)
                    .HasForeignKey(d => d.IdMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Mensagem_Mensagem_Solicitacao_FK1");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.MensagemSolicitacao)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_Mensagem_Solicitacao_FK1");
            });

            modelBuilder.Entity<MensagemSolicitacaoBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mensagem_Solicitacao_backup");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");
            });

            modelBuilder.Entity<MensagemTipo>(entity =>
            {
                entity.HasKey(e => e.IdTipoMensagem)
                    .HasName("MensagemTipo_PK");

                entity.Property(e => e.IdTipoMensagem)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_TIPO_MENSAGEM");

                entity.Property(e => e.IdTipoAceite).HasColumnName("ID_TIPO_ACEITE");

                entity.Property(e => e.IdTipoRepeticao).HasColumnName("ID_TIPO_REPETICAO");

                entity.Property(e => e.IdTipoRespostas).HasColumnName("ID_TIPO_RESPOSTAS");

                entity.HasOne(d => d.IdTipoAceiteNavigation)
                    .WithMany(p => p.MensagemTipoIdTipoAceiteNavigation)
                    .HasForeignKey(d => d.IdTipoAceite)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_MensagemTipo_FK3");

                entity.HasOne(d => d.IdTipoMensagemNavigation)
                    .WithOne(p => p.MensagemTipoIdTipoMensagemNavigation)
                    .HasForeignKey<MensagemTipo>(d => d.IdTipoMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_MensagemTipo_FK1");

                entity.HasOne(d => d.IdTipoRepeticaoNavigation)
                    .WithMany(p => p.MensagemTipoIdTipoRepeticaoNavigation)
                    .HasForeignKey(d => d.IdTipoRepeticao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_MensagemTipo_FK4");

                entity.HasOne(d => d.IdTipoRespostasNavigation)
                    .WithMany(p => p.MensagemTipo)
                    .HasForeignKey(d => d.IdTipoRespostas)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_MensagemTipo_FK2");
            });

            modelBuilder.Entity<MensagemTipoPerfil>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoMensagem, e.IdPerfil })
                    .HasName("MensagemTipo_Perfil_PK");

                entity.ToTable("MensagemTipo_Perfil");

                entity.Property(e => e.IdTipoMensagem).HasColumnName("ID_TIPO_MENSAGEM");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.MensagemTipoPerfil)
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Perfil_MensagemTipo_Perfil_FK1");

                entity.HasOne(d => d.IdTipoMensagemNavigation)
                    .WithMany(p => p.MensagemTipoPerfil)
                    .HasForeignKey(d => d.IdTipoMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MensagemTipo_MensagemTipo_Perfil_FK1");
            });

            modelBuilder.Entity<MensagemUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdMensagem, e.IdUnidadeOrganizacional })
                    .HasName("Mensagem_UnidadeOrganizacional_PK");

                entity.ToTable("Mensagem_UnidadeOrganizacional");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.HasOne(d => d.IdMensagemNavigation)
                    .WithMany(p => p.MensagemUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Mensagem_Mensagem_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.MensagemUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Mensagem_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<MensagemUsuario>(entity =>
            {
                entity.HasKey(e => new { e.IdMensagem, e.IdUsuarioLeitor })
                    .HasName("Mensagem_Usuario_PK");

                entity.ToTable("Mensagem_Usuario");

                entity.HasIndex(e => e.IdUsuarioLeitor, "IX_Mensagem_Usuario_ID_USUARIO_LEITOR")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InLida, e.IdUsuarioLeitor }, "IX_Mensagem_Usuario_IN_LIDA_ID_USUARIO_LEITOR")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdUsuarioLeitor).HasColumnName("ID_USUARIO_LEITOR");

                entity.Property(e => e.DtLeitura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LEITURA");

                entity.Property(e => e.IdTipoResposta).HasColumnName("ID_TIPO_RESPOSTA");

                entity.Property(e => e.InLida).HasColumnName("IN_LIDA");

                entity.HasOne(d => d.IdMensagemNavigation)
                    .WithMany(p => p.MensagemUsuario)
                    .HasForeignKey(d => d.IdMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Mensagem_Mensagem_Usuario_FK1");

                entity.HasOne(d => d.IdTipoRespostaNavigation)
                    .WithMany(p => p.MensagemUsuario)
                    .HasForeignKey(d => d.IdTipoResposta)
                    .HasConstraintName("TipoDiversos_Mensagem_Usuario_FK1");

                entity.HasOne(d => d.IdUsuarioLeitorNavigation)
                    .WithMany(p => p.MensagemUsuario)
                    .HasForeignKey(d => d.IdUsuarioLeitor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Mensagem_Usuario_FK1");
            });

            modelBuilder.Entity<MensagemUsuarioBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mensagem_Usuario_backup");

                entity.Property(e => e.DtLeitura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LEITURA");

                entity.Property(e => e.IdMensagem).HasColumnName("ID_MENSAGEM");

                entity.Property(e => e.IdTipoResposta).HasColumnName("ID_TIPO_RESPOSTA");

                entity.Property(e => e.IdUsuarioLeitor).HasColumnName("ID_USUARIO_LEITOR");

                entity.Property(e => e.InLida).HasColumnName("IN_LIDA");
            });

            modelBuilder.Entity<MlisAmostra>(entity =>
            {
                entity.HasKey(e => e.Amostra)
                    .HasName("MLIS_Amostra_PK");

                entity.ToTable("MLIS_Amostra");

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Agrupamento)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.DataColeta)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Data_coleta");

                entity.Property(e => e.Diluicao)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.HoraColeta)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Hora_coleta");

                entity.Property(e => e.Instrumento)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Material)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Origem)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Prioridade)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Registro)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.HasOne(d => d.RegistroNavigation)
                    .WithMany(p => p.MlisAmostra)
                    .HasForeignKey(d => d.Registro)
                    .HasConstraintName("MLIS_Paciente_MLIS_Amostra_FK1");
            });

            modelBuilder.Entity<MlisAtributo>(entity =>
            {
                entity.HasKey(e => new { e.Amostra, e.Atributo })
                    .HasName("MLIS_Atributo_PK");

                entity.ToTable("MLIS_Atributo");

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Atributo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Instrumento)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.HasOne(d => d.AmostraNavigation)
                    .WithMany(p => p.MlisAtributo)
                    .HasForeignKey(d => d.Amostra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MLIS_Amostra_MLIS_Atributo_FK1");
            });

            modelBuilder.Entity<MlisExame>(entity =>
            {
                entity.HasKey(e => new { e.Exame, e.Amostra })
                    .HasName("MLIS_Exame_PK");

                entity.ToTable("MLIS_Exame");

                entity.Property(e => e.Exame)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Amostra)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.HasOne(d => d.AmostraNavigation)
                    .WithMany(p => p.MlisExame)
                    .HasForeignKey(d => d.Amostra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MLIS_Amostra_MLIS_Exame_FK1");
            });

            modelBuilder.Entity<MlisPaciente>(entity =>
            {
                entity.HasKey(e => e.Registro)
                    .HasName("MLIS_Paciente_PK");

                entity.ToTable("MLIS_Paciente");

                entity.Property(e => e.Registro)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cor)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DataNascimento)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Data_Nascimento");

                entity.Property(e => e.Idade)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ModeloLaudo>(entity =>
            {
                entity.HasKey(e => e.IdModeloLaudo)
                    .HasName("ModeloLaudo_PK");

                entity.Property(e => e.IdModeloLaudo).HasColumnName("ID_MODELO_LAUDO");

                entity.Property(e => e.TxHtmlLaudo)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_LAUDO");
            });

            modelBuilder.Entity<ModeloLaudoSadt>(entity =>
            {
                entity.HasKey(e => e.IdModeloLaudoSadt);

                entity.ToTable("ModeloLaudoSADT");

                entity.Property(e => e.IdModeloLaudoSadt).HasColumnName("ID_MODELO_LAUDO_SADT");

                entity.Property(e => e.DtModelo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MODELO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxDescricaoModeloLaudo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_MODELO_LAUDO");

                entity.Property(e => e.TxHtmlModeloLaudo)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_MODELO_LAUDO");

                entity.Property(e => e.TxTextoModeloLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_TEXTO_MODELO_LAUDO");
            });

            modelBuilder.Entity<ModeloLaudoSadtIm0>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ModeloLaudoSADT_IM0");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.IdLaudoSadt)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_LAUDO_SADT");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxDescricaoLaudo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_LAUDO");

                entity.Property(e => e.TxHtmlLaudo)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_LAUDO");
            });

            modelBuilder.Entity<ModeloLaudoSadtTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ModeloLaudoSADT_Teste");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdModeloLaudoSadt)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_MODELO_LAUDO_SADT");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxDescricaoModeloLaudo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_MODELO_LAUDO");

                entity.Property(e => e.TxHtmlModeloLaudo)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_MODELO_LAUDO");

                entity.Property(e => e.TxTextoModeloLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_TEXTO_MODELO_LAUDO");
            });

            modelBuilder.Entity<ModeloLaudoSadtTextoModeloLaudoSadt>(entity =>
            {
                entity.HasKey(e => new { e.IdTextoModeloLaudoSadt, e.IdModeloLaudoSadt });

                entity.ToTable("ModeloLaudoSADT_TextoModeloLaudoSADT");

                entity.HasIndex(e => e.IdModeloLaudoSadt, "IX_ModeloLaudoSADT_TextoModeloLaudoSADT_ID_MODELO_LAUDO_SADT")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdTextoModeloLaudoSadt).HasColumnName("ID_TEXTO_MODELO_LAUDO_SADT");

                entity.Property(e => e.IdModeloLaudoSadt).HasColumnName("ID_MODELO_LAUDO_SADT");

                entity.HasOne(d => d.IdModeloLaudoSadtNavigation)
                    .WithMany(p => p.ModeloLaudoSadtTextoModeloLaudoSadt)
                    .HasForeignKey(d => d.IdModeloLaudoSadt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModeloLaudoSADT_TextoModeloLaudoSADT_ModeloLaudoSADT");

                entity.HasOne(d => d.IdTextoModeloLaudoSadtNavigation)
                    .WithMany(p => p.ModeloLaudoSadtTextoModeloLaudoSadt)
                    .HasForeignKey(d => d.IdTextoModeloLaudoSadt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModeloLaudoSADT_TextoModeloLaudoSADT_TextoModeloLaudoSADT");
            });

            modelBuilder.Entity<ModeloLaudoSadthistorico>(entity =>
            {
                entity.HasKey(e => e.IdModeloLaudoSadtHistorico);

                entity.ToTable("ModeloLaudoSADTHistorico");

                entity.Property(e => e.IdModeloLaudoSadtHistorico).HasColumnName("ID_MODELO_LAUDO_SADT_HISTORICO");

                entity.Property(e => e.DtVersaoModelo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VERSAO_MODELO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdModeloLaudoSadt).HasColumnName("ID_MODELO_LAUDO_SADT");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioVersao).HasColumnName("ID_USUARIO_VERSAO");

                entity.Property(e => e.TxDescricaoModeloLaudo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_MODELO_LAUDO");

                entity.Property(e => e.TxHtmlModeloLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_MODELO_LAUDO");

                entity.Property(e => e.TxTextoModeloLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_TEXTO_MODELO_LAUDO");
            });

            modelBuilder.Entity<Modulo>(entity =>
            {
                entity.HasKey(e => e.IdModulo)
                    .HasName("PK_MODULO");

                entity.Property(e => e.IdModulo)
                    .HasColumnName("ID_MODULO")
                    .HasComment("Identificador unico do modulo");

                entity.Property(e => e.NmModulo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_MODULO")
                    .HasComment("Nome do modulo");
            });

            modelBuilder.Entity<ModuloDigitoVerificador>(entity =>
            {
                entity.HasKey(e => e.IdModuloDigitoVerificador)
                    .HasName("ModuloDigitoVerificador_PK");

                entity.Property(e => e.IdModuloDigitoVerificador).HasColumnName("ID_MODULO_DIGITO_VERIFICADOR");

                entity.Property(e => e.NmModuloDigitoVerificador)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MODULO_DIGITO_VERIFICADOR");

                entity.Property(e => e.TxDescricaoModulo)
                    .IsRequired()
                    .HasMaxLength(7000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_MODULO");
            });

            modelBuilder.Entity<Monitor>(entity =>
            {
                entity.HasKey(e => e.RowNumber)
                    .HasName("PK__monitor__219A027F");

                entity.ToTable("monitor");

                entity.Property(e => e.ApplicationName).HasMaxLength(128);

                entity.Property(e => e.ClientProcessId).HasColumnName("ClientProcessID");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.TextData)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MonitoramentoLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MONITORAMENTO_LOTE");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdExecucao)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_EXECUCAO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");
            });

            modelBuilder.Entity<MotivoUpgrade>(entity =>
            {
                entity.HasKey(e => e.IdMotivoUpgrade)
                    .HasName("Motivo_Upgrade1_PK");

                entity.ToTable("Motivo_Upgrade");

                entity.Property(e => e.IdMotivoUpgrade).HasColumnName("ID_MOTIVO_UPGRADE");

                entity.Property(e => e.InCobraPaciente).HasColumnName("IN_COBRA_PACIENTE");

                entity.Property(e => e.NmMotivoUpgrade)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_MOTIVO_UPGRADE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<Motivosglosa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("motivosglosa");

                entity.Property(e => e.F2).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);
            });

            modelBuilder.Entity<MovimentacaoProduto>(entity =>
            {
                entity.HasKey(e => e.IdMovimentacaoProduto);

                entity.HasIndex(e => e.IdPrecoMedio, "IX_MovimentacaoProduto_ID_PRECO_MEDIO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.DtCadastro }, "IX_MovimentacaoProduto_ID_PRODUTO_DETALHE_DT_CADASTRO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_MovimentacaoProduto_ID_PRODUTO_DETALHE_ID_FABRICANTE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdTipoMovimentacao, e.DtCadastro }, "IX_MovimentacaoProduto_ID_PRODUTO_DETALHE_ID_TIPO_MOVIMENTACAO_DT_CADASTRO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdTipoMovimentacao, "IX_MovimentacaoProduto_ID_TIPO_MOVIMENTACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdTipoMovimentacao, e.IdUnidadeEstoque }, "IX_MovimentacaoProduto_ID_TIPO_MOVIMENTACAO_ID_UNIDADE_ESTOQUE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeSolicitante, e.IdTipoMovimentacao, e.DtCadastro }, "IX_MovimentacaoProduto_ID_UNIDADE_SOLICITANTE_ID_TIPO_MOVIMENTACAO_DT_CADASTRO");

                entity.HasIndex(e => new { e.IdLoteProdutoItem, e.IdMovimentacaoProduto, e.DtCadastro }, "IX_MovimentacaoProduto_K7_K1_K12")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdLoteProdutoItem, "IX_MovimentacaoProduto_LoteProdutoItem")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NrMovimentacao, "IX_MovimentacaoProduto_NumeroMovimentacao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_MovimentacaoProduto_ProdutoDetalhe")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DtCadastro, "IX_MovimentacaoProduto_dt_cadastro_id_lot_produto_item")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdTipoMovimentacao, e.DtCadastro }, "IX_MovimentacaoProduto_id_prod_id_tip_mov_dt_cad_include")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.DtCadastro, e.IdTipoMovimentacao }, "ix_MovimentacaoProduto_DT_CADASTRO_ID_TIPO_MOVIMENTACAO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdMovimentacaoProduto).HasColumnName("ID_MOVIMENTACAO_PRODUTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdPrecoMedio).HasColumnName("ID_PRECO_MEDIO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTipoMovimentacao).HasColumnName("ID_TIPO_MOVIMENTACAO");

                entity.Property(e => e.IdUnidadeEstoque).HasColumnName("ID_UNIDADE_ESTOQUE");

                entity.Property(e => e.IdUnidadeSolicitante).HasColumnName("ID_UNIDADE_SOLICITANTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.InEntradaSaida)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_ENTRADA_SAIDA")
                    .IsFixedLength(true);

                entity.Property(e => e.NrMovimentacao).HasColumnName("NR_MOVIMENTACAO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.MovimentacaoProduto)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("FK_MovimentacaoProduto_LoteProdutoItem");

                entity.HasOne(d => d.IdUnidadeEstoqueNavigation)
                    .WithMany(p => p.MovimentacaoProdutoIdUnidadeEstoqueNavigation)
                    .HasForeignKey(d => d.IdUnidadeEstoque)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MovimentacaoProduto_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUnidadeSolicitanteNavigation)
                    .WithMany(p => p.MovimentacaoProdutoIdUnidadeSolicitanteNavigation)
                    .HasForeignKey(d => d.IdUnidadeSolicitante)
                    .HasConstraintName("FK_MovimentacaoProduto_UnidadeOrganizacional1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.MovimentacaoProduto)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_MovimentacaoProduto_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.MovimentacaoProduto)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("FK_MovimentacaoProduto_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<NaturezaOcupacao>(entity =>
            {
                entity.HasKey(e => e.IdNaturezaOcupacao)
                    .HasName("PK_NaturezaOcupacao1");

                entity.Property(e => e.IdNaturezaOcupacao).HasColumnName("ID_NATUREZA_OCUPACAO");

                entity.Property(e => e.CdNaturezaOcupacao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_NATUREZA_OCUPACAO");

                entity.Property(e => e.TxDescNaturezaOcupacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_NATUREZA_OCUPACAO");
            });

            modelBuilder.Entity<NotaDevolucao>(entity =>
            {
                entity.HasKey(e => e.IdNotaDevolucao)
                    .HasName("NotaDevolucao_PK");

                entity.Property(e => e.IdNotaDevolucao).HasColumnName("ID_NOTA_DEVOLUCAO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtNotaDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_NOTA_DEVOLUCAO");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdTipoNota).HasColumnName("ID_TIPO_NOTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InDevolucaoTotal).HasColumnName("IN_DEVOLUCAO_TOTAL");

                entity.Property(e => e.NrNotaDevolucao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_NOTA_DEVOLUCAO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("money")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("money")
                    .HasColumnName("VL_ICMS");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("money")
                    .HasColumnName("VL_IPI");

                entity.Property(e => e.VlItens)
                    .HasColumnType("money")
                    .HasColumnName("VL_ITENS");

                entity.Property(e => e.VlNotaFiscal)
                    .HasColumnType("money")
                    .HasColumnName("VL_NOTA_FISCAL");

                entity.Property(e => e.VlOutrasDespesas)
                    .HasColumnType("money")
                    .HasColumnName("VL_OUTRAS_DESPESAS");
            });

            modelBuilder.Entity<NotaDevolucaoExcluida>(entity =>
            {
                entity.HasKey(e => e.IdNotaExcluida);

                entity.Property(e => e.IdNotaExcluida).HasColumnName("ID_NOTA_EXCLUIDA");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdNotaDevolucao).HasColumnName("ID_NOTA_DEVOLUCAO");

                entity.Property(e => e.IdUsuarioExcluiu).HasColumnName("ID_USUARIO_EXCLUIU");

                entity.Property(e => e.VlNotaFiscal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_NOTA_FISCAL");

                entity.HasOne(d => d.IdUsuarioExcluiuNavigation)
                    .WithMany(p => p.NotaDevolucaoExcluida)
                    .HasForeignKey(d => d.IdUsuarioExcluiu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaDevolucaoExcluida_Usuario");
            });

            modelBuilder.Entity<NotaDevolucaoNotaEntradaProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdNotaDevolucaoNotaEntradaProdutoDetalhe)
                    .HasName("NotaDevolucao_NotaEntradaProdutoDetalhe_PK");

                entity.ToTable("NotaDevolucao_NotaEntradaProdutoDetalhe");

                entity.Property(e => e.IdNotaDevolucaoNotaEntradaProdutoDetalhe).HasColumnName("ID_NOTA_DEVOLUCAO_NOTA_ENTRADA_PRODUTO_DETALHE");

                entity.Property(e => e.IdNotaDevolucao).HasColumnName("ID_NOTA_DEVOLUCAO");

                entity.Property(e => e.IdNotaEntradaProdutoDetalhe).HasColumnName("ID_NOTA_ENTRADA_PRODUTO_DETALHE");

                entity.Property(e => e.InQuantidadeTotal).HasColumnName("IN_QUANTIDADE_TOTAL");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdNotaDevolucaoNavigation)
                    .WithMany(p => p.NotaDevolucaoNotaEntradaProdutoDetalhe)
                    .HasForeignKey(d => d.IdNotaDevolucao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaDevolucao_NotaEntradaProdutoDetalhe_NotaDevolucao");

                entity.HasOne(d => d.IdNotaEntradaProdutoDetalheNavigation)
                    .WithMany(p => p.NotaDevolucaoNotaEntradaProdutoDetalhe)
                    .HasForeignKey(d => d.IdNotaEntradaProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaDevolucao_NotaEntradaProdutoDetalhe_NotaEntrada_ProdutoDetalhe");
            });

            modelBuilder.Entity<NotaDevolucaoNotaEntradaProdutoDetalheLoteProdutoItem>(entity =>
            {
                entity.HasKey(e => e.IdNotaDevolucaoNotaEntradaProdutoDetalheLoteProdutoItem);

                entity.ToTable("NotaDevolucao_NotaEntradaProdutoDetalhe_LoteProdutoItem");

                entity.Property(e => e.IdNotaDevolucaoNotaEntradaProdutoDetalheLoteProdutoItem).HasColumnName("ID_NOTA_DEVOLUCAO_NOTA_ENTRADA_PRODUTO_DETALHE_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdNotaDevolucaoNotaEntradaProdutoDetalhe).HasColumnName("ID_NOTA_DEVOLUCAO_NOTA_ENTRADA_PRODUTO_DETALHE");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.NotaDevolucaoNotaEntradaProdutoDetalheLoteProdutoItem)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("FK_NotaDevolucao_NotaEntradaProdutoDetalhe_LoteProdutoItem_LoteProdutoItem");

                entity.HasOne(d => d.IdNotaDevolucaoNotaEntradaProdutoDetalheNavigation)
                    .WithMany(p => p.NotaDevolucaoNotaEntradaProdutoDetalheLoteProdutoItem)
                    .HasForeignKey(d => d.IdNotaDevolucaoNotaEntradaProdutoDetalhe)
                    .HasConstraintName("FK_NotaDevolucao_NotaEntradaProdutoDetalhe_LoteProdutoItem_NotaDevolucao_NotaEntradaProdutoDetalhe");
            });

            modelBuilder.Entity<NotaEmitida>(entity =>
            {
                entity.HasKey(e => e.IdNotaEmitida)
                    .HasName("PK_NotaFiscal");

                entity.HasIndex(e => new { e.IdSituacao, e.DtEmissao }, "IX_NotaEmitida_ID_SITUACAO_DT_EMISSAO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdNotaEmitida, e.IdSituacao }, "IX_NotaEmitida_K1_K6_2_5_7_16_17")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdNotaEmitida, e.IdSituacao }, "IX_NotaEmitida_K1_K6_7_13")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.NrNotaFiscal, e.IdSituacao }, "IX_NotaEmitida_K2_K6")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.DtRecebimentoTesouraria)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO_TESOURARIA");

                entity.Property(e => e.IdCaixamovimentacaoFinanceira).HasColumnName("ID_CAIXAMOVIMENTACAO_FINANCEIRA");

                entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

                entity.Property(e => e.IdMovimentacaocontaFinanceira).HasColumnName("ID_MOVIMENTACAOCONTA_FINANCEIRA");

                entity.Property(e => e.IdResponsavel).HasColumnName("ID_RESPONSAVEL");

                entity.Property(e => e.IdSituacao).HasColumnName("ID_SITUACAO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCancelou).HasColumnName("ID_USUARIO_CANCELOU");

                entity.Property(e => e.IdUsuarioEmitiu).HasColumnName("ID_USUARIO_EMITIU");

                entity.Property(e => e.InEstrangeiro).HasColumnName("IN_ESTRANGEIRO");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NrCnpjResponsavel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CNPJ_RESPONSAVEL");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.PrAliquota)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ALIQUOTA");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.TxCidade)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_CIDADE");

                entity.Property(e => e.TxEndereco)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");

                entity.Property(e => e.TxJustificativaCancelamento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxPessoaAutorizouDesconto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_PESSOA_AUTORIZOU_DESCONTO");

                entity.Property(e => e.TxSerie)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE");

                entity.Property(e => e.VlBaseCalculo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BASE_CALCULO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlIss)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ISS");

                entity.Property(e => e.VlNotaEmitida)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_NOTA_EMITIDA");

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.NotaEmitida)
                    .HasForeignKey(d => d.IdCliente)
                    .HasConstraintName("FK_NotaEmitida_Pessoa");

                entity.HasOne(d => d.IdSituacaoNavigation)
                    .WithMany(p => p.NotaEmitida)
                    .HasForeignKey(d => d.IdSituacao)
                    .HasConstraintName("NotaEmitidaSituacao_NotaEmitida_FK1");

                entity.HasOne(d => d.IdUsuarioCancelouNavigation)
                    .WithMany(p => p.NotaEmitidaIdUsuarioCancelouNavigation)
                    .HasForeignKey(d => d.IdUsuarioCancelou)
                    .HasConstraintName("FK_NotaEmitida_Usuario1");

                entity.HasOne(d => d.IdUsuarioEmitiuNavigation)
                    .WithMany(p => p.NotaEmitidaIdUsuarioEmitiuNavigation)
                    .HasForeignKey(d => d.IdUsuarioEmitiu)
                    .HasConstraintName("FK_NotaEmitida_Usuario");
            });

            modelBuilder.Entity<NotaEmitidaComplemento>(entity =>
            {
                entity.HasKey(e => e.IdNotaEmitida)
                    .HasName("NotaEmidida_Complemento_PK");

                entity.ToTable("NotaEmitida_Complemento");

                entity.Property(e => e.IdNotaEmitida)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdEmpresaPagante).HasColumnName("ID_EMPRESA_PAGANTE");

                entity.Property(e => e.IdExterno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXTERNO");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlLiquidoNota)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_LIQUIDO_NOTA");

                entity.Property(e => e.VlOutrosTributos)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_OUTROS_TRIBUTOS");

                entity.HasOne(d => d.IdEmpresaPaganteNavigation)
                    .WithMany(p => p.NotaEmitidaComplemento)
                    .HasForeignKey(d => d.IdEmpresaPagante)
                    .HasConstraintName("Operadora_EmpresaPagante_NotaEmitida_Complemento_FK1");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithOne(p => p.NotaEmitidaComplemento)
                    .HasForeignKey<NotaEmitidaComplemento>(d => d.IdNotaEmitida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("NotaEmitida_NotaEmidida_Complemento_FK1");
            });

            modelBuilder.Entity<NotaEmitidaConta>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdNotaEmitida })
                    .HasName("NotaEmitida_Conta_PK");

                entity.ToTable("NotaEmitida_Conta");

                entity.HasIndex(e => e.IdNotaEmitida, "IX_NotaEmitida_Conta_ID_NOTA_EMITIDA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdConta, "IX_NotaEmitida_Conta_K1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.NotaEmitidaConta)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaEmitida_Conta_Conta");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.NotaEmitidaConta)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaEmitida_Conta_NotaEmitida");
            });

            modelBuilder.Entity<NotaEmitidaContaLog>(entity =>
            {
                entity.HasKey(e => e.IdNotaEmitidaContaLog);

                entity.ToTable("NotaEmitida_Conta_Log");

                entity.Property(e => e.IdNotaEmitidaContaLog).HasColumnName("ID_NOTA_EMITIDA_CONTA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.NotaEmitidaContaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<NotaEmitidaFormaPagamento>(entity =>
            {
                entity.HasKey(e => e.IdNotaemitidaFormapagamento)
                    .HasName("PK_NotaEmitida_FormaPagamento_1");

                entity.ToTable("NotaEmitida_FormaPagamento");

                entity.HasIndex(e => e.IdNotaEmitida, "IX_NotaEmitida_FormaPagamento_ID_NOTA_EMITIDA")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdNotaemitidaFormapagamento).HasColumnName("ID_NOTAEMITIDA_FORMAPAGAMENTO");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.IdContaBancaria).HasColumnName("ID_CONTA_BANCARIA");

                entity.Property(e => e.IdFormaPagamento).HasColumnName("ID_FORMA_PAGAMENTO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLancamentoBancarioVinculado).HasColumnName("ID_LANCAMENTO_BANCARIO_VINCULADO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NrCpfCnpjResponsavel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CPF_CNPJ_RESPONSAVEL");

                entity.Property(e => e.TxAgencia)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_AGENCIA");

                entity.Property(e => e.TxBanco)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_BANCO");

                entity.Property(e => e.TxBandeira)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_BANDEIRA");

                entity.Property(e => e.TxContacorrente)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONTACORRENTE");

                entity.Property(e => e.TxDebitocredito)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_DEBITOCREDITO");

                entity.Property(e => e.TxNrautorizacao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_NRAUTORIZACAO");

                entity.Property(e => e.TxNrcartao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_NRCARTAO");

                entity.Property(e => e.TxNrcheque)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_NRCHEQUE");

                entity.Property(e => e.TxParcelas)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_PARCELAS");

                entity.Property(e => e.TxRegistro)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_REGISTRO");

                entity.Property(e => e.VlPagamento)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_PAGAMENTO");

                entity.HasOne(d => d.IdContaBancariaNavigation)
                    .WithMany(p => p.NotaEmitidaFormaPagamento)
                    .HasForeignKey(d => d.IdContaBancaria);

                entity.HasOne(d => d.IdFormaPagamentoNavigation)
                    .WithMany(p => p.NotaEmitidaFormaPagamento)
                    .HasForeignKey(d => d.IdFormaPagamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ID_FORMA_PAGAMENTO");

                entity.HasOne(d => d.IdLancamentoBancarioVinculadoNavigation)
                    .WithMany(p => p.NotaEmitidaFormaPagamento)
                    .HasForeignKey(d => d.IdLancamentoBancarioVinculado);

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.NotaEmitidaFormaPagamento)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ID_NOTA_EMITIDA");
            });

            modelBuilder.Entity<NotaEmitidaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdNotaEmitidaHistorico);

                entity.Property(e => e.IdNotaEmitidaHistorico).HasColumnName("ID_NOTA_EMITIDA_HISTORICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.DtRecebimentoTesouraria)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO_TESOURARIA");

                entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdResponsavel).HasColumnName("ID_RESPONSAVEL");

                entity.Property(e => e.IdSituacao).HasColumnName("ID_SITUACAO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCancelou).HasColumnName("ID_USUARIO_CANCELOU");

                entity.Property(e => e.IdUsuarioEmitiu).HasColumnName("ID_USUARIO_EMITIU");

                entity.Property(e => e.InEstrangeiro).HasColumnName("IN_ESTRANGEIRO");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NrCnpjResponsavel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CNPJ_RESPONSAVEL");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.PrAliquota)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ALIQUOTA");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.TxCidade)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_CIDADE");

                entity.Property(e => e.TxEndereco)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");

                entity.Property(e => e.TxJustificativaCancelamento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxPessoaAutorizouDesconto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_PESSOA_AUTORIZOU_DESCONTO");

                entity.Property(e => e.TxSerie)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlIss)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ISS");

                entity.Property(e => e.VlNotaEmitida)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_NOTA_EMITIDA");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.NotaEmitidaHistorico)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaEmitidaHistorico_NotaEmitida");

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.NotaEmitidaHistorico)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .HasConstraintName("FK_NotaEmitidaHistorico_Usuario");
            });

            modelBuilder.Entity<NotaEmitidaImposto>(entity =>
            {
                entity.HasKey(e => e.IdNotaEmitidaImposto);

                entity.ToTable("NotaEmitida_Imposto");

                entity.Property(e => e.IdNotaEmitidaImposto).HasColumnName("ID_NOTA_EMITIDA_IMPOSTO");

                entity.Property(e => e.IdImpostoIr).HasColumnName("ID_IMPOSTO_IR");

                entity.Property(e => e.IdImpostoIss).HasColumnName("ID_IMPOSTO_ISS");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.TxDiscriminacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DISCRIMINACAO");

                entity.Property(e => e.VlCofins).HasColumnName("VL_COFINS");

                entity.Property(e => e.VlCsll).HasColumnName("VL_CSLL");

                entity.Property(e => e.VlIr).HasColumnName("VL_IR");

                entity.Property(e => e.VlIss).HasColumnName("VL_ISS");

                entity.Property(e => e.VlPis).HasColumnName("VL_PIS");

                entity.Property(e => e.VlTotalRetido).HasColumnName("VL_TOTAL_RETIDO");
            });

            modelBuilder.Entity<NotaEmitidaSituacao>(entity =>
            {
                entity.HasKey(e => e.IdNotaEmitidaSituacao)
                    .HasName("NotaEmitidaSituacao_PK");

                entity.Property(e => e.IdNotaEmitidaSituacao)
                    .HasColumnName("ID_NOTA_EMITIDA_SITUACAO")
                    .HasComment("Identificador da situação de uma nota emitida");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasComment("Indicador de situação de nota emitida ativa ou excluída logicamente");

                entity.Property(e => e.NmNotaEmitidaSituacao)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_NOTA_EMITIDA_SITUACAO")
                    .HasComment("Descrição da situação de uma nota emitida");
            });

            modelBuilder.Entity<NotaEmitidaTemporaria>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

                entity.Property(e => e.IdNotaEmitida)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdSituacao).HasColumnName("ID_SITUACAO");

                entity.Property(e => e.IdUsuarioCancelou).HasColumnName("ID_USUARIO_CANCELOU");

                entity.Property(e => e.IdUsuarioEmitiu).HasColumnName("ID_USUARIO_EMITIU");

                entity.Property(e => e.NmResponsavel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RESPONSAVEL");

                entity.Property(e => e.NrCnpjResponsavel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_CNPJ_RESPONSAVEL");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.PrAliquota)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ALIQUOTA");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.TxJustificativaCancelamento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.TxPessoaAutorizouDesconto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_PESSOA_AUTORIZOU_DESCONTO");

                entity.Property(e => e.TxSerie)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERIE");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlIss)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ISS");

                entity.Property(e => e.VlNotaEmitida)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_NOTA_EMITIDA");
            });

            modelBuilder.Entity<NotaEntrada>(entity =>
            {
                entity.HasKey(e => e.IdNotaEntrada)
                    .HasName("NotaEntrada_PK");

                entity.HasIndex(e => e.DtEntrega, "IX_NotaEntrada")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DtEntrada, "IX_NotaEntrada_DT_ENTRADA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdFornecedor, "IX_NotaEntrada_ID_FORNECEDOR")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdTipoNota, e.IdFornecedor }, "IX_NotaEntrada_ID_TIPO_NOTA_ID_FORNECEDOR")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdTransportadora, "IX_NotaEntrada_ID_TRANSPORTADORA");

                entity.HasIndex(e => e.NrNotaFiscal, "IX_NotaEntrada_NR_NOTA_FISCAL")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.ArDocumentoNotaFiscal).HasColumnName("AR_DOCUMENTO_NOTA_FISCAL");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtEntrada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTRADA");

                entity.Property(e => e.DtEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTREGA");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdCentroCusto).HasColumnName("ID_CENTRO_CUSTO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdOrdemCompra).HasColumnName("ID_ORDEM_COMPRA");

                entity.Property(e => e.IdStatusNf).HasColumnName("ID_STATUS_NF");

                entity.Property(e => e.IdTipoCondPagto).HasColumnName("ID_TIPO_COND_PAGTO");

                entity.Property(e => e.IdTipoNota).HasColumnName("ID_TIPO_NOTA");

                entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

                entity.Property(e => e.IdUnidadeRecebimento).HasColumnName("ID_UNIDADE_RECEBIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmSerie)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERIE");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlDescontoNota)
                    .HasColumnType("money")
                    .HasColumnName("VL_DESCONTO_NOTA");

                entity.Property(e => e.VlFreteNota)
                    .HasColumnType("money")
                    .HasColumnName("VL_FRETE_NOTA");

                entity.Property(e => e.VlIsencaoIcms)
                    .HasColumnType("money")
                    .HasColumnName("VL_ISENCAO_ICMS");

                entity.Property(e => e.VlLiquido)
                    .HasColumnType("money")
                    .HasColumnName("VL_LIQUIDO");

                entity.Property(e => e.VlNotaFiscal)
                    .HasColumnType("money")
                    .HasColumnName("VL_NOTA_FISCAL");

                entity.Property(e => e.VlOutrasDespesas)
                    .HasColumnType("money")
                    .HasColumnName("VL_OUTRAS_DESPESAS");

                entity.HasOne(d => d.IdCondicaoPagamentoNavigation)
                    .WithMany(p => p.NotaEntrada)
                    .HasForeignKey(d => d.IdCondicaoPagamento)
                    .HasConstraintName("FK_NotaEntrada_CondicaoPagamento");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.NotaEntradaIdFornecedorNavigation)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaEntrada_Pessoa");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.NotaEntrada)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .HasConstraintName("FK_NotaEntrada_OrdemCompra");

                entity.HasOne(d => d.IdStatusNfNavigation)
                    .WithMany(p => p.NotaEntradaIdStatusNfNavigation)
                    .HasForeignKey(d => d.IdStatusNf)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaEntrada_TipoDiversos2");

                entity.HasOne(d => d.IdTipoCondPagtoNavigation)
                    .WithMany(p => p.NotaEntradaIdTipoCondPagtoNavigation)
                    .HasForeignKey(d => d.IdTipoCondPagto)
                    .HasConstraintName("FK_NotaEntrada_TipoDiversos1");

                entity.HasOne(d => d.IdTipoNotaNavigation)
                    .WithMany(p => p.NotaEntradaIdTipoNotaNavigation)
                    .HasForeignKey(d => d.IdTipoNota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaEntrada_TipoDiversos");

                entity.HasOne(d => d.IdTransportadoraNavigation)
                    .WithMany(p => p.NotaEntradaIdTransportadoraNavigation)
                    .HasForeignKey(d => d.IdTransportadora)
                    .HasConstraintName("FK_NotaEntrada_Pessoa1");
            });

            modelBuilder.Entity<NotaEntradaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdNotaEntradaHistorico)
                    .HasName("NotaEntradaHistorico_PK")
                    .IsClustered(false);

                entity.Property(e => e.IdNotaEntradaHistorico).HasColumnName("ID_NOTA_ENTRADA_HISTORICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTREGA");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdTipoCondPagto).HasColumnName("ID_TIPO_COND_PAGTO");

                entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.NmSerie)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERIE");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithMany(p => p.NotaEntradaHistorico)
                    .HasForeignKey(d => d.IdNotaEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("NotaEntrada_NotaEntradaHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.NotaEntradaHistorico)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaEntradaHistorico_Usuario");
            });

            modelBuilder.Entity<NotaEntradaProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdNotaEntradaProdutoDetalhe)
                    .HasName("NotaEntrada_ProdutoDetalhe_PK");

                entity.ToTable("NotaEntrada_ProdutoDetalhe");

                entity.HasIndex(e => e.IdNotaEntrada, "IX_NotaEntrada_ProdutoDetalhe_ID_NOTA_ENTRADA");

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_NotaEntrada_ProdutoDetalhe_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_NotaEntrada_ProdutoDetalhe_ID_PRODUTO_DETALHE_ID_FABRICANTE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdNotaEntrada }, "IX_NotaEntrada_ProdutoDetalhe_PRODUTO_DETALHE_NOTA_ENTRADA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdNotaEntrada, "_dta_index_NotaEntrada_ProdutoDetalhe_8_2119274905__K2_1_3")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdNotaEntradaProdutoDetalhe).HasColumnName("ID_NOTA_ENTRADA_PRODUTO_DETALHE");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdEmbalagem).HasColumnName("ID_EMBALAGEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InItemAntecipado).HasColumnName("IN_ITEM_ANTECIPADO");

                entity.Property(e => e.InLoteDesmembrado).HasColumnName("IN_LOTE_DESMEMBRADO");

                entity.Property(e => e.InProdutoEtiquetado).HasColumnName("IN_PRODUTO_ETIQUETADO");

                entity.Property(e => e.NrLote)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrIcms)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ICMS");

                entity.Property(e => e.PrIcmsSubstituicaoTributaria)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_ICMS_SUBSTITUICAO_TRIBUTARIA");

                entity.Property(e => e.PrIpi)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_IPI");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlFrete)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FRETE");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ICMS");

                entity.Property(e => e.VlIcmsSubstituicaoTributaria)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ICMS_SUBSTITUICAO_TRIBUTARIA");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_IPI");

                entity.Property(e => e.VlTotal)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_TOTAL");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.IdEmbalagemNavigation)
                    .WithMany(p => p.NotaEntradaProdutoDetalhe)
                    .HasForeignKey(d => d.IdEmbalagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Embalagem_NotaEntrada_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithMany(p => p.NotaEntradaProdutoDetalhe)
                    .HasForeignKey(d => d.IdNotaEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("NotaEntrada_NotaEntrada_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.NotaEntradaProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_NotaEntrada_ProdutoDetalhe_FK1");
            });

            modelBuilder.Entity<NotaExcluida>(entity =>
            {
                entity.HasKey(e => e.IdNotaExcluida)
                    .HasName("PK_NOTAEXCLUIDA");

                entity.Property(e => e.IdNotaExcluida).HasColumnName("ID_NOTA_EXCLUIDA");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTREGA");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdTipoNota).HasColumnName("ID_TIPO_NOTA");

                entity.Property(e => e.IdUsuarioExcluiu).HasColumnName("ID_USUARIO_EXCLUIU");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.VlNotaFiscal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_NOTA_FISCAL");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.NotaExcluida)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaExcluida_Pessoa");

                entity.HasOne(d => d.IdUsuarioExcluiuNavigation)
                    .WithMany(p => p.NotaExcluida)
                    .HasForeignKey(d => d.IdUsuarioExcluiu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotaExcluida_Usuario");
            });

            modelBuilder.Entity<NotaExcluidaProdutoDetalhe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NotaExcluida_ProdutoDetalhe");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdEmbalagem).HasColumnName("ID_EMBALAGEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdNotaEntradaProdutoDetalhe).HasColumnName("ID_NOTA_ENTRADA_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InItemAntecipado).HasColumnName("IN_ITEM_ANTECIPADO");

                entity.Property(e => e.InLoteDesmembrado).HasColumnName("IN_LOTE_DESMEMBRADO");

                entity.Property(e => e.InProdutoEtiquetado).HasColumnName("IN_PRODUTO_ETIQUETADO");

                entity.Property(e => e.NrLote)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrIcms)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ICMS");

                entity.Property(e => e.PrIcmsSubstituicaoTributaria)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_ICMS_SUBSTITUICAO_TRIBUTARIA");

                entity.Property(e => e.PrIpi)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_IPI");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlFrete)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FRETE");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ICMS");

                entity.Property(e => e.VlIcmsSubstituicaoTributaria)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ICMS_SUBSTITUICAO_TRIBUTARIA");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_IPI");

                entity.Property(e => e.VlTotal)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_TOTAL");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<NotaFiscalEletronica>(entity =>
            {
                entity.HasKey(e => e.IdNotaFiscalEletronica);

                entity.Property(e => e.IdNotaFiscalEletronica).HasColumnName("ID_NOTA_FISCAL_ELETRONICA");

                entity.Property(e => e.ArNotaFiscalEletronica).HasColumnName("AR_NOTA_FISCAL_ELETRONICA");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdSituacaoLote).HasColumnName("ID_SITUACAO_LOTE");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioProcessamento).HasColumnName("ID_USUARIO_PROCESSAMENTO");

                entity.Property(e => e.NrAnoEmissao).HasColumnName("NR_ANO_EMISSAO");

                entity.Property(e => e.NrChaveNotaFiscalEletronica)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("NR_CHAVE_NOTA_FISCAL_ELETRONICA");

                entity.Property(e => e.NrCodigoVerificacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_VERIFICACAO");

                entity.Property(e => e.NrLote).HasColumnName("NR_LOTE");

                entity.Property(e => e.NrNotaFiscalEletronica)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_NOTA_FISCAL_ELETRONICA");

                entity.Property(e => e.NrProtocoloRecebimentoRps)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_PROTOCOLO_RECEBIMENTO_RPS");

                entity.Property(e => e.NrRps).HasColumnName("NR_RPS");

                entity.Property(e => e.TxDados)
                    .HasColumnType("text")
                    .HasColumnName("TX_DADOS");
            });

            modelBuilder.Entity<NotaFiscalEletronicaLog>(entity =>
            {
                entity.HasKey(e => e.IdNotaFiscalEletronicaLog);

                entity.ToTable("NotaFiscalEletronica_Log");

                entity.Property(e => e.IdNotaFiscalEletronicaLog).HasColumnName("ID_NOTA_FISCAL_ELETRONICA_LOG");

                entity.Property(e => e.DtLog)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LOG");

                entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

                entity.Property(e => e.IdNotaFiscalEletronica).HasColumnName("ID_NOTA_FISCAL_ELETRONICA");

                entity.Property(e => e.TxLog)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOG");
            });

            modelBuilder.Entity<NotaFiscalEletronicaRetorno>(entity =>
            {
                entity.HasKey(e => e.IdNotaFiscalEletronicaRetorno);

                entity.ToTable("NotaFiscalEletronica_Retorno");

                entity.Property(e => e.IdNotaFiscalEletronicaRetorno).HasColumnName("ID_NOTA_FISCAL_ELETRONICA_RETORNO");

                entity.Property(e => e.CdCancelamentoNota)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CD_CANCELAMENTO_NOTA");

                entity.Property(e => e.CdMensagemAlerta)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CD_MENSAGEM_ALERTA");

                entity.Property(e => e.DtRetorno)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RETORNO");

                entity.Property(e => e.IdNotaFiscalEletronica).HasColumnName("ID_NOTA_FISCAL_ELETRONICA");

                entity.Property(e => e.TxDados)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_DADOS");

                entity.Property(e => e.TxDescricaoMensagemAlerta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_MENSAGEM_ALERTA");
            });

            modelBuilder.Entity<NotaentradaBiTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NOTAENTRADA_BI_TESTE");

                entity.Property(e => e.DiaSemanaEmissao).HasColumnName("DIA_SEMANA_EMISSAO");

                entity.Property(e => e.DiaSemanaEntrada).HasColumnName("DIA_SEMANA_ENTRADA");

                entity.Property(e => e.DiasuteisEntregaEntrada).HasColumnName("DIASUTEIS_ENTREGA_ENTRADA");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("date")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtEntrada)
                    .HasColumnType("date")
                    .HasColumnName("DT_ENTRADA");

                entity.Property(e => e.DtEntrega)
                    .HasColumnType("date")
                    .HasColumnName("DT_ENTREGA");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("date")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IcmsSubstituicaoTributaria)
                    .HasColumnType("money")
                    .HasColumnName("ICMS_SUBSTITUICAO_TRIBUTARIA");

                entity.Property(e => e.IdAnoMesEmissao).HasColumnName("ID_ANO_MES_EMISSAO");

                entity.Property(e => e.IdAnoMesEntrada).HasColumnName("ID_ANO_MES_ENTRADA");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.IdClassificacaoProduto).HasColumnName("ID_CLASSIFICACAO_PRODUTO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdListaMedControlado).HasColumnName("ID_LISTA_MED_CONTROLADO");

                entity.Property(e => e.IdNotaEntradaProdutoDetalhe).HasColumnName("ID_NOTA_ENTRADA_PRODUTO_DETALHE");

                entity.Property(e => e.IdPessoaLocalidade).HasColumnName("ID_PESSOA_LOCALIDADE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdSetorRecebimento).HasColumnName("ID_SETOR_RECEBIMENTO");

                entity.Property(e => e.IdTipoNota).HasColumnName("ID_TIPO_NOTA");

                entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

                entity.Property(e => e.IdUnidadeCompra).HasColumnName("ID_UNIDADE_COMPRA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAltocusto).HasColumnName("IN_ALTOCUSTO");

                entity.Property(e => e.InAntimicrobiano).HasColumnName("IN_ANTIMICROBIANO");

                entity.Property(e => e.InEstocavel).HasColumnName("IN_ESTOCAVEL");

                entity.Property(e => e.InPadronizado).HasColumnName("IN_PADRONIZADO");

                entity.Property(e => e.InProcessoCompra).HasColumnName("IN_PROCESSO_COMPRA");

                entity.Property(e => e.InProcessoConsignado).HasColumnName("IN_PROCESSO_CONSIGNADO");

                entity.Property(e => e.InProdutoEtiquetado).HasColumnName("IN_PRODUTO_ETIQUETADO");

                entity.Property(e => e.NmSerie)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERIE");

                entity.Property(e => e.NrLote)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.QnTotalItem).HasColumnName("QN_TOTAL_ITEM");

                entity.Property(e => e.VlCustoTotalItem)
                    .HasColumnType("decimal(21, 15)")
                    .HasColumnName("VL_CUSTO_TOTAL_ITEM");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(36, 10)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlFrete)
                    .HasColumnType("money")
                    .HasColumnName("VL_FRETE");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("money")
                    .HasColumnName("VL_ICMS");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("money")
                    .HasColumnName("VL_IPI");

                entity.Property(e => e.VlIsencaoIcms)
                    .HasColumnType("money")
                    .HasColumnName("VL_ISENCAO_ICMS");

                entity.Property(e => e.VlOutrasDespesas)
                    .HasColumnType("money")
                    .HasColumnName("VL_OUTRAS_DESPESAS");

                entity.Property(e => e.VlPrecoMedio)
                    .HasColumnType("money")
                    .HasColumnName("VL_PRECO_MEDIO");

                entity.Property(e => e.VlTotalItem)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_TOTAL_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<NotificacaoPendencia>(entity =>
            {
                entity.HasKey(e => e.IdNotificacaoPendencia)
                    .HasName("PK_NOTIFICACAO_PENDENCIA");

                entity.ToTable("Notificacao_Pendencia");

                entity.Property(e => e.IdNotificacaoPendencia).HasColumnName("ID_NOTIFICACAO_PENDENCIA");

                entity.Property(e => e.IdPendencia).HasColumnName("ID_PENDENCIA");

                entity.Property(e => e.XmlNotificacao)
                    .IsRequired()
                    .HasMaxLength(1500)
                    .IsUnicode(false)
                    .HasColumnName("XML_NOTIFICACAO");

                entity.HasOne(d => d.IdPendenciaNavigation)
                    .WithMany(p => p.NotificacaoPendencia)
                    .HasForeignKey(d => d.IdPendencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NOTIFICACAO_PENDENCIA_PENDENCIA");
            });

            modelBuilder.Entity<NovoControle>(entity =>
            {
                entity.HasKey(e => e.IdControle);

                entity.ToTable("Novo_Controle");

                entity.HasIndex(e => e.NmControle, "IX_Novo_Controle_K2_1_7")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.InAtivo, "IX_Novo_Controle_K7_1_2")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdControlePai, e.InAtivo, e.NmControle }, "_dta_index_Novo_Controle_7_1566224930__K5_K7_K2_1_3_4_6_8")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.IdAplicativo)
                    .HasColumnName("ID_APLICATIVO")
                    .HasComment("Aplicativo que o controle pertence");

                entity.Property(e => e.IdControlePai).HasColumnName("ID_CONTROLE_PAI");

                entity.Property(e => e.IdTipo).HasColumnName("ID_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Indica se o cotrole esta ativo ou nao");

                entity.Property(e => e.NmCaminho)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMINHO");

                entity.Property(e => e.NmControle)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTROLE");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES")
                    .HasComment("Observacoes sobre a pagina");

                entity.HasOne(d => d.IdAplicativoNavigation)
                    .WithMany(p => p.NovoControle)
                    .HasForeignKey(d => d.IdAplicativo)
                    .HasConstraintName("FK_Novo_Controle_Aplicativo");

                entity.HasOne(d => d.IdControlePaiNavigation)
                    .WithMany(p => p.InverseIdControlePaiNavigation)
                    .HasForeignKey(d => d.IdControlePai)
                    .HasConstraintName("FK_Novo_Controle_Novo_Controle");

                entity.HasOne(d => d.IdTipoNavigation)
                    .WithMany(p => p.NovoControle)
                    .HasForeignKey(d => d.IdTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Novo_Controle_Tipo_Novo_Controle");
            });

            modelBuilder.Entity<NovoControleAtributoAtributoCaracteristica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Novo_Controle_Atributo_AtributoCaracteristica");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdCaracteristica).HasColumnName("ID_CARACTERISTICA");

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.TxValorCaracteristica)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_CARACTERISTICA");
            });

            modelBuilder.Entity<NovoControlePerfil>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Novo_Controle_Perfil");

                entity.HasIndex(e => new { e.IdPerfil, e.IdControle }, "IX_DGA_ID_PERFIL_ID_CONTROLE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdControle, e.IdPerfil }, "IX_Novo_Controle_Perfil_K1_K2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.HasOne(d => d.IdControleNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdControle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Novo_Controle_Novo_Controle_Perfil_FK1");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Perfil_Novo_Controle_Perfil_FK1");
            });

            modelBuilder.Entity<Nutricionista>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Nutricionista");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<Nutriente>(entity =>
            {
                entity.HasKey(e => e.IdNutriente)
                    .HasName("Nutriente_PK");

                entity.Property(e => e.IdNutriente).HasColumnName("ID_NUTRIENTE");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmNutriente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_NUTRIENTE");

                entity.Property(e => e.SgNutriente)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SG_NUTRIENTE");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.Nutriente)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Nutriente_FK1");

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.NutrienteIdUsuarioAlteracaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Nutriente_FK1");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.NutrienteIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Nutriente_FK2");
            });

            modelBuilder.Entity<ObservacaoAgendacc>(entity =>
            {
                entity.HasKey(e => e.IdObsAgenda);

                entity.ToTable("ObservacaoAGENDACC");

                entity.Property(e => e.IdObsAgenda).HasColumnName("ID_OBS_AGENDA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxObservacaoAgenda)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_AGENDA");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.ObservacaoAgendacc)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_Pessoa_ObservacaoAGENDACC");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.ObservacaoAgendacc)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("FK_Recurso_ObservacaoAGENDACC");
            });

            modelBuilder.Entity<ObservacaoAgendasadt>(entity =>
            {
                entity.HasKey(e => e.IdObsAgenda);

                entity.ToTable("ObservacaoAGENDASADT");

                entity.HasIndex(e => e.IdMedico, "IX_ObservacaoAGENDASADT_ID_MEDICO");

                entity.Property(e => e.IdObsAgenda).HasColumnName("ID_OBS_AGENDA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxObservacaoAgenda)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_AGENDA");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.ObservacaoAgendasadt)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_Pessoa_ObservacaoAGENDASADT");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.ObservacaoAgendasadt)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("FK_Recurso_ObservacaoAGENDASADT");
            });

            modelBuilder.Entity<ObservacaoNutricional>(entity =>
            {
                entity.HasKey(e => e.IdObservacaonutricional)
                    .HasName("ObservacaoNutricional_PK");

                entity.HasIndex(e => e.IdAtendimento, "IX_ObservacaoNutricional_ID_ATENDIMENTO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdObservacaonutricional).HasColumnName("ID_OBSERVACAONUTRICIONAL");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ObservacaoNutricional)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_ObservacaoNutricional_FK1");

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.ObservacaoNutricionalIdUsuarioAlteracaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ObservacaoNutricional_FK1");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ObservacaoNutricionalIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ObservacaoNutricional_FK2");
            });

            modelBuilder.Entity<Ocupacao>(entity =>
            {
                entity.HasKey(e => e.IdOcupacao);

                entity.Property(e => e.IdOcupacao)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_OCUPACAO");

                entity.Property(e => e.CdOcupacao)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_OCUPACAO")
                    .IsFixedLength(true);

                entity.Property(e => e.TxDescOcupacao)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("TX_DESC_OCUPACAO");
            });

            modelBuilder.Entity<OcupacaoAgrupamento>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdOcupacao).HasColumnName("ID_OCUPACAO");

                entity.Property(e => e.IdOcupacaoAgrupado).HasColumnName("ID_OCUPACAO_AGRUPADO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");
            });

            modelBuilder.Entity<Odontologista>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Odontologista");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<Operador>(entity =>
            {
                entity.HasKey(e => e.IdOperador)
                    .HasName("Operador_PK");

                entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmOperador)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADOR");

                entity.Property(e => e.QtValores).HasColumnName("QT_VALORES");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxSimbolo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SIMBOLO");
            });

            modelBuilder.Entity<OperadorAtributoTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdOperador, e.IdAtributoTipo })
                    .HasName("Operador_AtributoTipo_PK");

                entity.ToTable("Operador_AtributoTipo");

                entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");

                entity.Property(e => e.IdAtributoTipo).HasColumnName("ID_ATRIBUTO_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoTipoNavigation)
                    .WithMany(p => p.OperadorAtributoTipo)
                    .HasForeignKey(d => d.IdAtributoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Operador_AtributoTipo_FK1");

                entity.HasOne(d => d.IdOperadorNavigation)
                    .WithMany(p => p.OperadorAtributoTipo)
                    .HasForeignKey(d => d.IdOperador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operador_Operador_AtributoTipo_FK1");
            });

            modelBuilder.Entity<Operadora>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Operadora");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdConvenioHmt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONVENIO_HMT");

                entity.Property(e => e.CdInscricaoEstadual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_ESTADUAL");

                entity.Property(e => e.CdInscricaoMunicipal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_MUNICIPAL");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DtInicioAtividade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_INICIO_ATIVIDADE");

                entity.Property(e => e.IdEmpresaTipo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EMPRESA_TIPO");

                entity.Property(e => e.IdFonteRemuneracao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_FONTE_REMUNERACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdOperadoraGrupoTipo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OPERADORA_GRUPO_TIPO");

                entity.Property(e => e.IdOperadoraTipo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OPERADORA_TIPO");

                entity.Property(e => e.InAtivada)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_ATIVADA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InPadrao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_PADRAO");

                entity.Property(e => e.InPessoaTipo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_PESSOA_TIPO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.QnBeneficiario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_BENEFICIARIO");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL");

                entity.Property(e => e.TxSite)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITE");
            });

            modelBuilder.Entity<OperadoraCodigoHospital>(entity =>
            {
                entity.HasKey(e => e.IdOperadoraCodigohospital);

                entity.ToTable("Operadora_CodigoHospital");

                entity.Property(e => e.IdOperadoraCodigohospital).HasColumnName("ID_OPERADORA_CODIGOHOSPITAL");

                entity.Property(e => e.CdHospitalOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CD_HOSPITAL_OPERADORA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraCodigoHospital)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Operadora_CodigoHospital_Pessoa");
            });

            modelBuilder.Entity<OperadoraEmpresaConveniada>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdOperadora })
                    .HasName("OperadoraEmpresaConveniada_PK");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InAtivada).HasColumnName("IN_ATIVADA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraEmpresaConveniadaIdOperadoraNavigation)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_OperadoraEmpresaConveniada_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.OperadoraEmpresaConveniadaIdPessoaNavigation)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_OperadoraEmpresaConveniada_FK1");
            });

            modelBuilder.Entity<OperadoraEmpresaPagante>(entity =>
            {
                entity.HasKey(e => e.IdEmpresaPagante)
                    .HasName("Operadora_EmpresaPagante_PK");

                entity.ToTable("Operadora_EmpresaPagante");

                entity.Property(e => e.IdEmpresaPagante).HasColumnName("ID_EMPRESA_PAGANTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.TxCnpj)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_CNPJ");

                entity.Property(e => e.TxContato)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONTATO");

                entity.Property(e => e.TxEndereco)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL");

                entity.Property(e => e.TxTelefone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraEmpresaPagante)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Operadora_EmpresaPagante_FK1");
            });

            modelBuilder.Entity<OperadoraEspecialidade>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdEspecialidade })
                    .HasName("Operadora_Especialidade_PK");

                entity.ToTable("Operadora_Especialidade");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdStatus)
                    .HasColumnName("ID_STATUS")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.OperadoraEspecialidade)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_Especialidade_Especialidade");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraEspecialidade)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_Especialidade_Pessoa");
            });

            modelBuilder.Entity<OperadoraEspecialidadeHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdEspecialidade, e.DtHistorico })
                    .HasName("Operadora_Especialidade_Historico_PK");

                entity.ToTable("Operadora_Especialidade_Historico");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OperadoraEspecialidadeHistorico)
                    .HasForeignKey(d => new { d.IdOperadora, d.IdEspecialidade })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_Especialidade_Operadora_Especialidade_Historico_FK1");
            });

            modelBuilder.Entity<OperadoraHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.DtOcorrencia, e.IdOperadoraOcorrenciaTipo })
                    .HasName("OperadoraHistorico_PK");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdOperadoraOcorrenciaTipo).HasColumnName("ID_OPERADORA_OCORRENCIA_TIPO");

                entity.Property(e => e.IdOperadoraJustificativaTipo).HasColumnName("ID_OPERADORA_JUSTIFICATIVA_TIPO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_OperadoraHistorico_FK1");

                entity.HasOne(d => d.IdOperadoraJustificativaTipoNavigation)
                    .WithMany(p => p.OperadoraHistoricoIdOperadoraJustificativaTipoNavigation)
                    .HasForeignKey(d => d.IdOperadoraJustificativaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OperadoraHistorico_FK1");

                entity.HasOne(d => d.IdOperadoraOcorrenciaTipoNavigation)
                    .WithMany(p => p.OperadoraHistoricoIdOperadoraOcorrenciaTipoNavigation)
                    .HasForeignKey(d => d.IdOperadoraOcorrenciaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OperadoraHistorico_FK2");
            });

            modelBuilder.Entity<OperadoraIss>(entity =>
            {
                entity.HasKey(e => e.IdOperadora)
                    .HasName("OperadoraISS_PK");

                entity.ToTable("OperadoraISS");

                entity.Property(e => e.IdOperadora)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_OPERADORA");

                entity.Property(e => e.PrIssGases)
                    .HasColumnName("PR_ISS_GASES")
                    .HasDefaultValueSql("(0.00)");

                entity.Property(e => e.PrIssMateriais)
                    .HasColumnName("PR_ISS_MATERIAIS")
                    .HasDefaultValueSql("(0.00)");

                entity.Property(e => e.PrIssMedicamentos)
                    .HasColumnName("PR_ISS_MEDICAMENTOS")
                    .HasDefaultValueSql("(0.00)");

                entity.Property(e => e.PrIssServicos)
                    .HasColumnName("PR_ISS_SERVICOS")
                    .HasDefaultValueSql("(0.00)");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithOne(p => p.OperadoraIss)
                    .HasForeignKey<OperadoraIss>(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_OperadoraISS_FK1");
            });

            modelBuilder.Entity<OperadoraModuloDigitoVerificador>(entity =>
            {
                entity.HasKey(e => new { e.IdModuloDigitoVerificador, e.IdOperadora })
                    .HasName("Operadora_ModuloDigitoVerificador_PK");

                entity.ToTable("Operadora_ModuloDigitoVerificador");

                entity.Property(e => e.IdModuloDigitoVerificador).HasColumnName("ID_MODULO_DIGITO_VERIFICADOR");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InCartao)
                    .IsRequired()
                    .HasColumnName("IN_CARTAO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InMatricula).HasColumnName("IN_MATRICULA");

                entity.HasOne(d => d.IdModuloDigitoVerificadorNavigation)
                    .WithMany(p => p.OperadoraModuloDigitoVerificador)
                    .HasForeignKey(d => d.IdModuloDigitoVerificador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ModuloDigitoVerificador_Operadora_ModuloDigitoVerificador_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraModuloDigitoVerificador)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Operadora_ModuloDigitoVerificador_FK1");
            });

            modelBuilder.Entity<OperadoraParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdParametro });

                entity.ToTable("Operadora_Parametro");

                entity.Property(e => e.IdOperadora)
                    .HasColumnName("ID_OPERADORA")
                    .HasComment("identificador da operadora (Pessoa)");

                entity.Property(e => e.IdParametro)
                    .HasColumnName("ID_PARAMETRO")
                    .HasComment("tipo tabela 422");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Exclusão lógica do registro, se a associação está ativa");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraParametro)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Operadora_Parametro_Pessoa");

                entity.HasOne(d => d.IdParametroNavigation)
                    .WithMany(p => p.OperadoraParametro)
                    .HasForeignKey(d => d.IdParametro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Operadora_Parametro_TipoDiversos");
            });

            modelBuilder.Entity<OperadoraParametroHistorico>(entity =>
            {
                entity.HasKey(e => e.IdOperadoraParametroHistorico);

                entity.ToTable("Operadora_ParametroHistorico");

                entity.Property(e => e.IdOperadoraParametroHistorico).HasColumnName("ID_OPERADORA_PARAMETRO_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdParametro).HasColumnName("ID_PARAMETRO");

                entity.Property(e => e.IdTipoHistorico).HasColumnName("ID_TIPO_HISTORICO");

                entity.Property(e => e.IdUsuarioOcorrencia).HasColumnName("ID_USUARIO_OCORRENCIA");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdUsuarioOcorrenciaNavigation)
                    .WithMany(p => p.OperadoraParametroHistorico)
                    .HasForeignKey(d => d.IdUsuarioOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Operadora_ParametroHistorico_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OperadoraParametroHistorico)
                    .HasForeignKey(d => new { d.IdOperadora, d.IdParametro })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_Parametro_Operadora_ParametroHistorico_FK1");
            });

            modelBuilder.Entity<OperadoraPlano>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Operadora_Plano");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoProdutoTabelaTipo).HasColumnName("ID_SERVICO_PRODUTO_TABELA_TIPO");

                entity.Property(e => e.InFaturamentoPlano).HasColumnName("IN_FATURAMENTO_PLANO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPlano)
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");
            });

            modelBuilder.Entity<OperadoraPlanoComVigencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Operadora_PlanoComVigencia");

                entity.Property(e => e.DtFinalVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoProdutoTabelaTipo).HasColumnName("ID_SERVICO_PRODUTO_TABELA_TIPO");

                entity.Property(e => e.InFaturamentoPlano).HasColumnName("IN_FATURAMENTO_PLANO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPlano)
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");
            });

            modelBuilder.Entity<OperadoraPlanoTesteDba>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Operadora_Plano_teste_dba");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoProdutoTabelaTipo).HasColumnName("ID_SERVICO_PRODUTO_TABELA_TIPO");

                entity.Property(e => e.InFaturamentoPlano).HasColumnName("IN_FATURAMENTO_PLANO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPlano)
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");
            });

            modelBuilder.Entity<OperadoraRecebimento>(entity =>
            {
                entity.HasKey(e => e.IdOperadorarecebimento);

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtImportacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPORTACAO");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.DtProcessamentoFinalizado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO_FINALIZADO");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipoArquivo)
                    .HasColumnName("ID_TIPO_ARQUIVO")
                    .HasDefaultValueSql("((8556))");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioLiberouProcessamento).HasColumnName("ID_USUARIO_LIBEROU_PROCESSAMENTO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InErroProcessamento).HasColumnName("IN_ERRO_PROCESSAMENTO");

                entity.Property(e => e.InRepasseLiberado).HasColumnName("IN_REPASSE_LIBERADO");

                entity.Property(e => e.InSomenteCargaXml).HasColumnName("IN_SOMENTE_CARGA_XML");

                entity.Property(e => e.QdArqRet).HasColumnName("QD_ARQ_RET");

                entity.Property(e => e.TxArquivoEnviado)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO_ENVIADO");

                entity.Property(e => e.TxArquivoLog)
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO_LOG");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxMsgErro)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ERRO");

                entity.Property(e => e.TxPastaXml)
                    .IsUnicode(false)
                    .HasColumnName("TX_PASTA_XML");

                entity.HasOne(d => d.IdLoteContaMapaNavigation)
                    .WithMany(p => p.OperadoraRecebimento)
                    .HasForeignKey(d => d.IdLoteContaMapa)
                    .HasConstraintName("OperadoraRecebimento_LoteContaMapa_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraRecebimento)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperadoraRecebimento_Operadora");

                entity.HasOne(d => d.IdTipoArquivoNavigation)
                    .WithMany(p => p.OperadoraRecebimento)
                    .HasForeignKey(d => d.IdTipoArquivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperadoraRecebimento_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OperadoraRecebimentoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperadoraRecebimento_Usuario_1");

                entity.HasOne(d => d.IdUsuarioLiberouProcessamentoNavigation)
                    .WithMany(p => p.OperadoraRecebimentoIdUsuarioLiberouProcessamentoNavigation)
                    .HasForeignKey(d => d.IdUsuarioLiberouProcessamento)
                    .HasConstraintName("FK_OperadoraRecebimento_Usuario_2");
            });

            modelBuilder.Entity<OperadoraRecebimentoLancamentoBancario>(entity =>
            {
                entity.HasKey(e => e.IdOperadorarecebimentolancamentobancario);

                entity.ToTable("OperadoraRecebimento_LancamentoBancario");

                entity.Property(e => e.IdOperadorarecebimentolancamentobancario).HasColumnName("ID_OPERADORARECEBIMENTOLANCAMENTOBANCARIO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrLancamentobancario).HasColumnName("NR_LANCAMENTOBANCARIO");

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.OperadoraRecebimentoLancamentoBancario)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .HasConstraintName("ORLB_LancamentoBancario_FK1");

                entity.HasOne(d => d.IdOperadorarecebimentoNavigation)
                    .WithMany(p => p.OperadoraRecebimentoLancamentoBancario)
                    .HasForeignKey(d => d.IdOperadorarecebimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperadoraRecebimento_LancamentoBancario_OperadoraRecebimento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OperadoraRecebimentoLancamentoBancario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperadoraRecebimento_LancamentoBancario_Usuario");
            });

            modelBuilder.Entity<OperadoraRecebimentoParcelaSemConciliacao>(entity =>
            {
                entity.HasKey(e => e.IdOperadorarecebimentoparcelasemconciliacao);

                entity.ToTable("OperadoraRecebimento_ParcelaSemConciliacao");

                entity.Property(e => e.IdOperadorarecebimentoparcelasemconciliacao).HasColumnName("ID_OPERADORARECEBIMENTOPARCELASEMCONCILIACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.IdTipoParcela).HasColumnName("ID_TIPO_PARCELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxJustificativa)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.VlSemconciliacao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_SEMCONCILIACAO");

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.OperadoraRecebimentoParcelaSemConciliacao)
                    .HasForeignKey(d => d.IdLancamentoBancario)
                    .HasConstraintName("FK_ORPSC_LancamentoBancario_ID_LANCAMENTO_BANCARIO");

                entity.HasOne(d => d.IdOperadorarecebimentoNavigation)
                    .WithMany(p => p.OperadoraRecebimentoParcelaSemConciliacao)
                    .HasForeignKey(d => d.IdOperadorarecebimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperReceb_ParcelaSemConciliacao_OperReceb");

                entity.HasOne(d => d.IdTipoParcelaNavigation)
                    .WithMany(p => p.OperadoraRecebimentoParcelaSemConciliacao)
                    .HasForeignKey(d => d.IdTipoParcela)
                    .HasConstraintName("FK_ORPSC_TipoDiversos_ID_TIPO_PARCELA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OperadoraRecebimentoParcelaSemConciliacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperReceb_ParcelaSemConciliacao_Usuario");
            });

            modelBuilder.Entity<OperadoraRecebimentoRetornoArquivo>(entity =>
            {
                entity.HasKey(e => e.IdOperadorarecebimentoretornoarquivo);

                entity.ToTable("OperadoraRecebimento_RetornoArquivo");

                entity.Property(e => e.IdOperadorarecebimentoretornoarquivo).HasColumnName("ID_OPERADORARECEBIMENTORETORNOARQUIVO");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.IdRetornoArquivo).HasColumnName("ID_RETORNO_ARQUIVO");

                entity.HasOne(d => d.IdOperadorarecebimentoNavigation)
                    .WithMany(p => p.OperadoraRecebimentoRetornoArquivo)
                    .HasForeignKey(d => d.IdOperadorarecebimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperadoraRecebimento_RetornoArquivo_OperadoraRecebimento1");

                entity.HasOne(d => d.IdRetornoArquivoNavigation)
                    .WithMany(p => p.OperadoraRecebimentoRetornoArquivo)
                    .HasForeignKey(d => d.IdRetornoArquivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperadoraRecebimento_RetornoArquivo_RetornoArquivo1");
            });

            modelBuilder.Entity<OperadoraTributoCobranca>(entity =>
            {
                entity.HasKey(e => e.IdTributo)
                    .HasName("OperadoraTributoCobranca_PK");

                entity.Property(e => e.IdTributo).HasColumnName("ID_TRIBUTO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InRetidoFonte).HasColumnName("IN_RETIDO_FONTE");

                entity.Property(e => e.TxDescTributo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TRIBUTO");

                entity.Property(e => e.TxLei)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_LEI");

                entity.Property(e => e.VlAlicota).HasColumnName("VL_ALICOTA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OperadoraTributoCobranca)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_OperadoraTributoCobranca_FK1");
            });

            modelBuilder.Entity<OperadoraUnidadeOrganizacionalChHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdUnidadeOrganizacional, e.DtVigencia })
                    .HasName("TaxaAcrescimo_HistoricoCH_PK");

                entity.ToTable("Operadora_UnidadeOrganizacional_CH_Historico");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlTaxaAcrescimoHonorario).HasColumnName("VL_TAXA_ACRESCIMO_HONORARIO");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OperadoraUnidadeOrganizacionalChHistorico)
                    .HasForeignKey(d => new { d.IdOperadora, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Operadora_UnidadeOrganizacional_CH_Historico_Operadora_UnidadeOrganizacional_Credenciada");
            });

            modelBuilder.Entity<OperadoraUnidadeOrganizacionalCredenciada>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdUnidadeOrganizacional })
                    .HasName("Operadora_UnidadeOrganizacional_Credenciada_PK");

                entity.ToTable("Operadora_UnidadeOrganizacional_Credenciada");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdTipoRepasse).HasColumnName("ID_TIPO_REPASSE");

                entity.Property(e => e.InEnvioAutomaticoContaLote).HasColumnName("IN_ENVIO_AUTOMATICO_CONTA_LOTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxInstrucaoAtendimento)
                    .HasColumnType("text")
                    .HasColumnName("TX_INSTRUCAO_ATENDIMENTO");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlTaxaAcrescimoHonorario).HasColumnName("VL_TAXA_ACRESCIMO_HONORARIO");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.OperadoraUnidadeOrganizacionalCredenciada)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Operadora_UnidadeOrganizacional_Credenciada_FK1");

                entity.HasOne(d => d.IdTipoRepasseNavigation)
                    .WithMany(p => p.OperadoraUnidadeOrganizacionalCredenciada)
                    .HasForeignKey(d => d.IdTipoRepasse)
                    .HasConstraintName("FK_Operadora_UnidadeOrganizacional_Credenciada_TipoDiversos");
            });

            modelBuilder.Entity<OperadoraUnidadeOrganizacionalHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdOperadora, e.DtHistorico })
                    .HasName("Operadora_UnidadeOrganizacional_Historico_PK");

                entity.ToTable("Operadora_UnidadeOrganizacional_Historico");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InEnvioAutomaticoContaLote).HasColumnName("IN_ENVIO_AUTOMATICO_CONTA_LOTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OperadoraUnidadeOrganizacionalHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Operadora_UnidadeOrganizacional_Historico_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OperadoraUnidadeOrganizacionalHistorico)
                    .HasForeignKey(d => new { d.IdOperadora, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_UnidadeOrganizacional_Credenciada_Operadora_UnidadeOrganizacional_Historico_FK1");
            });

            modelBuilder.Entity<OrcamentoOrcamento>(entity =>
            {
                entity.HasKey(e => e.IdOrcamentoOrcamento);

                entity.Property(e => e.IdOrcamentoOrcamento)
                    .HasColumnName("ID_ORCAMENTO_ORCAMENTO")
                    .HasComment("Identificador único do orçamento.");

                entity.Property(e => e.DtOrcamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ORCAMENTO")
                    .HasComment("Armazena a data em que o orçamento foi realizado pela tesouraria.");

                entity.Property(e => e.IdOrcamentoSolicitacao)
                    .HasColumnName("ID_ORCAMENTO_SOLICITACAO")
                    .HasComment("Idenditificador único da solicitação.");

                entity.Property(e => e.IdServico)
                    .HasColumnName("ID_SERVICO")
                    .HasComment("Identificador do Procedimento.");

                entity.Property(e => e.TxObservacaoTesouraria)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_TESOURARIA");

                entity.Property(e => e.ValorTotalOrcamento)
                    .HasColumnName("VALOR_TOTAL_ORCAMENTO")
                    .HasComment("Valor total do orçamento.");

                entity.Property(e => e.VlMateriaisMedicamentos)
                    .HasColumnName("VL_MATERIAIS_MEDICAMENTOS")
                    .HasComment("Valores para materiais e medicamentos.");

                entity.Property(e => e.VlServicosHospitalares)
                    .HasColumnName("VL_SERVICOS_HOSPITALARES")
                    .HasComment("Valores de serviços hospitalares.");
            });

            modelBuilder.Entity<OrcamentoProcedimento>(entity =>
            {
                entity.HasKey(e => e.IdOrcamento)
                    .HasName("PK__Orcament__79D5C22D308DFEA0");

                entity.Property(e => e.IdOrcamento).HasColumnName("ID_ORCAMENTO");

                entity.Property(e => e.DtOrcamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ORCAMENTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdUsuarioCriador).HasColumnName("ID_USUARIO_CRIADOR");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmPaciente)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.OrcamentoProcedimento)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK__Orcamento__ID_PL__345E8F84");

                entity.HasOne(d => d.IdUsuarioCriadorNavigation)
                    .WithMany(p => p.OrcamentoProcedimento)
                    .HasForeignKey(d => d.IdUsuarioCriador)
                    .HasConstraintName("FK__Orcamento__ID_US__336A6B4B");
            });

            modelBuilder.Entity<OrcamentoProcedimentoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdOrcamento, e.IdServico })
                    .HasName("PK__Orcament__8A358F69382F2068");

                entity.ToTable("OrcamentoProcedimento_Servico");

                entity.Property(e => e.IdOrcamento).HasColumnName("ID_ORCAMENTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrQuantidade).HasColumnName("NR_QUANTIDADE");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdOrcamentoNavigation)
                    .WithMany(p => p.OrcamentoProcedimentoServico)
                    .HasForeignKey(d => d.IdOrcamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orcamento__ID_OR__3A1768DA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.OrcamentoProcedimentoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orcamento__ID_SE__3B0B8D13");
            });

            modelBuilder.Entity<OrcamentoSolicitacao>(entity =>
            {
                entity.HasKey(e => e.IdOrcamentoSolicitacao)
                    .HasName("PK_Orcamento");

                entity.Property(e => e.IdOrcamentoSolicitacao)
                    .HasColumnName("ID_ORCAMENTO_SOLICITACAO")
                    .HasComment("Identificador único da sollicitação.");

                entity.Property(e => e.DescricaoProcedimento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO_PROCEDIMENTO")
                    .HasComment("Nome do procedimento a ser realizado.");

                entity.Property(e => e.DtCirurgia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CIRURGIA")
                    .HasComment("Armazema a data da cirurgica.");

                entity.Property(e => e.DtNascimento)
                    .HasColumnType("date")
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.DtSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO")
                    .HasComment("Armazena a data em que foi realizada a solicitação.");

                entity.Property(e => e.IdMedico)
                    .HasColumnName("ID_MEDICO")
                    .HasComment("Identificador do médico solicitante.");

                entity.Property(e => e.IdPessoa)
                    .HasColumnName("ID_PESSOA")
                    .HasComment("Identificador para a tabela pessoa. Caso o paciente seja cadastrado");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.IdStatus)
                    .HasColumnName("ID_STATUS")
                    .HasComment("Status em que a solicitação se encontra no momento.");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("Identificador único do usuário solicitante. FK para tabela Usuario.");

                entity.Property(e => e.NmPaciente)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE")
                    .HasComment("Nome do paciente. É preenchido caso o paciente não tenha sido cadastrado.");

                entity.Property(e => e.NrIdadePaciente)
                    .HasColumnName("NR_IDADE_PACIENTE")
                    .HasComment("Idade do paciente.");

                entity.Property(e => e.TxEmailMedico)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_EMAIL_MEDICO")
                    .HasComment("E-mail do médico solicitante.");

                entity.Property(e => e.TxEmailPaciente)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_EMAIL_PACIENTE")
                    .HasComment("Armazena o e-mail do paciente");

                entity.Property(e => e.TxObservacaoMedico)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_MEDICO");

                entity.Property(e => e.TxTelefoneCelular)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_CELULAR")
                    .HasComment("Armazena o telefone celular do paciente");

                entity.Property(e => e.TxTelefoneResidencial)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_TELEFONE_RESIDENCIAL")
                    .HasComment("Armazena o telefone residencial do paciente.");
            });

            modelBuilder.Entity<OrcamentoSolicitacaoHotelaria>(entity =>
            {
                entity.HasKey(e => e.IdOrcamentoSolicitacaoHotelaria);

                entity.Property(e => e.IdOrcamentoSolicitacaoHotelaria)
                    .HasColumnName("ID_ORCAMENTO_SOLICITACAO_HOTELARIA")
                    .HasComment("Identificador único.");

                entity.Property(e => e.IdOrcamentoSolicitacao)
                    .HasColumnName("ID_ORCAMENTO_SOLICITACAO")
                    .HasComment("Identificador (FK) para a tabela OrcamentoSolicitacao.");

                entity.Property(e => e.IdTipoAcomodacao)
                    .HasColumnName("ID_TIPO_ACOMODACAO")
                    .HasComment("Identificador (FK) para a tabela TipoDiversos.");

                entity.Property(e => e.QnDiarias)
                    .HasColumnName("QN_DIARIAS")
                    .HasComment("Quantidade de Diárias desejadas para cada acomodação.");

                entity.HasOne(d => d.IdOrcamentoSolicitacaoNavigation)
                    .WithMany(p => p.OrcamentoSolicitacaoHotelaria)
                    .HasForeignKey(d => d.IdOrcamentoSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentoSolicitacaoHotelaria_OrcamentoSolicitacao1");

                entity.HasOne(d => d.IdTipoAcomodacaoNavigation)
                    .WithMany(p => p.OrcamentoSolicitacaoHotelaria)
                    .HasForeignKey(d => d.IdTipoAcomodacao)
                    .HasConstraintName("FK_OrcamentoSolicitacaoHotelaria_TipoDiversos");
            });

            modelBuilder.Entity<OrcamentoSolicitacaoOpme>(entity =>
            {
                entity.HasKey(e => e.IdOrcamentoSolicitacaoOpme)
                    .HasName("PK_OPME");

                entity.ToTable("OrcamentoSolicitacaoOPME");

                entity.Property(e => e.IdOrcamentoSolicitacaoOpme)
                    .HasColumnName("ID_ORCAMENTO_SOLICITACAO_OPME")
                    .HasComment("Identificador único da tabela.");

                entity.Property(e => e.DescricaoOpme)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO_OPME")
                    .HasComment("Nome do produto. Descrição da OPME.");

                entity.Property(e => e.IdOrcamentoSolicitacao)
                    .HasColumnName("ID_ORCAMENTO_SOLICITACAO")
                    .HasComment("Identificador único da solicitação (OrcamentoSolicitação).");

                entity.Property(e => e.NmFornecedor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_FORNECEDOR")
                    .HasComment("Fornecedor do produto.");

                entity.Property(e => e.QnOpme)
                    .HasColumnName("QN_OPME")
                    .HasComment("Quantidade necessária do item OPME.");
            });

            modelBuilder.Entity<OrcamentoValoresHotelaria>(entity =>
            {
                entity.HasKey(e => e.IdOrcamentoValoresHotelaria);

                entity.Property(e => e.IdOrcamentoValoresHotelaria)
                    .HasColumnName("ID_ORCAMENTO_VALORES_HOTELARIA")
                    .HasComment("Identificador único para a tabela.");

                entity.Property(e => e.IdOrcamentoOrcamento)
                    .HasColumnName("ID_ORCAMENTO_ORCAMENTO")
                    .HasComment("Identificador (FK) para a tabela OrcamentoOrcamento.");

                entity.Property(e => e.IdTipoAcomodacao)
                    .HasColumnName("ID_TIPO_ACOMODACAO")
                    .HasComment("Identificador (FK) para a tabela TipoDiversos.");

                entity.Property(e => e.QnDiarias)
                    .HasColumnName("QN_DIARIAS")
                    .HasComment("Quantidade de diárias necessárias. Informado pela tesouraria.");

                entity.Property(e => e.VlDiarias)
                    .HasColumnName("VL_DIARIAS")
                    .HasComment("Valor das diárias para cada acomodação.");

                entity.HasOne(d => d.IdOrcamentoOrcamentoNavigation)
                    .WithMany(p => p.OrcamentoValoresHotelaria)
                    .HasForeignKey(d => d.IdOrcamentoOrcamento)
                    .HasConstraintName("FK_OrcamentoValoresHotelaria_OrcamentoOrcamento");

                entity.HasOne(d => d.IdTipoAcomodacaoNavigation)
                    .WithMany(p => p.OrcamentoValoresHotelaria)
                    .HasForeignKey(d => d.IdTipoAcomodacao)
                    .HasConstraintName("FK_OrcamentoValoresHotelaria_TipoDiversos");
            });

            modelBuilder.Entity<OrcamentoValoresOpme>(entity =>
            {
                entity.HasKey(e => e.IdOrcamentoValoresOpme);

                entity.ToTable("OrcamentoValoresOPME");

                entity.Property(e => e.IdOrcamentoValoresOpme)
                    .HasColumnName("ID_ORCAMENTO_VALORES_OPME")
                    .HasComment("Identificador único ");

                entity.Property(e => e.IdFornecedor)
                    .HasColumnName("ID_FORNECEDOR")
                    .HasComment("Identificador único do fornecedor. ");

                entity.Property(e => e.IdOrcamentoOrcamento)
                    .HasColumnName("ID_ORCAMENTO_ORCAMENTO")
                    .HasComment("Identificador único. Foreign key tabela OrcamentoOrcamento.");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("Identificador único (FK) para a tabela ProdutoDetalhe.");

                entity.Property(e => e.QnOpme)
                    .HasColumnName("QN_OPME")
                    .HasComment("Quantidade do item OPME.");

                entity.Property(e => e.VlUnitarioOpme)
                    .HasColumnName("VL_UNITARIO_OPME")
                    .HasComment("Valor unitário do OPME.");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.OrcamentoValoresOpme)
                    .HasForeignKey(d => d.IdFornecedor)
                    .HasConstraintName("FK_OrcamentoValoresOPME_Pessoa");

                entity.HasOne(d => d.IdOrcamentoOrcamentoNavigation)
                    .WithMany(p => p.OrcamentoValoresOpme)
                    .HasForeignKey(d => d.IdOrcamentoOrcamento)
                    .HasConstraintName("FK_OrcamentoValoresOPME_OrcamentoOrcamento");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.OrcamentoValoresOpme)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentoValoresOPME_ProdutoDetalhe");
            });

            modelBuilder.Entity<OrcamentoValoresOutrosItens>(entity =>
            {
                entity.HasKey(e => e.IdOrcamentoValoresOutros);

                entity.Property(e => e.IdOrcamentoValoresOutros).HasColumnName("ID_ORCAMENTO_VALORES_OUTROS");

                entity.Property(e => e.DescricaoOutros)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO_OUTROS");

                entity.Property(e => e.IdOrcamentoOrcamento).HasColumnName("ID_ORCAMENTO_ORCAMENTO");

                entity.Property(e => e.QnOutros).HasColumnName("QN_OUTROS");

                entity.Property(e => e.VlItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ITEM");

                entity.HasOne(d => d.IdOrcamentoOrcamentoNavigation)
                    .WithMany(p => p.OrcamentoValoresOutrosItens)
                    .HasForeignKey(d => d.IdOrcamentoOrcamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrcamentoValoresOutrosItens_OrcamentoOrcamento");
            });

            modelBuilder.Entity<OrdemCompra>(entity =>
            {
                entity.HasKey(e => e.IdOrdemCompra)
                    .HasName("OrdemCompra_PK");

                entity.HasIndex(e => e.IdCotacao, "IX_OrdemCompra_ID_COTACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdFornecedor, e.IdStatus }, "IX_OrdemCompra_ID_FORNECEDOR_ID_STATUS")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdStatus, "IX_OrdemCompra_ID_STATUS")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdOrdemCompra)
                    .HasColumnName("ID_ORDEM_COMPRA")
                    .HasComment("PK da tabela. Identificador único.");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO")
                    .HasComment("Data da autorização da ordem para envio ao fornecedor.");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO")
                    .HasComment("Data de cancelamento da ordem de compra.");

                entity.Property(e => e.DtEnvioFornecedor)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENVIO_FORNECEDOR")
                    .HasComment("Data de Envio da ordem de compra para o Fornecedor.");

                entity.Property(e => e.DtOrdemCompra)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ORDEM_COMPRA")
                    .HasComment("Data de criação da ordem de compra.\r\n");

                entity.Property(e => e.DtSolicitacaoAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO_AUTORIZACAO")
                    .HasComment("Data da autorização da ordem para envio ao fornecedor.");

                entity.Property(e => e.IdComprador)
                    .HasColumnName("ID_COMPRADOR")
                    .HasComment("Id do comprador que gerou a ordem de compra.");

                entity.Property(e => e.IdCondicaoPagamento)
                    .HasColumnName("ID_CONDICAO_PAGAMENTO")
                    .HasComment("Condição de pagamento da ordem de compra. FK com CondicaoPagamento\r\n");

                entity.Property(e => e.IdCotacao)
                    .HasColumnName("ID_COTACAO")
                    .HasComment("Id da cotação associada com a Ordem de Compra. FK com Cotacao.");

                entity.Property(e => e.IdEnquadramentoFiscal).HasColumnName("ID_ENQUADRAMENTO_FISCAL");

                entity.Property(e => e.IdFornecedor)
                    .HasColumnName("ID_FORNECEDOR")
                    .HasComment("Id do fornecedor que irá atender a Ordem de Compra.");

                entity.Property(e => e.IdPessoaAutorizou)
                    .HasColumnName("ID_PESSOA_AUTORIZOU")
                    .HasComment("Usuário que autorizou a ordem de compra.\r\n");

                entity.Property(e => e.IdStatus)
                    .HasColumnName("ID_STATUS")
                    .HasComment("Status da Ordem de Compra. FK com TipoDiversos.\r\n");

                entity.Property(e => e.IdUsuarioCancelou)
                    .HasColumnName("ID_USUARIO_CANCELOU")
                    .HasComment("Id do usuário que cancelou a ordem de compra.");

                entity.Property(e => e.InEnviaNota).HasColumnName("IN_ENVIA_NOTA");

                entity.Property(e => e.PzEntrega)
                    .HasColumnName("PZ_ENTREGA")
                    .HasComment("Prazo de entrega dos produtos.");

                entity.Property(e => e.TxFeedback)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_FEEDBACK");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("Texto livre para alguma observação na ordem de compra.\r\n");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_DESCONTO")
                    .HasComment("Valor do Desconto.\r\n");

                entity.Property(e => e.VlFrete)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FRETE")
                    .HasComment("Valor do frete.");

                entity.Property(e => e.VlOrdemCompra)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_ORDEM_COMPRA")
                    .HasComment("Valor da Ordem de Compra.\r\n");

                entity.HasOne(d => d.IdCondicaoPagamentoNavigation)
                    .WithMany(p => p.OrdemCompra)
                    .HasForeignKey(d => d.IdCondicaoPagamento)
                    .HasConstraintName("FK_OrdemCompra_CondicaoPagamento");

                entity.HasOne(d => d.IdEnquadramentoFiscalNavigation)
                    .WithMany(p => p.OrdemCompra)
                    .HasForeignKey(d => d.IdEnquadramentoFiscal)
                    .HasConstraintName("FK_EnquadramentoFiscal");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.OrdemCompra)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemCompra_Pessoa");
            });

            modelBuilder.Entity<OrdemCompraAdiantamento>(entity =>
            {
                entity.HasKey(e => e.IdOrdemCompraAdiantamento);

                entity.ToTable("OrdemCompra_Adiantamento");

                entity.Property(e => e.IdOrdemCompraAdiantamento).HasColumnName("ID_ORDEM_COMPRA_ADIANTAMENTO");

                entity.Property(e => e.DtInclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INCLUSAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdOrdemCompra).HasColumnName("ID_ORDEM_COMPRA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VlAdiantamento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ADIANTAMENTO");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.OrdemCompraAdiantamento)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OrdemCompraAdiantamento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<OrdemCompraCaracteristica>(entity =>
            {
                entity.HasKey(e => e.IdOrdemCompraCaracteristica);

                entity.ToTable("OrdemCompra_Caracteristica");

                entity.Property(e => e.IdOrdemCompraCaracteristica)
                    .HasColumnName("ID_ORDEM_COMPRA_CARACTERISTICA")
                    .HasComment("PK da Tabela. Identificador único.");

                entity.Property(e => e.IdAtributo)
                    .HasColumnName("ID_ATRIBUTO")
                    .HasComment("Atributo que representa alguma infomção. FK com Atributo.");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.IdEmpresa)
                    .HasColumnName("ID_EMPRESA")
                    .HasComment("ID da Empresa que está rodando a aplicação. FK com Pessoa.\r\n");

                entity.Property(e => e.TxValorAtributo)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_ATRIBUTO")
                    .HasComment("Valor que associa ao atributo.\r\n");

                entity.HasOne(d => d.IdEmpresaNavigation)
                    .WithMany(p => p.OrdemCompraCaracteristica)
                    .HasForeignKey(d => d.IdEmpresa)
                    .HasConstraintName("FK_OrdemCompra_Caracteristica_Pessoa");
            });

            modelBuilder.Entity<OrdemCompraNotaEntrada>(entity =>
            {
                entity.HasKey(e => e.IdOrdemCompraNotaEntrada)
                    .HasName("PK_OrdemCompra_NotaEntrada_1");

                entity.ToTable("OrdemCompra_NotaEntrada");

                entity.HasIndex(e => e.IdNotaEntrada, "IX_OrdemCompra_NotaEntrada_ID_NOTA_ENTRADA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdOrdemCompra, "IX_OrdemCompra_NotaEntrada_ID_ORDEM_COMPRA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_OrdemCompra_NotaEntrada_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdOrdemCompraNotaEntrada)
                    .HasColumnName("ID_ORDEM_COMPRA_NOTA_ENTRADA")
                    .HasComment("PK da tabela. Identificador único.\r\n");

                entity.Property(e => e.IdNotaEntrada)
                    .HasColumnName("ID_NOTA_ENTRADA")
                    .HasComment("ID da Nota Fiscal. FK com NotaEntrada.\r\n");

                entity.Property(e => e.IdOrdemCompra)
                    .HasColumnName("ID_ORDEM_COMPRA")
                    .HasComment("ID da Ordem de Compra. FK com OdemCompra");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("Id do Produto detalhe.\r\n");

                entity.Property(e => e.QnProduto)
                    .HasColumnName("QN_PRODUTO")
                    .HasComment("Quantidade do produto.");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithMany(p => p.OrdemCompraNotaEntrada)
                    .HasForeignKey(d => d.IdNotaEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemCompra_NotaEntrada_NotaEntrada");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.OrdemCompraNotaEntrada)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemCompra_NotaEntrada_OrdemCompra_NotaEntrada");
            });

            modelBuilder.Entity<OrdemCompraProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => new { e.IdFabricante, e.IdProdutoDetalhe, e.IdOrdemCompra })
                    .HasName("OrdemCompra_ProdutoDetalhe_PK");

                entity.ToTable("OrdemCompra_ProdutoDetalhe");

                entity.HasIndex(e => new { e.IdOrdemCompra, e.VlTotal }, "IX_OrdemCompra_ProdutoDetalhe_ID_ORDEM_COMPRA_VL_TOTAL")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_OrdemCompra_ProdutoDetalhe_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("PK da Tabela. FK com ProdutoDetalhe_Fabricante\r\n");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK da tabela. FK com ProdutoDetalhe_Fabricante.");

                entity.Property(e => e.IdOrdemCompra)
                    .HasColumnName("ID_ORDEM_COMPRA")
                    .HasComment("PK da tabela. FK com OrdemCompra.");

                entity.Property(e => e.IdEmbalagem)
                    .HasColumnName("ID_EMBALAGEM")
                    .HasComment("ID da Embalagem associada ao produto. FK com Embalagem.\r\n");

                entity.Property(e => e.InBoaCompra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_BOA_COMPRA")
                    .IsFixedLength(true)
                    .HasComment("Flag para indicar se é uma boa compra.");

                entity.Property(e => e.InEntregaConcluida).HasColumnName("IN_ENTREGA_CONCLUIDA");

                entity.Property(e => e.InUltimaCompra)
                    .HasColumnName("IN_ULTIMA_COMPRA")
                    .HasComment("Flag que informa se foi a ultima compra do produto.");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasComment("Desconto em percentual.\r\n");

                entity.Property(e => e.PrIcms)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_ICMS")
                    .HasComment("ICMS em percentual.");

                entity.Property(e => e.PrIpi)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_IPI")
                    .HasComment("IPI em percentual.");

                entity.Property(e => e.QnProduto)
                    .HasColumnName("QN_PRODUTO")
                    .HasComment("Quantidade do produto.");

                entity.Property(e => e.QnProdutoEntregue)
                    .HasColumnName("QN_PRODUTO_ENTREGUE")
                    .HasComment("Quantidade entregue do produto.");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_DESCONTO")
                    .HasComment("Valor de desconto.");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_ICMS")
                    .HasComment("Valor do ICMS.\r\n");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_IPI")
                    .HasComment("Valor do IPI.\r\n");

                entity.Property(e => e.VlTotal)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_TOTAL")
                    .HasComment("Valor total do produto.");

                entity.Property(e => e.VlUnitarioProduto)
                    .HasColumnType("decimal(13, 5)")
                    .HasColumnName("VL_UNITARIO_PRODUTO")
                    .HasComment("Valor unitário do Produto.\r\n");

                entity.HasOne(d => d.IdEmbalagemNavigation)
                    .WithMany(p => p.OrdemCompraProdutoDetalhe)
                    .HasForeignKey(d => d.IdEmbalagem)
                    .HasConstraintName("Embalagem_OrdemCompra_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.OrdemCompraProdutoDetalhe)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemCompra_OrdemCompra_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OrdemCompraProdutoDetalhe)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_OrdemCompra_ProdutoDetalhe_FK1");
            });

            modelBuilder.Entity<OrdemServico>(entity =>
            {
                entity.HasKey(e => e.IdOrdemServico)
                    .HasName("OrdemServico_PK");

                entity.HasIndex(e => e.IdAtendimento, "IX_OrdemServico_Atendimento")
                    .HasFillFactor((byte)70);

                entity.HasIndex(e => e.IdUnidadeOrganizacionalAbertura, "IX_OrdemServico_UnidadeOrganizacionalAbertura")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.DtAbertura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ABERTURA");

                entity.Property(e => e.DtAgendamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDAMENTO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtSolicitacaoExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO_EXECUCAO");

                entity.Property(e => e.IdAbertura).HasColumnName("ID_ABERTURA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdFechamento).HasColumnName("ID_FECHAMENTO");

                entity.Property(e => e.IdFuncAbertura).HasColumnName("ID_FUNC_ABERTURA");

                entity.Property(e => e.IdFuncExecutante).HasColumnName("ID_FUNC_EXECUTANTE");

                entity.Property(e => e.IdJustificativaPadrao).HasColumnName("ID_JUSTIFICATIVA_PADRAO");

                entity.Property(e => e.IdMedicoSolicitante).HasColumnName("ID_MEDICO_SOLICITANTE");

                entity.Property(e => e.IdOrdemServicoSituacaoTipo).HasColumnName("ID_ORDEM_SERVICO_SITUACAO_TIPO");

                entity.Property(e => e.IdOrdemServicoTipo).HasColumnName("ID_ORDEM_SERVICO_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacionalAbertura).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_ABERTURA");

                entity.Property(e => e.IdUnidadeOrganizacionalExecutante).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_EXECUTANTE");

                entity.Property(e => e.InCancelada).HasColumnName("IN_CANCELADA");

                entity.Property(e => e.TxMotivo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.HasOne(d => d.IdAberturaNavigation)
                    .WithMany(p => p.OrdemServicoIdAberturaNavigation)
                    .HasForeignKey(d => d.IdAbertura)
                    .HasConstraintName("FK_OrdemServico_TipoDiversos1");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.OrdemServico)
                    .HasForeignKey(d => d.IdAtendimento)
                    .HasConstraintName("FK_OrdemServico_Atendimento");

                entity.HasOne(d => d.IdFechamentoNavigation)
                    .WithMany(p => p.OrdemServicoIdFechamentoNavigation)
                    .HasForeignKey(d => d.IdFechamento)
                    .HasConstraintName("FK_OrdemServico_TipoDiversos2");

                entity.HasOne(d => d.IdFuncAberturaNavigation)
                    .WithMany(p => p.OrdemServicoIdFuncAberturaNavigation)
                    .HasForeignKey(d => d.IdFuncAbertura)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemServico_Pessoa");

                entity.HasOne(d => d.IdFuncExecutanteNavigation)
                    .WithMany(p => p.OrdemServicoIdFuncExecutanteNavigation)
                    .HasForeignKey(d => d.IdFuncExecutante)
                    .HasConstraintName("FK_OrdemServico_Pessoa1");

                entity.HasOne(d => d.IdMedicoSolicitanteNavigation)
                    .WithMany(p => p.OrdemServicoIdMedicoSolicitanteNavigation)
                    .HasForeignKey(d => d.IdMedicoSolicitante)
                    .HasConstraintName("FK_OrdemServico_Pessoa2");

                entity.HasOne(d => d.IdOrdemServicoSituacaoTipoNavigation)
                    .WithMany(p => p.OrdemServicoIdOrdemServicoSituacaoTipoNavigation)
                    .HasForeignKey(d => d.IdOrdemServicoSituacaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemServico_TipoDiversos3");

                entity.HasOne(d => d.IdOrdemServicoTipoNavigation)
                    .WithMany(p => p.OrdemServicoIdOrdemServicoTipoNavigation)
                    .HasForeignKey(d => d.IdOrdemServicoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemServico_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalAberturaNavigation)
                    .WithMany(p => p.OrdemServicoIdUnidadeOrganizacionalAberturaNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalAbertura)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemServico_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUnidadeOrganizacionalExecutanteNavigation)
                    .WithMany(p => p.OrdemServicoIdUnidadeOrganizacionalExecutanteNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalExecutante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrdemServico_UnidadeOrganizacional1");
            });

            modelBuilder.Entity<OrdemServicoCaracteristica>(entity =>
            {
                entity.HasKey(e => new { e.IdAtributo, e.IdOrdemServico })
                    .HasName("OrdemServico_Caracteristica_PK");

                entity.ToTable("OrdemServico_Caracteristica");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.VlAtibuto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VL_ATIBUTO");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.OrdemServicoCaracteristica)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_OrdemServico_Caracteristica_FK1");

                entity.HasOne(d => d.IdOrdemServicoNavigation)
                    .WithMany(p => p.OrdemServicoCaracteristica)
                    .HasForeignKey(d => d.IdOrdemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_OrdemServico_Caracteristica_FK1");
            });

            modelBuilder.Entity<OrdemServicoExame>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame })
                    .HasName("OrdemServico_Exame_PK");

                entity.ToTable("OrdemServico_Exame");

                entity.HasIndex(e => e.IdOrdemServico, "IX_OrdemServico")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.DtFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL");

                entity.Property(e => e.IdBacteria).HasColumnName("ID_BACTERIA");

                entity.Property(e => e.IdFormaEntregaTipo).HasColumnName("ID_FORMA_ENTREGA_TIPO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdMetodoTipo).HasColumnName("ID_METODO_TIPO");

                entity.Property(e => e.IdPrioridadeTipo).HasColumnName("ID_PRIORIDADE_TIPO");

                entity.Property(e => e.InAtraso).HasColumnName("IN_ATRASO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.NrDestinatario).HasColumnName("NR_DESTINATARIO");

                entity.Property(e => e.QnExame).HasColumnName("QN_EXAME");

                entity.HasOne(d => d.IdBacteriaNavigation)
                    .WithMany(p => p.OrdemServicoExame)
                    .HasForeignKey(d => d.IdBacteria)
                    .HasConstraintName("FK_OrdemServico_Exame_Bacteria");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.OrdemServicoExame)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exame_OrdemServico_Exame_FK1");

                entity.HasOne(d => d.IdFormaEntregaTipoNavigation)
                    .WithMany(p => p.OrdemServicoExameIdFormaEntregaTipoNavigation)
                    .HasForeignKey(d => d.IdFormaEntregaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OrdemServico_Exame_FK2");

                entity.HasOne(d => d.IdGuiaNavigation)
                    .WithMany(p => p.OrdemServicoExame)
                    .HasForeignKey(d => d.IdGuia)
                    .HasConstraintName("Guia_OrdemServico_Exame_FK1");

                entity.HasOne(d => d.IdMaterialTipoNavigation)
                    .WithMany(p => p.OrdemServicoExameIdMaterialTipoNavigation)
                    .HasForeignKey(d => d.IdMaterialTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OrdemServico_Exame_FK1");

                entity.HasOne(d => d.IdMetodoTipoNavigation)
                    .WithMany(p => p.OrdemServicoExameIdMetodoTipoNavigation)
                    .HasForeignKey(d => d.IdMetodoTipo)
                    .HasConstraintName("FK_OrdemServico_Exame_TipoDiversos");

                entity.HasOne(d => d.IdOrdemServicoNavigation)
                    .WithMany(p => p.OrdemServicoExame)
                    .HasForeignKey(d => d.IdOrdemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_OrdemServico_Exame_FK1");

                entity.HasOne(d => d.IdPrioridadeTipoNavigation)
                    .WithMany(p => p.OrdemServicoExameIdPrioridadeTipoNavigation)
                    .HasForeignKey(d => d.IdPrioridadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OrdemServico_Exame_FK3");
            });

            modelBuilder.Entity<OrdemServicoExameAntibiotico>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame, e.IdAntibiotico })
                    .HasName("OrdemServicoExame_Antibiotico_PK");

                entity.ToTable("OrdemServicoExame_Antibiotico");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdAntibiotico).HasColumnName("ID_ANTIBIOTICO");

                entity.Property(e => e.DtUltimaAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ULTIMA_ALTERACAO");

                entity.Property(e => e.TxResultado)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESULTADO")
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdAntibioticoNavigation)
                    .WithMany(p => p.OrdemServicoExameAntibiotico)
                    .HasForeignKey(d => d.IdAntibiotico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Antibiotico_OrdemServicoExame_Antibiotico_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OrdemServicoExameAntibiotico)
                    .HasForeignKey(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Exame_OrdemServicoExame_Antibiotico_FK1");
            });

            modelBuilder.Entity<OrdemServicoExameCancelamento>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame })
                    .HasName("OrdemServicoExame_Cancelamento_PK");

                entity.ToTable("OrdemServicoExame_Cancelamento");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.IdJustificativaTipo).HasColumnName("ID_JUSTIFICATIVA_TIPO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InOsCancelada).HasColumnName("IN_OS_CANCELADA");

                entity.HasOne(d => d.IdJustificativaTipoNavigation)
                    .WithMany(p => p.OrdemServicoExameCancelamento)
                    .HasForeignKey(d => d.IdJustificativaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OrdemServicoExame_Cancelamento_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OrdemServicoExameCancelamento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_OrdemServicoExame_Cancelamento_FK1");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.OrdemServicoExameCancelamento)
                    .HasForeignKey<OrdemServicoExameCancelamento>(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Exame_OrdemServicoExame_Cancelamento_FK1");
            });

            modelBuilder.Entity<OrdemServicoExameCancelamentoAprovacao>(entity =>
            {
                entity.HasKey(e => new { e.DtCancelamento, e.IdOrdemServico, e.IdMaterialTipo, e.IdExame })
                    .HasName("OrdemServicoExame_CancelamentoAprovacao_PK");

                entity.ToTable("OrdemServicoExame_CancelamentoAprovacao");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdJustificativaTipo).HasColumnName("ID_JUSTIFICATIVA_TIPO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdJustificativaTipoNavigation)
                    .WithMany(p => p.OrdemServicoExameCancelamentoAprovacao)
                    .HasForeignKey(d => d.IdJustificativaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OrdemServicoExame_CancelamentoAprovacao_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OrdemServicoExameCancelamentoAprovacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_OrdemServicoExame_CancelamentoAprovacao_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OrdemServicoExameCancelamentoAprovacao)
                    .HasForeignKey(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Exame_OrdemServicoExame_CancelamentoAprovacao_FK1");
            });

            modelBuilder.Entity<OrdemServicoExameExamePrioridadeEtapa>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame, e.IdEtapaTipo, e.IdFluxo, e.NrOrdem, e.NrEtapa })
                    .HasName("OrdemServicoExame_ExamePrioridadeEtapa_PK");

                entity.ToTable("OrdemServicoExame_ExamePrioridadeEtapa");

                entity.HasIndex(e => e.IdExame, "IX_OrdemServicoExame_ExamePrioridadeEtapa_ID_EXAME")
                    .HasFillFactor((byte)30);

                entity.HasIndex(e => new { e.IdEtapaTipo, e.DtFim, e.DtInicio, e.IdUnidadeOrganizacional, e.IdMaterialTipo, e.IdExame, e.IdOrdemServico }, "_dta_index_OrdemServicoExame_ExamePrioridad_9_1879169940__K5_K11_K10_K8_K3_K2_K1");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdEtapaTipo).HasColumnName("ID_ETAPA_TIPO");

                entity.Property(e => e.IdFluxo).HasColumnName("ID_FLUXO");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.NrEtapa).HasColumnName("NR_ETAPA");

                entity.Property(e => e.DtFim)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.DtLimite)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIMITE");

                entity.Property(e => e.IdFuncResponsavel).HasColumnName("ID_FUNC_RESPONSAVEL");

                entity.Property(e => e.IdPrestador).HasColumnName("ID_PRESTADOR");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtraso).HasColumnName("IN_ATRASO");

                entity.Property(e => e.InPendencia).HasColumnName("IN_PENDENCIA");

                entity.HasOne(d => d.IdFuncResponsavelNavigation)
                    .WithMany(p => p.OrdemServicoExameExamePrioridadeEtapaIdFuncResponsavelNavigation)
                    .HasForeignKey(d => d.IdFuncResponsavel)
                    .HasConstraintName("Pessoa_OrdemServicoExame_ExamePrioridadeEtapa_FK2");

                entity.HasOne(d => d.IdPrestadorNavigation)
                    .WithMany(p => p.OrdemServicoExameExamePrioridadeEtapaIdPrestadorNavigation)
                    .HasForeignKey(d => d.IdPrestador)
                    .HasConstraintName("Pessoa_OrdemServicoExame_ExamePrioridadeEtapa_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.OrdemServicoExameExamePrioridadeEtapa)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("UnidadeOrganizacional_OrdemServicoExame_ExamePrioridadeEtapa_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OrdemServicoExameExamePrioridadeEtapa)
                    .HasForeignKey(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Exame_OrdemServicoExame_ExamePrioridadeEtapa_FK1");

                entity.HasOne(d => d.FluxoEtapa)
                    .WithMany(p => p.OrdemServicoExameExamePrioridadeEtapa)
                    .HasForeignKey(d => new { d.NrEtapa, d.NrOrdem, d.IdFluxo, d.IdEtapaTipo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fluxo_Etapa_OrdemServicoExame_ExamePrioridadeEtapa_FK1");
            });

            modelBuilder.Entity<OrdemServicoExameItemExame>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame, e.IdItemExame })
                    .HasName("OrdemServicoExame_ItemExame_PK");

                entity.ToTable("OrdemServicoExame_ItemExame");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.DtResultado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RESULTADO");

                entity.Property(e => e.IdUsuarioAprovacao).HasColumnName("ID_USUARIO_APROVACAO");

                entity.Property(e => e.IdUsuarioDigitacao).HasColumnName("ID_USUARIO_DIGITACAO");

                entity.Property(e => e.TxValorResultado)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_RESULTADO");

                entity.HasOne(d => d.IdItemExameNavigation)
                    .WithMany(p => p.OrdemServicoExameItemExame)
                    .HasForeignKey(d => d.IdItemExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ItemExame_OrdemServicoExame_ItemExame_FK1");

                entity.HasOne(d => d.IdUsuarioAprovacaoNavigation)
                    .WithMany(p => p.OrdemServicoExameItemExameIdUsuarioAprovacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAprovacao)
                    .HasConstraintName("Usuario_OrdemServicoExame_ItemExame_FK2");

                entity.HasOne(d => d.IdUsuarioDigitacaoNavigation)
                    .WithMany(p => p.OrdemServicoExameItemExameIdUsuarioDigitacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioDigitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_OrdemServicoExame_ItemExame_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OrdemServicoExameItemExame)
                    .HasForeignKey(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Exame_OrdemServicoExame_ItemExame_FK1");
            });

            modelBuilder.Entity<OrdemServicoExameItemExameHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame, e.IdItemExame, e.DtResultado })
                    .HasName("OrdemServicoExameItemExameHistorico_PK");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.DtResultado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RESULTADO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxValorResultado)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_RESULTADO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.OrdemServicoExameItemExameHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_OrdemServicoExameItemExameHistorico_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OrdemServicoExameItemExameHistorico)
                    .HasForeignKey(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame, d.IdItemExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServicoExame_ItemExame_OrdemServicoExameItemExameHistorico_FK1");
            });

            modelBuilder.Entity<OrdemServicoExameObservacao>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServico, e.IdMaterialTipo, e.IdExame, e.IdObservacaoTipo })
                    .HasName("OrdemServicoExame_Observacao_PK");

                entity.ToTable("OrdemServicoExame_Observacao");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdObservacaoTipo).HasColumnName("ID_OBSERVACAO_TIPO");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdObservacaoTipoNavigation)
                    .WithMany(p => p.OrdemServicoExameObservacao)
                    .HasForeignKey(d => d.IdObservacaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OrdemServicoExame_Observacao_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.OrdemServicoExameObservacao)
                    .HasForeignKey(d => new { d.IdOrdemServico, d.IdMaterialTipo, d.IdExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Exame_OrdemServicoExame_Observacao_FK1");
            });

            modelBuilder.Entity<OrdemServicoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdOrdemServico })
                    .HasName("OrdemServico_Servico_PK");

                entity.ToTable("OrdemServico_Servico");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.DtResolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RESOLUCAO");

                entity.Property(e => e.IdFuncResponsavel).HasColumnName("ID_FUNC_RESPONSAVEL");

                entity.Property(e => e.IdProblemaConstatado).HasColumnName("ID_PROBLEMA_CONSTATADO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUnidadeProblema).HasColumnName("ID_UNIDADE_PROBLEMA");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.TxComplementoServico)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO_SERVICO");

                entity.Property(e => e.TxDescricaoSolucao)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SOLUCAO");

                entity.HasOne(d => d.IdFuncResponsavelNavigation)
                    .WithMany(p => p.OrdemServicoServico)
                    .HasForeignKey(d => d.IdFuncResponsavel)
                    .HasConstraintName("FK_OrdemServico_Servico_Pessoa");

                entity.HasOne(d => d.IdOrdemServicoNavigation)
                    .WithMany(p => p.OrdemServicoServico)
                    .HasForeignKey(d => d.IdOrdemServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_OrdemServico_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.OrdemServicoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_OrdemServico_Servico_FK1");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.OrdemServicoServicoIdStatusNavigation)
                    .HasForeignKey(d => d.IdStatus)
                    .HasConstraintName("FK_OrdemServico_Servico_TipoDiversos1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.OrdemServicoServicoIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_OrdemServico_Servico_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeProblemaNavigation)
                    .WithMany(p => p.OrdemServicoServico)
                    .HasForeignKey(d => d.IdUnidadeProblema)
                    .HasConstraintName("UnidadeOrganizacional_OrdemServico_Servico_FK1");
            });

            modelBuilder.Entity<OrdemServicoServicoExecutado>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdOrdemServico })
                    .HasName("OrdemServico_ServicoExecutado_PK");

                entity.ToTable("OrdemServico_ServicoExecutado");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdServicoExecutado).HasColumnName("ID_SERVICO_EXECUTADO");

                entity.HasOne(d => d.IdServicoExecutadoNavigation)
                    .WithMany(p => p.OrdemServicoServicoExecutado)
                    .HasForeignKey(d => d.IdServicoExecutado)
                    .HasConstraintName("Servico_OrdemServico_ServicoExecutado_FK1");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.OrdemServicoServicoExecutado)
                    .HasForeignKey<OrdemServicoServicoExecutado>(d => new { d.IdServico, d.IdOrdemServico })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrdemServico_Servico_OrdemServico_ServicoExecutado_FK1");
            });

            modelBuilder.Entity<OrdemServicoTipoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdOrdemServicoTipo, e.IdServico })
                    .HasName("OrdemServicoTipo_Servico_PK");

                entity.ToTable("OrdemServicoTipo_Servico");

                entity.Property(e => e.IdOrdemServicoTipo).HasColumnName("ID_ORDEM_SERVICO_TIPO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.HasOne(d => d.IdOrdemServicoTipoNavigation)
                    .WithMany(p => p.OrdemServicoTipoServico)
                    .HasForeignKey(d => d.IdOrdemServicoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_OrdemServicoTipo_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.OrdemServicoTipoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_OrdemServicoTipo_Servico_FK1");
            });

            modelBuilder.Entity<OrdemcompraHistorico>(entity =>
            {
                entity.HasKey(e => e.IdOrdemcompraHistorico)
                    .HasName("PK__ordemcom__B8A9A0614280FAFB");

                entity.ToTable("ordemcompra_historico");

                entity.Property(e => e.IdOrdemcompraHistorico).HasColumnName("id_ordemcompra_historico");

                entity.Property(e => e.DtEdicao)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_edicao");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("id_condicao_pagamento");

                entity.Property(e => e.IdFornecedor).HasColumnName("id_fornecedor");

                entity.Property(e => e.IdOrdemCompra).HasColumnName("id_ordem_compra");

                entity.Property(e => e.IdUsuarioEditou).HasColumnName("id_usuario_editou");
            });

            modelBuilder.Entity<OrdemcompraProdutodetalheHistorico>(entity =>
            {
                entity.HasKey(e => e.IdOrdemcompraProdutodetalheHistorico)
                    .HasName("PK__ordemcom__B0B14A1046518BDF");

                entity.ToTable("ordemcompra_produtodetalhe_historico");

                entity.Property(e => e.IdOrdemcompraProdutodetalheHistorico).HasColumnName("id_ordemcompra_produtodetalhe_historico");

                entity.Property(e => e.DtEdicao)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_edicao");

                entity.Property(e => e.IdEmbalagem).HasColumnName("id_embalagem");

                entity.Property(e => e.IdFabricante).HasColumnName("id_fabricante");

                entity.Property(e => e.IdOrdemCompra).HasColumnName("id_ordem_compra");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.IdUsuarioEditou).HasColumnName("id_usuario_editou");

                entity.Property(e => e.InBoaCompra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("in_boa_compra")
                    .IsFixedLength(true);

                entity.Property(e => e.InEntregaConcluida).HasColumnName("in_entrega_concluida");

                entity.Property(e => e.InUltimaCompra).HasColumnName("in_ultima_compra");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("pr_desconto");

                entity.Property(e => e.PrIcms)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("pr_icms");

                entity.Property(e => e.PrIpi)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("pr_ipi");

                entity.Property(e => e.QnProduto).HasColumnName("qn_produto");

                entity.Property(e => e.QnProdutoEntregue).HasColumnName("qn_produto_entregue");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("vl_desconto");

                entity.Property(e => e.VlIcms)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("vl_icms");

                entity.Property(e => e.VlIpi)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("vl_ipi");

                entity.Property(e => e.VlTotal)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("vl_total");

                entity.Property(e => e.VlUnitarioProduto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("vl_unitario_produto");
            });

            modelBuilder.Entity<OrgaoEmissor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrgaoEmissor");

                entity.Property(e => e.IdOrgaoEmissor).HasColumnName("ID_ORGAO_EMISSOR");

                entity.Property(e => e.NmOrgaoEmissor)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ORGAO_EMISSOR");
            });

            modelBuilder.Entity<OutrosConselhos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Outros_Conselhos");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<Paciente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Paciente");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdIdentidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE");

                entity.Property(e => e.CdProntuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRONTUARIO");

                entity.Property(e => e.DtExpedicao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXPEDICAO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.IdCor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_COR");

                entity.Property(e => e.IdEstadoCivil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_ESTADO_CIVIL");

                entity.Property(e => e.IdExpedidor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXPEDIDOR");

                entity.Property(e => e.IdNacionalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NACIONALIDADE");

                entity.Property(e => e.IdNaturalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NATURALIDADE");

                entity.Property(e => e.IdOcupacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OCUPACAO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdSexo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InFalecido)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_FALECIDO");

                entity.Property(e => e.NmConjuge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONJUGE");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NmMae)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NmPai)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAI");

                entity.Property(e => e.NrCartaoSaude)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTAO_SAUDE");

                entity.Property(e => e.QnPeso)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_PESO");

                entity.Property(e => e.QnTamanho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_TAMANHO");

                entity.Property(e => e.TxAlerta)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_ALERTA");

                entity.Property(e => e.TxDescFuncao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_FUNCAO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<Paciente2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Paciente2");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdIdentidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE");

                entity.Property(e => e.CdProntuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRONTUARIO");

                entity.Property(e => e.DtExpedicao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXPEDICAO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.IdCor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_COR");

                entity.Property(e => e.IdEstadoCivil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_ESTADO_CIVIL");

                entity.Property(e => e.IdExpedidor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXPEDIDOR");

                entity.Property(e => e.IdNacionalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NACIONALIDADE");

                entity.Property(e => e.IdNaturalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NATURALIDADE");

                entity.Property(e => e.IdOcupacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OCUPACAO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdSexo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InFalecido)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_FALECIDO");

                entity.Property(e => e.NmConjuge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONJUGE");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<PacienteIntegracaoSistemaLegado>(entity =>
            {
                entity.HasKey(e => new { e.IdPaciente, e.IdPacienteSistemaLegado });

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdPacienteSistemaLegado).HasColumnName("ID_PACIENTE_SISTEMA_LEGADO");
            });

            modelBuilder.Entity<PacientePlanoConta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Paciente_Plano_Conta");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");
            });

            modelBuilder.Entity<PacienteRegistroEletronico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PacienteRegistroEletronico");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdIdentidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE");

                entity.Property(e => e.CdProntuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRONTUARIO");

                entity.Property(e => e.DtExpedicao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXPEDICAO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.FatorRh)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FATOR_RH");

                entity.Property(e => e.IdCor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_COR");

                entity.Property(e => e.IdEstadoCivil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_ESTADO_CIVIL");

                entity.Property(e => e.IdExpedidor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXPEDIDOR");

                entity.Property(e => e.IdNacionalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NACIONALIDADE");

                entity.Property(e => e.IdNaturalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NATURALIDADE");

                entity.Property(e => e.IdOcupacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OCUPACAO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdSexo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO");

                entity.Property(e => e.IdTipoSanguineo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_TIPO_SANGUINEO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InFalecido)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_FALECIDO");

                entity.Property(e => e.NmConjuge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONJUGE");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NmMae)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NmPai)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAI");

                entity.Property(e => e.NrCartaoSaude)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTAO_SAUDE");

                entity.Property(e => e.QnPeso)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_PESO");

                entity.Property(e => e.QnTamanho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_TAMANHO");

                entity.Property(e => e.TxDescFuncao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_FUNCAO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<PacienteSimples>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PacienteSimples");

                entity.Property(e => e.CdProntuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRONTUARIO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");
            });

            modelBuilder.Entity<PacientesUti>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PacientesUTI");

                entity.Property(e => e.Bedcode).HasColumnName("bedcode");

                entity.Property(e => e.Birthdate)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("birthdate");

                entity.Property(e => e.Createdate)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("createdate");

                entity.Property(e => e.Dischargecause).HasColumnName("dischargecause");

                entity.Property(e => e.Documentnumber)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("documentnumber");

                entity.Property(e => e.Documenttypecode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("documenttypecode");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("gender");

                entity.Property(e => e.Hospitaladmissiondate)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("hospitaladmissiondate");

                entity.Property(e => e.Hospitaladmissionnumber).HasColumnName("hospitaladmissionnumber");

                entity.Property(e => e.Hospitalcode).HasColumnName("hospitalcode");

                entity.Property(e => e.Hospitaldischargedate)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("hospitaldischargedate");

                entity.Property(e => e.Icdcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("icdcode")
                    .IsFixedLength(true);

                entity.Property(e => e.Medicaldischargedate)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("medicaldischargedate");

                entity.Property(e => e.Medicalrecord).HasColumnName("medicalrecord");

                entity.Property(e => e.Patientname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("patientname");

                entity.Property(e => e.Responsibledocument)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("responsibledocument");

                entity.Property(e => e.Responsiblename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("responsiblename");

                entity.Property(e => e.Unitadmissiondatetime)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("unitadmissiondatetime");

                entity.Property(e => e.Unitadmissionnumber).HasColumnName("unitadmissionnumber");

                entity.Property(e => e.Unitcode).HasColumnName("unitcode");

                entity.Property(e => e.Unitdischargedatetime)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("unitdischargedatetime");
            });

            modelBuilder.Entity<PacoteExame>(entity =>
            {
                entity.HasKey(e => e.IdPacoteExame)
                    .HasName("PacoteExame_PK");

                entity.Property(e => e.IdPacoteExame).HasColumnName("ID_PACOTE_EXAME");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmPacoteExame)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACOTE_EXAME");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.PacoteExame)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_PacoteExame_FK1");
            });

            modelBuilder.Entity<PacoteExameExame>(entity =>
            {
                entity.HasKey(e => new { e.IdPacoteExame, e.IdExame, e.IdMaterialTipo })
                    .HasName("PacoteExame_Exame_PK");

                entity.ToTable("PacoteExame_Exame");

                entity.Property(e => e.IdPacoteExame).HasColumnName("ID_PACOTE_EXAME");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdExameNavigation)
                    .WithMany(p => p.PacoteExameExame)
                    .HasForeignKey(d => d.IdExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Exame_PacoteExame_Exame_FK1");

                entity.HasOne(d => d.IdMaterialTipoNavigation)
                    .WithMany(p => p.PacoteExameExame)
                    .HasForeignKey(d => d.IdMaterialTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PacoteExame_Exame_TipoDiversos");

                entity.HasOne(d => d.IdPacoteExameNavigation)
                    .WithMany(p => p.PacoteExameExame)
                    .HasForeignKey(d => d.IdPacoteExame)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PacoteExame_PacoteExame_Exame_FK1");
            });

            modelBuilder.Entity<PacoteFaturamento>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdOperadora })
                    .HasName("PacoteFaturamento_PK");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.VlPacote).HasColumnName("VL_PACOTE");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.PacoteFaturamento)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_PacoteFaturamento_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.PacoteFaturamento)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PacoteFaturamento_Servico_FK1");
            });

            modelBuilder.Entity<PacoteTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlPacote).HasColumnName("VL_PACOTE");
            });

            modelBuilder.Entity<PacoteUnimedTransporte>(entity =>
            {
                entity.HasKey(e => e.CdServico);

                entity.Property(e => e.CdServico)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");
            });

            modelBuilder.Entity<Pagina>(entity =>
            {
                entity.HasKey(e => e.IdPagina);

                entity.Property(e => e.IdPagina).HasColumnName("ID_PAGINA");

                entity.Property(e => e.NmPagina)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAGINA");

                entity.Property(e => e.TxExibePagina)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tx_exibe_pagina");
            });

            modelBuilder.Entity<Pais>(entity =>
            {
                entity.HasKey(e => e.IdPais)
                    .HasName("Pais_PK");

                entity.HasIndex(e => e.IdOrigemCadastroTipo, "IX_Pais_TipoDiversos");

                entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

                entity.Property(e => e.CdBacen)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CD_BACEN")
                    .IsFixedLength(true);

                entity.Property(e => e.CdNacionalidadeSus)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CD_NACIONALIDADE_SUS")
                    .IsFixedLength(true);

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmPais)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAIS");

                entity.Property(e => e.NmPaisFr)
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAIS_FR");

                entity.Property(e => e.NmPaisUs)
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAIS_US");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgPais2)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_PAIS2")
                    .IsFixedLength(true);

                entity.Property(e => e.SgPais3)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("SG_PAIS3")
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdOrigemCadastroTipoNavigation)
                    .WithMany(p => p.Pais)
                    .HasForeignKey(d => d.IdOrigemCadastroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pais_TipoDiversos");
            });

            modelBuilder.Entity<ParNotaEmitida>(entity =>
            {
                entity.HasKey(e => e.IdPar);

                entity.Property(e => e.IdPar).HasColumnName("ID_PAR");

                entity.Property(e => e.IdNota2).HasColumnName("ID_NOTA_2");

                entity.Property(e => e.IdNota3).HasColumnName("ID_NOTA_3");

                entity.HasOne(d => d.IdNota2Navigation)
                    .WithMany(p => p.ParNotaEmitidaIdNota2Navigation)
                    .HasForeignKey(d => d.IdNota2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParNotaEmitida_NotaEmitida2");

                entity.HasOne(d => d.IdNota3Navigation)
                    .WithMany(p => p.ParNotaEmitidaIdNota3Navigation)
                    .HasForeignKey(d => d.IdNota3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParNotaEmitida_NotaEmitida3");
            });

            modelBuilder.Entity<ParametrizacaoSistema>(entity =>
            {
                entity.HasKey(e => e.IdParametro);

                entity.HasIndex(e => e.IdAplicativo, "IX_ParametrizacaoSistema_Aplicativo")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.NmParametro, "IX_ParametrizacaoSistema_NM_PARAMETRO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdParametro).HasColumnName("ID_PARAMETRO");

                entity.Property(e => e.IdAplicativo).HasColumnName("ID_APLICATIVO");

                entity.Property(e => e.IdTipoParametro).HasColumnName("ID_TIPO_PARAMETRO");

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.InPesquisaEmTela)
                    .HasColumnName("IN_PESQUISA_EM_TELA")
                    .HasComment("para identificar se na tela de parametrização de sistema irá ficar com o botão ...");

                entity.Property(e => e.NmAtributoApresentacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO_APRESENTACAO");

                entity.Property(e => e.NmAtributoGravacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO_GRAVACAO");

                entity.Property(e => e.NmPagina)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAGINA");

                entity.Property(e => e.NmParametro)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PARAMETRO");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxExibicao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_EXIBICAO");

                entity.Property(e => e.TxTabela)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_TABELA");

                entity.Property(e => e.VlParametro)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PARAMETRO");

                entity.Property(e => e.VlParametroDescricao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VL_PARAMETRO_DESCRICAO");

                entity.HasOne(d => d.IdAplicativoNavigation)
                    .WithMany(p => p.ParametrizacaoSistema)
                    .HasForeignKey(d => d.IdAplicativo)
                    .HasConstraintName("FK_ParametrizacaoSistema_Aplicativo");

                entity.HasOne(d => d.IdTipoParametroNavigation)
                    .WithMany(p => p.ParametrizacaoSistema)
                    .HasForeignKey(d => d.IdTipoParametro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParametrizacaoSistema_TipoParametro");

                entity.HasOne(d => d.IdTipoTabelaNavigation)
                    .WithMany(p => p.ParametrizacaoSistema)
                    .HasForeignKey(d => d.IdTipoTabela)
                    .HasConstraintName("FK_ParametrizacaoSistema_TipoTabela");
            });

            modelBuilder.Entity<ParametrizacaoSistemaHistorico>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.IdParametrizacaoHistorico).HasColumnName("ID_PARAMETRIZACAO_HISTORICO");

                entity.Property(e => e.IdParametro).HasColumnName("ID_PARAMETRO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxExibicao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_EXIBICAO");

                entity.Property(e => e.VlParametro)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VL_PARAMETRO");
            });

            modelBuilder.Entity<ParametroAvaliacaoRecebimento>(entity =>
            {
                entity.HasKey(e => e.IdParametroAvaliacao);

                entity.Property(e => e.IdParametroAvaliacao).HasColumnName("ID_PARAMETRO_AVALIACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdGrupoInspecaoRecebimento).HasColumnName("ID_GRUPO_INSPECAO_RECEBIMENTO");

                entity.Property(e => e.IdTipoAvaliacao).HasColumnName("ID_TIPO_AVALIACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioExcluiu).HasColumnName("ID_USUARIO_EXCLUIU");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmParametroAvaliacao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PARAMETRO_AVALIACAO");

                entity.Property(e => e.VlNota).HasColumnName("VL_NOTA");

                entity.Property(e => e.VlParametroAvaliacao).HasColumnName("VL_PARAMETRO_AVALIACAO");

                entity.HasOne(d => d.IdGrupoInspecaoRecebimentoNavigation)
                    .WithMany(p => p.ParametroAvaliacaoRecebimento)
                    .HasForeignKey(d => d.IdGrupoInspecaoRecebimento)
                    .HasConstraintName("FK_ParametroAvalicaoRecebimento_Grupo");

                entity.HasOne(d => d.IdTipoAvaliacaoNavigation)
                    .WithMany(p => p.ParametroAvaliacaoRecebimento)
                    .HasForeignKey(d => d.IdTipoAvaliacao)
                    .HasConstraintName("FK_ParametroAvaliacaoRecebimento_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParametroAvaliacaoRecebimentoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ParametroAvaliacaoRecebimento_Usuario");

                entity.HasOne(d => d.IdUsuarioExcluiuNavigation)
                    .WithMany(p => p.ParametroAvaliacaoRecebimentoIdUsuarioExcluiuNavigation)
                    .HasForeignKey(d => d.IdUsuarioExcluiu)
                    .HasConstraintName("FK_ParametroAvaliacaoRecebimento_Usuario1");
            });

            modelBuilder.Entity<ParametroUf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ParametroUF");

                entity.Property(e => e.IdUf)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_UF");

                entity.Property(e => e.SgUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ParcelaCondicaoPagamento>(entity =>
            {
                entity.HasKey(e => new { e.IdCondicaoPagamento, e.NrParcela })
                    .HasName("ParcelaCondicaoPagamento_PK");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.NrDias).HasColumnName("NR_DIAS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCondicaoPagamentoNavigation)
                    .WithMany(p => p.ParcelaCondicaoPagamento)
                    .HasForeignKey(d => d.IdCondicaoPagamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CondicaoPagamento_ParcelaCondicaoPagamento_FK1");
            });

            modelBuilder.Entity<ParcelaCondicaoPagamentoLog>(entity =>
            {
                entity.HasKey(e => e.IdCondicaoPagamentoLog);

                entity.ToTable("ParcelaCondicaoPagamento_Log");

                entity.Property(e => e.IdCondicaoPagamentoLog).HasColumnName("ID_CONDICAO_PAGAMENTO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdCondicaoPagamento).HasColumnName("ID_CONDICAO_PAGAMENTO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.NrDias).HasColumnName("NR_DIAS");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ParcelaCondicaoPagamentoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ParcelaContaPagar>(entity =>
            {
                entity.HasKey(e => new { e.IdContaPagar, e.NrParcela })
                    .HasName("ParcelaContaPagar_PK");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlPagar)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PAGAR");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.Property(e => e.VlParcela).HasColumnName("VL_PARCELA");

                entity.HasOne(d => d.IdBorderoNavigation)
                    .WithMany(p => p.ParcelaContaPagar)
                    .HasForeignKey(d => d.IdBordero)
                    .HasConstraintName("ParcelaContaPagar_Bordero_FK1");

                entity.HasOne(d => d.IdChequeNavigation)
                    .WithMany(p => p.ParcelaContaPagar)
                    .HasForeignKey(d => d.IdCheque)
                    .HasConstraintName("FK_ParcelaContaPagar_Cheque");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.ParcelaContaPagar)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaPagar_ParcelaContaPagar_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaPagar)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("ParcelaContaPagar_Usuario_FK1");
            });

            modelBuilder.Entity<ParcelaContaPagarAcrescimo>(entity =>
            {
                entity.HasKey(e => new { e.NrParcela, e.IdTipoAcrescimo, e.IdContaPagar })
                    .HasName("ParcelaContaPagar_Acrescimo_PK");

                entity.ToTable("ParcelaContaPagar_Acrescimo");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.VlAcrescimo).HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdTipoAcrescimoNavigation)
                    .WithMany(p => p.ParcelaContaPagarAcrescimo)
                    .HasForeignKey(d => d.IdTipoAcrescimo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ParcelaContaPagar_Acrescimo_FK1");

                entity.HasOne(d => d.ParcelaContaPagar)
                    .WithMany(p => p.ParcelaContaPagarAcrescimo)
                    .HasForeignKey(d => new { d.IdContaPagar, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ParcelaContaPagar_ParcelaContaPagar_Acrescimo_FK1");
            });

            modelBuilder.Entity<ParcelaContaPagarBaixa>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontapagarBaixa)
                    .HasName("ParcelaContaPagar_Baixa_PK");

                entity.ToTable("ParcelaContaPagar_Baixa");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdContaReceberCreditoAdiantamento).HasColumnName("ID_CONTA_RECEBER_CREDITO_ADIANTAMENTO");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdLancamentoBancarioRestituicao).HasColumnName("ID_LANCAMENTO_BANCARIO_RESTITUICAO");

                entity.Property(e => e.IdParcelacontapagarBaixaEstornada).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_ESTORNADA");

                entity.Property(e => e.IdTipoBaixa).HasColumnName("ID_TIPO_BAIXA");

                entity.Property(e => e.IdTipoCorrecao).HasColumnName("ID_TIPO_CORRECAO");

                entity.Property(e => e.IdTipoJuros).HasColumnName("ID_TIPO_JUROS");

                entity.Property(e => e.IdTipoMotivoEstorno).HasColumnName("ID_TIPO_MOTIVO_ESTORNO");

                entity.Property(e => e.IdTipoMulta).HasColumnName("ID_TIPO_MULTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InEstornado).HasColumnName("IN_ESTORNADO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.PrCorrecao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_CORRECAO");

                entity.Property(e => e.PrDescontoFaturaFinanceira)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO_FATURA_FINANCEIRA");

                entity.Property(e => e.PrJuros)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_JUROS");

                entity.Property(e => e.PrMulta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_MULTA");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BAIXA");

                entity.Property(e => e.VlCorrecao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CORRECAO");

                entity.Property(e => e.VlDescontoFaturaFinanceira)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO_FATURA_FINANCEIRA");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlJuros)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_JUROS");

                entity.Property(e => e.VlMulta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_MULTA");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.Property(e => e.VlTributosRetidos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTOS_RETIDOS");

                entity.HasOne(d => d.IdBorderoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixa)
                    .HasForeignKey(d => d.IdBordero);

                entity.HasOne(d => d.IdContaReceberCreditoAdiantamentoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixa)
                    .HasForeignKey(d => d.IdContaReceberCreditoAdiantamento)
                    .HasConstraintName("ParcelaContaPagar_Baixa_ContaReceber_ID_CONTA_RECEBER_CREDITO_ADIANTAMENTO");

                entity.HasOne(d => d.IdFaturafinanceiraNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixa)
                    .HasForeignKey(d => d.IdFaturafinanceira)
                    .HasConstraintName("ParcelaContaPagar_Baixa_FaturaFinanceira_ID_FATURAFINANCEIRA");

                entity.HasOne(d => d.IdLancamentoBancarioRestituicaoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixa)
                    .HasForeignKey(d => d.IdLancamentoBancarioRestituicao);

                entity.HasOne(d => d.IdParcelacontapagarBaixaEstornadaNavigation)
                    .WithMany(p => p.InverseIdParcelacontapagarBaixaEstornadaNavigation)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixaEstornada)
                    .HasConstraintName("FK_PCP_Baixa_PCP_Baixa_ID_PARCELACONTAPAGAR_BAIXA_ESTORNADA");

                entity.HasOne(d => d.IdTipoBaixaNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaIdTipoBaixaNavigation)
                    .HasForeignKey(d => d.IdTipoBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoCorrecaoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaIdTipoCorrecaoNavigation)
                    .HasForeignKey(d => d.IdTipoCorrecao)
                    .HasConstraintName("ParcelaContaPagar_Baixa_TipoDiversos_ID_TIPO_CORRECAO");

                entity.HasOne(d => d.IdTipoJurosNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaIdTipoJurosNavigation)
                    .HasForeignKey(d => d.IdTipoJuros)
                    .HasConstraintName("ParcelaContaPagar_Baixa_TipoDiversos_ID_TIPO_JUROS");

                entity.HasOne(d => d.IdTipoMotivoEstornoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaIdTipoMotivoEstornoNavigation)
                    .HasForeignKey(d => d.IdTipoMotivoEstorno);

                entity.HasOne(d => d.IdTipoMultaNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaIdTipoMultaNavigation)
                    .HasForeignKey(d => d.IdTipoMulta)
                    .HasConstraintName("ParcelaContaPagar_Baixa_TipoDiversos_ID_TIPO_MULTA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixa)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaPagar)
                    .WithMany(p => p.ParcelaContaPagarBaixa)
                    .HasForeignKey(d => new { d.IdContaPagar, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaPagar_Baixa_ParcelaContaPagar_ID_CP_NR_PARC");
            });

            modelBuilder.Entity<ParcelaContaPagarBaixaAcrescimo>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontapagarBaixaAcrescimo);

                entity.ToTable("ParcelaContaPagar_Baixa_Acrescimo");

                entity.Property(e => e.IdParcelacontapagarBaixaAcrescimo).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_ACRESCIMO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrAcrescimo)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("PR_ACRESCIMO");

                entity.Property(e => e.VlAcrescimo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdParcelacontapagarBaixaNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaAcrescimo)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCP_Baixa_Acrescimo_PCP_Baixa_ID_PCP_Baixa");

                entity.HasOne(d => d.IdTipoAcrescimoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaAcrescimo)
                    .HasForeignKey(d => d.IdTipoAcrescimo)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaAcrescimo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ParcelaContaPagarBaixaContaPagarTributoAliquota>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontapagarBaixaContaPagarTributoAliquota);

                entity.ToTable("ParcelaContaPagar_Baixa_ContaPagar_TributoAliquota");

                entity.Property(e => e.IdParcelacontapagarBaixaContaPagarTributoAliquota).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaPagarTributoAliquota).HasColumnName("ID_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VlTributo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTO");

                entity.HasOne(d => d.IdContaPagarTributoAliquotaNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdContaPagarTributoAliquota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaPagar_Baixa_ContaPagar_TributoAliquota_CPTA");

                entity.HasOne(d => d.IdParcelacontapagarBaixaNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaPagar_Baixa_ContaPagar_TributoAliquota_PCPB");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaContaPagarTributoAliquota)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaPagar_Baixa_ContaPagar_TributoAliquota_Usuario");
            });

            modelBuilder.Entity<ParcelaContaPagarBaixaContaPagarTributoAliquotaLog>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontapagarBaixaContaPagarTributoAliquotaLog);

                entity.ToTable("ParcelaContaPagar_Baixa_ContaPagar_TributoAliquota_Log");

                entity.Property(e => e.IdParcelacontapagarBaixaContaPagarTributoAliquotaLog).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_CONTA_PAGAR_TRIBUTO_ALIQUOTA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdContaPagarTributoAliquota).HasColumnName("ID_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.IdParcelacontapagarBaixaContaPagarTributoAliquota).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_CONTA_PAGAR_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.VlTributo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaContaPagarTributoAliquotaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("FK_ParcelaContaPagar_Baixa_ContaPagar_TributoAliquota_Log_Usuario");
            });

            modelBuilder.Entity<ParcelaContaPagarBaixaDesconto>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontapagarBaixaDesconto);

                entity.ToTable("ParcelaContaPagar_Baixa_Desconto");

                entity.Property(e => e.IdParcelacontapagarBaixaDesconto).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_DESCONTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdParcelacontapagarBaixaNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaDesconto)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCP_Baixa_Desconto_PCP_Baixa_ID_PCP_Baixa");

                entity.HasOne(d => d.IdTipoDescontoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaDesconto)
                    .HasForeignKey(d => d.IdTipoDesconto)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaDesconto)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ParcelaContaPagarBaixaLog>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontapagarBaixaLog);

                entity.ToTable("ParcelaContaPagar_Baixa_Log");

                entity.Property(e => e.IdParcelacontapagarBaixaLog).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdContaReceberCreditoAdiantamento).HasColumnName("ID_CONTA_RECEBER_CREDITO_ADIANTAMENTO");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdLancamentoBancarioRestituicao).HasColumnName("ID_LANCAMENTO_BANCARIO_RESTITUICAO");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.IdParcelacontapagarBaixaEstornada).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA_ESTORNADA");

                entity.Property(e => e.IdTipoBaixa).HasColumnName("ID_TIPO_BAIXA");

                entity.Property(e => e.IdTipoCorrecao).HasColumnName("ID_TIPO_CORRECAO");

                entity.Property(e => e.IdTipoJuros).HasColumnName("ID_TIPO_JUROS");

                entity.Property(e => e.IdTipoMotivoEstorno).HasColumnName("ID_TIPO_MOTIVO_ESTORNO");

                entity.Property(e => e.IdTipoMulta).HasColumnName("ID_TIPO_MULTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InEstornado).HasColumnName("IN_ESTORNADO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.PrCorrecao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_CORRECAO");

                entity.Property(e => e.PrDescontoFaturaFinanceira)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_DESCONTO_FATURA_FINANCEIRA");

                entity.Property(e => e.PrJuros)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_JUROS");

                entity.Property(e => e.PrMulta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PR_MULTA");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BAIXA");

                entity.Property(e => e.VlCorrecao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CORRECAO");

                entity.Property(e => e.VlDescontoFaturaFinanceira)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO_FATURA_FINANCEIRA");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlJuros)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_JUROS");

                entity.Property(e => e.VlMulta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_MULTA");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.Property(e => e.VlTributosRetidos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTOS_RETIDOS");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ParcelaContaPagarBaixaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ParcelaContaPagarDesconto>(entity =>
            {
                entity.HasKey(e => new { e.IdContaPagar, e.IdTipoDesconto, e.NrParcela })
                    .HasName("ParcelaContaPagar_Desconto_PK");

                entity.ToTable("ParcelaContaPagar_Desconto");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdTipoDescontoNavigation)
                    .WithMany(p => p.ParcelaContaPagarDesconto)
                    .HasForeignKey(d => d.IdTipoDesconto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ParcelaContaPagar_Desconto_FK1");

                entity.HasOne(d => d.ParcelaContaPagar)
                    .WithMany(p => p.ParcelaContaPagarDesconto)
                    .HasForeignKey(d => new { d.IdContaPagar, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ParcelaContaPagar_ParcelaContaPagar_Desconto_FK1");
            });

            modelBuilder.Entity<ParcelaContaPagarHistorico>(entity =>
            {
                entity.HasKey(e => new { e.DtHistorico, e.IdContaPagar, e.NrParcela })
                    .HasName("ParcelaContaPagar_Historico_PK");

                entity.ToTable("ParcelaContaPagar_Historico");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaPagarHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_ParcelaContaPagar_Historico_FK1");

                entity.HasOne(d => d.ParcelaContaPagar)
                    .WithMany(p => p.ParcelaContaPagarHistorico)
                    .HasForeignKey(d => new { d.IdContaPagar, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ParcelaContaPagar_ParcelaContaPagar_Historico_FK1");
            });

            modelBuilder.Entity<ParcelaContaPagarLog>(entity =>
            {
                entity.HasKey(e => e.IdParcelaContaPagarLog);

                entity.ToTable("ParcelaContaPagar_Log");

                entity.Property(e => e.IdParcelaContaPagarLog).HasColumnName("ID_PARCELA_CONTA_PAGAR_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdBordero).HasColumnName("ID_BORDERO");

                entity.Property(e => e.IdCheque).HasColumnName("ID_CHEQUE");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlPagar)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PAGAR");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.Property(e => e.VlParcela).HasColumnName("VL_PARCELA");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ParcelaContaPagarLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ParcelaContaReceber>(entity =>
            {
                entity.HasKey(e => new { e.IdContaReceber, e.NrParcela })
                    .HasName("ParcelaContaReceber_PK");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.DtBaixa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdTipoSituacao).HasColumnName("ID_TIPO_SITUACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrParcelaPai).HasColumnName("NR_PARCELA_PAI");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlParcela)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PARCELA");

                entity.Property(e => e.VlReceber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RECEBER");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.ParcelaContaReceber)
                    .HasForeignKey(d => d.IdCartarecurso);

                entity.HasOne(d => d.IdContaReceberNavigation)
                    .WithMany(p => p.ParcelaContaReceber)
                    .HasForeignKey(d => d.IdContaReceber)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoSituacaoNavigation)
                    .WithMany(p => p.ParcelaContaReceber)
                    .HasForeignKey(d => d.IdTipoSituacao)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaReceber)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaReceberNavigation)
                    .WithMany(p => p.InverseParcelaContaReceberNavigation)
                    .HasForeignKey(d => new { d.IdContaReceber, d.NrParcelaPai })
                    .HasConstraintName("FK_ParcelaContaReceber_ParcelaContaReceber_PARCELA_PAI");
            });

            modelBuilder.Entity<ParcelaContaReceberAcrescimo>(entity =>
            {
                entity.HasKey(e => new { e.NrParcela, e.IdTipoAcrescimo, e.IdContaReceber })
                    .HasName("ParcelaContaReceber_Acrescimo_PK");

                entity.ToTable("ParcelaContaReceber_Acrescimo");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.VlAcrescimo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdTipoAcrescimoNavigation)
                    .WithMany(p => p.ParcelaContaReceberAcrescimo)
                    .HasForeignKey(d => d.IdTipoAcrescimo)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaReceber)
                    .WithMany(p => p.ParcelaContaReceberAcrescimo)
                    .HasForeignKey(d => new { d.IdContaReceber, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaReceber_Acrescimo_ParcelaContaReceber_ID_CR_NR_PARC");
            });

            modelBuilder.Entity<ParcelaContaReceberBaixa>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontareceberBaixa);

                entity.ToTable("ParcelaContaReceber_Baixa");

                entity.HasIndex(e => new { e.IdTipoBaixa, e.IdContaReceber, e.InAtivo, e.InEstornado }, "IX_ParcelaContaReceber_Baixa_ID_TIPO_BAIXA_ID_CONTA_RECEBER_IN_ATIVO_IN_ESTORNADO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdParcelacontareceberBaixa).HasColumnName("ID_PARCELACONTARECEBER_BAIXA");

                entity.Property(e => e.DtBaixa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtReferenciaCalculos)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REFERENCIA_CALCULOS");

                entity.Property(e => e.IdCaixamovimento).HasColumnName("ID_CAIXAMOVIMENTO");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdContaPagarCreditoAdiantamento).HasColumnName("ID_CONTA_PAGAR_CREDITO_ADIANTAMENTO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLancamentoBancarioEstorno).HasColumnName("ID_LANCAMENTO_BANCARIO_ESTORNO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdNotaemitidaFormapagamento).HasColumnName("ID_NOTAEMITIDA_FORMAPAGAMENTO");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.IdParcelacontareceberBaixaEstornada).HasColumnName("ID_PARCELACONTARECEBER_BAIXA_ESTORNADA");

                entity.Property(e => e.IdTipoBaixa).HasColumnName("ID_TIPO_BAIXA");

                entity.Property(e => e.IdTipoCorrecao).HasColumnName("ID_TIPO_CORRECAO");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdTipoJuros).HasColumnName("ID_TIPO_JUROS");

                entity.Property(e => e.IdTipoMotivoEstorno).HasColumnName("ID_TIPO_MOTIVO_ESTORNO");

                entity.Property(e => e.IdTipoMulta).HasColumnName("ID_TIPO_MULTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InEstornado).HasColumnName("IN_ESTORNADO");

                entity.Property(e => e.InPendenteMeioDePagto).HasColumnName("IN_PENDENTE_MEIO_DE_PAGTO");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.PrCorrecao)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("PR_CORRECAO");

                entity.Property(e => e.PrJuros)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("PR_JUROS");

                entity.Property(e => e.PrMulta)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("PR_MULTA");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BAIXA");

                entity.Property(e => e.VlCorrecao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CORRECAO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlDiferencaAMaior)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DIFERENCA_A_MAIOR");

                entity.Property(e => e.VlImpostoRetido)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_IMPOSTO_RETIDO");

                entity.Property(e => e.VlJuros)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_JUROS");

                entity.Property(e => e.VlMulta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_MULTA");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.Property(e => e.VlTributosRetidos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTOS_RETIDOS");

                entity.HasOne(d => d.IdCaixamovimentoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdCaixamovimento);

                entity.HasOne(d => d.IdContaCorrenteNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdContaCorrente)
                    .HasConstraintName("ParcelaContaReceber_Baixa_ContaCorrente_ID_CONTA_CORRENTE");

                entity.HasOne(d => d.IdContaPagarCreditoAdiantamentoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdContaPagarCreditoAdiantamento)
                    .HasConstraintName("ParcelaContaReceber_Baixa_ContaPagar_ID_CONTA_PAGAR_CREDITO_ADIANTAMENTO");

                entity.HasOne(d => d.IdFaturafinanceiraNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdFaturafinanceira)
                    .HasConstraintName("ParcelaContaReceber_Baixa_FaturaFinanceira_ID_FATURAFINANCEIRA");

                entity.HasOne(d => d.IdFaturamentobaixagrupoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdFaturamentobaixagrupo);

                entity.HasOne(d => d.IdImpostoRetidoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdImpostoRetido);

                entity.HasOne(d => d.IdLancamentoBancarioNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaIdLancamentoBancarioNavigation)
                    .HasForeignKey(d => d.IdLancamentoBancario);

                entity.HasOne(d => d.IdLancamentoBancarioEstornoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaIdLancamentoBancarioEstornoNavigation)
                    .HasForeignKey(d => d.IdLancamentoBancarioEstorno);

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdNotaEmitida);

                entity.HasOne(d => d.IdNotaemitidaFormapagamentoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdNotaemitidaFormapagamento)
                    .HasConstraintName("ParcelaContaReceber_Baixa_NotaEmitida_FormaPagamento_ID_NOTAEMITIDA_FORMAPAGAMENTO");

                entity.HasOne(d => d.IdParcelacontapagarBaixaNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdParcelacontapagarBaixa)
                    .HasConstraintName("FK_ParcelaContaReceber_Baixa_ParcelaContaPagar_Baixa");

                entity.HasOne(d => d.IdParcelacontareceberBaixaEstornadaNavigation)
                    .WithMany(p => p.InverseIdParcelacontareceberBaixaEstornadaNavigation)
                    .HasForeignKey(d => d.IdParcelacontareceberBaixaEstornada)
                    .HasConstraintName("FK_PCR_Baixa_PCR_Baixa_ID_PARCELACONTARECEBER_BAIXA_ESTORNADA");

                entity.HasOne(d => d.IdTipoBaixaNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaIdTipoBaixaNavigation)
                    .HasForeignKey(d => d.IdTipoBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoCorrecaoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaIdTipoCorrecaoNavigation)
                    .HasForeignKey(d => d.IdTipoCorrecao)
                    .HasConstraintName("ParcelaContaReceber_Baixa_TipoDiversos_ID_TIPO_CORRECAO");

                entity.HasOne(d => d.IdTipoDocumentoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdTipoDocumento);

                entity.HasOne(d => d.IdTipoJurosNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaIdTipoJurosNavigation)
                    .HasForeignKey(d => d.IdTipoJuros)
                    .HasConstraintName("ParcelaContaReceber_Baixa_TipoDiversos_ID_TIPO_JUROS");

                entity.HasOne(d => d.IdTipoMotivoEstornoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaIdTipoMotivoEstornoNavigation)
                    .HasForeignKey(d => d.IdTipoMotivoEstorno);

                entity.HasOne(d => d.IdTipoMultaNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaIdTipoMultaNavigation)
                    .HasForeignKey(d => d.IdTipoMulta)
                    .HasConstraintName("ParcelaContaReceber_Baixa_TipoDiversos_ID_TIPO_MULTA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaReceber)
                    .WithMany(p => p.ParcelaContaReceberBaixa)
                    .HasForeignKey(d => new { d.IdContaReceber, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaReceber_Baixa_ParcelaContaReceber_ID_CR_NR_PARC");
            });

            modelBuilder.Entity<ParcelaContaReceberBaixaAcrescimo>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontareceberBaixaAcrescimo);

                entity.ToTable("ParcelaContaReceber_Baixa_Acrescimo");

                entity.Property(e => e.IdParcelacontareceberBaixaAcrescimo).HasColumnName("ID_PARCELACONTARECEBER_BAIXA_ACRESCIMO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdParcelacontareceberBaixa).HasColumnName("ID_PARCELACONTARECEBER_BAIXA");

                entity.Property(e => e.IdTipoAcrescimo).HasColumnName("ID_TIPO_ACRESCIMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrAcrescimo)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("PR_ACRESCIMO");

                entity.Property(e => e.VlAcrescimo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO");

                entity.HasOne(d => d.IdParcelacontareceberBaixaNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaAcrescimo)
                    .HasForeignKey(d => d.IdParcelacontareceberBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCR_Baixa_Acrescimo_PCR_Baixa_ID_PCR_Baixa");

                entity.HasOne(d => d.IdTipoAcrescimoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaAcrescimo)
                    .HasForeignKey(d => d.IdTipoAcrescimo)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaAcrescimo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ParcelaContaReceberBaixaDesconto>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontareceberBaixaDesconto);

                entity.ToTable("ParcelaContaReceber_Baixa_Desconto");

                entity.Property(e => e.IdParcelacontareceberBaixaDesconto).HasColumnName("ID_PARCELACONTARECEBER_BAIXA_DESCONTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdParcelacontareceberBaixa).HasColumnName("ID_PARCELACONTARECEBER_BAIXA");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdParcelacontareceberBaixaNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaDesconto)
                    .HasForeignKey(d => d.IdParcelacontareceberBaixa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCR_Baixa_Desconto_PCR_Baixa_ID_PCR_Baixa");

                entity.HasOne(d => d.IdTipoDescontoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaDesconto)
                    .HasForeignKey(d => d.IdTipoDesconto)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaDesconto)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ParcelaContaReceberBaixaLog>(entity =>
            {
                entity.HasKey(e => e.IdParcelacontareceberBaixaLog);

                entity.ToTable("ParcelaContaReceber_Baixa_Log");

                entity.Property(e => e.IdParcelacontareceberBaixaLog).HasColumnName("ID_PARCELACONTARECEBER_BAIXA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtBaixa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtReferenciaCalculos)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REFERENCIA_CALCULOS");

                entity.Property(e => e.IdCaixamovimento).HasColumnName("ID_CAIXAMOVIMENTO");

                entity.Property(e => e.IdContaCorrente).HasColumnName("ID_CONTA_CORRENTE");

                entity.Property(e => e.IdContaPagarCreditoAdiantamento).HasColumnName("ID_CONTA_PAGAR_CREDITO_ADIANTAMENTO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdFaturafinanceira).HasColumnName("ID_FATURAFINANCEIRA");

                entity.Property(e => e.IdFaturamentobaixagrupo).HasColumnName("ID_FATURAMENTOBAIXAGRUPO");

                entity.Property(e => e.IdImpostoRetido).HasColumnName("ID_IMPOSTO_RETIDO");

                entity.Property(e => e.IdLancamentoBancario).HasColumnName("ID_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdLancamentoBancarioEstorno).HasColumnName("ID_LANCAMENTO_BANCARIO_ESTORNO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdNotaemitidaFormapagamento).HasColumnName("ID_NOTAEMITIDA_FORMAPAGAMENTO");

                entity.Property(e => e.IdParcelacontapagarBaixa).HasColumnName("ID_PARCELACONTAPAGAR_BAIXA");

                entity.Property(e => e.IdParcelacontareceberBaixa).HasColumnName("ID_PARCELACONTARECEBER_BAIXA");

                entity.Property(e => e.IdParcelacontareceberBaixaEstornada).HasColumnName("ID_PARCELACONTARECEBER_BAIXA_ESTORNADA");

                entity.Property(e => e.IdTipoBaixa).HasColumnName("ID_TIPO_BAIXA");

                entity.Property(e => e.IdTipoCorrecao).HasColumnName("ID_TIPO_CORRECAO");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdTipoJuros).HasColumnName("ID_TIPO_JUROS");

                entity.Property(e => e.IdTipoMotivoEstorno).HasColumnName("ID_TIPO_MOTIVO_ESTORNO");

                entity.Property(e => e.IdTipoMulta).HasColumnName("ID_TIPO_MULTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InEstornado).HasColumnName("IN_ESTORNADO");

                entity.Property(e => e.InPendenteMeioDePagto).HasColumnName("IN_PENDENTE_MEIO_DE_PAGTO");

                entity.Property(e => e.NrDocumento).HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.PrCorrecao)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("PR_CORRECAO");

                entity.Property(e => e.PrJuros)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("PR_JUROS");

                entity.Property(e => e.PrMulta)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("PR_MULTA");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_BAIXA");

                entity.Property(e => e.VlCorrecao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_CORRECAO");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlDiferencaAMaior)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DIFERENCA_A_MAIOR");

                entity.Property(e => e.VlImpostoRetido)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_IMPOSTO_RETIDO");

                entity.Property(e => e.VlJuros)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_JUROS");

                entity.Property(e => e.VlMulta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_MULTA");

                entity.Property(e => e.VlTotalBaixa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL_BAIXA");

                entity.Property(e => e.VlTributosRetidos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TRIBUTOS_RETIDOS");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ParcelaContaReceberBaixaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ParcelaContaReceberDesconto>(entity =>
            {
                entity.HasKey(e => new { e.IdContaReceber, e.IdTipoDesconto, e.NrParcela })
                    .HasName("ParcelaContaReceber_Desconto_PK");

                entity.ToTable("ParcelaContaReceber_Desconto");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdTipoDesconto).HasColumnName("ID_TIPO_DESCONTO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.VlDesconto)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTO");

                entity.HasOne(d => d.IdTipoDescontoNavigation)
                    .WithMany(p => p.ParcelaContaReceberDesconto)
                    .HasForeignKey(d => d.IdTipoDesconto)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ParcelaContaReceber)
                    .WithMany(p => p.ParcelaContaReceberDesconto)
                    .HasForeignKey(d => new { d.IdContaReceber, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaReceber_Desconto_ParcelaContaReceber_ID_CR_NR_PARC");
            });

            modelBuilder.Entity<ParcelaContaReceberHistorico>(entity =>
            {
                entity.HasKey(e => new { e.DtHistorico, e.IdContaReceber, e.NrParcela })
                    .HasName("ParcelaContaReceber_Historico_PK");

                entity.ToTable("ParcelaContaReceber_Historico");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ParcelaContaReceberHistorico)
                    .HasForeignKey(d => d.IdUsuario);

                entity.HasOne(d => d.ParcelaContaReceber)
                    .WithMany(p => p.ParcelaContaReceberHistorico)
                    .HasForeignKey(d => new { d.IdContaReceber, d.NrParcela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParcelaContaReceber_Historico_ParcelaContaReceber_ID_CR_NR_PARC");
            });

            modelBuilder.Entity<ParcelaContaReceberLog>(entity =>
            {
                entity.HasKey(e => e.IdParcelaContaReceberLog);

                entity.ToTable("ParcelaContaReceber_Log");

                entity.Property(e => e.IdParcelaContaReceberLog).HasColumnName("ID_PARCELA_CONTA_RECEBER_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtBaixa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_BAIXA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdContaReceber).HasColumnName("ID_CONTA_RECEBER");

                entity.Property(e => e.IdTipoSituacao).HasColumnName("ID_TIPO_SITUACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrParcela).HasColumnName("NR_PARCELA");

                entity.Property(e => e.NrParcelaPai).HasColumnName("NR_PARCELA_PAI");

                entity.Property(e => e.VlAcrescimos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMOS");

                entity.Property(e => e.VlDescontos)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_DESCONTOS");

                entity.Property(e => e.VlParcela)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_PARCELA");

                entity.Property(e => e.VlReceber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RECEBER");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ParcelaContaReceberLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ParcelasContaParticular>(entity =>
            {
                entity.HasKey(e => e.IdParcela)
                    .HasName("ParcelasContaParticular_PK");

                entity.Property(e => e.IdParcela).HasColumnName("ID_PARCELA");

                entity.Property(e => e.DtPagamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PAGAMENTO");

                entity.Property(e => e.DtVencimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VENCIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InQuitada).HasColumnName("IN_QUITADA");

                entity.Property(e => e.Juros).HasColumnName("JUROS");

                entity.Property(e => e.NmOrdemParcela).HasColumnName("NM_ORDEM_PARCELA");

                entity.Property(e => e.TxFormaPagamento)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMA_PAGAMENTO");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.Property(e => e.VlParcela).HasColumnName("VL_PARCELA");
            });

            modelBuilder.Entity<PdrProdemge>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PDR_PRODEMGE");

                entity.Property(e => e.CdIbge).HasColumnName("CD_IBGE");

                entity.Property(e => e.IdMacrorregiao).HasColumnName("ID_MACRORREGIAO");

                entity.Property(e => e.IdMicrorregiao).HasColumnName("ID_MICRORREGIAO");

                entity.Property(e => e.IdRegional).HasColumnName("ID_REGIONAL");

                entity.Property(e => e.NrPopulacao).HasColumnName("NR_POPULACAO");
            });

            modelBuilder.Entity<PedidoDeSangueHemoplus>(entity =>
            {
                entity.HasKey(e => e.IdPedidoSangueHemoplus);

                entity.Property(e => e.IdPedidoSangueHemoplus).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtPedidoIntegrado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO_INTEGRADO");

                entity.Property(e => e.DtPrevisaoEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO_ENTREGA")
                    .HasDefaultValueSql("(getdate()+(1))");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdMedicoSolicitante).HasColumnName("ID_MEDICO_SOLICITANTE");

                entity.Property(e => e.IdNumeroProntuario).HasColumnName("ID_NUMERO_PRONTUARIO");

                entity.Property(e => e.IdSolicitacaoHemoplus).HasColumnName("ID_SOLICITACAO_HEMOPLUS");

                entity.Property(e => e.IdTipoPedido).HasColumnName("ID_TIPO_PEDIDO");

                entity.Property(e => e.IdTipoStatus).HasColumnName("ID_TIPO_STATUS");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InReacoesPrevias).HasColumnName("IN_REACOES_PREVIAS");

                entity.Property(e => e.InTransfundidoAnteriormente).HasColumnName("IN_TRANSFUNDIDO_ANTERIORMENTE");

                entity.Property(e => e.NrVelocidade).HasColumnName("NR_VELOCIDADE");

                entity.Property(e => e.QtPlaquetas)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("QT_PLAQUETAS");

                entity.Property(e => e.TxAntecedGestacionais)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_ANTECED_GESTACIONAIS");

                entity.Property(e => e.TxDiagnostico)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DIAGNOSTICO");

                entity.Property(e => e.TxJson)
                    .IsUnicode(false)
                    .HasColumnName("TX_JSON");

                entity.Property(e => e.TxJustificativa)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.TxRetornoHemoplus)
                    .IsUnicode(false)
                    .HasColumnName("TX_RETORNO_HEMOPLUS");

                entity.Property(e => e.VlCoagulacao)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("VL_COAGULACAO");

                entity.Property(e => e.VlHematocrito)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("VL_HEMATOCRITO");

                entity.Property(e => e.VlHemoglobina)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("VL_HEMOGLOBINA");

                entity.Property(e => e.VlPeso)
                    .HasColumnType("decimal(4, 1)")
                    .HasColumnName("VL_PESO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplus)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_Atendimento");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplus)
                    .HasForeignKey(d => d.IdLeito)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_Leito");

                entity.HasOne(d => d.IdMedicoSolicitanteNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplus)
                    .HasForeignKey(d => d.IdMedicoSolicitante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_MedicoSolicitante");

                entity.HasOne(d => d.IdNumeroProntuarioNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplus)
                    .HasForeignKey(d => d.IdNumeroProntuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_GeraProntuario");

                entity.HasOne(d => d.IdTipoPedidoNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplusIdTipoPedidoNavigation)
                    .HasForeignKey(d => d.IdTipoPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_TipoPedido");

                entity.HasOne(d => d.IdTipoStatusNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplusIdTipoStatusNavigation)
                    .HasForeignKey(d => d.IdTipoStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_TipoStatus");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplus)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplus)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_Usuario");
            });

            modelBuilder.Entity<PedidoDeSangueHemoplusItem>(entity =>
            {
                entity.HasKey(e => e.IdPedidoSangueHemoplusItem);

                entity.ToTable("PedidoDeSangueHemoplus_Item");

                entity.Property(e => e.IdPedidoSangueHemoplusItem).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS_ITEM");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtRealizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZACAO");

                entity.Property(e => e.IdHemoProcedimento).HasColumnName("ID_HEMO_PROCEDIMENTO");

                entity.Property(e => e.IdPedidoSangueHemoplus).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InIntegrado).HasColumnName("IN_INTEGRADO");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.TxDetalhe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DETALHE");

                entity.HasOne(d => d.IdHemoProcedimentoNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplusItem)
                    .HasForeignKey(d => d.IdHemoProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_Item_HemoProcedimento");

                entity.HasOne(d => d.IdPedidoSangueHemoplusNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplusItem)
                    .HasForeignKey(d => d.IdPedidoSangueHemoplus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_Item_PedidoDeSangueHemoplus");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplusItem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PedidoDeSangueHemoplus_Item_Usuario");
            });

            modelBuilder.Entity<PedidoDeSangueHemoplusItemLog>(entity =>
            {
                entity.HasKey(e => e.IdPedidoSangueHemoplusItemLog)
                    .HasName("PedidoDeSangueHemoplus_Item_Log_PK");

                entity.ToTable("PedidoDeSangueHemoplus_Item_Log");

                entity.Property(e => e.IdPedidoSangueHemoplusItemLog).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS_ITEM_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtAtualizacaoOri)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO_ORI");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtRealizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZACAO");

                entity.Property(e => e.IdHemoProcedimento).HasColumnName("ID_HEMO_PROCEDIMENTO");

                entity.Property(e => e.IdPedidoSangueHemoplus).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS");

                entity.Property(e => e.IdPedidoSangueHemoplusItem).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS_ITEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InIntegrado).HasColumnName("IN_INTEGRADO");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.TxDetalhe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DETALHE");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplusItemLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<PedidoDeSangueHemoplusLog>(entity =>
            {
                entity.HasKey(e => e.IdPedidoSangueHemoplusLog)
                    .HasName("PedidoDeSangueHemoplus_Log_PK");

                entity.ToTable("PedidoDeSangueHemoplus_Log");

                entity.Property(e => e.IdPedidoSangueHemoplusLog).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtAtualizacaoOri)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO_ORI");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtPedidoIntegrado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO_INTEGRADO");

                entity.Property(e => e.DtPrevisaoEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISAO_ENTREGA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdMedicoSolicitante).HasColumnName("ID_MEDICO_SOLICITANTE");

                entity.Property(e => e.IdNumeroProntuario).HasColumnName("ID_NUMERO_PRONTUARIO");

                entity.Property(e => e.IdPedidoSangueHemoplus).HasColumnName("ID_PEDIDO_SANGUE_HEMOPLUS");

                entity.Property(e => e.IdSolicitacaoHemoplus).HasColumnName("ID_SOLICITACAO_HEMOPLUS");

                entity.Property(e => e.IdTipoPedido).HasColumnName("ID_TIPO_PEDIDO");

                entity.Property(e => e.IdTipoStatus).HasColumnName("ID_TIPO_STATUS");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InReacoesPrevias).HasColumnName("IN_REACOES_PREVIAS");

                entity.Property(e => e.InTransfundidoAnteriormente).HasColumnName("IN_TRANSFUNDIDO_ANTERIORMENTE");

                entity.Property(e => e.QtPlaquetas)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("QT_PLAQUETAS");

                entity.Property(e => e.TxAntecedGestacionais)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_ANTECED_GESTACIONAIS");

                entity.Property(e => e.TxDiagnostico)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DIAGNOSTICO");

                entity.Property(e => e.TxJson)
                    .IsUnicode(false)
                    .HasColumnName("TX_JSON");

                entity.Property(e => e.TxJustificativa)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.VlCoagulacao)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("VL_COAGULACAO");

                entity.Property(e => e.VlHematocrito)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("VL_HEMATOCRITO");

                entity.Property(e => e.VlHemoglobina)
                    .HasColumnType("decimal(10, 1)")
                    .HasColumnName("VL_HEMOGLOBINA");

                entity.Property(e => e.VlPeso)
                    .HasColumnType("decimal(4, 1)")
                    .HasColumnName("VL_PESO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.PedidoDeSangueHemoplusLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<Pendencia>(entity =>
            {
                entity.HasKey(e => e.IdPendencia)
                    .HasName("PK_PENDENCIA");

                entity.Property(e => e.IdPendencia).HasColumnName("ID_PENDENCIA");

                entity.Property(e => e.CdModulo).HasColumnName("CD_MODULO");

                entity.Property(e => e.CdOrigem).HasColumnName("CD_ORIGEM");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.DtEncerramento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENCERRAMENTO");

                entity.Property(e => e.DtLimite)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIMITE");

                entity.Property(e => e.IdTipoPendencia).HasColumnName("ID_TIPO_PENDENCIA");

                entity.Property(e => e.QnMensagensEnviadas).HasColumnName("QN_MENSAGENS_ENVIADAS");

                entity.Property(e => e.TxPendencia)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_PENDENCIA");

                entity.HasOne(d => d.IdTipoPendenciaNavigation)
                    .WithMany(p => p.Pendencia)
                    .HasForeignKey(d => d.IdTipoPendencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PENDENCIA_TIPO_PENDENCIA");
            });

            modelBuilder.Entity<PerdaProduto>(entity =>
            {
                entity.HasKey(e => e.IdPerdaProduto);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_PerdaProduto_ID_PRODUTO_DETALHE_ID_FABRICANTE")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdPerdaProduto).HasColumnName("ID_PERDA_PRODUTO");

                entity.Property(e => e.DtCancelamentoPerda)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO_PERDA");

                entity.Property(e => e.DtPerdaProduto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PERDA_PRODUTO");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdMotivoPerda).HasColumnName("ID_MOTIVO_PERDA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacionalPerda).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_PERDA");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NrLote)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_LOTE");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.NrOcorrencia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_OCORRENCIA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.PerdaProduto)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("FK_PerdaProduto_LoteProdutoItem");

                entity.HasOne(d => d.IdMotivoPerdaNavigation)
                    .WithMany(p => p.PerdaProduto)
                    .HasForeignKey(d => d.IdMotivoPerda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerdaProduto_TipoDiversos");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PerdaProduto)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("FK_PerdaProduto_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<Perfil>(entity =>
            {
                entity.HasKey(e => e.IdPerfil)
                    .HasName("Perfil_PK");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.IdAbrangenciaTipo).HasColumnName("ID_ABRANGENCIA_TIPO");

                entity.Property(e => e.IdPerfilBase).HasColumnName("ID_PERFIL_BASE");

                entity.Property(e => e.IdPerfilTipo).HasColumnName("ID_PERFIL_TIPO");

                entity.Property(e => e.NmPerfil)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PERFIL");

                entity.Property(e => e.NrDiasExpiraSenha).HasColumnName("NR_DIAS_EXPIRA_SENHA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdAbrangenciaTipoNavigation)
                    .WithMany(p => p.PerfilIdAbrangenciaTipoNavigation)
                    .HasForeignKey(d => d.IdAbrangenciaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Perfil_FK2");

                entity.HasOne(d => d.IdPerfilBaseNavigation)
                    .WithMany(p => p.InverseIdPerfilBaseNavigation)
                    .HasForeignKey(d => d.IdPerfilBase)
                    .HasConstraintName("Perfil_Perfil_FK1");

                entity.HasOne(d => d.IdPerfilTipoNavigation)
                    .WithMany(p => p.PerfilIdPerfilTipoNavigation)
                    .HasForeignKey(d => d.IdPerfilTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Perfil_FK1");
            });

            modelBuilder.Entity<PerfilAgenda>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("perfilAgenda");

                entity.Property(e => e.IdPerfil)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_perfil");

                entity.Property(e => e.NmPerfil)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("nm_perfil");
            });

            modelBuilder.Entity<PerfilClassificacaoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdPerfil, e.IdClassificacao })
                    .HasName("Perfil_ClassificacaoProduto_PK");

                entity.ToTable("Perfil_ClassificacaoProduto");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.PerfilClassificacaoProduto)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_Perfil_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.PerfilClassificacaoProduto)
                    .HasForeignKey(d => d.IdPerfil)
                    .HasConstraintName("Perfil_Perfil_ClassificacaoProduto_FK1");
            });

            modelBuilder.Entity<PerfilLaboratorio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PerfilLaboratorio");

                entity.Property(e => e.IdPerfil)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PERFIL");

                entity.Property(e => e.NmPerfil)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PERFIL");
            });

            modelBuilder.Entity<PerfilUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdPerfil, e.IdUnidadeOrganizacional })
                    .HasName("Perfil_UnidadeOrganizacional_PK");

                entity.ToTable("Perfil_UnidadeOrganizacional");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.PerfilUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdPerfil)
                    .HasConstraintName("Perfil_Perfil_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.PerfilUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Perfil_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<PerfilUsuario>(entity =>
            {
                entity.HasKey(e => new { e.IdPerfil, e.IdUsuario })
                    .HasName("Perfil_Usuario_PK");

                entity.ToTable("Perfil_Usuario");

                entity.HasIndex(e => e.IdUsuario, "IX_Perfil_Usuario_ID_USUARIO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.PerfilUsuario)
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Perfil_Perfil_Usuario_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PerfilUsuario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Perfil_Usuario_FK1");
            });

            modelBuilder.Entity<Perfilorcamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("perfilorcamento");

                entity.Property(e => e.IdPerfil)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_perfil");

                entity.Property(e => e.NmPerfil)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("nm_perfil");
            });

            modelBuilder.Entity<PeriodoPermanencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PeriodoPermanencia");

                entity.Property(e => e.DtFim)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");
            });

            modelBuilder.Entity<Permanencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Permanencia");

                entity.Property(e => e.DtFim)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");
            });

            modelBuilder.Entity<PermissaoPerfilControle>(entity =>
            {
                entity.HasKey(e => new { e.IdPermissao, e.IdPerfil, e.IdControle })
                    .HasName("Permissao_Perfil_Controle_PK");

                entity.ToTable("Permissao_Perfil_Controle");

                entity.Property(e => e.IdPermissao).HasColumnName("ID_PERMISSAO");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.IdControle).HasColumnName("ID_CONTROLE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdControleNavigation)
                    .WithMany(p => p.PermissaoPerfilControle)
                    .HasForeignKey(d => d.IdControle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Controle_Permissao_Perfil_Controle_FK1");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.PermissaoPerfilControle)
                    .HasForeignKey(d => d.IdPerfil)
                    .HasConstraintName("Perfil_Permissao_Perfil_Controle_FK1");

                entity.HasOne(d => d.IdPermissaoNavigation)
                    .WithMany(p => p.PermissaoPerfilControle)
                    .HasForeignKey(d => d.IdPermissao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Permissao_Perfil_Controle_FK1");
            });

            modelBuilder.Entity<PesquisaPessoa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PesquisaPessoa");

                entity.Property(e => e.CdCnpj)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxSite)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_SITE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Pessoa>(entity =>
            {
                entity.HasKey(e => e.IdPessoa)
                    .HasName("Pessoa_PK");

                entity.HasIndex(e => e.IdPessoaTipo, "IX_Pessoa_ID_PESSOA_TIPO");

                entity.HasIndex(e => new { e.IdPessoaTipo, e.NmPessoa }, "IX_Pessoa_ID_PESSOA_TIPO_NM_PESSOA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdPessoa, "IX_Pessoa_K1_2")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdPessoa, "IX_Pessoa_K1_3_5_2")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NmPessoa, "IX_Pessoa_K2_1")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdPessoaTipo, "IX_Pessoa_K3_1_2_4_5")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdPessoaTipo, e.NmPessoa }, "IX_Pessoa_K3_K2_1_4_5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdPessoaTipo, e.InAtivo, e.NmPessoa }, "IX_Pessoa_K3_K5_K2_1")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtivo, e.NmPessoa }, "IX_Pessoa_K5_K2_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdGrupo).HasColumnName("ID_GRUPO");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.IdPessoaTipo).HasColumnName("ID_PESSOA_TIPO");

                entity.Property(e => e.IdSinples).HasColumnName("ID_SINPLES");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE");

                entity.HasOne(d => d.IdOrigemCadastroTipoNavigation)
                    .WithMany(p => p.PessoaIdOrigemCadastroTipoNavigation)
                    .HasForeignKey(d => d.IdOrigemCadastroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Pessoa_FK2");

                entity.HasOne(d => d.IdPessoaTipoNavigation)
                    .WithMany(p => p.PessoaIdPessoaTipoNavigation)
                    .HasForeignKey(d => d.IdPessoaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Pessoa_FK1");
            });

            modelBuilder.Entity<PessoaCaracteristica>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdPessoaEntidade, e.IdAtributo })
                    .HasName("PessoaCaracteristica_PK");

                entity.HasIndex(e => e.IdAtributo, "IX_PessoaCaracteristica_ID_ATRIBUTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdAtributo, e.InAtivo }, "IX_PessoaCaracteristica_ID_ATRIBUTO_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdAtributo, e.TxValorAtributo }, "IX_PessoaCaracteristica_ID_ATRIBUTO_TX_VALOR_ATRIBUTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdPessoa, "IX_PessoaCaracteristica_ID_PESSOA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdPessoaEntidade, e.IdAtributo }, "IX_PessoaCaracteristica_ID_PESSOA_ENTIDADE_ID_ATRIBUTO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdPessoaEntidade, e.IdAtributo, e.InAtivo }, "IX_PessoaCaracteristica_ID_PESSOA_ENTIDADE_ID_ATRIBUTO_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InAtivo, "IX_PessoaCaracteristica_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TxValorAtributo, "IX_PessoaCaracteristica_TX_VALOR_ATRIBUTO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxValorAtributo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_ATRIBUTO");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaCaracteristica)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_PessoaCaracteristica_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PessoaCaracteristica)
                    .HasForeignKey(d => new { d.IdPessoaEntidade, d.IdAtributo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_PessoaAtributo_PessoaCaracteristica_FK1");
            });

            modelBuilder.Entity<PessoaCaracteristicaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdPessoaCaracteristicaHistorico);

                entity.ToTable("PessoaCaracteristica_Historico");

                entity.Property(e => e.IdPessoaCaracteristicaHistorico).HasColumnName("ID_PESSOA_CARACTERISTICA_HISTORICO");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data e hora da alteração");

                entity.Property(e => e.IdAtributo)
                    .HasColumnName("ID_ATRIBUTO")
                    .HasComment("id do atributo de metadado");

                entity.Property(e => e.IdPessoa)
                    .HasColumnName("ID_PESSOA")
                    .HasComment("identificador da pessoa");

                entity.Property(e => e.IdPessoaEntidade)
                    .HasColumnName("ID_PESSOA_ENTIDADE")
                    .HasComment("id da pessoa entidade");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("usuário que realizou a alteração");

                entity.Property(e => e.TxValorAtributo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_ATRIBUTO")
                    .HasComment("valor que o usuário alterou");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.PessoaCaracteristicaHistorico)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PessoaCaracteristica_Historico_Atributo");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaCaracteristicaHistorico)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PessoaCaracteristica_Historico_PessoaCaracteristica_Historico");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.PessoaCaracteristicaHistorico)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PessoaCaracteristica_Historico_PessoaEntidade");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PessoaCaracteristicaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PessoaCaracteristica_Historico_Usuario");
            });

            modelBuilder.Entity<PessoaCorreioEletronico>(entity =>
            {
                entity.HasKey(e => new { e.IdCorreioEletronico, e.IdPessoa })
                    .HasName("Pessoa_CorreioEletronico_PK");

                entity.ToTable("Pessoa_CorreioEletronico");

                entity.Property(e => e.IdCorreioEletronico).HasColumnName("ID_CORREIO_ELETRONICO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.InPreferencial).HasColumnName("IN_PREFERENCIAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCorreioEletronicoNavigation)
                    .WithMany(p => p.PessoaCorreioEletronico)
                    .HasForeignKey(d => d.IdCorreioEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CorreioEletronico_Pessoa_CorreioEletronico_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaCorreioEletronico)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Pessoa_CorreioEletronico_FK1");
            });

            modelBuilder.Entity<PessoaCorreioEletronicoHistoricoNaoRegistro>(entity =>
            {
                entity.HasKey(e => e.IdPessoaCorreioeletronicoHistoricoNaoregistro);

                entity.ToTable("Pessoa_CorreioEletronico_Historico_NaoRegistro");

                entity.Property(e => e.IdPessoaCorreioeletronicoHistoricoNaoregistro).HasColumnName("ID_PESSOA_CORREIOELETRONICO_HISTORICO_NAOREGISTRO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdJustificativa).HasColumnName("ID_JUSTIFICATIVA");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdJustificativaNavigation)
                    .WithMany(p => p.PessoaCorreioEletronicoHistoricoNaoRegistro)
                    .HasForeignKey(d => d.IdJustificativa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_CorreioEletronico_Historico_NaoRegistro_TipoDiversos");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.PessoaCorreioEletronicoHistoricoNaoRegistro)
                    .HasForeignKey(d => d.IdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_CorreioEletronico_Historico_NaoRegistro_Pessoa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PessoaCorreioEletronicoHistoricoNaoRegistro)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_CorreioEletronico_Historico_NaoRegistro_Usuario");
            });

            modelBuilder.Entity<PessoaDocumentoGeral>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaDocumentoGeral, e.IdPessoa, e.IdDocumentoGeral })
                    .HasName("Pessoa_DocumentoGeral_PK");

                entity.ToTable("Pessoa_DocumentoGeral");

                entity.Property(e => e.IdPessoaDocumentoGeral)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PESSOA_DOCUMENTO_GERAL");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdDocumentoGeral).HasColumnName("ID_DOCUMENTO_GERAL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdSuperior).HasColumnName("ID_SUPERIOR");

                entity.Property(e => e.IdTipoContrato).HasColumnName("ID_TIPO_CONTRATO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioExclusao).HasColumnName("ID_USUARIO_EXCLUSAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<PessoaEndereco>(entity =>
            {
                entity.HasKey(e => new { e.IdEndereco, e.IdPessoa })
                    .HasName("Pessoa_Endereco_PK");

                entity.ToTable("Pessoa_Endereco");

                entity.HasIndex(e => new { e.IdPessoa, e.InEnderecoAtivo }, "IX_Pessoa_Endereco_ID_PESSOA_IN_ENDERECO_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.InEnderecoAtivo, "IX_pessoa_endereco_IN_ENDERECO_ATIVO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.BaiNu).HasColumnName("BAI_NU");

                entity.Property(e => e.CdCep)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CEP");

                entity.Property(e => e.IdEnderecoCategoriaTipo).HasColumnName("ID_ENDERECO_CATEGORIA_TIPO");

                entity.Property(e => e.IdEnderecoTipo).HasColumnName("ID_ENDERECO_TIPO");

                entity.Property(e => e.IdImovelTipo).HasColumnName("ID_IMOVEL_TIPO");

                entity.Property(e => e.IdJustEndeDesaTipo).HasColumnName("ID_JUST_ENDE_DESA_TIPO");

                entity.Property(e => e.InEnderecoAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ENDERECO_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.NrNumero)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.TxLogradouro)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGRADOURO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.BaiNuNavigation)
                    .WithMany(p => p.PessoaEndereco)
                    .HasForeignKey(d => d.BaiNu)
                    .HasConstraintName("FK__Pessoa_En__BAI_N__27F8B89F");

                entity.HasOne(d => d.IdEnderecoNavigation)
                    .WithMany(p => p.PessoaEndereco)
                    .HasForeignKey(d => d.IdEndereco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Endereco_Pessoa_Endereco_FK1");

                entity.HasOne(d => d.IdEnderecoCategoriaTipoNavigation)
                    .WithMany(p => p.PessoaEnderecoIdEnderecoCategoriaTipoNavigation)
                    .HasForeignKey(d => d.IdEnderecoCategoriaTipo)
                    .HasConstraintName("FK__Pessoa_En__ID_EN__2AD5254A");

                entity.HasOne(d => d.IdEnderecoTipoNavigation)
                    .WithMany(p => p.PessoaEnderecoIdEnderecoTipoNavigation)
                    .HasForeignKey(d => d.IdEnderecoTipo)
                    .HasConstraintName("FK__Pessoa_En__ID_EN__28ECDCD8");

                entity.HasOne(d => d.IdImovelTipoNavigation)
                    .WithMany(p => p.PessoaEnderecoIdImovelTipoNavigation)
                    .HasForeignKey(d => d.IdImovelTipo)
                    .HasConstraintName("FK__Pessoa_En__ID_IM__29E10111");

                entity.HasOne(d => d.IdJustEndeDesaTipoNavigation)
                    .WithMany(p => p.PessoaEnderecoIdJustEndeDesaTipoNavigation)
                    .HasForeignKey(d => d.IdJustEndeDesaTipo)
                    .HasConstraintName("TipoDiversos_Pessoa_Endereco_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaEndereco)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Pessoa_Endereco_FK1");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.PessoaEndereco)
                    .HasForeignKey(d => d.LocNu)
                    .HasConstraintName("FK__Pessoa_En__LOC_N__27049466");
            });

            modelBuilder.Entity<PessoaEnderecoFinalidade>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdEndereco, e.IdFinalidade });

                entity.ToTable("Pessoa_Endereco_Finalidade");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdFinalidade).HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFinalidadeNavigation)
                    .WithMany(p => p.PessoaEnderecoFinalidade)
                    .HasForeignKey(d => d.IdFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Endereco_Finalidade_TipoDiversos");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PessoaEnderecoFinalidade)
                    .HasForeignKey(d => new { d.IdEndereco, d.IdPessoa })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Endereco_Finalidade_Pessoa_Endereco");
            });

            modelBuilder.Entity<PessoaEntidade>(entity =>
            {
                entity.HasKey(e => e.IdPessoaEntidade)
                    .HasName("PessoaEntidade_PK");

                entity.HasIndex(e => e.NmEntidade, "IX_PessoaEntidade_NM_ENTIDADE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NmEntidade)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ENTIDADE");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<PessoaEntidadePessoaAtributo>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaEntidade, e.IdAtributo })
                    .HasName("PessoaEntidade_PessoaAtributo_PK");

                entity.ToTable("PessoaEntidade_PessoaAtributo");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.PessoaEntidadePessoaAtributo)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaAtributo_PessoaEntidade_PessoaAtributo_FK1");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.PessoaEntidadePessoaAtributo)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_PessoaEntidade_PessoaAtributo_FK1");
            });

            modelBuilder.Entity<PessoaEntidadePessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaEntidadePai, e.IdPessoaEntidadeFilho })
                    .HasName("PessoaEntidade_PessoaEntidade_PK");

                entity.ToTable("PessoaEntidade_PessoaEntidade");

                entity.Property(e => e.IdPessoaEntidadePai).HasColumnName("ID_PESSOA_ENTIDADE_PAI");

                entity.Property(e => e.IdPessoaEntidadeFilho).HasColumnName("ID_PESSOA_ENTIDADE_FILHO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaEntidadeFilhoNavigation)
                    .WithMany(p => p.PessoaEntidadePessoaEntidadeIdPessoaEntidadeFilhoNavigation)
                    .HasForeignKey(d => d.IdPessoaEntidadeFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_PessoaEntidade_PessoaEntidade_FK2");

                entity.HasOne(d => d.IdPessoaEntidadePaiNavigation)
                    .WithMany(p => p.PessoaEntidadePessoaEntidadeIdPessoaEntidadePaiNavigation)
                    .HasForeignKey(d => d.IdPessoaEntidadePai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_PessoaEntidade_PessoaEntidade_FK1");
            });

            modelBuilder.Entity<PessoaFisica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PessoaFisica");

                entity.Property(e => e.CdCpf)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CdIdentidade)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DtExpedicao)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXPEDICAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DtNascimento)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdCor)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_COR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdEstadoCivil)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_ESTADO_CIVIL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdExpeditor)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXPEDITOR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdNacionalidade)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NACIONALIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdNaturalidade)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NATURALIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdOcupacao)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OCUPACAO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdPessoafisica).HasColumnName("ID_PESSOAFISICA");

                entity.Property(e => e.IdSexo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmConjuge)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONJUGE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmEmpresa)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmMae)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmPai)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAI")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmPessoafisica)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOAFISICA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<PessoaFisicaIi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PessoaFisicaII");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdIdentidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_IDENTIDADE");

                entity.Property(e => e.CdProntuario)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRONTUARIO");

                entity.Property(e => e.DtExpedicao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXPEDICAO");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO");

                entity.Property(e => e.IdCor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_COR");

                entity.Property(e => e.IdEstadoCivil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_ESTADO_CIVIL");

                entity.Property(e => e.IdExpedidor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EXPEDIDOR");

                entity.Property(e => e.IdNacionalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NACIONALIDADE");

                entity.Property(e => e.IdNaturalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NATURALIDADE");

                entity.Property(e => e.IdOcupacao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_OCUPACAO");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdSexo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO");

                entity.Property(e => e.IdUfExpedidor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_UF_EXPEDIDOR");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmConjuge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONJUGE");

                entity.Property(e => e.NmEmpresa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_EMPRESA");

                entity.Property(e => e.NmMae)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE");

                entity.Property(e => e.NmPai)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAI");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NrCartaoSaude)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTAO_SAUDE");

                entity.Property(e => e.TxDescFuncao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_FUNCAO");

                entity.Property(e => e.TxGrauInstrucao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_GRAU_INSTRUCAO");
            });

            modelBuilder.Entity<PessoaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdPessoaHistorico);

                entity.ToTable("Pessoa_Historico");

                entity.HasIndex(e => e.IdPessoa, "IX_Pessoa_Historico")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.NmPessoa, "IX_Pessoa_Historico_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPessoaHistorico).HasColumnName("ID_PESSOA_HISTORICO");

                entity.Property(e => e.DtInclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INCLUSAO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InInclusao).HasColumnName("IN_INCLUSAO");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaHistorico)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Historico_Pessoa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PessoaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Historico_Usuario");
            });

            modelBuilder.Entity<PessoaImagem>(entity =>
            {
                entity.HasKey(e => e.IdImagem);

                entity.Property(e => e.IdImagem).HasColumnName("ID_IMAGEM");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoImagem).HasColumnName("ID_TIPO_IMAGEM");

                entity.Property(e => e.Imagem)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("IMAGEM");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaImagem)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PessoaImagem_Pessoa");

                entity.HasOne(d => d.IdTipoImagemNavigation)
                    .WithMany(p => p.PessoaImagem)
                    .HasForeignKey(d => d.IdTipoImagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PessoaImagem_TipoDiversos");
            });

            modelBuilder.Entity<PessoaJuridica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PessoaJuridica");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdInscricaoEstadual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_ESTADUAL");

                entity.Property(e => e.CdInscricaoMunicipal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_MUNICIPAL");

                entity.Property(e => e.DtInicioAtividade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_INICIO_ATIVIDADE");

                entity.Property(e => e.IdEmpresaTipo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EMPRESA_TIPO");

                entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");

                entity.Property(e => e.InAtivo).HasColumnName("in_ativo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL");
            });

            modelBuilder.Entity<PessoaPessoa>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaPai, e.IdPessoaFilho, e.IdTipoRelacionamento });

                entity.ToTable("Pessoa_Pessoa");

                entity.Property(e => e.IdPessoaPai)
                    .HasColumnName("ID_PESSOA_PAI")
                    .HasComment("pessoa pai do relacionamento");

                entity.Property(e => e.IdPessoaFilho)
                    .HasColumnName("ID_PESSOA_FILHO")
                    .HasComment("pessoa filho do relacionamento");

                entity.Property(e => e.IdTipoRelacionamento)
                    .HasColumnName("ID_TIPO_RELACIONAMENTO")
                    .HasComment("tipo tabela 399. tipo do relacionamento");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.HasOne(d => d.IdPessoaFilhoNavigation)
                    .WithMany(p => p.PessoaPessoaIdPessoaFilhoNavigation)
                    .HasForeignKey(d => d.IdPessoaFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Pessoa_Pessoa1");

                entity.HasOne(d => d.IdPessoaPaiNavigation)
                    .WithMany(p => p.PessoaPessoaIdPessoaPaiNavigation)
                    .HasForeignKey(d => d.IdPessoaPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Pessoa_Pessoa");

                entity.HasOne(d => d.IdTipoRelacionamentoNavigation)
                    .WithMany(p => p.PessoaPessoa)
                    .HasForeignKey(d => d.IdTipoRelacionamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Pessoa_TipoDiversos");
            });

            modelBuilder.Entity<PessoaPlano>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdPlano })
                    .HasName("Pessoa_Plano_PK");

                entity.ToTable("Pessoa_Plano");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaPlano)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Pessoa_Plano_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.PessoaPlano)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_Pessoa_Plano_FK1");
            });

            modelBuilder.Entity<PessoaPlanoContas>(entity =>
            {
                entity.HasKey(e => e.IdPessoaPlanoContas);

                entity.ToTable("Pessoa_PlanoContas");

                entity.Property(e => e.IdPessoaPlanoContas).HasColumnName("ID_PESSOA_PLANO_CONTAS");

                entity.Property(e => e.IdClassificacaoTipo).HasColumnName("ID_CLASSIFICACAO_TIPO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPlanoContas).HasColumnName("ID_PLANO_CONTAS");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InDebito).HasColumnName("IN_DEBITO");

                entity.Property(e => e.PrConta)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_CONTA");

                entity.Property(e => e.TxClassificacao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TX_CLASSIFICACAO");

                entity.Property(e => e.TxNatureza)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_NATUREZA")
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdClassificacaoTipoNavigation)
                    .WithMany(p => p.PessoaPlanoContas)
                    .HasForeignKey(d => d.IdClassificacaoTipo);

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaPlanoContas)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdPlanoContasNavigation)
                    .WithMany(p => p.PessoaPlanoContas)
                    .HasForeignKey(d => d.IdPlanoContas)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<PessoaRelacionamento>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdPessoaEntidade, e.IdPessoaDependente })
                    .HasName("Pessoa_Relacionamento_PK");

                entity.ToTable("Pessoa_Relacionamento");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdPessoaDependente).HasColumnName("ID_PESSOA_DEPENDENTE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaRelacionamento)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Pessoa_Relacionamento_FK1");

                entity.HasOne(d => d.IdPessoa1)
                    .WithMany(p => p.PessoaRelacionamento)
                    .HasForeignKey(d => new { d.IdPessoaEntidade, d.IdPessoaDependente })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Relacionamento_Pessoa_Relacionamento_FK1");
            });

            modelBuilder.Entity<PessoaTelefone>(entity =>
            {
                entity.HasKey(e => e.IdPessoaTelefone)
                    .HasName("Pessoa_Telefone_PK");

                entity.ToTable("Pessoa_Telefone");

                entity.HasIndex(e => e.IdTelefone, "IX_Pessoa_Telefone_ID_TELEFONE");

                entity.HasIndex(e => new { e.IdPessoa, e.IdTelefone, e.NrRamal }, "IX_Pessoa_Telefone_K2_k3_k5")
                    .IsUnique();

                entity.Property(e => e.IdPessoaTelefone).HasColumnName("ID_PESSOA_TELEFONE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTelefone).HasColumnName("ID_TELEFONE");

                entity.Property(e => e.IdTelefoneTipo).HasColumnName("ID_TELEFONE_TIPO");

                entity.Property(e => e.NmContato)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTATO");

                entity.Property(e => e.NrRamal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_RAMAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaTelefone)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Pessoa_Telefone_FK1");

                entity.HasOne(d => d.IdTelefoneNavigation)
                    .WithMany(p => p.PessoaTelefone)
                    .HasForeignKey(d => d.IdTelefone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Telefone_Pessoa_Telefone_FK1");

                entity.HasOne(d => d.IdTelefoneTipoNavigation)
                    .WithMany(p => p.PessoaTelefone)
                    .HasForeignKey(d => d.IdTelefoneTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pessoa_Telefone_TipoDiversos");
            });

            modelBuilder.Entity<PessoaTelefoneHorario>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaTelefone, e.IdHorario })
                    .HasName("Pessoa_Telefone_Horario_PK");

                entity.ToTable("Pessoa_Telefone_Horario");

                entity.Property(e => e.IdPessoaTelefone).HasColumnName("ID_PESSOA_TELEFONE");

                entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdHorarioNavigation)
                    .WithMany(p => p.PessoaTelefoneHorario)
                    .HasForeignKey(d => d.IdHorario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Pessoa_Telefone_Horario_FK1");

                entity.HasOne(d => d.IdPessoaTelefoneNavigation)
                    .WithMany(p => p.PessoaTelefoneHorario)
                    .HasForeignKey(d => d.IdPessoaTelefone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Telefone_Pessoa_Telefone_Horario_FK1");
            });

            modelBuilder.Entity<PessoaUrl>(entity =>
            {
                entity.HasKey(e => new { e.IdUrl, e.IdPessoa })
                    .HasName("Pessoa_URL_PK");

                entity.ToTable("Pessoa_URL");

                entity.Property(e => e.IdUrl).HasColumnName("ID_URL");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.InPreferencial).HasColumnName("IN_PREFERENCIAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PessoaUrl)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Pessoa_URL_FK1");

                entity.HasOne(d => d.IdUrlNavigation)
                    .WithMany(p => p.PessoaUrl)
                    .HasForeignKey(d => d.IdUrl)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("URL_Pessoa_URL_FK1");
            });

            modelBuilder.Entity<Plano>(entity =>
            {
                entity.HasKey(e => e.IdPlano)
                    .HasName("Plano_PK");

                entity.HasIndex(e => e.IdPlano, "IX_Plano_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdServicoProdutoTabela, "IX_Plano_K10")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdPlano, e.IdOperadora }, "IX_Plano_K1_K3")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdOperadora, "IX_Plano_K3_1")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdRede, "IX_Plano_K7")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.CdHospitalPlano)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CD_HOSPITAL_PLANO");

                entity.Property(e => e.CdPlanoExterno)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_PLANO_EXTERNO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlanoCategoria).HasColumnName("ID_PLANO_CATEGORIA");

                entity.Property(e => e.IdRede).HasColumnName("ID_REDE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAtivado).HasColumnName("IN_ATIVADO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmPlano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.Plano)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Plano_FK1");

                entity.HasOne(d => d.IdPlanoCategoriaNavigation)
                    .WithMany(p => p.Plano)
                    .HasForeignKey(d => d.IdPlanoCategoria)
                    .HasConstraintName("TipoDiversos_Plano_FK1");

                entity.HasOne(d => d.IdRedeNavigation)
                    .WithMany(p => p.Plano)
                    .HasForeignKey(d => d.IdRede)
                    .HasConstraintName("PlanoRede_Plano_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.Plano)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .HasConstraintName("ServicoProdutoTabela_Plano_FK1");
            });

            modelBuilder.Entity<PlanoContas>(entity =>
            {
                entity.HasKey(e => e.IdPlanoContas);

                entity.Property(e => e.IdPlanoContas).HasColumnName("ID_PLANO_CONTAS");

                entity.Property(e => e.CdConta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONTA");

                entity.Property(e => e.CdReduzido).HasColumnName("CD_REDUZIDO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaPai).HasColumnName("ID_CONTA_PAI");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InContaAtiva)
                    .IsRequired()
                    .HasColumnName("IN_CONTA_ATIVA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InSintetica).HasColumnName("IN_SINTETICA");

                entity.Property(e => e.NmConta)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTA");

                entity.Property(e => e.NrGrau).HasColumnName("NR_GRAU");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxNatureza)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_NATUREZA")
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdContaPaiNavigation)
                    .WithMany(p => p.InverseIdContaPaiNavigation)
                    .HasForeignKey(d => d.IdContaPai);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PlanoContas)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<PlanoDeContasFinanceiro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PlanoDeContasFinanceiro");
            });

            modelBuilder.Entity<PlanoEmpresaConveniada>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdPlano })
                    .HasName("PlanoEmpresaConveniada_PK");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.InAtivada).HasColumnName("IN_ATIVADA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.PlanoEmpresaConveniada)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_PlanoEmpresaConveniada_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.PlanoEmpresaConveniada)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_PlanoEmpresaConveniada_FK1");
            });

            modelBuilder.Entity<PlanoEspecialidade>(entity =>
            {
                entity.HasKey(e => new { e.IdPlano, e.IdEspecialidade })
                    .HasName("Plano_Especialidade_PK");

                entity.ToTable("Plano_Especialidade");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.PlanoEspecialidade)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Plano_Especialidade_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.PlanoEspecialidade)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_Plano_Especialidade_FK1");
            });

            modelBuilder.Entity<PlanoEspecialidadeHistorico>(entity =>
            {
                entity.HasKey(e => new { e.DtHistorico, e.IdPlano, e.IdEspecialidade })
                    .HasName("Plano_Especialidade_Historico_PK");

                entity.ToTable("Plano_Especialidade_Historico");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PlanoEspecialidadeHistorico)
                    .HasForeignKey(d => new { d.IdPlano, d.IdEspecialidade })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_Especialidade_Plano_Especialidade_Historico_FK1");
            });

            modelBuilder.Entity<PlanoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdPlano, e.DtOcorrencia, e.IdPlanoOcorrenciaTipo })
                    .HasName("PlanoHistorico_PK");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdPlanoOcorrenciaTipo).HasColumnName("ID_PLANO_OCORRENCIA_TIPO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdPlanoJustificativaTipo).HasColumnName("ID_PLANO_JUSTIFICATIVA_TIPO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.PlanoHistorico)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_PlanoHistorico_FK1");

                entity.HasOne(d => d.IdPlanoJustificativaTipoNavigation)
                    .WithMany(p => p.PlanoHistoricoIdPlanoJustificativaTipoNavigation)
                    .HasForeignKey(d => d.IdPlanoJustificativaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_PlanoHistorico_FK1");

                entity.HasOne(d => d.IdPlanoOcorrenciaTipoNavigation)
                    .WithMany(p => p.PlanoHistoricoIdPlanoOcorrenciaTipoNavigation)
                    .HasForeignKey(d => d.IdPlanoOcorrenciaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_PlanoHistorico_FK2");
            });

            modelBuilder.Entity<PlanoOperadoraCategoria>(entity =>
            {
                entity.HasKey(e => new { e.IdPlanoCategoria, e.IdOperadora })
                    .HasName("Plano_Operadora_Categoria_PK");

                entity.ToTable("Plano_Operadora_Categoria");

                entity.Property(e => e.IdPlanoCategoria).HasColumnName("ID_PLANO_CATEGORIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.PlanoOperadoraCategoria)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Plano_Operadora_Categoria_FK1");

                entity.HasOne(d => d.IdPlanoCategoriaNavigation)
                    .WithMany(p => p.PlanoOperadoraCategoria)
                    .HasForeignKey(d => d.IdPlanoCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Plano_Operadora_Categoria_FK1");
            });

            modelBuilder.Entity<PlanoPadrao>(entity =>
            {
                entity.HasKey(e => new { e.IdPlano, e.IdAcomodacao })
                    .HasName("PlanoPadrao_PK");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdAcomodacao).HasColumnName("ID_ACOMODACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAcomodacaoNavigation)
                    .WithMany(p => p.PlanoPadrao)
                    .HasForeignKey(d => d.IdAcomodacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_PlanoPadrao_FK2");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.PlanoPadrao)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_PlanoPadrao_FK1");
            });

            modelBuilder.Entity<PlanoRede>(entity =>
            {
                entity.HasKey(e => e.IdRede)
                    .HasName("PlanoRede_PK");

                entity.Property(e => e.IdRede).HasColumnName("ID_REDE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.PlanoRede)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_PlanoRede_FK1");
            });

            modelBuilder.Entity<PlanoTratamentoOncologia>(entity =>
            {
                entity.HasKey(e => e.IdPlanoTratamentoOncologia);

                entity.Property(e => e.IdPlanoTratamentoOncologia).HasColumnName("ID_PLANO_TRATAMENTO_ONCOLOGIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.QnAltura)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_ALTURA");

                entity.Property(e => e.QnPeso)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_PESO");

                entity.Property(e => e.QnSc)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_SC");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.PlanoTratamentoOncologia)
                    .HasForeignKey(d => d.IdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanoTratamentoOncologia_Paciente");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PlanoTratamentoOncologia)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanoTratamentoOncologia_Usuario");
            });

            modelBuilder.Entity<PlanoTratamentoOncologiaProtocolo>(entity =>
            {
                entity.HasKey(e => e.IdPlanoTratamentoOncologiaProtocolo);

                entity.ToTable("PlanoTratamentoOncologia_Protocolo");

                entity.Property(e => e.IdPlanoTratamentoOncologiaProtocolo).HasColumnName("ID_PLANO_TRATAMENTO_ONCOLOGIA_PROTOCOLO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdCid).HasColumnName("ID_CID");

                entity.Property(e => e.IdFinalidadeTratamento).HasColumnName("ID_FINALIDADE_TRATAMENTO");

                entity.Property(e => e.IdPlanoTratamentoOncologia).HasColumnName("ID_PLANO_TRATAMENTO_ONCOLOGIA");

                entity.Property(e => e.IdProtocoloOncologico).HasColumnName("ID_PROTOCOLO_ONCOLOGICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxJustificativa)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdC)
                    .WithMany(p => p.PlanoTratamentoOncologiaProtocolo)
                    .HasForeignKey(d => d.IdCid)
                    .HasConstraintName("FK_PlanoTratamentoOncologia_Protocolo_Cid");

                entity.HasOne(d => d.IdPlanoTratamentoOncologiaNavigation)
                    .WithMany(p => p.PlanoTratamentoOncologiaProtocolo)
                    .HasForeignKey(d => d.IdPlanoTratamentoOncologia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanoTratamentoOncologia_Protocolo_PlanoTratamentoOncologia");

                entity.HasOne(d => d.IdProtocoloOncologicoNavigation)
                    .WithMany(p => p.PlanoTratamentoOncologiaProtocolo)
                    .HasForeignKey(d => d.IdProtocoloOncologico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanoTratamentoOncologia_Protocolo_ProtocoloOncologico");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PlanoTratamentoOncologiaProtocolo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PlanoTratamentoOncologia_Protocolo_Usuario");
            });

            modelBuilder.Entity<PlanoUnidadeOrganizacionalCredenciada>(entity =>
            {
                entity.HasKey(e => new { e.IdPlano, e.IdUnidadeOrganizacional })
                    .HasName("Plano_UnidadeOrganizacional_Credenciada_PK");

                entity.ToTable("Plano_UnidadeOrganizacional_Credenciada");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.InEnvioAutomaticoContaLote).HasColumnName("IN_ENVIO_AUTOMATICO_CONTA_LOTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxInstrucaoAtendimento)
                    .HasColumnType("text")
                    .HasColumnName("TX_INSTRUCAO_ATENDIMENTO");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlTaxaAcrescimoHonorario).HasColumnName("VL_TAXA_ACRESCIMO_HONORARIO");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.PlanoUnidadeOrganizacionalCredenciada)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_Plano_UnidadeOrganizacional_Credenciada_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.PlanoUnidadeOrganizacionalCredenciada)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Plano_UnidadeOrganizacional_Credenciada_FK1");
            });

            modelBuilder.Entity<PlanoUnidadeOrganizacionalHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.DtHistorico, e.IdPlano })
                    .HasName("Plano_UnidadeOrganizacional_Historico_PK");

                entity.ToTable("Plano_UnidadeOrganizacional_Historico");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdHistorico).HasColumnName("ID_HISTORICO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PlanoUnidadeOrganizacionalHistorico)
                    .HasForeignKey(d => new { d.IdPlano, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_UnidadeOrganizacional_Credenciada_Plano_UnidadeOrganizacional_Historico_FK1");
            });

            modelBuilder.Entity<PlanoUnidadeOrganizacionalHistoricoCh>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.DtVigencia, e.IdPlano })
                    .HasName("Plano_UnidadeOrganizacional_HistoricoCH_PK");

                entity.ToTable("Plano_UnidadeOrganizacional_HistoricoCH");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlTaxaAcrescimoHonorario).HasColumnName("VL_TAXA_ACRESCIMO_HONORARIO");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PlanoUnidadeOrganizacionalHistoricoCh)
                    .HasForeignKey(d => new { d.IdPlano, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_UnidadeOrganizacional_Credenciada_Plano_UnidadeOrganizacional_HistoricoCH_FK1");
            });

            modelBuilder.Entity<PontoAtendimento>(entity =>
            {
                entity.HasKey(e => e.IdPontoAtendimento);

                entity.Property(e => e.IdPontoAtendimento).HasColumnName("ID_PONTO_ATENDIMENTO");

                entity.Property(e => e.NrRamal).HasColumnName("NR_RAMAL");

                entity.Property(e => e.TxDescricaoPontoAtendimento)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_PONTO_ATENDIMENTO");
            });

            modelBuilder.Entity<PontoAtendimentoUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PontoAtendimento_Usuario");

                entity.Property(e => e.IdPontoAtendimento).HasColumnName("ID_PONTO_ATENDIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdPontoAtendimentoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdPontoAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoAtendimento_Usuario_PontoAtendimento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PontoAtendimento_Usuario_Usuario");
            });

            modelBuilder.Entity<PontoRessuprimento>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdUnidadeOrganizacional, e.DtVigencia })
                    .HasName("PontoRessuprimento_PK");

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.InAtivo }, "IX_PontoRessuprimento_ID_UNIDADE_ORGANIZACIONAL_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.QnEstoqueMaximo).HasColumnName("QN_ESTOQUE_MAXIMO");

                entity.Property(e => e.QnEstoqueMinimo).HasColumnName("QN_ESTOQUE_MINIMO");

                entity.Property(e => e.QnPontoCritico).HasColumnName("QN_PONTO_CRITICO");

                entity.Property(e => e.QnPontoRessuprimento).HasColumnName("QN_PONTO_RESSUPRIMENTO");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.PontoRessuprimento)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_PontoRessuprimento_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.PontoRessuprimento)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_PontoRessuprimento_TipoDiversos");
            });

            modelBuilder.Entity<Porte>(entity =>
            {
                entity.HasKey(e => e.IdPorte)
                    .HasName("Porte_PK");

                entity.Property(e => e.IdPorte).HasColumnName("ID_PORTE");

                entity.Property(e => e.IdPorteTabela).HasColumnName("ID_PORTE_TABELA");

                entity.Property(e => e.NrAuxiliarAnestesista).HasColumnName("NR_AUXILIAR_ANESTESISTA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxPorte)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE");

                entity.Property(e => e.VlPorte)
                    .HasColumnName("VL_PORTE")
                    .HasDefaultValueSql("((0.00))");

                entity.HasOne(d => d.IdPorteTabelaNavigation)
                    .WithMany(p => p.Porte)
                    .HasForeignKey(d => d.IdPorteTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PorteTabela_Porte_FK1");
            });

            modelBuilder.Entity<PorteAnestesicoBi>(entity =>
            {
                entity.HasKey(e => e.IdPorteAnestesico)
                    .HasName("PK_ID_PORTE_ANESTESICO");

                entity.ToTable("PorteAnestesicoBI");

                entity.Property(e => e.IdPorteAnestesico).HasColumnName("ID_PORTE_ANESTESICO");

                entity.Property(e => e.TxPorteAnestesico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_ANESTESICO");
            });

            modelBuilder.Entity<PorteHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdPorte, e.DtVigencia })
                    .HasName("Porte_Historico_PK");

                entity.ToTable("Porte_Historico");

                entity.HasIndex(e => e.IdUsuario, "IX_Porte_Historico_Usuario")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdPorte).HasColumnName("ID_PORTE");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlPorte).HasColumnName("VL_PORTE");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PorteHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_Porte_Historico_FK1");
            });

            modelBuilder.Entity<PorteTabela>(entity =>
            {
                entity.HasKey(e => e.IdPorteTabela)
                    .HasName("PorteTabela_PK");

                entity.Property(e => e.IdPorteTabela).HasColumnName("ID_PORTE_TABELA");

                entity.Property(e => e.IdPorteTabelaTipo).HasColumnName("ID_PORTE_TABELA_TIPO");

                entity.Property(e => e.InReal).HasColumnName("IN_REAL");

                entity.Property(e => e.NmPorteTabela)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("NM_PORTE_TABELA");

                entity.Property(e => e.PrBilateralUnica)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("PR_BILATERAL_UNICA");

                entity.Property(e => e.PrBilateralVarias)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("PR_BILATERAL_VARIAS");

                entity.Property(e => e.PrViaUnica)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("PR_VIA_UNICA");

                entity.Property(e => e.PrViaVarias)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("PR_VIA_VARIAS");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPorteTabelaTipoNavigation)
                    .WithMany(p => p.PorteTabela)
                    .HasForeignKey(d => d.IdPorteTabelaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_PorteTabela_FK1");
            });

            modelBuilder.Entity<Posologia>(entity =>
            {
                entity.HasKey(e => e.IdPosologia)
                    .HasName("Posologia_PK");

                entity.Property(e => e.IdPosologia).HasColumnName("ID_POSOLOGIA");

                entity.Property(e => e.IdFaixaEtaria).HasColumnName("ID_FAIXA_ETARIA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTempoAdministracao).HasColumnName("ID_TEMPO_ADMINISTRACAO");

                entity.Property(e => e.IdUnidadeMedidaDosagem).HasColumnName("ID_UNIDADE_MEDIDA_DOSAGEM");

                entity.Property(e => e.IdUnidadeMedidaPeso).HasColumnName("ID_UNIDADE_MEDIDA_PESO");

                entity.Property(e => e.NrDosagem).HasColumnName("NR_DOSAGEM");

                entity.Property(e => e.NrPeso).HasColumnName("NR_PESO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFaixaEtariaNavigation)
                    .WithMany(p => p.Posologia)
                    .HasForeignKey(d => d.IdFaixaEtaria)
                    .HasConstraintName("FK_Posologia_FaixaEtaria");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.Posologia)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Posologia_FK1");

                entity.HasOne(d => d.IdTempoAdministracaoNavigation)
                    .WithMany(p => p.Posologia)
                    .HasForeignKey(d => d.IdTempoAdministracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Posologia_IntervaloAplicacaoMedicamento");

                entity.HasOne(d => d.IdUnidadeMedidaDosagemNavigation)
                    .WithMany(p => p.PosologiaIdUnidadeMedidaDosagemNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedidaDosagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Posologia_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaPesoNavigation)
                    .WithMany(p => p.PosologiaIdUnidadeMedidaPesoNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedidaPeso)
                    .HasConstraintName("TipoDiversos_Posologia_FK2");
            });

            modelBuilder.Entity<PrecoMedio>(entity =>
            {
                entity.HasKey(e => e.IdPrecoMedio);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.DtInventario }, "IX_PrecoMedio_ID_PRODUTO_DETALHE_DT_INVENTARIO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.InUltimoMes }, "IX_PrecoMedio_ID_PRODUTO_DETALHE_ID_FABRICANTE_IN_ULTIMO_MES")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.InUltimoMes }, "IX_PrecoMedio_ID_PRODUTO_DETALHE_IN_ULTIMO_MES")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.InUltimoMes, "IX_PrecoMedio_IN_ULTIMO_MES")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdPrecoMedio)
                    .HasColumnName("ID_PRECO_MEDIO")
                    .HasComment("PK da Tabela. Identificador Único.");

                entity.Property(e => e.DtInventario)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INVENTARIO")
                    .HasComment("Data de atualizaçã do Preço Médio.\r\n");

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("Relação com Fabricante. Esta associação leva em conta o ProdutoDetalhe.");

                entity.Property(e => e.IdNotaDevolucao).HasColumnName("ID_NOTA_DEVOLUCAO");

                entity.Property(e => e.IdNotaEntrada)
                    .HasColumnName("ID_NOTA_ENTRADA")
                    .HasComment("Relação com a Nota de Entrada do produto. FK com NotaEntrada.");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("Relação com Produto Detalhe. FK com ProdutoDetalheFabricante. Associa um preço médio a um produto detalhe.");

                entity.Property(e => e.InConsignado)
                    .HasColumnName("IN_CONSIGNADO")
                    .HasComment("0 = Não Consignado | 1 = Consignado | 2 = Consignado e preço atual do consignado");

                entity.Property(e => e.InUltimoMes)
                    .HasColumnName("IN_ULTIMO_MES")
                    .HasComment("Identifica se o preço refere-se ao ultimo mês ou seja, o preço médio atual. ");

                entity.Property(e => e.PrVariacao)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("PR_VARIACAO")
                    .HasComment("Percentual de variação do preço em relação ao anterior.");

                entity.Property(e => e.QnConsumoMensal)
                    .HasColumnName("QN_CONSUMO_MENSAL")
                    .HasComment("Quantidade de Consumo mensal do Produto.");

                entity.Property(e => e.QnProduto)
                    .HasColumnName("QN_PRODUTO")
                    .HasComment("Quantidade de Produtos comprados para base do cálculo do preço médio.\r\n");

                entity.Property(e => e.VlPrecoMedio)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("VL_PRECO_MEDIO")
                    .HasComment("Valor cálculado do Preço Médio.");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PrecoMedio)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("ProdutoDetalhe_Fabricante_PrecoMedio_FK1");
            });

            modelBuilder.Entity<PrecoMedioHistorico>(entity =>
            {
                entity.HasKey(e => e.IdPrecoMedioHistorico);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_PrecoMedioHistorico_ID_PRODUTO_DETALHE_ID_FABRICANTE")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdPrecoMedioHistorico).HasColumnName("ID_PRECO_MEDIO_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtInventario)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INVENTARIO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdPrecoMedio).HasColumnName("ID_PRECO_MEDIO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.PrVariacao)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("PR_VARIACAO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.VlPrecoMedio)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("VL_PRECO_MEDIO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.PrecoMedioHistorico)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("ProdutoDetalhe_Fabricante_PrecoMedioHistorico_FK1");
            });

            modelBuilder.Entity<PrecoProduto>(entity =>
            {
                entity.HasKey(e => new { e.DtVigencia, e.IdServicoProdutoTabela, e.IdFabricante, e.IdProdutoDetalhe, e.IdServico })
                    .HasName("PrecoProduto_PK");

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.InAtual }, "IX_PRODUTODETALHEFABRICANTEINATUAL")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdServicoProdutoTabela }, "IX_PrecoProduto")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServico, e.InAtual }, "IX_PrecoProduto_ID_SERVICO_IN_ATUAL")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServicoProdutoTabela, e.IdServico, e.InAtual, e.DtVigencia }, "IX_PrecoProduto_ID_SERVICO_PRODUTO_TABELA_ID_SERVICO_IN_ATUAL_DT_VIGENCIA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.InAtual, e.InAtivo }, "IX_PrecoProduto_IN_ATUAL_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdServicoProdutoTabela, e.DtVigencia, e.InAtual, e.IdServico }, "IX_PrecoProduto_K2_K3_K5_K9_K4_6_7")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.InAtual, e.IdServicoProdutoTabela, e.IdServico }, "IX_PrecoProduto_K9_K3_K4_1_2_5_6_7_8")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InDesconto)
                    .IsRequired()
                    .HasColumnName("IN_DESCONTO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrEdicao)
                    .IsUnicode(false)
                    .HasColumnName("NR_EDICAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlPrecoConsumidor).HasColumnName("VL_PRECO_CONSUMIDOR");

                entity.Property(e => e.VlPrecoFabricante)
                    .HasColumnName("VL_PRECO_FABRICANTE")
                    .HasDefaultValueSql("((0.00))");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PrecoProduto)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_PrecoProduto_FK1");
            });

            modelBuilder.Entity<PrecoProdutoCargaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdPrecoProdutoCargaHistorico);

                entity.Property(e => e.IdPrecoProdutoCargaHistorico).HasColumnName("ID_PRECO_PRODUTO_CARGA_HISTORICO");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrEdicao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NR_EDICAO");

                entity.Property(e => e.QnPrecoAtualizado).HasColumnName("QN_PRECO_ATUALIZADO");

                entity.Property(e => e.QnProdutoAtivado).HasColumnName("QN_PRODUTO_ATIVADO");

                entity.Property(e => e.QnProdutoAtualizado).HasColumnName("QN_PRODUTO_ATUALIZADO");

                entity.Property(e => e.QnProdutoCarga).HasColumnName("QN_PRODUTO_CARGA");

                entity.Property(e => e.QnProdutoDesativado).HasColumnName("QN_PRODUTO_DESATIVADO");

                entity.Property(e => e.QnProdutoInserido).HasColumnName("QN_PRODUTO_INSERIDO");

                entity.Property(e => e.QnProdutoTratado).HasColumnName("QN_PRODUTO_TRATADO");

                entity.Property(e => e.QnRegistroImportado).HasColumnName("QN_REGISTRO_IMPORTADO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxNomeArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_ARQUIVO");
            });

            modelBuilder.Entity<PrecoProdutoCargaLog>(entity =>
            {
                entity.HasKey(e => e.IdPrecoProdutoCargaLog);

                entity.HasIndex(e => new { e.IdPrecoProdutoCargaHistorico, e.InExclusao }, "IX_PrecoProdutoCargaLog_ID_PRECO_PRODUTO_CARGA_HISTORICO_IN_EXCLUSAO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdPrecoProdutoCargaLog).HasColumnName("ID_PRECO_PRODUTO_CARGA_LOG");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.IdPrecoProdutoCargaHistorico).HasColumnName("ID_PRECO_PRODUTO_CARGA_HISTORICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtualizacao).HasColumnName("IN_ATUALIZACAO");

                entity.Property(e => e.InExclusao).HasColumnName("IN_EXCLUSAO");

                entity.Property(e => e.InInsercao).HasColumnName("IN_INSERCAO");

                entity.Property(e => e.NrEdicao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NR_EDICAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoAtualizacao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_ATUALIZACAO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxPrecoTipo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_PRECO_TIPO");

                entity.Property(e => e.VlProduto).HasColumnName("VL_PRODUTO");
            });

            modelBuilder.Entity<PrecoProdutoDiretorioArquivo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TxLinhaDados)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS");
            });

            modelBuilder.Entity<PrecoProdutoLinhaDadosTransporteA>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PrecoProdutoLinhaDadosTransporte_A");

                entity.Property(e => e.TxLinhaDados1)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS1");

                entity.Property(e => e.TxLinhaDados2)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS2");

                entity.Property(e => e.TxLinhaDados3)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS3");

                entity.Property(e => e.TxLinhaDados4)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS4");

                entity.Property(e => e.TxLinhaDados5)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS5");
            });

            modelBuilder.Entity<PrecoProdutoLinhaDadosTransporteBteste>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PrecoProdutoLinhaDadosTransporte_BTESTE");

                entity.Property(e => e.TxLinhaDados)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA_DADOS");
            });

            modelBuilder.Entity<PrecoProdutoTabela>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PrecoProdutoTabela");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdTuss)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_TUSS");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdFabricante)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoTuss).HasColumnName("ID_SERVICO_TUSS");

                entity.Property(e => e.InAssociado).HasColumnName("IN_ASSOCIADO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.InAtualizacaoPreco).HasColumnName("IN_ATUALIZACAO_PRECO");

                entity.Property(e => e.InDesconto).HasColumnName("IN_DESCONTO");

                entity.Property(e => e.NmFabricante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmServicoCategoria)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.TxDescricao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxDescricaoTuss)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_TUSS");

                entity.Property(e => e.VlPrecoConsumidor)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_CONSUMIDOR");

                entity.Property(e => e.VlPrecoConsumidorAtualizado)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_CONSUMIDOR_ATUALIZADO");

                entity.Property(e => e.VlPrecoFabricante)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_FABRICANTE");

                entity.Property(e => e.VlPrecoFabricanteAtualizado)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_FABRICANTE_ATUALIZADO");
            });

            modelBuilder.Entity<PrecoProdutoTabelaSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PrecoProdutoTabelaSUS");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdFabricante)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAssociado).HasColumnName("IN_ASSOCIADO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.InAtualizacaoPreco).HasColumnName("IN_ATUALIZACAO_PRECO");

                entity.Property(e => e.InDesconto).HasColumnName("IN_DESCONTO");

                entity.Property(e => e.NmFabricante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmServicoCategoria)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.TxDescricao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlPrecoConsumidor)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_CONSUMIDOR");

                entity.Property(e => e.VlPrecoConsumidorAtualizado)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_CONSUMIDOR_ATUALIZADO");

                entity.Property(e => e.VlPrecoFabricante)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_FABRICANTE");

                entity.Property(e => e.VlPrecoFabricanteAtualizado)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_FABRICANTE_ATUALIZADO");
            });

            modelBuilder.Entity<PrecoProdutoTrabalho>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.CdServico, "IX_PrecoProdutoTrabalho_K1")
                    .IsClustered()
                    .HasFillFactor((byte)75);

                entity.HasIndex(e => new { e.IdServico, e.IdServicoProdutoTabela, e.InCadastroManual }, "IX_PrecoProdutoTrabalho_K2_K3")
                    .IsUnique()
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.CdServico, "IX_PrecoProdutoTrabalho_K4")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCadastroManual).HasColumnName("IN_CADASTRO_MANUAL");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlPrecoProdutoConsumidor).HasColumnName("VL_PRECO_PRODUTO_CONSUMIDOR");

                entity.Property(e => e.VlPrecoProdutoFabricante).HasColumnName("VL_PRECO_PRODUTO_FABRICANTE");
            });

            modelBuilder.Entity<PrecoProdutoTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.CdProduto, "IX_PrecoProdutoTransporte_K4")
                    .IsClustered()
                    .HasFillFactor((byte)85);

                entity.Property(e => e.CdApresentacao)
                    .IsUnicode(false)
                    .HasColumnName("CD_APRESENTACAO");

                entity.Property(e => e.CdBarras)
                    .IsUnicode(false)
                    .HasColumnName("CD_BARRAS");

                entity.Property(e => e.CdFabricante).HasColumnName("CD_FABRICANTE");

                entity.Property(e => e.CdPrecoTipo)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRECO_TIPO");

                entity.Property(e => e.CdProduto).HasColumnName("CD_PRODUTO");

                entity.Property(e => e.CdTiss).HasColumnName("CD_TISS");

                entity.Property(e => e.CdTuss).HasColumnName("CD_TUSS");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdPrecoprodutotransporte)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRECOPRODUTOTRANSPORTE");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InProdutoLista)
                    .IsUnicode(false)
                    .HasColumnName("IN_PRODUTO_LISTA");

                entity.Property(e => e.NmApresentacao)
                    .IsUnicode(false)
                    .HasColumnName("NM_APRESENTACAO");

                entity.Property(e => e.NmFabricante)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmProduto)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrEdicao).HasColumnName("NR_EDICAO");

                entity.Property(e => e.NrEdicaoAlteracao).HasColumnName("NR_EDICAO_ALTERACAO");

                entity.Property(e => e.PrIpi).HasColumnName("PR_IPI");

                entity.Property(e => e.QnFracionamento).HasColumnName("QN_FRACIONAMENTO");

                entity.Property(e => e.VlProduto).HasColumnName("VL_PRODUTO");

                entity.Property(e => e.VlProdutoFracionado).HasColumnName("VL_PRODUTO_FRACIONADO");
            });

            modelBuilder.Entity<PrecoProdutoTransporteTeste>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdApresentacao)
                    .IsUnicode(false)
                    .HasColumnName("CD_APRESENTACAO");

                entity.Property(e => e.CdBarras)
                    .IsUnicode(false)
                    .HasColumnName("CD_BARRAS");

                entity.Property(e => e.CdFabricante).HasColumnName("CD_FABRICANTE");

                entity.Property(e => e.CdPrecoTipo)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRECO_TIPO");

                entity.Property(e => e.CdProduto).HasColumnName("CD_PRODUTO");

                entity.Property(e => e.CdTiss).HasColumnName("CD_TISS");

                entity.Property(e => e.CdTuss).HasColumnName("CD_TUSS");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdPrecoprodutotransporte)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRECOPRODUTOTRANSPORTE");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InProdutoLista)
                    .IsUnicode(false)
                    .HasColumnName("IN_PRODUTO_LISTA");

                entity.Property(e => e.NmApresentacao)
                    .IsUnicode(false)
                    .HasColumnName("NM_APRESENTACAO");

                entity.Property(e => e.NmFabricante)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmProduto)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrEdicao).HasColumnName("NR_EDICAO");

                entity.Property(e => e.NrEdicaoAlteracao).HasColumnName("NR_EDICAO_ALTERACAO");

                entity.Property(e => e.PrIpi).HasColumnName("PR_IPI");

                entity.Property(e => e.QnFracionamento).HasColumnName("QN_FRACIONAMENTO");

                entity.Property(e => e.VlProduto).HasColumnName("VL_PRODUTO");

                entity.Property(e => e.VlProdutoFracionado).HasColumnName("VL_PRODUTO_FRACIONADO");
            });

            modelBuilder.Entity<Precoprodutounicoretorno>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("precoprodutounicoretorno");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("cd_servico");

                entity.Property(e => e.CdTuss)
                    .IsUnicode(false)
                    .HasColumnName("cd_tuss");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_vigencia");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("id_produto_detalhe");

                entity.Property(e => e.IdServico).HasColumnName("id_servico");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("id_servico_produto_tabela");

                entity.Property(e => e.IdServicoTuss)
                    .IsUnicode(false)
                    .HasColumnName("id_servico_tuss");

                entity.Property(e => e.InAssociado).HasColumnName("in_associado");

                entity.Property(e => e.InDesconto).HasColumnName("in_desconto");

                entity.Property(e => e.NmFabricante)
                    .IsUnicode(false)
                    .HasColumnName("nm_fabricante");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsUnicode(false)
                    .HasColumnName("nm_servico_produto_tabela");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("tx_descricao_servico");

                entity.Property(e => e.TxDescricaoTuss)
                    .IsUnicode(false)
                    .HasColumnName("tx_descricao_tuss");

                entity.Property(e => e.VlPrecoConsumidor)
                    .IsUnicode(false)
                    .HasColumnName("vl_preco_consumidor");

                entity.Property(e => e.VlPrecoFabricante)
                    .IsUnicode(false)
                    .HasColumnName("vl_preco_fabricante");
            });

            modelBuilder.Entity<Preparo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PREPARO");

                entity.Property(e => e.Classe)
                    .HasMaxLength(255)
                    .HasColumnName("classe");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");

                entity.Property(e => e.Preparo1).HasColumnName("Preparo");

                entity.Property(e => e.Procedimento).HasMaxLength(255);
            });

            modelBuilder.Entity<PrescricaoAnalise>(entity =>
            {
                entity.HasKey(e => e.IdPrescricao);

                entity.Property(e => e.IdPrescricao)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PRESCRICAO");

                entity.Property(e => e.DtPrescricaoAnalise)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PRESCRICAO_ANALISE");

                entity.Property(e => e.IdUsuarioAnalise).HasColumnName("ID_USUARIO_ANALISE");

                entity.Property(e => e.InAnaliseParcial).HasColumnName("IN_ANALISE_PARCIAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NecessidadeFarmacoterapeutica).HasColumnName("NECESSIDADE_FARMACOTERAPEUTICA");

                entity.Property(e => e.Prm).HasColumnName("PRM");

                entity.Property(e => e.TxObservacao)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdUsuarioAnaliseNavigation)
                    .WithMany(p => p.PrescricaoAnalise)
                    .HasForeignKey(d => d.IdUsuarioAnalise)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrescricaoAnalise_Usuario");
            });

            modelBuilder.Entity<PrescricaoAnaliseItem>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoPdEnfermagem)
                    .HasName("PK__Prescric__41EDB3A0541731FF");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAnalisado).HasColumnName("IN_ANALISADO");

                entity.Property(e => e.InNaoAplicavel).HasColumnName("IN_NAO_APLICAVEL");

                entity.Property(e => e.InNaoAprovado).HasColumnName("IN_NAO_APROVADO");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemNavigation)
                    .WithOne(p => p.PrescricaoAnaliseItem)
                    .HasForeignKey<PrescricaoAnaliseItem>(d => d.IdSolicitacaoPdEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrescricaoAnaliseItem_Solicitacao_PD_Enfermagem");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PrescricaoAnaliseItem)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_PRESCRICAOANALISEITEM_USUARIO");
            });

            modelBuilder.Entity<PrescricaoAnaliseItemHistorico>(entity =>
            {
                entity.HasKey(e => e.IdPrescricaoAnaliseItemHistorico);

                entity.HasIndex(e => e.DtPrescricaoAnaliseItemHistoricoUtc, "ix_01")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdPrescricaoAnaliseItemHistorico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PRESCRICAO_ANALISE_ITEM_HISTORICO");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.DtPrescricaoAnaliseItemHistoricoUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PRESCRICAO_ANALISE_ITEM_HISTORICO_UTC");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAnalisado).HasColumnName("IN_ANALISADO");

                entity.Property(e => e.InNaoAplicavel).HasColumnName("IN_NAO_APLICAVEL");

                entity.Property(e => e.InNaoAprovado).HasColumnName("IN_NAO_APROVADO");
            });

            modelBuilder.Entity<PrescricaoImportacaoUsuario>(entity =>
            {
                entity.HasKey(e => e.IdPrescricaoImportacaoUsuario)
                    .HasName("PK__Prescric__C54B313433755843");

                entity.Property(e => e.IdPrescricaoImportacaoUsuario).HasColumnName("ID_PRESCRICAO_IMPORTACAO_USUARIO");

                entity.Property(e => e.DtValidacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDACAO");

                entity.Property(e => e.DtVisualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VISUALIZACAO");

                entity.Property(e => e.IdPrescricaoImportacao).HasColumnName("ID_PRESCRICAO_IMPORTACAO");

                entity.Property(e => e.IdPrescricaoVisualizacao).HasColumnName("ID_PRESCRICAO_VISUALIZACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdPrescricaoImportacaoNavigation)
                    .WithMany(p => p.PrescricaoImportacaoUsuarioIdPrescricaoImportacaoNavigation)
                    .HasForeignKey(d => d.IdPrescricaoImportacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrescricaoImportacaoUsuarioImportacao_Solicitacao");

                entity.HasOne(d => d.IdPrescricaoVisualizacaoNavigation)
                    .WithMany(p => p.PrescricaoImportacaoUsuarioIdPrescricaoVisualizacaoNavigation)
                    .HasForeignKey(d => d.IdPrescricaoVisualizacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrescricaoImportacaoUsuarioVisualizacao_Solicitacao");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.PrescricaoImportacaoUsuario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrescricaoImportacaoUsuario_Usuario");
            });

            modelBuilder.Entity<PrescricaoPadrao>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacao);

                entity.Property(e => e.IdSolicitacao)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithOne(p => p.PrescricaoPadrao)
                    .HasForeignKey<PrescricaoPadrao>(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrescricaoPadrao_Solicitacao");
            });

            modelBuilder.Entity<PrestadorServico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PrestadorServico");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CdInscricaoEstadual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_ESTADUAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CdInscricaoMunicipal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_INSCRICAO_MUNICIPAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DtInicioAtividade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_INICIO_ATIVIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdEmpresaTipo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_EMPRESA_TIPO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdPrestadorservico).HasColumnName("ID_PRESTADORSERVICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmPrestadorservico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRESTADORSERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_RAZAO_SOCIAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<PrincipioAtivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PrincipioAtivo");

                entity.Property(e => e.IdTipoDiversos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.TxDescTipo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TIPO");
            });

            modelBuilder.Entity<ProcDmInternoExterno>(entity =>
            {
                entity.HasKey(e => e.IdInternoExterno);

                entity.ToTable("PROC_DM_INTERNO_EXTERNO");

                entity.Property(e => e.IdInternoExterno)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_INTERNO_EXTERNO");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ProcedimentoCalculado>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .HasMaxLength(50)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdCapitulo).HasColumnName("ID_CAPITULO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoProdutoTabelaTipo).HasColumnName("ID_SERVICO_PRODUTO_TABELA_TIPO");

                entity.Property(e => e.IdSubespecialidade).HasColumnName("ID_SUBESPECIALIDADE");

                entity.Property(e => e.IdTipoMoeda).HasColumnName("ID_TIPO_MOEDA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InReal).HasColumnName("IN_REAL");

                entity.Property(e => e.InValorMonetario).HasColumnName("IN_VALOR_MONETARIO");

                entity.Property(e => e.NrPorteAnestesico).HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte).HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares).HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme).HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia).HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricao).HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(50)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(5)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlChExternoRedutorHonorario).HasColumnName("VL_CH_EXTERNO_REDUTOR_HONORARIO");

                entity.Property(e => e.VlChInternoRedutoCustoOperacional).HasColumnName("VL_CH_INTERNO_REDUTO_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlHonorarioAnestesista).HasColumnName("VL_HONORARIO_ANESTESISTA");

                entity.Property(e => e.VlHonorarioMedico).HasColumnName("VL_HONORARIO_MEDICO");

                entity.Property(e => e.VlUnidadeCustoOperacional).HasColumnName("VL_UNIDADE_CUSTO_OPERACIONAL");
            });

            modelBuilder.Entity<ProcedimentoCihagenerico>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProcedimentoCIHAGenerico");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(255)
                    .HasColumnName("CODIGO");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(255)
                    .HasColumnName("DESCRICAO");
            });

            modelBuilder.Entity<ProcedimentoMedico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProcedimentoMedico");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia).HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxDescricaoReferencia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_REFERENCIA");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<ProcedimentoMedicoAgrupamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProcedimentoMedicoAgrupamento");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoPai).HasColumnName("ID_SERVICO_PAI");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InExcecao).HasColumnName("IN_EXCECAO");

                entity.Property(e => e.InValorMonetario)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("IN_VALOR_MONETARIO");

                entity.Property(e => e.NmServicoCategoria)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<ProcedimentoMedicoAgrupamentoAjuste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProcedimentoMedicoAgrupamentoAjuste");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoPai).HasColumnName("ID_SERVICO_PAI");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InExcecao).HasColumnName("IN_EXCECAO");

                entity.Property(e => e.InValorMonetario).HasColumnName("IN_VALOR_MONETARIO");

                entity.Property(e => e.NmServicoCategoria)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios).HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<ProcedimentoMedicoBi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProcedimentoMedico_BI");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia).HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxDescricaoReferencia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_REFERENCIA");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<ProcedimentoMedicoSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProcedimentoMedicoSUS");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia).HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxDescricaoReferencia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_REFERENCIA");
            });

            modelBuilder.Entity<ProcedimentoPedido>(entity =>
            {
                entity.HasKey(e => e.IdProcedimentoPedido);

                entity.HasIndex(e => new { e.IdAtendimento, e.InAtivo }, "IX_ProcedimentoPedido_ID_ATENDIMENTO_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdStatusPedido, e.IdUnidadeSolicitante, e.InAtivo, e.DtPedido }, "IX_ProcedimentoPedido_ID_STATUS_PEDIDO_ID_UNIDADE_SOLICITANTE_IN_ATIVO_DT_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatusPedido, e.InAtivo }, "IX_ProcedimentoPedido_ID_STATUS_PEDIDO_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatusPedido, e.InAtivo, e.DtPedido }, "IX_ProcedimentoPedido_ID_STATUS_PEDIDO_IN_ATIVO_DT_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProcedimentoPedido)
                    .HasColumnName("ID_PROCEDIMENTO_PEDIDO")
                    .HasComment("identificador unico do pedido de procedimento");

                entity.Property(e => e.DtCriacaoPedido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO_PEDIDO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("date em que o profissional criou a solicitação");

                entity.Property(e => e.DtPedido)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PEDIDO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data que o profissional preencheu para o exame");

                entity.Property(e => e.IdAtendimento)
                    .HasColumnName("ID_ATENDIMENTO")
                    .HasComment("atendimento do paciente");

                entity.Property(e => e.IdLeito)
                    .HasColumnName("ID_LEITO")
                    .HasComment("leito que o paciente estava na hora da solicitação");

                entity.Property(e => e.IdMotivoPrioridade)
                    .HasColumnName("ID_MOTIVO_PRIORIDADE")
                    .HasComment("motido para pedidos emergenciais, tabela 236");

                entity.Property(e => e.IdPrioridade)
                    .HasColumnName("ID_PRIORIDADE")
                    .HasComment("prioridade do pedido, tabela 104");

                entity.Property(e => e.IdProcedimento)
                    .HasColumnName("ID_PROCEDIMENTO")
                    .HasComment("procedimento solicitado da tabela Procedimentos");

                entity.Property(e => e.IdProfissional)
                    .HasColumnName("ID_PROFISSIONAL")
                    .HasComment("profissional de saúde solicitante");

                entity.Property(e => e.IdRegiaoAplicacao)
                    .HasColumnName("ID_REGIAO_APLICACAO")
                    .HasComment("região da aplicação do procedimento, tabela 185");

                entity.Property(e => e.IdStatusAutorizacao)
                    .HasColumnName("ID_STATUS_AUTORIZACAO")
                    .HasComment("status sobre a autorização do pedido, tabela 429");

                entity.Property(e => e.IdStatusPedido)
                    .HasColumnName("ID_STATUS_PEDIDO")
                    .HasComment("status do pedido, tipo tabela 430");

                entity.Property(e => e.IdUnidadeAgendamento).HasColumnName("ID_UNIDADE_AGENDAMENTO");

                entity.Property(e => e.IdUnidadeSolicitante)
                    .HasColumnName("ID_UNIDADE_SOLICITANTE")
                    .HasComment("unidade organizacional que o paciente estava na hora da solicitação");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.InLocal)
                    .HasColumnName("IN_LOCAL")
                    .HasDefaultValueSql("((0))")
                    .HasComment("se realiza o procedimento no local");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("observação do pedido");

                entity.Property(e => e.TxSuspeita)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_SUSPEITA")
                    .HasComment("suspeita clínica do pedido");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ProcedimentoPedido)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcedimentoPedido_Atendimento");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.ProcedimentoPedido)
                    .HasForeignKey(d => d.IdLeito)
                    .HasConstraintName("FK_ProcedimentoPedido_Leito");

                entity.HasOne(d => d.IdMotivoPrioridadeNavigation)
                    .WithMany(p => p.ProcedimentoPedidoIdMotivoPrioridadeNavigation)
                    .HasForeignKey(d => d.IdMotivoPrioridade)
                    .HasConstraintName("FK_ProcedimentoPedido_TipoDiversos4");

                entity.HasOne(d => d.IdPrioridadeNavigation)
                    .WithMany(p => p.ProcedimentoPedidoIdPrioridadeNavigation)
                    .HasForeignKey(d => d.IdPrioridade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcedimentoPedido_TipoDiversos3");

                entity.HasOne(d => d.IdProcedimentoNavigation)
                    .WithMany(p => p.ProcedimentoPedido)
                    .HasForeignKey(d => d.IdProcedimento)
                    .HasConstraintName("FK_ProcedimentoPedido_Procedimentos");

                entity.HasOne(d => d.IdProfissionalNavigation)
                    .WithMany(p => p.ProcedimentoPedido)
                    .HasForeignKey(d => d.IdProfissional)
                    .HasConstraintName("FK_ProcedimentoPedido_Pessoa");

                entity.HasOne(d => d.IdRegiaoAplicacaoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoIdRegiaoAplicacaoNavigation)
                    .HasForeignKey(d => d.IdRegiaoAplicacao)
                    .HasConstraintName("FK_ProcedimentoPedido_TipoDiversos");

                entity.HasOne(d => d.IdStatusAutorizacaoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoIdStatusAutorizacaoNavigation)
                    .HasForeignKey(d => d.IdStatusAutorizacao)
                    .HasConstraintName("FK_ProcedimentoPedido_TipoDiversos2");

                entity.HasOne(d => d.IdStatusPedidoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoIdStatusPedidoNavigation)
                    .HasForeignKey(d => d.IdStatusPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcedimentoPedido_TipoDiversos1");

                entity.HasOne(d => d.IdUnidadeAgendamentoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoIdUnidadeAgendamentoNavigation)
                    .HasForeignKey(d => d.IdUnidadeAgendamento)
                    .HasConstraintName("FK_ProcedimentoPedido_UnidadeOrganizacional1");

                entity.HasOne(d => d.IdUnidadeSolicitanteNavigation)
                    .WithMany(p => p.ProcedimentoPedidoIdUnidadeSolicitanteNavigation)
                    .HasForeignKey(d => d.IdUnidadeSolicitante)
                    .HasConstraintName("FK_ProcedimentoPedido_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ProcedimentoPedidoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdProcedimentoPedidoHistorico);

                entity.Property(e => e.IdProcedimentoPedidoHistorico).HasColumnName("ID_PROCEDIMENTO_PEDIDO_HISTORICO");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data da alteração");

                entity.Property(e => e.IdProcedimentoPedido).HasColumnName("ID_PROCEDIMENTO_PEDIDO");

                entity.Property(e => e.IdStatus)
                    .HasColumnName("ID_STATUS")
                    .HasComment("status que foi alterada, tabela 429 e 430");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("usuario que realizou a alteração");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdProcedimentoPedidoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoHistorico)
                    .HasForeignKey(d => d.IdProcedimentoPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcedimentoPedidoHistorico_ProcedimentoPedido");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.ProcedimentoPedidoHistorico)
                    .HasForeignKey(d => d.IdStatus)
                    .HasConstraintName("FK_ProcedimentoPedidoHistorico_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProcedimentoPedidoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcedimentoPedidoHistorico_Usuario");
            });

            modelBuilder.Entity<ProcedimentoPedidoProcedimentos>(entity =>
            {
                entity.HasKey(e => e.IdProcedimentoPedidoProcedimento)
                    .HasName("PK__Procedim__0784729620379B46");

                entity.ToTable("ProcedimentoPedido_Procedimentos");

                entity.Property(e => e.IdProcedimentoPedidoProcedimento).HasColumnName("ID_PROCEDIMENTO_PEDIDO_PROCEDIMENTO");

                entity.Property(e => e.DtAgenda)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDA");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.IdProcedimentoPedido).HasColumnName("ID_PROCEDIMENTO_PEDIDO");

                entity.Property(e => e.IdRegiaoAplicacao).HasColumnName("ID_REGIAO_APLICACAO");

                entity.Property(e => e.IdStatusAutorizacao).HasColumnName("ID_STATUS_AUTORIZACAO");

                entity.Property(e => e.IdStatusPedido).HasColumnName("ID_STATUS_PEDIDO");

                entity.Property(e => e.IdUnidadeAgendamento).HasColumnName("ID_UNIDADE_AGENDAMENTO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InLocal).HasColumnName("IN_LOCAL");

                entity.HasOne(d => d.IdProcedimentoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoProcedimentos)
                    .HasForeignKey(d => d.IdProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Procedime__ID_PR__231407F1");

                entity.HasOne(d => d.IdProcedimentoPedidoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoProcedimentos)
                    .HasForeignKey(d => d.IdProcedimentoPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Procedime__ID_PR__221FE3B8");

                entity.HasOne(d => d.IdRegiaoAplicacaoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoProcedimentosIdRegiaoAplicacaoNavigation)
                    .HasForeignKey(d => d.IdRegiaoAplicacao)
                    .HasConstraintName("FK__Procedime__ID_RE__24082C2A");

                entity.HasOne(d => d.IdStatusAutorizacaoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoProcedimentosIdStatusAutorizacaoNavigation)
                    .HasForeignKey(d => d.IdStatusAutorizacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Procedime__ID_ST__25F0749C");

                entity.HasOne(d => d.IdStatusPedidoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoProcedimentosIdStatusPedidoNavigation)
                    .HasForeignKey(d => d.IdStatusPedido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Procedime__ID_ST__24FC5063");

                entity.HasOne(d => d.IdUnidadeAgendamentoNavigation)
                    .WithMany(p => p.ProcedimentoPedidoProcedimentos)
                    .HasForeignKey(d => d.IdUnidadeAgendamento)
                    .HasConstraintName("FK__Procedime__ID_UN__26E498D5");
            });

            modelBuilder.Entity<ProcedimentoPedidoProcedimentosHistorico>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProcedimentoPedido_ProcedimentosHistorico");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdProcedimentoPedidoProcedimento).HasColumnName("ID_PROCEDIMENTO_PEDIDO_PROCEDIMENTO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdStatusAutorizacao).HasColumnName("ID_STATUS_AUTORIZACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdStatus)
                    .HasConstraintName("FK__Procedime__ID_ST__2BA94DF2");

                entity.HasOne(d => d.IdStatusAutorizacaoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdStatusAutorizacao)
                    .HasConstraintName("FK__Procedime__ID_ST__2C9D722B");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Procedime__ID_US__2AB529B9");
            });

            modelBuilder.Entity<ProcedimentoSecundarioFolhaDeSala>(entity =>
            {
                entity.HasKey(e => new { e.IdProcedimentoPrincipal, e.IdCheckinEnfermagem, e.IdProcedimentoSecundario });

                entity.HasIndex(e => e.DtRealizado, "IX_ProcedimentoSecundarioFolhaDeSala_DT_REALIZADO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdServicoGuia, "IX_ProcedimentoSecundarioFolhaDeSala_ID_SERVICO_GUIA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdCheckinEnfermagem, "ProcedimentoSecundarioFolhaDeSala_CheckinEnfermagem")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProcedimentoPrincipal).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdProcedimentoSecundario).HasColumnName("ID_PROCEDIMENTO_SECUNDARIO");

                entity.Property(e => e.DtRealizado)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZADO");

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.IdServicoRegiaoAplicacao).HasColumnName("ID_SERVICO_REGIAO_APLICACAO");

                entity.Property(e => e.InOutraVia).HasColumnName("IN_OUTRA_VIA");

                entity.Property(e => e.QnRealizado).HasColumnName("QN_REALIZADO");

                entity.HasOne(d => d.IdProcedimentoSecundarioNavigation)
                    .WithMany(p => p.ProcedimentoSecundarioFolhaDeSala)
                    .HasForeignKey(d => d.IdProcedimentoSecundario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcedimentoSecundarioFolhaDeSala_Servico");

                entity.HasOne(d => d.IdServicoGuiaNavigation)
                    .WithMany(p => p.ProcedimentoSecundarioFolhaDeSala)
                    .HasForeignKey(d => d.IdServicoGuia)
                    .HasConstraintName("Servico_Guia_ProcedimentoSecundarioFolhaDeSala_FK1");

                entity.HasOne(d => d.IdServicoRegiaoAplicacaoNavigation)
                    .WithMany(p => p.ProcedimentoSecundarioFolhaDeSala)
                    .HasForeignKey(d => d.IdServicoRegiaoAplicacao)
                    .HasConstraintName("FK_ProcedimentoSecundarioFolhaDeSala_RegiaoAplicacao");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProcedimentoSecundarioFolhaDeSala)
                    .HasForeignKey(d => new { d.IdProcedimentoPrincipal, d.IdCheckinEnfermagem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcedimentoSecundarioFolhaDeSala_Folhadesala");
            });

            modelBuilder.Entity<Procedimentos>(entity =>
            {
                entity.HasKey(e => e.IdProcedimento);

                entity.Property(e => e.IdProcedimento)
                    .HasColumnName("ID_PROCEDIMENTO")
                    .HasComment("chave identity do procedimento de imagem");

                entity.Property(e => e.IdTipoProcedimento)
                    .HasColumnName("ID_TIPO_PROCEDIMENTO")
                    .HasComment("tipo do procedimento, tabela 431");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.NmProcedimento)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROCEDIMENTO")
                    .HasComment("nome do procedimento");

                entity.Property(e => e.TxPreparoPaciente)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_PREPARO_PACIENTE")
                    .HasComment("preparo do paciente");

                entity.HasOne(d => d.IdTipoProcedimentoNavigation)
                    .WithMany(p => p.Procedimentos)
                    .HasForeignKey(d => d.IdTipoProcedimento)
                    .HasConstraintName("FK_Procedimentos_TipoDiversos");
            });

            modelBuilder.Entity<ProcedimentosComRepasse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProcedimentosComRepasse");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InExcecao).HasColumnName("IN_EXCECAO");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.Pai)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAI");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<ProcedimentosRecurso>(entity =>
            {
                entity.HasKey(e => new { e.IdProcedimento, e.IdRecurso });

                entity.ToTable("Procedimentos_Recurso");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdProcedimentoNavigation)
                    .WithMany(p => p.ProcedimentosRecurso)
                    .HasForeignKey(d => d.IdProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Procedimentos_Recurso_Procedimentos");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.ProcedimentosRecurso)
                    .HasForeignKey(d => d.IdRecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Procedimentos_Recurso_Recurso");
            });

            modelBuilder.Entity<ProcedimentosRegiaoAplicacao>(entity =>
            {
                entity.HasKey(e => new { e.IdProcedimento, e.IdRegiaoAplicacao });

                entity.ToTable("Procedimentos_RegiaoAplicacao");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.IdRegiaoAplicacao)
                    .HasColumnName("ID_REGIAO_APLICACAO")
                    .HasComment("tipo tabela 185");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdProcedimentoNavigation)
                    .WithMany(p => p.ProcedimentosRegiaoAplicacao)
                    .HasForeignKey(d => d.IdProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Procedimentos_RegiaoAplicacao_Procedimentos");

                entity.HasOne(d => d.IdRegiaoAplicacaoNavigation)
                    .WithMany(p => p.ProcedimentosRegiaoAplicacao)
                    .HasForeignKey(d => d.IdRegiaoAplicacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Procedimentos_RegiaoAplicacao_TipoDiversos");
            });

            modelBuilder.Entity<ProcedimentosServico>(entity =>
            {
                entity.HasKey(e => e.IdProcedimentoServico);

                entity.ToTable("Procedimentos_Servico");

                entity.Property(e => e.IdProcedimentoServico).HasColumnName("ID_PROCEDIMENTO_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProcedimento).HasColumnName("ID_PROCEDIMENTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProcedimentosServico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Procedimentos_Servico_Pessoa");

                entity.HasOne(d => d.IdProcedimentoNavigation)
                    .WithMany(p => p.ProcedimentosServico)
                    .HasForeignKey(d => d.IdProcedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Procedimentos_Servico_Procedimentos");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ProcedimentosServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Procedimentos_Servico_Servico");
            });

            modelBuilder.Entity<ProcedimentosUnidadeTraducao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PROCEDIMENTOS_UNIDADE_TRADUCAO");

                entity.Property(e => e.CdConv)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cd_conv")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.CdRef)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cd_ref")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Expr1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ProcessamentoArquivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PROCESSAMENTO_ARQUIVO");

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("ID_ARQUIVO_UNIMED");

                entity.Property(e => e.NmArquivo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");
            });

            modelBuilder.Entity<ProcessamentoMedio>(entity =>
            {
                entity.HasKey(e => new { e.DtMesProcessamento, e.DtAnoProcessamento });

                entity.Property(e => e.DtMesProcessamento).HasColumnName("DT_MES_PROCESSAMENTO");

                entity.Property(e => e.DtAnoProcessamento).HasColumnName("DT_ANO_PROCESSAMENTO");

                entity.Property(e => e.InProcessado).HasColumnName("IN_PROCESSADO");
            });

            modelBuilder.Entity<ProcsThatExecute>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FirstExecutionTime)
                    .HasColumnType("datetime")
                    .HasColumnName("firstExecutionTime");

                entity.Property(e => e.LastExecutionTime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastExecutionTime");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("procName");
            });

            modelBuilder.Entity<Produto>(entity =>
            {
                entity.HasKey(e => e.IdProduto)
                    .HasName("Produto_PK");

                entity.HasIndex(e => e.InAtivo, "IX_Produto_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.NmProduto, "IX_Produto_K2_1_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdClassificacaoGeral, e.IdProduto }, "IX_Produto_K6_K1_2")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdClassificacaoGeral, e.InAtivo }, "IX_Produto_K6_K4_1_2")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdListaMedControlado, "IX_Produto_ListaMedicamentoControlado")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdProduto)
                    .HasColumnName("ID_PRODUTO")
                    .HasComment("Identificador único e incremental. ");

                entity.Property(e => e.IdClassificacaoGeral)
                    .HasColumnName("ID_CLASSIFICACAO_GERAL")
                    .HasComment("FK com ClassificacaoProduto. Tem a função de classificar o produto como por exemplo: Material, Medicamento e etc... \r\n");

                entity.Property(e => e.IdEspecialidade)
                    .HasColumnName("ID_ESPECIALIDADE")
                    .HasComment("FK com TipoDiversos. Associa uma Especialidade a um Produto.");

                entity.Property(e => e.IdListaMedControlado)
                    .HasColumnName("ID_LISTA_MED_CONTROLADO")
                    .HasComment("FK com ListaMedicamentoControlado. Se for <> de NULL , informará qual lista de medicamento controlado o mesmo pertence. ");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)")
                    .HasComment("Diz se o produto está ativo ou não.");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO")
                    .HasComment("Armazena nome do Produto");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdClassificacaoGeralNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdClassificacaoGeral)
                    .HasConstraintName("FK_Produto_ClassificacaoProduto");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_Produto_TipoDiversos");

                entity.HasOne(d => d.IdListaMedControladoNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdListaMedControlado)
                    .HasConstraintName("FK_Produto_ListaMedicamentoControlado");
            });

            modelBuilder.Entity<ProdutoClassificacaoContabilPlanoContaContabil>(entity =>
            {
                entity.HasKey(e => e.IdProduto)
                    .HasName("PK_Produto_ClassificacaoContabil_PlanoContaContabil_1");

                entity.ToTable("Produto_ClassificacaoContabil_PlanoContaContabil");

                entity.Property(e => e.IdProduto)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PRODUTO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdClassificacaoContabil).HasColumnName("ID_CLASSIFICACAO_CONTABIL");

                entity.Property(e => e.IdPlanoContaContabil).HasColumnName("ID_PLANO_CONTA_CONTABIL");

                entity.Property(e => e.IdPlanoContaFinanceiro).HasColumnName("ID_PLANO_CONTA_FINANCEIRO");

                entity.Property(e => e.IdUsuarioAtualizacao).HasColumnName("ID_USUARIO_ATUALIZACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdClassificacaoContabilNavigation)
                    .WithMany(p => p.ProdutoClassificacaoContabilPlanoContaContabil)
                    .HasForeignKey(d => d.IdClassificacaoContabil)
                    .HasConstraintName("FK_Produto_ClassificacaoContabil_PlanoContaContabil_ClassificacaoContabil");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithOne(p => p.ProdutoClassificacaoContabilPlanoContaContabil)
                    .HasForeignKey<ProdutoClassificacaoContabilPlanoContaContabil>(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Produto_ClassificacaoContabil_PlanoContaContabil_Produto");

                entity.HasOne(d => d.IdUsuarioAtualizacaoNavigation)
                    .WithMany(p => p.ProdutoClassificacaoContabilPlanoContaContabilIdUsuarioAtualizacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtualizacao)
                    .HasConstraintName("FK_Produto_ClassificacaoContabil_PlanoContaContabil_Usuario_Atu");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ProdutoClassificacaoContabilPlanoContaContabilIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Produto_ClassificacaoContabil_PlanoContaContabil_Usuario_Cad");
            });

            modelBuilder.Entity<ProdutoClassificacaoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdProduto, e.IdClassificacao })
                    .HasName("Produto_ClassificacaoProduto_PK");

                entity.ToTable("Produto_ClassificacaoProduto");

                entity.HasIndex(e => e.IdClassificacao, "IX_Produto_ClassificacaoProduto_K2_1")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProduto)
                    .HasColumnName("ID_PRODUTO")
                    .HasComment("Identificador de Protudo. PK-FK da tabela Produto.");

                entity.Property(e => e.IdClassificacao)
                    .HasColumnName("ID_CLASSIFICACAO")
                    .HasComment("Identificador de ClassificacaoProduto. PK-FK da tabela ClassificacaoProduto.\r\n");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ProdutoClassificacaoProduto)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_Produto_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ProdutoClassificacaoProduto)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Produto_Produto_ClassificacaoProduto_FK1");
            });

            modelBuilder.Entity<ProdutoDescricao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Descricao");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(2263)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");
            });

            modelBuilder.Entity<ProdutoDescricaoTudo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Descricao_Tudo");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(1783)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO");

                entity.Property(e => e.IdClassificacaoGeral)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");
            });

            modelBuilder.Entity<ProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalhe)
                    .HasName("ProdutoDetalhe_PK");

                entity.HasIndex(e => new { e.IdProduto, e.InAtivo }, "IX_ProdutoDetalhe_ID_PRODUTO_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.InAtivo, "IX_ProdutoDetalhe_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.InPadronizado, "IX_ProdutoDetalhe_IN_PADRONIZADO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdProduto, "IX_ProdutoDetalhe_K2_1_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("Identificador unico da Tabela. Representa um produto detalhe.\r\n");

                entity.Property(e => e.ArImagem).HasColumnName("AR_IMAGEM");

                entity.Property(e => e.IdMdCompra)
                    .HasColumnName("ID_MD_COMPRA")
                    .HasComment("Unidade de Medida de compra do Produto Detalhe. FK com TipoDiversos.\r\n");

                entity.Property(e => e.IdMdConsumoMinimo)
                    .HasColumnName("ID_MD_CONSUMO_MINIMO")
                    .HasComment("Unidade de Medida de consumo do Produto Detalhe. FK com TipoDiversos.\r\n");

                entity.Property(e => e.IdProduto)
                    .HasColumnName("ID_PRODUTO")
                    .HasComment("FK com Produto.");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InBaseKit)
                    .HasColumnName("IN_BASE_KIT")
                    .HasDefaultValueSql("(0)")
                    .HasComment("Controle que informa se o produto detalhe compoe um KIT de MAT/MED.");

                entity.Property(e => e.InPadronizado)
                    .HasColumnName("IN_PADRONIZADO")
                    .HasComment("Controle para dizer se o produto é ou não padrão ou seja, se faz parte de um conjunto de produtos que o Hospital sempre tem.\r\n");

                entity.Property(e => e.InPendenteCadastro).HasColumnName("IN_PENDENTE_CADASTRO");

                entity.Property(e => e.QnConsumoMinimo)
                    .HasColumnName("QN_CONSUMO_MINIMO")
                    .HasComment("Quantida minima de consumo do Produto.");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO")
                    .HasComment("Texto com complemento do Produto em realação ao Produto Detalhe.\r\n");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdMdCompraNavigation)
                    .WithMany(p => p.ProdutoDetalheIdMdCompraNavigation)
                    .HasForeignKey(d => d.IdMdCompra)
                    .HasConstraintName("FK_ProdutoDetalhe_TipoDiversos1");

                entity.HasOne(d => d.IdMdConsumoMinimoNavigation)
                    .WithMany(p => p.ProdutoDetalheIdMdConsumoMinimoNavigation)
                    .HasForeignKey(d => d.IdMdConsumoMinimo)
                    .HasConstraintName("FK_ProdutoDetalhe_TipoDiversos");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ProdutoDetalhe)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Produto_ProdutoDetalhe_FK1");
            });

            modelBuilder.Entity<ProdutoDetalheAtributo>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdAtributo })
                    .HasName("ProdutoDetalhe_Atributo_PK");

                entity.ToTable("ProdutoDetalhe_Atributo");

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_ProdutoDetalhe_Atributo_K1_2_3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdAtributo, e.IdProdutoDetalhe, e.VlAtributo }, "IX_ProdutoDetalhe_Atributo_K2_K1_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdAtributo, e.VlAtributo }, "IX_ProdutoDetalhe_Atributo_K2_K3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK da Tabela. FK com ProdutoDetalhe");

                entity.Property(e => e.IdAtributo)
                    .HasColumnName("ID_ATRIBUTO")
                    .HasComment("PK da Tabela. FK com Atributo.");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlAtributo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VL_ATRIBUTO")
                    .HasComment("Valor que representa de alguma forma o Atributo relacionado.");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.ProdutoDetalheAtributo)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_ProdutoDetalhe_Atributo_FK1");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoDetalheAtributo)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_ProdutoDetalhe_Atributo_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProdutoDetalheAtributo)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("ProdutoDetalhe_Atributo_Usuario_FK1");
            });

            modelBuilder.Entity<ProdutoDetalheAtributoLog>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalheAtributoLog)
                    .HasName("ProdutoDetalhe_Atributo_Log_PK");

                entity.ToTable("ProdutoDetalhe_Atributo_Log");

                entity.Property(e => e.IdProdutoDetalheAtributoLog).HasColumnName("ID_PRODUTO_DETALHE_ATRIBUTO_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.VlAtributo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VL_ATRIBUTO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ProdutoDetalheAtributoLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<ProdutoDetalheBarreiraHorario>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalheBarreiraHorario);

                entity.ToTable("ProdutoDetalhe_BarreiraHorario");

                entity.Property(e => e.IdProdutoDetalheBarreiraHorario).HasColumnName("ID_PRODUTO_DETALHE_BARREIRA_HORARIO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HrFixo)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIXO");

                entity.Property(e => e.HrIntervaloFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INTERVALO_FINAL");

                entity.Property(e => e.HrIntervaloInicial)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INTERVALO_INICIAL");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoDetalheBarreiraHorario)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_BarreiraHorario_ProdutoDetalhe");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ProdutoDetalheBarreiraHorario)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_BarreiraHorario_Usuario");
            });

            modelBuilder.Entity<ProdutoDetalheFabricante>(entity =>
            {
                entity.HasKey(e => new { e.IdFabricante, e.IdProdutoDetalhe })
                    .HasName("ProdutoDetalhe_Fabricante_PK");

                entity.ToTable("ProdutoDetalhe_Fabricante");

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.NrCodigoBarras }, "IX_ProdutoDetalhe_Fabricante_ID_PRODUTO_DETALHE_NR_CODIGO_BARRAS")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtivo, e.NrCodigoBarras }, "IX_ProdutoDetalhe_Fabricante_IN_ATIVO_NR_CODIGO_BARRAS")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_ProdutoDetalhe_Fabricante_K2_K1_5")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("PK da Tabela. FK com Pessoa (Fabricante)");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK da tabela. FK com ProdutoDetalhe.\r\n");

                entity.Property(e => e.IdServicoTuss).HasColumnName("ID_SERVICO_TUSS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS")
                    .HasComment("Número do Codigo de barras do produto no Fabricante.\r\n");

                entity.Property(e => e.NrRegistroAnvisa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_REGISTRO_ANVISA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFabricanteNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricante)
                    .HasForeignKey(d => d.IdFabricante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ProdutoDetalhe_Fabricante_FK1");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricante)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_ProdutoDetalhe_Fabricante_FK1");

                entity.HasOne(d => d.IdServicoTussNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricante)
                    .HasForeignKey(d => d.IdServicoTuss)
                    .HasConstraintName("FK_ProdutoDetalhe_Fabricante_Servico");
            });

            modelBuilder.Entity<ProdutoDetalheFabricanteCodigoBarras>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalheFabricanteCodigoBarras);

                entity.ToTable("ProdutoDetalhe_Fabricante_CodigoBarras");

                entity.Property(e => e.IdProdutoDetalheFabricanteCodigoBarras).HasColumnName("ID_PRODUTO_DETALHE_FABRICANTE_CODIGO_BARRAS");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.HasOne(d => d.IdFabricanteNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricanteCodigoBarras)
                    .HasForeignKey(d => d.IdFabricante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_Fabricante_CodigoBarras_Pessoa");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricanteCodigoBarras)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_Fabricante_CodigoBarras_ProdutoDetalhe");
            });

            modelBuilder.Entity<ProdutoDetalheFabricanteServicoProdutoTabela>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.IdServicoProdutoTabela, e.IdServico })
                    .HasName("ProdutoDetalhe_Fabricante_ServiçoProdutoTabela_PK");

                entity.ToTable("ProdutoDetalhe_Fabricante_ServicoProdutoTabela");

                entity.HasIndex(e => new { e.IdServicoProdutoTabela, e.IdServico }, "IX_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_ID_SERVICO_PRODUTO_TABELA_ID_SERVICO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoDetalheFabricanteServicoProdutoTabela)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_FK1");
            });

            modelBuilder.Entity<ProdutoDetalheFabricanteServicoProdutoTabelaOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.IdServicoProdutoTabela, e.IdServico, e.IdOperadora, e.DtVigencia })
                    .HasName("ProdutoDetalhe_Fabricante_ServiçoProdutoTabela_Operadora_PK");

                entity.ToTable("ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Operadora");

                entity.HasIndex(e => e.IdOperadora, "IX_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Operadora_ID_OPERADORA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServicoProdutoTabela, e.IdServico, e.IdOperadora, e.DtVigencia }, "IX_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Operadora_ID_SERVICO_PRODUTO_TABELA_ID_SERVICO_ID_OPERADORA_DT_VIGENCIA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUsuario, "IX_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Operadora_Usuario")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.IdUsuarioExclusao).HasColumnName("ID_USUARIO_EXCLUSAO");

                entity.Property(e => e.InAjusteGeral).HasColumnName("IN_AJUSTE_GERAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlProduto).HasColumnName("VL_PRODUTO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricanteServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ProdutoDetalhe_Fabricante_ServiçoProdutoTabela_Operadora_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricanteServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Operadora_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoDetalheFabricanteServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => new { d.IdProdutoDetalhe, d.IdFabricante, d.IdServicoProdutoTabela, d.IdServico })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ServicoProdutoTabela_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Operadora");
            });

            modelBuilder.Entity<ProdutoDetalheFabricanteServicoProdutoTabelaPlano>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdFabricante, e.IdServicoProdutoTabela, e.IdServico, e.IdPlano, e.DtVigencia })
                    .HasName("ProdutoDetalhe_Fabricante_ServiçoProdutoTabela_Plano_PK");

                entity.ToTable("ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Plano");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.IdUsuarioExclusao).HasColumnName("ID_USUARIO_EXCLUSAO");

                entity.Property(e => e.InAjusteGeral).HasColumnName("IN_AJUSTE_GERAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlProduto).HasColumnName("VL_PRODUTO");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricanteServicoProdutoTabelaPlano)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ProdutoDetalhe_Fabricante_ServiçoProdutoTabela_Plano_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProdutoDetalheFabricanteServicoProdutoTabelaPlano)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Plano_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoDetalheFabricanteServicoProdutoTabelaPlano)
                    .HasForeignKey(d => new { d.IdProdutoDetalhe, d.IdFabricante, d.IdServicoProdutoTabela, d.IdServico })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ServicoProdutoTabela_ProdutoDetalhe_Fabricante_ServicoProdutoTabela_Plano");
            });

            modelBuilder.Entity<ProdutoDetalheHistorio>(entity =>
            {
                entity.HasKey(e => e.IdHistoricoProduto)
                    .HasName("PK__ProdutoDetalheHi__0AD698B8");

                entity.Property(e => e.IdHistoricoProduto).HasColumnName("ID_HISTORICO_PRODUTO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.IdLocalAlteracaoProduto).HasColumnName("ID_LOCAL_ALTERACAO_PRODUTO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUsuarioAlterou).HasColumnName("ID_USUARIO_ALTEROU");

                entity.HasOne(d => d.IdLocalAlteracaoProdutoNavigation)
                    .WithMany(p => p.ProdutoDetalheHistorio)
                    .HasForeignKey(d => d.IdLocalAlteracaoProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalheHistorio_ProdutoLocalAlteracaoDados");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ProdutoDetalheHistorio)
                    .HasForeignKey(d => d.IdProduto)
                    .HasConstraintName("FK_ProdutoDetalheHistorio_Produto");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoDetalheHistorio)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_ProdutoDetalheHistorio_ProdutoDetalhe");

                entity.HasOne(d => d.IdUsuarioAlterouNavigation)
                    .WithMany(p => p.ProdutoDetalheHistorio)
                    .HasForeignKey(d => d.IdUsuarioAlterou)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalheHistorio_Usuario");
            });

            modelBuilder.Entity<ProdutoDetalheImportacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProdutoDetalhe_Importacao");

                entity.Property(e => e.IdMdCompra).HasColumnName("ID_MD_COMPRA");

                entity.Property(e => e.IdMdConsumoMinimo).HasColumnName("ID_MD_CONSUMO_MINIMO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InBaseKit).HasColumnName("IN_BASE_KIT");

                entity.Property(e => e.InPadronizado).HasColumnName("IN_PADRONIZADO");

                entity.Property(e => e.QnConsumoMinimo).HasColumnName("QN_CONSUMO_MINIMO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");
            });

            modelBuilder.Entity<ProdutoDetalheInstrucaoEspecial>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdInstrucaoEspecial })
                    .HasName("ProdutoDetalhe_InstrucaoEspecial_PK");

                entity.ToTable("ProdutoDetalhe_InstrucaoEspecial");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdInstrucaoEspecial).HasColumnName("ID_INSTRUCAO_ESPECIAL");

                entity.HasOne(d => d.IdInstrucaoEspecialNavigation)
                    .WithMany(p => p.ProdutoDetalheInstrucaoEspecial)
                    .HasForeignKey(d => d.IdInstrucaoEspecial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("InstrucaoEspecial_ProdutoDetalhe_ProdutoDetalhe_InstrucaoEspecial_FK1");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoDetalheInstrucaoEspecial)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_ProdutoDetalhe_ProdutoDetalhe_InstrucaoEspecial_FK1");
            });

            modelBuilder.Entity<ProdutoDetalheOperadoraServicoCaracteristicaTipo>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalheOperadoraServicocaracteristicatipo)
                    .HasName("ProdutoDetalhe_Operadora_ServicoCaracteristicaTipo_PK");

                entity.ToTable("ProdutoDetalhe_Operadora_ServicoCaracteristicaTipo");

                entity.Property(e => e.IdProdutoDetalheOperadoraServicocaracteristicatipo).HasColumnName("ID_PRODUTO_DETALHE_OPERADORA_SERVICOCARACTERISTICATIPO");

                entity.Property(e => e.CdProduto)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRODUTO");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProdutoCaracteristicaTipo).HasColumnName("ID_PRODUTO_CARACTERISTICA_TIPO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoTuss).HasColumnName("ID_SERVICO_TUSS");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioAtivacao).HasColumnName("ID_USUARIO_ATIVACAO");

                entity.Property(e => e.IdUsuarioInativacao).HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoProduto)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_PRODUTO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProdutoDetalheOperadoraServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("Pessoa_ProdutoDetalhe_Operadora_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdServicoTussNavigation)
                    .WithMany(p => p.ProdutoDetalheOperadoraServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdServicoTuss)
                    .HasConstraintName("FK_ProdutoDetalhe_Operadora_ServicoCaracteristicaTipo_Servico");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ProdutoDetalheOperadoraServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_ProdutoDetalhe_Operadora_ServicoCaracteristicaTipo_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioAtivacaoNavigation)
                    .WithMany(p => p.ProdutoDetalheOperadoraServicoCaracteristicaTipoIdUsuarioAtivacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtivacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_Operadora_ServicoCaracteristicaTipo_UsuarioAtivacao");

                entity.HasOne(d => d.IdUsuarioInativacaoNavigation)
                    .WithMany(p => p.ProdutoDetalheOperadoraServicoCaracteristicaTipoIdUsuarioInativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioInativacao)
                    .HasConstraintName("FK_ProdutoDetalhe_Operadora_ServicoCaracteristicaTipo_UsuarioInativacao");
            });

            modelBuilder.Entity<ProdutoDetalheViaAdministracao>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdViaAdministracao })
                    .HasName("ProdutoDetalhe_ViaAdministracao_PK");

                entity.ToTable("ProdutoDetalhe_ViaAdministracao");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdViaAdministracao).HasColumnName("ID_VIA_ADMINISTRACAO");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.ProdutoDetalheViaAdministracao)
                    .HasForeignKey(d => d.IdKit)
                    .HasConstraintName("FK_ProdutoDetalhe_ViaAdministracao_Kit");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoDetalheViaAdministracao)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_ProdutoDetalhe_ViaAdministracao_FK1");

                entity.HasOne(d => d.IdViaAdministracaoNavigation)
                    .WithMany(p => p.ProdutoDetalheViaAdministracao)
                    .HasForeignKey(d => d.IdViaAdministracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ViaAdministracao_ProdutoDetalhe_ViaAdministracao_FK1");
            });

            modelBuilder.Entity<ProdutoDocumentoExigido>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDocumentoExigido)
                    .HasName("Produto_DocumentoExigido_PK");

                entity.ToTable("Produto_DocumentoExigido");

                entity.Property(e => e.IdProdutoDocumentoExigido).HasColumnName("ID_PRODUTO_DOCUMENTO_EXIGIDO");

                entity.Property(e => e.DtFinalExigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_EXIGENCIA");

                entity.Property(e => e.DtInicioExigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_EXIGENCIA");

                entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUsuarioDtFinal).HasColumnName("ID_USUARIO_DT_FINAL");

                entity.Property(e => e.IdUsuarioDtInicio).HasColumnName("ID_USUARIO_DT_INICIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDocumentoNavigation)
                    .WithMany(p => p.ProdutoDocumentoExigido)
                    .HasForeignKey(d => d.IdDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Documento_Produto_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ProdutoDocumentoExigido)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_Produto_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdUsuarioDtFinalNavigation)
                    .WithMany(p => p.ProdutoDocumentoExigidoIdUsuarioDtFinalNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtFinal)
                    .HasConstraintName("Usuario_Produto_DocumentoExigido_FK1");

                entity.HasOne(d => d.IdUsuarioDtInicioNavigation)
                    .WithMany(p => p.ProdutoDocumentoExigidoIdUsuarioDtInicioNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtInicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Produto_DocumentoExigido_FK2");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoDocumentoExigido)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_Produto_DocumentoExigido_FK1");
            });

            modelBuilder.Entity<ProdutoFabricante>(entity =>
            {
                entity.HasKey(e => new { e.IdFabricante, e.IdProduto })
                    .HasName("Produto_Fabricante_PK");

                entity.ToTable("Produto_Fabricante");

                entity.HasIndex(e => new { e.IdProdutoTipo, e.InAtivo }, "IX_Produto_Fabricante_ID_PRODUTO_TIPO_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdProduto, e.IdProdutoTipo }, "IX_Produto_Fabricante_K2_K3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdProduto, e.IdFabricante, e.IdProdutoTipo, e.InAtivo }, "IX_Produto_Fabricante_K3_K2_K1_K7_4")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.NmComercial, "IX_Produto_Fabricante_K4")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("PK - Identificador de Fabricante. FK com Pessoa.");

                entity.Property(e => e.IdProduto)
                    .HasColumnName("ID_PRODUTO")
                    .HasComment("PK - Identificador de Produto. FK com Produto.");

                entity.Property(e => e.IdProdutoTipo)
                    .HasColumnName("ID_PRODUTO_TIPO")
                    .HasComment("Indentificador de que tipo o produto se enquadra. Ex: Genérico ou Similar. Associação com TipoDiversos.\r\n");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL")
                    .HasComment("Nome comercial do produto.\r\n");

                entity.Property(e => e.NrRegistroAnvisa)
                    .HasColumnName("NR_REGISTRO_ANVISA")
                    .HasComment("Numero do Registro do Produto cadastrado na ANVISA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFabricanteNavigation)
                    .WithMany(p => p.ProdutoFabricante)
                    .HasForeignKey(d => d.IdFabricante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Produto_Fabricante_Pessoa");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ProdutoFabricante)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Produto_Fabricante_Produto");

                entity.HasOne(d => d.IdProdutoTipoNavigation)
                    .WithMany(p => p.ProdutoFabricante)
                    .HasForeignKey(d => d.IdProdutoTipo)
                    .HasConstraintName("FK_Produto_Fabricante_TipoDiversos");
            });

            modelBuilder.Entity<ProdutoFabricanteTodos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProdutoFabricanteTodos");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmFabricante)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1749)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");

                entity.Property(e => e.TxUnidadeMedida)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_UNIDADE_MEDIDA");
            });

            modelBuilder.Entity<ProdutoFornecedor>(entity =>
            {
                entity.HasKey(e => new { e.IdProduto, e.IdFornecedor })
                    .HasName("Produto_Fornecedor_PK");

                entity.ToTable("Produto_Fornecedor");

                entity.HasIndex(e => e.IdFornecedor, "IX_Produto_Fornecedor_ID_FORNECEDOR")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdProduto)
                    .HasColumnName("ID_PRODUTO")
                    .HasComment("PK da Tabela. FK com Produto.");

                entity.Property(e => e.IdFornecedor)
                    .HasColumnName("ID_FORNECEDOR")
                    .HasComment("PK da Tabela. FK com Pessoa. (Fornecedor)");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.ProdutoFornecedor)
                    .HasForeignKey(d => d.IdFornecedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Produto_Fornecedor_FK1");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ProdutoFornecedor)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Produto_Produto_Fornecedor_FK1");
            });

            modelBuilder.Entity<ProdutoGeral>(entity =>
            {
                entity.HasKey(e => e.IdProdutoDetalhe);

                entity.ToTable("Produto_Geral");

                entity.HasIndex(e => new { e.IdProduto, e.InAtivo }, "IX_Produto_Geral_ID_PRODUTO_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.InAtivo, "IX_Produto_Geral_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.InAtivo, e.IdClassificacaoGeral }, "IX_Produto_Geral_IN_ATIVO_ID_CLASSIFICACAO_GERAL")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.InAtivo, e.IdProduto }, "IX_Produto_Geral_IN_ATIVO_ID_PRODUTO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.NmProdutoCompleto, "IX_Produto_Geral_K10")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.NmProdutoCompleto }, "IX_Produto_Geral_K1_K10")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdProdutoDetalhe)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK Identificador da tabela. FK com ProdutoDetalhe");

                entity.Property(e => e.IdClassificacaoGeral)
                    .HasColumnName("ID_CLASSIFICACAO_GERAL")
                    .HasComment("Classificação do Produto. FK com ClassificacaoProduto");

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("FK com Pessoa. Traz o ID do Fabricante.\r\n");

                entity.Property(e => e.IdProduto)
                    .HasColumnName("ID_PRODUTO")
                    .HasComment("FK com Produto.\r\n");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL")
                    .HasComment("Nome comercial do Produto.");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO")
                    .HasComment("Nome do Produto.");

                entity.Property(e => e.NmProdutoCompleto)
                    .IsRequired()
                    .HasMaxLength(850)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO_COMPLETO")
                    .HasComment("Nome completo do produto, concatenando o Nome, Nome Comercial e Apresentação.");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS")
                    .HasComment("Classificação do Produto. FK com ClassificacaoProduto\r\n");

                entity.Property(e => e.TxApresentacao)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO")
                    .HasComment("Variação do nome de acordo com o Produto Detalhe. Mesmo produtos podem ter \"N\" Apresentações. ");
            });

            modelBuilder.Entity<ProdutoGeral1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProdutoGeral");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1749)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoGeralMaterialized>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Geral_MATERIALIZED");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1749)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoGeralOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Geral_OLD");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1749)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoGeralTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProdutoGeral_teste");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1749)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoGeralTodo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Geral_Todo");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1269)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoGeralTodoMaterialized>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Geral_Todo_MATERIALIZED");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1249)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoGeralTodoOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Geral_Todo_OLD");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoGeralView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Geral_view");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmComercial)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NM_COMERCIAL");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrCodigoBarras)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.TxApresentacao)
                    .HasMaxLength(1749)
                    .IsUnicode(false)
                    .HasColumnName("TX_APRESENTACAO");
            });

            modelBuilder.Entity<ProdutoImportacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Produto_Importacao");

                entity.Property(e => e.IdClassificacaoGeral).HasColumnName("ID_CLASSIFICACAO_GERAL");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdListaMedControlado).HasColumnName("ID_LISTA_MED_CONTROLADO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmProduto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<ProdutoIntegracaoSistemaLegado>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdFabricante })
                    .HasName("PK_ProdutoIntegracaoSistemaLegado_1");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.CdProdutoInterno).HasColumnName("CD_PRODUTO_INTERNO");

                entity.Property(e => e.IdSistemaLegado).HasColumnName("ID_SISTEMA_LEGADO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoIntegracaoSistemaLegado)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoIntegracaoSistemaLegado_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<ProdutoIntegracaoSistemaLegadoCodigoInterno>(entity =>
            {
                entity.HasKey(e => e.CdProdutoInterno);

                entity.Property(e => e.CdProdutoInterno)
                    .ValueGeneratedNever()
                    .HasColumnName("CD_PRODUTO_INTERNO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoIntegracaoSistemaLegadoCodigoInterno)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoIntegracaoSistemaLegadoCodigoInterno_ProdutoDetalhe_Fabricante");
            });

            modelBuilder.Entity<ProdutoLocalAlteracaoDados>(entity =>
            {
                entity.HasKey(e => e.IdLocalAlteracaoProduto);

                entity.Property(e => e.IdLocalAlteracaoProduto).HasColumnName("ID_LOCAL_ALTERACAO_PRODUTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmLocalAteracaoProduto)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_LOCAL_ATERACAO_PRODUTO");

                entity.Property(e => e.TxLocalAlteracaoProduto)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOCAL_ALTERACAO_PRODUTO");
            });

            modelBuilder.Entity<ProdutoLocalizacao>(entity =>
            {
                entity.HasKey(e => e.IdProdutoLocalizacao);

                entity.Property(e => e.IdProdutoLocalizacao).HasColumnName("ID_PRODUTO_LOCALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.TxLocalizacao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOCALIZACAO");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoLocalizacao)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoLocalizacao_ProdutoDetalhe");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ProdutoLocalizacao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoLocalizacao_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ProdutoLocalizacao)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoLocalizacao_Usuario");
            });

            modelBuilder.Entity<ProdutoNaoCoberto>(entity =>
            {
                entity.HasKey(e => e.IdProdutoNaoCoberto)
                    .HasName("ProdutoNaoCoberto_PK");

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.DtFinal, e.IdUsuarioDtFinal, e.IdOperadora, e.IdPlano, e.IdUnidadeOrganizacional, e.IdServico }, "IX_ProdutoNaoCoberto_ID_PRODUTO_DETALHE_DT_FINAL_ID_USUARIO_DT_FINAL_ID_OPERADORA_ID_PLANO_ID_UNIDADE_ORGANIZACIONAL_ID_SERVICO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProdutoNaoCoberto).HasColumnName("ID_PRODUTO_NAO_COBERTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioDtFinal).HasColumnName("ID_USUARIO_DT_FINAL");

                entity.Property(e => e.IdUsuarioDtInicio).HasColumnName("ID_USUARIO_DT_INICIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProdutoNaoCoberto)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("Pessoa_ProdutoNaoCoberto_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ProdutoNaoCoberto)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_ProdutoNaoCoberto_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ProdutoNaoCoberto)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_ProdutoNaoCoberto_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ProdutoNaoCoberto)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("UnidadeOrganizacional_ProdutoNaoCoberto_FK1");

                entity.HasOne(d => d.IdUsuarioDtFinalNavigation)
                    .WithMany(p => p.ProdutoNaoCobertoIdUsuarioDtFinalNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtFinal)
                    .HasConstraintName("Usuario_ProdutoNaoCoberto_FK2");

                entity.HasOne(d => d.IdUsuarioDtInicioNavigation)
                    .WithMany(p => p.ProdutoNaoCobertoIdUsuarioDtInicioNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtInicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ProdutoNaoCoberto_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoNaoCoberto)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ProdutoNaoCoberto_FK1");
            });

            modelBuilder.Entity<ProdutoNaoCobrado>(entity =>
            {
                entity.HasKey(e => e.IdProdutoNaoCobrado)
                    .HasName("ProdutoNaoCobrado_PK");

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.DtFinal, e.IdUsuarioDtFinal, e.IdOperadora, e.IdPlano, e.IdUnidadeOrganizacional, e.IdServico }, "IX_01")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProdutoNaoCobrado).HasColumnName("ID_PRODUTO_NAO_COBRADO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioDtFinal).HasColumnName("ID_USUARIO_DT_FINAL");

                entity.Property(e => e.IdUsuarioDtInicio).HasColumnName("ID_USUARIO_DT_INICIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProdutoNaoCobrado)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("Pessoa_ProdutoNaoCobrado_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ProdutoNaoCobrado)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_ProdutoNaoCobrado_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ProdutoNaoCobrado)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_ProdutoNaoCobrado_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ProdutoNaoCobrado)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("UnidadeOrganizacional_ProdutoNaoCobrado_FK1");

                entity.HasOne(d => d.IdUsuarioDtFinalNavigation)
                    .WithMany(p => p.ProdutoNaoCobradoIdUsuarioDtFinalNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtFinal)
                    .HasConstraintName("Usuario_ProdutoNaoCobrado_FK2");

                entity.HasOne(d => d.IdUsuarioDtInicioNavigation)
                    .WithMany(p => p.ProdutoNaoCobradoIdUsuarioDtInicioNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtInicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ProdutoNaoCobrado_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoNaoCobrado)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ProdutoNaoCobrado_FK1");
            });

            modelBuilder.Entity<ProdutoPreco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProdutoPreco");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdFabricante)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCadastroManual)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("IN_CADASTRO_MANUAL");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlPrecoProdutoConsumidor)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_PRODUTO_CONSUMIDOR");

                entity.Property(e => e.VlPrecoProdutoFabricante)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_PRODUTO_FABRICANTE");
            });

            modelBuilder.Entity<ProdutoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdProduto, e.IdProdutoSubstituto })
                    .HasName("Produto_Produto_PK");

                entity.ToTable("Produto_Produto");

                entity.Property(e => e.IdProduto)
                    .HasColumnName("ID_PRODUTO")
                    .HasComment("PK Identificador da Tabela. FK com Produto.");

                entity.Property(e => e.IdProdutoSubstituto)
                    .HasColumnName("ID_PRODUTO_SUBSTITUTO")
                    .HasComment("PK2 Identificador da Tabela. FK com Produto.\r\n");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ProdutoProdutoIdProdutoNavigation)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Produto_Produto_Produto_FK1");

                entity.HasOne(d => d.IdProdutoSubstitutoNavigation)
                    .WithMany(p => p.ProdutoProdutoIdProdutoSubstitutoNavigation)
                    .HasForeignKey(d => d.IdProdutoSubstituto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Produto_Produto_Produto_FK2");
            });

            modelBuilder.Entity<ProdutoQtdeAutorizada>(entity =>
            {
                entity.HasKey(e => e.IdProdutoQtdeAutorizada)
                    .HasName("ProdutoQtdeAutorizada_PK");

                entity.HasIndex(e => new { e.InLancarComplemento, e.InAtivo, e.IdProdutoDetalhe, e.IdOperadora }, "IX_ProdutoQtdeAutorizada_K11_K13_K4_K2_9_10")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdOperadora, "IX_ProdutoQtdeAutorizada_Pessoa")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdFabricante, "IX_ProdutoQtdeAutorizada_ProdutoDetalhe_Fabricante")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_ProdutoQtdeAutorizada_UnidadeOrganizacional")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUsuarioDtFinal, "IX_ProdutoQtdeAutorizada_Usuario")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProdutoQtdeAutorizada).HasColumnName("ID_PRODUTO_QTDE_AUTORIZADA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdFatorAplicacao).HasColumnName("ID_FATOR_APLICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioDtFinal).HasColumnName("ID_USUARIO_DT_FINAL");

                entity.Property(e => e.IdUsuarioDtInicio).HasColumnName("ID_USUARIO_DT_INICIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InExcedenteNaoCobrado)
                    .HasColumnName("IN_EXCEDENTE_NAO_COBRADO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InLancarComplemento)
                    .HasColumnName("IN_LANCAR_COMPLEMENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnPeriodo).HasColumnName("QN_PERIODO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFatorAplicacaoNavigation)
                    .WithMany(p => p.ProdutoQtdeAutorizadaIdFatorAplicacaoNavigation)
                    .HasForeignKey(d => d.IdFatorAplicacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ProdutoQtdeAutorizada_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProdutoQtdeAutorizada)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ProdutoQtdeAutorizada_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ProdutoQtdeAutorizada)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_ProdutoQtdeAutorizada_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.ProdutoQtdeAutorizadaIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ProdutoQtdeAutorizada_FK2");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ProdutoQtdeAutorizada)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_ProdutoQtdeAutorizada_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioDtFinalNavigation)
                    .WithMany(p => p.ProdutoQtdeAutorizadaIdUsuarioDtFinalNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtFinal)
                    .HasConstraintName("Usuario_ProdutoQtdeAutorizada_FK2");

                entity.HasOne(d => d.IdUsuarioDtInicioNavigation)
                    .WithMany(p => p.ProdutoQtdeAutorizadaIdUsuarioDtInicioNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtInicio)
                    .HasConstraintName("Usuario_ProdutoQtdeAutorizada_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ProdutoQtdeAutorizada)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Fabricante_ProdutoQtdeAutorizada_FK1");
            });

            modelBuilder.Entity<ProdutoQuimioterapico>(entity =>
            {
                entity.HasKey(e => e.IdProdutoQuimioterapico);

                entity.Property(e => e.IdProdutoQuimioterapico).HasColumnName("ID_PRODUTO_QUIMIOTERAPICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtManipulacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MANIPULACAO");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.IdAcao).HasColumnName("ID_ACAO");

                entity.Property(e => e.IdDiluido).HasColumnName("ID_DILUIDO");

                entity.Property(e => e.IdFarmaceuticoResponsavel).HasColumnName("ID_FARMACEUTICO_RESPONSAVEL");

                entity.Property(e => e.IdManutencaoDiluicao).HasColumnName("ID_MANUTENCAO_DILUICAO");

                entity.Property(e => e.IdResponsavelManipulacao).HasColumnName("ID_RESPONSAVEL_MANIPULACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InFotossensivel).HasColumnName("IN_FOTOSSENSIVEL");

                entity.Property(e => e.NmProdutoQuimioterapico)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO_QUIMIOTERAPICO");

                entity.Property(e => e.NrCodigoBarras)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.NrCrfFarmaceuticoResponsavel)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRF_FARMACEUTICO_RESPONSAVEL");

                entity.Property(e => e.NrCrfResponsavelManipulacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRF_RESPONSAVEL_MANIPULACAO");

                entity.Property(e => e.NrDiluido)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_DILUIDO");

                entity.Property(e => e.NrDose)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOSE");

                entity.Property(e => e.NrTempoInfusao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_TEMPO_INFUSAO");

                entity.Property(e => e.NrVolumeAspirado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_VOLUME_ASPIRADO");

                entity.Property(e => e.TxExtravasamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_EXTRAVASAMENTO");

                entity.Property(e => e.TxOrdemInfusao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_ORDEM_INFUSAO");

                entity.Property(e => e.TxViaAdministracao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_VIA_ADMINISTRACAO");

                entity.Property(e => e.VlVolumeAInfundir)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_VOLUME_A_INFUNDIR");

                entity.Property(e => e.VlVolumeTotalInfusao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_VOLUME_TOTAL_INFUSAO");

                entity.HasOne(d => d.IdAcaoNavigation)
                    .WithMany(p => p.ProdutoQuimioterapicoIdAcaoNavigation)
                    .HasForeignKey(d => d.IdAcao)
                    .HasConstraintName("FK__ProdutoQu__ID_AC__28ACE5B6");

                entity.HasOne(d => d.IdDiluidoNavigation)
                    .WithMany(p => p.ProdutoQuimioterapicoIdDiluidoNavigation)
                    .HasForeignKey(d => d.IdDiluido)
                    .HasConstraintName("FK__ProdutoQu__ID_DI__29A109EF");
            });

            modelBuilder.Entity<ProdutoQuimioterapicoItem>(entity =>
            {
                entity.HasKey(e => e.IdProdutoQuimioterapicoItem);

                entity.ToTable("ProdutoQuimioterapico_Item");

                entity.Property(e => e.IdProdutoQuimioterapicoItem).HasColumnName("ID_PRODUTO_QUIMIOTERAPICO_ITEM");

                entity.Property(e => e.IdProdutoQuimioterapico).HasColumnName("ID_PRODUTO_QUIMIOTERAPICO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_LOTEPRODUTOITEM");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.HasOne(d => d.IdProdutoQuimioterapicoNavigation)
                    .WithMany(p => p.ProdutoQuimioterapicoItem)
                    .HasForeignKey(d => d.IdProdutoQuimioterapico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoQuimioterapico_Item_ProdutoQuimioterapico");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitemNavigation)
                    .WithMany(p => p.ProdutoQuimioterapicoItem)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoQuimioterapico_Item_SPDEHALPI");
            });

            modelBuilder.Entity<ProdutoTraducaoTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProdutoTraducao_TESTE");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAssociado).HasColumnName("IN_ASSOCIADO");

                entity.Property(e => e.InDesconto).HasColumnName("IN_DESCONTO");

                entity.Property(e => e.NmFabricante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlPrecoConsumidor)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_CONSUMIDOR");

                entity.Property(e => e.VlPrecoFabricante)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VL_PRECO_FABRICANTE");
            });

            modelBuilder.Entity<ProdutoUnidadeMedidaConversao>(entity =>
            {
                entity.HasKey(e => e.IdProdutoUnidadeMedidaConversao)
                    .HasName("ProdutoUnidadeMedidaConversao_PK");

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_ProdutoUnidadeMedidaConversao_ProdutoDetalhe");

                entity.Property(e => e.IdProdutoUnidadeMedidaConversao).HasColumnName("ID_PRODUTO_UNIDADE_MEDIDA_CONVERSAO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeCobranca).HasColumnName("ID_UNIDADE_COBRANCA");

                entity.Property(e => e.IdUnidadeConsumo).HasColumnName("ID_UNIDADE_CONSUMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InSomenteQuantidade).HasColumnName("IN_SOMENTE_QUANTIDADE");

                entity.Property(e => e.InSomenteValor).HasColumnName("IN_SOMENTE_VALOR");

                entity.Property(e => e.NrCadencia).HasColumnName("NR_CADENCIA");

                entity.Property(e => e.NrFatorConversao).HasColumnName("NR_FATOR_CONVERSAO");

                entity.Property(e => e.QnMinimaCobranca).HasColumnName("QN_MINIMA_COBRANCA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversao)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_ProdutoUnidadeMedidaConversao_Operadora");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversao)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_ProdutoUnidadeMedidaConversao_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversao)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ProdutoUnidadeMedidaConversao_FK1");

                entity.HasOne(d => d.IdUnidadeCobrancaNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversaoIdUnidadeCobrancaNavigation)
                    .HasForeignKey(d => d.IdUnidadeCobranca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ProdutoUnidadeMedidaConversao_FK2");

                entity.HasOne(d => d.IdUnidadeConsumoNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversaoIdUnidadeConsumoNavigation)
                    .HasForeignKey(d => d.IdUnidadeConsumo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ProdutoUnidadeMedidaConversao_FK1");
            });

            modelBuilder.Entity<ProdutoUnidadeMedidaConversaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdProdutoUnidadeMedidaConversaoHistorico)
                    .HasName("ProdutoUnidadeMedidaConversaoHistorico_PK");

                entity.Property(e => e.IdProdutoUnidadeMedidaConversaoHistorico).HasColumnName("ID_PRODUTO_UNIDADE_MEDIDA_CONVERSAO_HISTORICO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoUnidadeMedidaConversao).HasColumnName("ID_PRODUTO_UNIDADE_MEDIDA_CONVERSAO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeCobranca).HasColumnName("ID_UNIDADE_COBRANCA");

                entity.Property(e => e.IdUnidadeConsumo).HasColumnName("ID_UNIDADE_CONSUMO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InLegado).HasColumnName("IN_LEGADO");

                entity.Property(e => e.InSomenteQuantidade).HasColumnName("IN_SOMENTE_QUANTIDADE");

                entity.Property(e => e.InSomenteValor).HasColumnName("IN_SOMENTE_VALOR");

                entity.Property(e => e.NrCadencia).HasColumnName("NR_CADENCIA");

                entity.Property(e => e.NrFatorConversao).HasColumnName("NR_FATOR_CONVERSAO");

                entity.Property(e => e.QnMinimaCobranca).HasColumnName("QN_MINIMA_COBRANCA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversaoHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_ProdutoUnidadeMedidaConversaoHistorico_Operadora");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversaoHistorico)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_ProdutoUnidadeMedidaConversaoHistorico_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversaoHistorico)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ProdutoUnidadeMedidaConversaoHistorico_FK1");

                entity.HasOne(d => d.IdUnidadeCobrancaNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversaoHistoricoIdUnidadeCobrancaNavigation)
                    .HasForeignKey(d => d.IdUnidadeCobranca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ProdutoUnidadeMedidaConversaoHistorico_FK2");

                entity.HasOne(d => d.IdUnidadeConsumoNavigation)
                    .WithMany(p => p.ProdutoUnidadeMedidaConversaoHistoricoIdUnidadeConsumoNavigation)
                    .HasForeignKey(d => d.IdUnidadeConsumo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ProdutoUnidadeMedidaConversaoHistorico_FK1");
            });

            modelBuilder.Entity<ProfissionalSaude>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProfissionalSaude");

                entity.Property(e => e.IdEntidade).HasColumnName("ID_ENTIDADE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IN_MEDICO_CADASTRO_COMPLETO");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONSELHO");

                entity.Property(e => e.UfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CONSELHO");
            });

            modelBuilder.Entity<ProfissionalSaudeCbo>(entity =>
            {
                entity.HasKey(e => new { e.IdProfissionalSaude, e.IdCboTipo })
                    .HasName("PK_ProfissionalSaude_Cbo_1");

                entity.ToTable("ProfissionalSaude_Cbo");

                entity.Property(e => e.IdProfissionalSaude).HasColumnName("ID_PROFISSIONAL_SAUDE");

                entity.Property(e => e.IdCboTipo).HasColumnName("ID_CBO_TIPO");

                entity.Property(e => e.IdApurarValoresSus).HasColumnName("ID_APURAR_VALORES_SUS");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdApurarValoresSusNavigation)
                    .WithMany(p => p.ProfissionalSaudeCboIdApurarValoresSusNavigation)
                    .HasForeignKey(d => d.IdApurarValoresSus)
                    .HasConstraintName("FK_ProfissionalSaudeCBO_IdApurarValoresSus_TipoDiversos");

                entity.HasOne(d => d.IdCboTipoNavigation)
                    .WithMany(p => p.ProfissionalSaudeCboIdCboTipoNavigation)
                    .HasForeignKey(d => d.IdCboTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProfissionalSaude_Cbo_TipoDiversos");

                entity.HasOne(d => d.IdProfissionalSaudeNavigation)
                    .WithMany(p => p.ProfissionalSaudeCbo)
                    .HasForeignKey(d => d.IdProfissionalSaude)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProfissionalSaude_Cbo_Pessoa");
            });

            modelBuilder.Entity<ProfissionalSaudeCredenciadoSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProfissionalSaudeCredenciadoSUS");

                entity.Property(e => e.NmProfissionalSaude)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NM_PROFISSIONAL_SAUDE");

                entity.Property(e => e.NrCns)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NR_CNS");

                entity.Property(e => e.TxCbo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_CBO");
            });

            modelBuilder.Entity<ProfissionalSaudeIi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProfissionalSaudeII");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.IdConselho).HasColumnName("ID_CONSELHO");

                entity.Property(e => e.IdProfissionalSaude).HasColumnName("ID_PROFISSIONAL_SAUDE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmProfissionalSaude)
                    .HasMaxLength(7900)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROFISSIONAL_SAUDE");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.UfConselho)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("UF_CONSELHO")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ProfissionalSaudeOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdProfissional, e.IdOperadora });

                entity.ToTable("ProfissionalSaude_Operadora");

                entity.Property(e => e.IdProfissional)
                    .HasColumnName("ID_PROFISSIONAL")
                    .HasComment("identificador do profissional de saúde");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InAtivado)
                    .IsRequired()
                    .HasColumnName("IN_ATIVADO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("não é a exclusão lógica, campo mostra se o profissional está credenciado");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica");

                entity.Property(e => e.NrCredenciamento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_CREDENCIAMENTO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ProfissionalSaudeOperadoraIdOperadoraNavigation)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProfissionalSaude_Operadora_Pessoa1");

                entity.HasOne(d => d.IdProfissionalNavigation)
                    .WithMany(p => p.ProfissionalSaudeOperadoraIdProfissionalNavigation)
                    .HasForeignKey(d => d.IdProfissional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProfissionalSaude_Operadora_Pessoa");
            });

            modelBuilder.Entity<Protocolo>(entity =>
            {
                entity.HasKey(e => e.IdProtocolo);

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAjusteHorarioPrimeiraImportacao)
                    .IsRequired()
                    .HasColumnName("IN_AJUSTE_HORARIO_PRIMEIRA_IMPORTACAO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmProtocolo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROTOCOLO");

                entity.Property(e => e.TxReferenciaBibliografica)
                    .IsUnicode(false)
                    .HasColumnName("TX_REFERENCIA_BIBLIOGRAFICA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Protocolo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Protocolo_Usuario");
            });

            modelBuilder.Entity<ProtocoloAplicacao>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloAplicacao)
                    .HasName("PK_ProtocoloIntervalo");

                entity.Property(e => e.IdProtocoloAplicacao).HasColumnName("ID_PROTOCOLO_APLICACAO");

                entity.Property(e => e.IdProtocoloItem).HasColumnName("ID_PROTOCOLO_ITEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnDose)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE");

                entity.Property(e => e.QnHoraAplicacao).HasColumnName("QN_HORA_APLICACAO");

                entity.HasOne(d => d.IdProtocoloItemNavigation)
                    .WithMany(p => p.ProtocoloAplicacao)
                    .HasForeignKey(d => d.IdProtocoloItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloIntervalo_ProtocoloMedicamento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProtocoloAplicacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacao_Usuario");
            });

            modelBuilder.Entity<ProtocoloAplicacaoAtendimento>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloAplicacaoAtendimento);

                entity.HasIndex(e => new { e.IdProtocoloAtendimento, e.IdProdutoDetalhe }, "IX_ProtocoloAplicacaoAtendimento_ID_PROTOCOLO_ATENDIMENTO_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProtocoloAplicacaoAtendimento).HasColumnName("ID_PROTOCOLO_APLICACAO_ATENDIMENTO");

                entity.Property(e => e.DtAplicacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_APLICACAO");

                entity.Property(e => e.IdIntervaloAplicacaoMedicamento).HasColumnName("ID_INTERVALO_APLICACAO_MEDICAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProtocoloAplicacao).HasColumnName("ID_PROTOCOLO_APLICACAO");

                entity.Property(e => e.IdProtocoloAtendimento).HasColumnName("ID_PROTOCOLO_ATENDIMENTO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InBlocoCirurgico)
                    .IsRequired()
                    .HasColumnName("IN_BLOCO_CIRURGICO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InDosePreOperatoria).HasColumnName("IN_DOSE_PRE_OPERATORIA");

                entity.Property(e => e.InNaoSeAplica).HasColumnName("IN_NAO_SE_APLICA");

                entity.Property(e => e.NrAplicacoes).HasColumnName("NR_APLICACOES");

                entity.Property(e => e.QnDose)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.HasOne(d => d.IdIntervaloAplicacaoMedicamentoNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimento)
                    .HasForeignKey(d => d.IdIntervaloAplicacaoMedicamento)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_IntervaloAplicacaoMedicamento");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimento)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_ProdutoDetalhe");

                entity.HasOne(d => d.IdProtocoloAplicacaoNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimento)
                    .HasForeignKey(d => d.IdProtocoloAplicacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_ProtocoloAplicacao");

                entity.HasOne(d => d.IdProtocoloAtendimentoNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimento)
                    .HasForeignKey(d => d.IdProtocoloAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_Protocolo_Atendimento");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimento)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_TipoDiversos");
            });

            modelBuilder.Entity<ProtocoloAplicacaoAtendimentoDispensacaoEnfermagem>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloAplicacaoAtendimentoDispensacaoEnfermagem);

                entity.ToTable("ProtocoloAplicacaoAtendimento_DispensacaoEnfermagem");

                entity.HasIndex(e => e.IdDispensacaoEnfermagem, "IX_ProtocoloAplicacaoAtendimento_DispensacaoEnfermagem_ID_DISPENSACAO_ENFERMAGEM")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdProtocoloAplicacaoAtendimento, "IX_ProtocoloAplicacaoAtendimento_DispensacaoEnfermagem_ID_PROTOCOLO_APLICACAO_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProtocoloAplicacaoAtendimentoDispensacaoEnfermagem).HasColumnName("ID_PROTOCOLO_APLICACAO_ATENDIMENTO_DISPENSACAO_ENFERMAGEM");

                entity.Property(e => e.IdDispensacaoEnfermagem).HasColumnName("ID_DISPENSACAO_ENFERMAGEM");

                entity.Property(e => e.IdProtocoloAplicacaoAtendimento).HasColumnName("ID_PROTOCOLO_APLICACAO_ATENDIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdDispensacaoEnfermagemNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimentoDispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdDispensacaoEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_DispensacaoEnfermagem_DispensacaoEnfermagem");

                entity.HasOne(d => d.IdProtocoloAplicacaoAtendimentoNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimentoDispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdProtocoloAplicacaoAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_DispensacaoEnfermagem_ProtocoloAplicacaoAtendimento");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimentoDispensacaoEnfermagem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_DispensacaoEnfermagem_Usuario");
            });

            modelBuilder.Entity<ProtocoloAplicacaoAtendimentoPrescricaoHorario>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloAplicacaoAtendimentoPrescricaoHorario);

                entity.ToTable("ProtocoloAplicacaoAtendimento_PrescricaoHorario");

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao, "IX_ProtocoloAplicacaoAtendimento_PrescricaoHorario_K3")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdProtocoloAplicacaoAtendimentoPrescricaoHorario).HasColumnName("ID_PROTOCOLO_APLICACAO_ATENDIMENTO_PRESCRICAO_HORARIO");

                entity.Property(e => e.IdProtocoloAplicacaoAtendimento).HasColumnName("ID_PROTOCOLO_APLICACAO_ATENDIMENTO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdProtocoloAplicacaoAtendimentoNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimentoPrescricaoHorario)
                    .HasForeignKey(d => d.IdProtocoloAplicacaoAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_PrescricaoHorario_ProtocoloAplicacaoAtendimento");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimentoPrescricaoHorario)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_PrescricaoHorario_Solicitacao_PD_EnfermagemHorarioAdministracao");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProtocoloAplicacaoAtendimentoPrescricaoHorario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloAplicacaoAtendimento_PrescricaoHorario_Usuario");
            });

            modelBuilder.Entity<ProtocoloAplicacaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloAplicacaoHistorico);

                entity.Property(e => e.IdProtocoloAplicacaoHistorico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PROTOCOLO_APLICACAO_HISTORICO");

                entity.Property(e => e.DtProtocoloAplicacaoHistoricoUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROTOCOLO_APLICACAO_HISTORICO_UTC");

                entity.Property(e => e.IdProtocoloAplicacao).HasColumnName("ID_PROTOCOLO_APLICACAO");

                entity.Property(e => e.IdProtocoloItem).HasColumnName("ID_PROTOCOLO_ITEM");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.QnDose)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE");

                entity.Property(e => e.QnHoraAplicacao).HasColumnName("QN_HORA_APLICACAO");
            });

            modelBuilder.Entity<ProtocoloAtendimento>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloAtendimento)
                    .HasName("PK_Protocolo_Atendimento_1");

                entity.ToTable("Protocolo_Atendimento");

                entity.HasIndex(e => new { e.IdAtendimento, e.InAtivo, e.InSuspenso }, "IX_Protocolo_Atendimento_ID_ATENDIMENTO_IN_ATIVO_IN_SUSPENSO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdProtocoloAtendimento).HasColumnName("ID_PROTOCOLO_ATENDIMENTO");

                entity.Property(e => e.DtInicioProtocoloUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PROTOCOLO_UTC");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InSuspenso).HasColumnName("IN_SUSPENSO");

                entity.Property(e => e.TxPaaCancelados)
                    .HasColumnType("text")
                    .HasColumnName("TX_PAA_CANCELADOS");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ProtocoloAtendimento)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Protocolo_Atendimento_Atendimento");

                entity.HasOne(d => d.IdProtocoloNavigation)
                    .WithMany(p => p.ProtocoloAtendimento)
                    .HasForeignKey(d => d.IdProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Protocolo_Atendimento_Protocolo");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProtocoloAtendimento)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Protocolo_Atendimento_Usuario");
            });

            modelBuilder.Entity<ProtocoloAtendimentoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloAtendimentoHistorico);

                entity.ToTable("Protocolo_AtendimentoHistorico");

                entity.Property(e => e.IdProtocoloAtendimentoHistorico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PROTOCOLO_ATENDIMENTO_HISTORICO");

                entity.Property(e => e.DtInicioProtocoloUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PROTOCOLO_UTC");

                entity.Property(e => e.DtProtocoloAtendimentoHistoricoUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROTOCOLO_ATENDIMENTO_HISTORICO_UTC");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdProtocoloAtendimento).HasColumnName("ID_PROTOCOLO_ATENDIMENTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InSuspenso).HasColumnName("IN_SUSPENSO");

                entity.Property(e => e.TxPaaCancelados)
                    .HasColumnType("text")
                    .HasColumnName("TX_PAA_CANCELADOS");
            });

            modelBuilder.Entity<ProtocoloBloqueioAgendaSadt>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloBloqueioAgenda);

                entity.Property(e => e.IdProtocoloBloqueioAgenda).HasColumnName("ID_PROTOCOLO_BLOQUEIO_AGENDA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtFimAgendaExtra)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_AGENDA_EXTRA");

                entity.Property(e => e.DtFimBloqueio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_BLOQUEIO");

                entity.Property(e => e.DtInicioAgendaExtra)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_AGENDA_EXTRA");

                entity.Property(e => e.DtInicioBloqueio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_BLOQUEIO");

                entity.Property(e => e.HrFimAgendaExtra)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM_AGENDA_EXTRA");

                entity.Property(e => e.HrFimBloqueio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM_BLOQUEIO");

                entity.Property(e => e.HrInicioAgendaExtra)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO_AGENDA_EXTRA");

                entity.Property(e => e.HrInicioBloqueio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO_BLOQUEIO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAgendaExtra).HasColumnName("IN_AGENDA_EXTRA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InForaPrazo).HasColumnName("IN_FORA_PRAZO");

                entity.Property(e => e.TxJustificativa)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");
            });

            modelBuilder.Entity<ProtocoloClassificacao>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloClassificacao)
                    .HasName("PK_RES_Protocolo_Classificacao");

                entity.Property(e => e.IdProtocoloClassificacao).HasColumnName("ID_PROTOCOLO_CLASSIFICACAO");

                entity.Property(e => e.IdExtratoResultado).HasColumnName("ID_EXTRATO_RESULTADO");

                entity.Property(e => e.NmMetodoDeCalculo)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_METODO_DE_CALCULO");

                entity.Property(e => e.NmProtocoloClassificacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROTOCOLO_CLASSIFICACAO");

                entity.Property(e => e.NmTipoLayout)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_LAYOUT");

                entity.Property(e => e.TxMetodologia)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_METODOLOGIA");
            });

            modelBuilder.Entity<ProtocoloHistorico>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloHistorico);

                entity.Property(e => e.IdProtocoloHistorico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PROTOCOLO_HISTORICO");

                entity.Property(e => e.DtProtocoloHistoricoUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROTOCOLO_HISTORICO_UTC")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAjusteHorarioPrimeiraImportacao).HasColumnName("IN_AJUSTE_HORARIO_PRIMEIRA_IMPORTACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmProtocolo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROTOCOLO");

                entity.Property(e => e.TxReferenciaBibliografica)
                    .IsUnicode(false)
                    .HasColumnName("TX_REFERENCIA_BIBLIOGRAFICA");
            });

            modelBuilder.Entity<ProtocoloItem>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloItem)
                    .HasName("PK_ProtocoloMedicamento");

                entity.Property(e => e.IdProtocoloItem).HasColumnName("ID_PROTOCOLO_ITEM");

                entity.Property(e => e.IdIntervaloAplicacaoMedicamento).HasColumnName("ID_INTERVALO_APLICACAO_MEDICAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdViaAdministracao)
                    .HasColumnName("ID_VIA_ADMINISTRACAO")
                    .HasDefaultValueSql("((3371))");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InBlocoCirurgico)
                    .IsRequired()
                    .HasColumnName("IN_BLOCO_CIRURGICO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InDosePreOperatoria).HasColumnName("IN_DOSE_PRE_OPERATORIA");

                entity.Property(e => e.InNaoSeAplica).HasColumnName("IN_NAO_SE_APLICA");

                entity.Property(e => e.NrAplicacoes).HasColumnName("NR_APLICACOES");

                entity.Property(e => e.QnDose)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE");

                entity.Property(e => e.QnHoraInicioAplicacao).HasColumnName("QN_HORA_INICIO_APLICACAO");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.HasOne(d => d.IdIntervaloAplicacaoMedicamentoNavigation)
                    .WithMany(p => p.ProtocoloItem)
                    .HasForeignKey(d => d.IdIntervaloAplicacaoMedicamento)
                    .HasConstraintName("FK_ProtocoloMedicamento_IntervaloAplicacaoMedicamento");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProtocoloItem)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloMedicamento_ProdutoDetalhe");

                entity.HasOne(d => d.IdProtocoloNavigation)
                    .WithMany(p => p.ProtocoloItem)
                    .HasForeignKey(d => d.IdProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloMedicamento_Protocolo");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.ProtocoloItemIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloMedicamento_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProtocoloItem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloItem_Usuario");

                entity.HasOne(d => d.IdViaAdministracaoNavigation)
                    .WithMany(p => p.ProtocoloItemIdViaAdministracaoNavigation)
                    .HasForeignKey(d => d.IdViaAdministracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloItem_TipoDiversos");
            });

            modelBuilder.Entity<ProtocoloItemHistorico>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloItemHistorico);

                entity.Property(e => e.IdProtocoloItemHistorico)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PROTOCOLO_ITEM_HISTORICO");

                entity.Property(e => e.DtProtocoloItemHistoricoUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROTOCOLO_ITEM_HISTORICO_UTC");

                entity.Property(e => e.IdIntervaloAplicacaoMedicamento).HasColumnName("ID_INTERVALO_APLICACAO_MEDICAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdProtocoloItem).HasColumnName("ID_PROTOCOLO_ITEM");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdViaAdministracao).HasColumnName("ID_VIA_ADMINISTRACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InBlocoCirurgico)
                    .HasColumnName("IN_BLOCO_CIRURGICO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InDosePreOperatoria).HasColumnName("IN_DOSE_PRE_OPERATORIA");

                entity.Property(e => e.InNaoSeAplica).HasColumnName("IN_NAO_SE_APLICA");

                entity.Property(e => e.NrAplicacoes).HasColumnName("NR_APLICACOES");

                entity.Property(e => e.QnDose)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE");

                entity.Property(e => e.QnHoraInicioAplicacao).HasColumnName("QN_HORA_INICIO_APLICACAO");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");
            });

            modelBuilder.Entity<ProtocoloOncologico>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloOncologico);

                entity.Property(e => e.IdProtocoloOncologico).HasColumnName("ID_PROTOCOLO_ONCOLOGICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmProtocoloOncologico)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROTOCOLO_ONCOLOGICO");

                entity.Property(e => e.QnCiclos).HasColumnName("QN_CICLOS");

                entity.Property(e => e.QnIntervaloAplicacao).HasColumnName("QN_INTERVALO_APLICACAO");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxReferenciaBibliografica)
                    .IsUnicode(false)
                    .HasColumnName("TX_REFERENCIA_BIBLIOGRAFICA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProtocoloOncologico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloOncologico_Usuario");
            });

            modelBuilder.Entity<ProtocoloOncologicoCid>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloOncologicoCid)
                    .HasName("PK_ProtocoloOncologicoCid");

                entity.ToTable("ProtocoloOncologico_Cid");

                entity.Property(e => e.IdProtocoloOncologicoCid).HasColumnName("ID_PROTOCOLO_ONCOLOGICO_CID");

                entity.Property(e => e.IdCid).HasColumnName("ID_CID");

                entity.Property(e => e.IdProtocoloOncologico).HasColumnName("ID_PROTOCOLO_ONCOLOGICO");

                entity.HasOne(d => d.IdC)
                    .WithMany(p => p.ProtocoloOncologicoCid)
                    .HasForeignKey(d => d.IdCid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloOncologicoCid_Cid");

                entity.HasOne(d => d.IdProtocoloOncologicoNavigation)
                    .WithMany(p => p.ProtocoloOncologicoCid)
                    .HasForeignKey(d => d.IdProtocoloOncologico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloOncologicoCid_ProtocoloOncologico");
            });

            modelBuilder.Entity<ProtocoloOncologicoItem>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloOncologicoItem)
                    .HasName("PK_ProtocoloOncologicoItem");

                entity.ToTable("ProtocoloOncologico_Item");

                entity.Property(e => e.IdProtocoloOncologicoItem).HasColumnName("ID_PROTOCOLO_ONCOLOGICO_ITEM");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdFaseInfusao).HasColumnName("ID_FASE_INFUSAO");

                entity.Property(e => e.IdInstrucaoEspecial).HasColumnName("ID_INSTRUCAO_ESPECIAL");

                entity.Property(e => e.IdOrdemInfusao).HasColumnName("ID_ORDEM_INFUSAO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProtocoloOncologico).HasColumnName("ID_PROTOCOLO_ONCOLOGICO");

                entity.Property(e => e.IdProtocoloOncologicoItemPai).HasColumnName("ID_PROTOCOLO_ONCOLOGICO_ITEM_PAI");

                entity.Property(e => e.IdTipoItem)
                    .HasColumnName("ID_TIPO_ITEM")
                    .HasDefaultValueSql("((9513))");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdViaAdministracao).HasColumnName("ID_VIA_ADMINISTRACAO");

                entity.Property(e => e.NrAssociacao).HasColumnName("NR_ASSOCIACAO");

                entity.Property(e => e.QnDose)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE");

                entity.Property(e => e.QnTempoInfusao).HasColumnName("QN_TEMPO_INFUSAO");

                entity.Property(e => e.TxDiasAplicacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DIAS_APLICACAO");

                entity.Property(e => e.TxObservacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlConcentracao).HasColumnName("VL_CONCENTRACAO");

                entity.HasOne(d => d.IdFaseInfusaoNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItemIdFaseInfusaoNavigation)
                    .HasForeignKey(d => d.IdFaseInfusao)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_FaseInfusao");

                entity.HasOne(d => d.IdInstrucaoEspecialNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItemIdInstrucaoEspecialNavigation)
                    .HasForeignKey(d => d.IdInstrucaoEspecial)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_InstrucaoEspecial");

                entity.HasOne(d => d.IdOrdemInfusaoNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItemIdOrdemInfusaoNavigation)
                    .HasForeignKey(d => d.IdOrdemInfusao)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_OrdemInfusao");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItem)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_Produto");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItem)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_ProtocoloOncologico_Item_ProdutoDetalhe");

                entity.HasOne(d => d.IdProtocoloOncologicoNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItem)
                    .HasForeignKey(d => d.IdProtocoloOncologico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_ProtocoloOncologico");

                entity.HasOne(d => d.IdTipoItemNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItemIdTipoItemNavigation)
                    .HasForeignKey(d => d.IdTipoItem)
                    .HasConstraintName("FK_ProtocoloOncologico_Item_TipoItem");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItemIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_UnidadeMedida");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_Usuario");

                entity.HasOne(d => d.IdViaAdministracaoNavigation)
                    .WithMany(p => p.ProtocoloOncologicoItemIdViaAdministracaoNavigation)
                    .HasForeignKey(d => d.IdViaAdministracao)
                    .HasConstraintName("FK_ProtocoloOncologicoItem_ViaAdministracao");
            });

            modelBuilder.Entity<ProtocoloSame>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloSame);

                entity.HasIndex(e => e.IdDocumentoLote, "IX_ProtocoloSame")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProtocoloSame).HasColumnName("ID_PROTOCOLO_SAME");

                entity.Property(e => e.DtArquivamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ARQUIVAMENTO");

                entity.Property(e => e.IdDocumentoLote).HasColumnName("ID_DOCUMENTO_LOTE");

                entity.HasOne(d => d.IdDocumentoLoteNavigation)
                    .WithMany(p => p.ProtocoloSame)
                    .HasForeignKey(d => d.IdDocumentoLote)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProtocoloSame_DocumentoLote");
            });

            modelBuilder.Entity<ProtocoloServico>(entity =>
            {
                entity.HasKey(e => e.IdProtocoloServico);

                entity.ToTable("Protocolo_Servico");

                entity.Property(e => e.IdProtocoloServico).HasColumnName("ID_PROTOCOLO_SERVICO");

                entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InOpcional)
                    .IsRequired()
                    .HasColumnName("IN_OPCIONAL")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdProtocoloNavigation)
                    .WithMany(p => p.ProtocoloServico)
                    .HasForeignKey(d => d.IdProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Protocolo_Servico_Protocolo");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ProtocoloServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Protocolo_Servico_Servico");
            });

            modelBuilder.Entity<ProximoCodigoPacote>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdProximoPacote).HasColumnName("CD_PROXIMO_PACOTE");
            });

            modelBuilder.Entity<Psicologo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Psicologo");

                entity.Property(e => e.IdPessoa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<Rastreamento>(entity =>
            {
                entity.HasKey(e => new { e.IdLoteProdutoItem, e.DtDispensacao })
                    .HasName("Rastreamento_PK");

                entity.HasIndex(e => new { e.IdLoteProdutoItem, e.DtDispensacao }, "IX_Rastreamento_K1_K2")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLoteProdutoItem, e.IdUnidadeLocalProduto }, "IX_Rastreamento_K1_K6")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdSolicitacao, "IX_Rastreamento_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdLoteProdutoItem, e.DtDispensacao }, "IX_Rastreamento_LoteProdutoItem_DtDispensacao")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DtDispensacao, "IX_Rastreamento_dt_dispensacao_include_id_lote_produto_item")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.DtDispensacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DISPENSACAO");

                entity.Property(e => e.DtRecebimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdUnidadeLocalProduto).HasColumnName("ID_UNIDADE_LOCAL_PRODUTO");

                entity.Property(e => e.IdUsuarioDispensou).HasColumnName("ID_USUARIO_DISPENSOU");

                entity.Property(e => e.IdUsuarioRecebeu).HasColumnName("ID_USUARIO_RECEBEU");

                entity.Property(e => e.InLocalProduto).HasColumnName("IN_LOCAL_PRODUTO");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.Rastreamento)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rastreamento_LoteProdutoItem");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.Rastreamento)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .HasConstraintName("Solicitacao_Rastreamento_FK1");

                entity.HasOne(d => d.IdUnidadeLocalProdutoNavigation)
                    .WithMany(p => p.Rastreamento)
                    .HasForeignKey(d => d.IdUnidadeLocalProduto)
                    .HasConstraintName("FK_Rastreamento_UnidadeOrganizacional");
            });

            modelBuilder.Entity<RecemNascido>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RecemNascido");

                entity.Property(e => e.DtNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DT_NASCIMENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.HrNascimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HR_NASCIMENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdCor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_COR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdGemelar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_GEMELAR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdMae).HasColumnName("ID_MAE");

                entity.Property(e => e.IdNacionalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NACIONALIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdNaturalidade)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_NATURALIDADE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdRecemnascido).HasColumnName("ID_RECEMNASCIDO");

                entity.Property(e => e.IdSexo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ID_SEXO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmMae)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmPai)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAI")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmRecemnascido)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RECEMNASCIDO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnPeso)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_PESO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnTamanho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_TAMANHO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescAnomalia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_ANOMALIA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Recomendacao>(entity =>
            {
                entity.HasKey(e => e.IdRecomendacao)
                    .HasName("Recomendacao_PK");

                entity.Property(e => e.IdRecomendacao).HasColumnName("ID_RECOMENDACAO");

                entity.Property(e => e.DtRecomendacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECOMENDACAO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdTipoRecomendacao).HasColumnName("ID_TIPO_RECOMENDACAO");

                entity.Property(e => e.IdTipoRecomendacaoTipoPai).HasColumnName("ID_TIPO_RECOMENDACAO_TIPO_PAI");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(700)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdTipoRecomendacaoNavigation)
                    .WithMany(p => p.Recomendacao)
                    .HasForeignKey(d => d.IdTipoRecomendacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Recomendacao_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Recomendacao)
                    .HasForeignKey(d => new { d.IdPessoaEntidade, d.IdPessoa })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Relacionamento_Recomendacao_FK1");
            });

            modelBuilder.Entity<Recurso>(entity =>
            {
                entity.HasKey(e => e.IdRecurso)
                    .HasName("Recurso_PK");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdRecursoTipo).HasColumnName("ID_RECURSO_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NmRecurso)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_RECURSO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdRecursoTipoNavigation)
                    .WithMany(p => p.Recurso)
                    .HasForeignKey(d => d.IdRecursoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Recurso_FK1");
            });

            modelBuilder.Entity<RecursoGlosa>(entity =>
            {
                entity.HasKey(e => new { e.IdFechamentoItem, e.IdConta })
                    .HasName("Recurso_Glosa_PK");

                entity.ToTable("Recurso_Glosa");

                entity.HasIndex(e => e.IdConta, "IX_Recurso_Glosa_ID_CONTA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.DtRecurso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECURSO");

                entity.Property(e => e.IdJustificativaRecurso).HasColumnName("ID_JUSTIFICATIVA_RECURSO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.QnRecursada).HasColumnName("QN_RECURSADA");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRecursadoTotal).HasColumnName("VL_RECURSADO_TOTAL");

                entity.HasOne(d => d.IdJustificativaRecursoNavigation)
                    .WithMany(p => p.RecursoGlosa)
                    .HasForeignKey(d => d.IdJustificativaRecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recurso_Glosa_Justificativa_Recurso");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RecursoGlosa)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Recurso_Glosa_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RecursoGlosa)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Recurso_Glosa_Glosa_FK1");
            });

            modelBuilder.Entity<RecursoGlosa1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RecursoGlosa");

                entity.Property(e => e.Alta)
                    .HasColumnType("datetime")
                    .HasColumnName("alta");

                entity.Property(e => e.Atendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("atendimento");

                entity.Property(e => e.Autorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("autorizacao");

                entity.Property(e => e.Cartao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cartao");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Competencia)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCIA");

                entity.Property(e => e.Conta).HasColumnName("conta");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(803)
                    .IsUnicode(false)
                    .HasColumnName("descricao");

                entity.Property(e => e.DtFechamentoCarta)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_FECHAMENTO_CARTA");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_impressao");

                entity.Property(e => e.DtLancamento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtVencimentoRecurso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_vencimento_recurso");

                entity.Property(e => e.Glosa).HasColumnName("glosa");

                entity.Property(e => e.Guiasenha)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("guiasenha");

                entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");

                entity.Property(e => e.IdCartarecurso).HasColumnName("id_cartarecurso");

                entity.Property(e => e.InFechada).HasColumnName("IN_FECHADA");

                entity.Property(e => e.InReenvio).HasColumnName("in_reenvio");

                entity.Property(e => e.Justificativa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("justificativa");

                entity.Property(e => e.Lote).HasColumnName("lote");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("matricula");

                entity.Property(e => e.Motivo)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("motivo");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nm_consumo_minimo");

                entity.Property(e => e.NrCartaRemessa).HasColumnName("nr_carta_remessa");

                entity.Property(e => e.Operadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("operadora");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("paciente");

                entity.Property(e => e.QdItem).HasColumnName("qd_item");

                entity.Property(e => e.QnGlosada).HasColumnName("qn_glosada");

                entity.Property(e => e.QnRecursada).HasColumnName("qn_recursada");

                entity.Property(e => e.Recurso).HasColumnName("recurso");

                entity.Property(e => e.Sselect)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("sselect");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titulo");

                entity.Property(e => e.TxAssinatura)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("tx_assinatura");

                entity.Property(e => e.TxCabecalho)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("tx_cabecalho");

                entity.Property(e => e.TxContato)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("tx_contato");

                entity.Property(e => e.TxCorpo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("tx_corpo");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("tx_observacoes");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tx_razao_social");

                entity.Property(e => e.Valor).HasColumnName("valor");

                entity.Property(e => e.VlUnitario).HasColumnName("vl_unitario");
            });

            modelBuilder.Entity<RecursoGlosaAnalitico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RecursoGlosa_Analitico");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.DtRecurso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECURSO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.InReenvio).HasColumnName("IN_REENVIO");

                entity.Property(e => e.ItemAcatado).HasColumnName("ITEM_ACATADO");

                entity.Property(e => e.ItemRevertido).HasColumnName("ITEM_REVERTIDO");

                entity.Property(e => e.Mapa)
                    .HasMaxLength(33)
                    .IsUnicode(false)
                    .HasColumnName("MAPA");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.VlAcatado).HasColumnName("VL_ACATADO");

                entity.Property(e => e.VlRecursadoTotal).HasColumnName("VL_RECURSADO_TOTAL");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");
            });

            modelBuilder.Entity<RecursoGlosaAnaliticoSimplificado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RecursoGlosaAnaliticoSimplificado");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.ItemAcatado).HasColumnName("ITEM_ACATADO");

                entity.Property(e => e.ItemRevertido).HasColumnName("ITEM_REVERTIDO");

                entity.Property(e => e.VlAcatado).HasColumnName("VL_ACATADO");

                entity.Property(e => e.VlRecursadoTotal).HasColumnName("VL_RECURSADO_TOTAL");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");
            });

            modelBuilder.Entity<RecursoGlosaGenerica>(entity =>
            {
                entity.HasKey(e => e.IdConta);

                entity.ToTable("Recurso_Glosa_Generica");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtRecurso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECURSO");

                entity.Property(e => e.IdJustificativaRecurso).HasColumnName("ID_JUSTIFICATIVA_RECURSO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxJustificativaRecurso)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_RECURSO");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRecursadoTotal).HasColumnName("VL_RECURSADO_TOTAL");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithOne(p => p.RecursoGlosaGenerica)
                    .HasForeignKey<RecursoGlosaGenerica>(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recurso_Glosa_Generica_Conta_Cobranca");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RecursoGlosaGenerica)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recurso_Glosa_Generica_Usuario");
            });

            modelBuilder.Entity<RecursoGlosaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRecursoGlosaHistorico);

                entity.ToTable("Recurso_Glosa_Historico");

                entity.HasIndex(e => new { e.IdFechamentoItem, e.IdConta }, "IX_Recurso_Glosa_Historico_ID_FECHAMENTO_ITEM_ID_CONTA")
                    .HasFillFactor((byte)75);

                entity.Property(e => e.IdRecursoGlosaHistorico).HasColumnName("ID_RECURSO_GLOSA_HISTORICO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtRecurso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativaRecurso).HasColumnName("ID_JUSTIFICATIVA_RECURSO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.QnRecursada).HasColumnName("QN_RECURSADA");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRecursadoTotal).HasColumnName("VL_RECURSADO_TOTAL");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RecursoGlosaHistoricoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Recurso_Glosa_Historico_FK1");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.RecursoGlosaHistoricoIdUsuarioOperacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("Usuario_Recurso_Glosa_Historico_FK2");
            });

            modelBuilder.Entity<RecursoGlosaReenvio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RecursoGlosaReenvio");

                entity.Property(e => e.Alta)
                    .HasColumnType("datetime")
                    .HasColumnName("alta");

                entity.Property(e => e.Atendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("atendimento");

                entity.Property(e => e.Autorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("autorizacao");

                entity.Property(e => e.Cartao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cartao");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Conta).HasColumnName("conta");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(803)
                    .IsUnicode(false)
                    .HasColumnName("descricao");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_impressao");

                entity.Property(e => e.DtLancamento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtVencimentoRecurso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_vencimento_recurso");

                entity.Property(e => e.Glosa).HasColumnName("glosa");

                entity.Property(e => e.Guiasenha)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("guiasenha");

                entity.Property(e => e.IdAtendimento).HasColumnName("id_atendimento");

                entity.Property(e => e.IdCartarecurso).HasColumnName("id_cartarecurso");

                entity.Property(e => e.InReenvio).HasColumnName("in_reenvio");

                entity.Property(e => e.Justificativa)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("justificativa");

                entity.Property(e => e.Lote).HasColumnName("lote");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("matricula");

                entity.Property(e => e.Motivo)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("motivo");

                entity.Property(e => e.NmConsumoMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nm_consumo_minimo");

                entity.Property(e => e.NrCartaRemessa).HasColumnName("nr_carta_remessa");

                entity.Property(e => e.Operadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("operadora");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("paciente");

                entity.Property(e => e.QdItem).HasColumnName("qd_item");

                entity.Property(e => e.QnGlosada).HasColumnName("qn_glosada");

                entity.Property(e => e.QnRecursada).HasColumnName("qn_recursada");

                entity.Property(e => e.Recurso).HasColumnName("recurso");

                entity.Property(e => e.Sselect)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("sselect");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("titulo");

                entity.Property(e => e.TxAssinatura)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("tx_assinatura");

                entity.Property(e => e.TxCabecalho)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("tx_cabecalho");

                entity.Property(e => e.TxContato)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("tx_contato");

                entity.Property(e => e.TxCorpo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("tx_corpo");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("tx_observacoes");

                entity.Property(e => e.TxRazaoSocial)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tx_razao_social");

                entity.Property(e => e.Valor).HasColumnName("valor");

                entity.Property(e => e.VlUnitario).HasColumnName("vl_unitario");
            });

            modelBuilder.Entity<RecursoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdRecurso, e.IdServico })
                    .HasName("Recurso_Servico_PK");

                entity.ToTable("Recurso_Servico");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.RecursoServico)
                    .HasForeignKey(d => d.IdRecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Recurso_Recurso_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RecursoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Recurso_Servico_FK1");
            });

            modelBuilder.Entity<RecursoUsuario>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdRecurso })
                    .HasName("Recurso_Usuario_PK");

                entity.ToTable("Recurso_Usuario");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.RecursoUsuario)
                    .HasForeignKey(d => d.IdRecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recurso_Usuario_Recurso");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RecursoUsuario)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recurso_Usuario_Usuario");
            });

            modelBuilder.Entity<RecusaMaterial>(entity =>
            {
                entity.HasKey(e => e.IdRecusaMaterial)
                    .HasName("RecusaMaterial_PK");

                entity.Property(e => e.IdRecusaMaterial).HasColumnName("ID_RECUSA_MATERIAL");

                entity.Property(e => e.DtRecusaMaterial)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECUSA_MATERIAL");

                entity.Property(e => e.IdFornecedor).HasColumnName("ID_FORNECEDOR");

                entity.Property(e => e.IdMotivoRecusa).HasColumnName("ID_MOTIVO_RECUSA");

                entity.Property(e => e.IdNotaEntrada).HasColumnName("ID_NOTA_ENTRADA");

                entity.Property(e => e.IdOrdemCompra).HasColumnName("ID_ORDEM_COMPRA");

                entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdFornecedorNavigation)
                    .WithMany(p => p.RecusaMaterialIdFornecedorNavigation)
                    .HasForeignKey(d => d.IdFornecedor)
                    .HasConstraintName("Pessoa_RecusaMaterial_FK2");

                entity.HasOne(d => d.IdMotivoRecusaNavigation)
                    .WithMany(p => p.RecusaMaterial)
                    .HasForeignKey(d => d.IdMotivoRecusa)
                    .HasConstraintName("FK_RecusaMaterial_TipoDiversos");

                entity.HasOne(d => d.IdNotaEntradaNavigation)
                    .WithMany(p => p.RecusaMaterial)
                    .HasForeignKey(d => d.IdNotaEntrada)
                    .HasConstraintName("NotaEntrada_RecusaMaterial_FK1");

                entity.HasOne(d => d.IdOrdemCompraNavigation)
                    .WithMany(p => p.RecusaMaterial)
                    .HasForeignKey(d => d.IdOrdemCompra)
                    .HasConstraintName("OrdemCompra_RecusaMaterial_FK1");

                entity.HasOne(d => d.IdTransportadoraNavigation)
                    .WithMany(p => p.RecusaMaterialIdTransportadoraNavigation)
                    .HasForeignKey(d => d.IdTransportadora)
                    .HasConstraintName("Pessoa_RecusaMaterial_FK1");
            });

            modelBuilder.Entity<Refeicao>(entity =>
            {
                entity.HasKey(e => e.IdRefeicao)
                    .HasName("Refeicao_PK");

                entity.Property(e => e.IdRefeicao).HasColumnName("ID_REFEICAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmRefeicao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_REFEICAO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.Refeicao)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK_Refeicao_Servico");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.Refeicao)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("TipoDiversos_Refeicao_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Refeicao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Refeicao_FK1");
            });

            modelBuilder.Entity<RefeicaoConsumo>(entity =>
            {
                entity.HasKey(e => e.IdRefeicaoConsumo)
                    .HasName("RefeicaoConsumo_PK");

                entity.HasIndex(e => new { e.IdAtendimento, e.IdLeito }, "IX_RefeicaoConsumo_ID_ATENDIMENTO_ID_LEITO");

                entity.Property(e => e.IdRefeicaoConsumo).HasColumnName("ID_REFEICAO_CONSUMO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoRefeicao).HasColumnName("ID_TIPO_REFEICAO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnRefeicao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_REFEICAO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RefeicaoConsumo)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK_RefeicaoConsumo_Servico");
            });

            modelBuilder.Entity<RefeicaoConsumoAcompanhante>(entity =>
            {
                entity.HasKey(e => e.IdRefeicaoConsumo)
                    .HasName("RefeicaoConsumoAcompanhante_PK");

                entity.Property(e => e.IdRefeicaoConsumo)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_REFEICAO_CONSUMO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InGratuito).HasColumnName("IN_GRATUITO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.NmAcompanhante)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("NM_ACOMPANHANTE");

                entity.Property(e => e.NmAutorizacao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("NM_AUTORIZACAO");

                entity.HasOne(d => d.IdRefeicaoConsumoNavigation)
                    .WithOne(p => p.RefeicaoConsumoAcompanhante)
                    .HasForeignKey<RefeicaoConsumoAcompanhante>(d => d.IdRefeicaoConsumo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RefeicaoConsumo_RefeicaoConsumoAcompanhante_FK1");
            });

            modelBuilder.Entity<RefeicaoConsumoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRefeicaoConsumoHistorico)
                    .HasName("RefeicaoConsumo_Historico_PK");

                entity.ToTable("RefeicaoConsumo_Historico");

                entity.Property(e => e.IdRefeicaoConsumoHistorico).HasColumnName("ID_REFEICAO_CONSUMO_HISTORICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.IdRefeicaoConsumo).HasColumnName("ID_REFEICAO_CONSUMO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoRefeicao).HasColumnName("ID_TIPO_REFEICAO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.InAcompanhante).HasColumnName("IN_ACOMPANHANTE");

                entity.Property(e => e.InGratuito).HasColumnName("IN_GRATUITO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.NmAcompanhante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ACOMPANHANTE");

                entity.Property(e => e.QnRefeicao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_REFEICAO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdRefeicaoConsumoNavigation)
                    .WithMany(p => p.RefeicaoConsumoHistorico)
                    .HasForeignKey(d => d.IdRefeicaoConsumo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RefeicaoConsumo_Historico_RefeicaoConsumo");
            });

            modelBuilder.Entity<RefeicaoUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdRefeicao, e.DtLancamento })
                    .HasName("Refeicao_UnidadeOrganizacional_PK");

                entity.ToTable("Refeicao_UnidadeOrganizacional");

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.DtLancamento }, "IX_Refeicao_UnidadeOrganizacional_ID_UNIDADE_ORGANIZACIONAL_DT_LANCAMENTO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdRefeicao).HasColumnName("ID_REFEICAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.QnRefeicao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_REFEICAO");

                entity.HasOne(d => d.IdRefeicaoNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdRefeicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Refeicao_Refeicao_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Refeicao_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Refeicao_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<RefeicaoUnidadeOrganizacionalTipoRefeicao>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdTipoRefeicao, e.IdRefeicao })
                    .HasName("Refeicao_UnidadeOrganizacional_TipoRefeicao_PK");

                entity.ToTable("Refeicao_UnidadeOrganizacional_TipoRefeicao");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdTipoRefeicao).HasColumnName("ID_TIPO_REFEICAO");

                entity.Property(e => e.IdRefeicao).HasColumnName("ID_REFEICAO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdUsuarioAlteracao).HasColumnName("ID_USUARIO_ALTERACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdRefeicaoNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacionalTipoRefeicao)
                    .HasForeignKey(d => d.IdRefeicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Refeicao_Refeicao_UnidadeOrganizacional_TipoRefeicao_FK1");

                entity.HasOne(d => d.IdTipoRefeicaoNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacionalTipoRefeicao)
                    .HasForeignKey(d => d.IdTipoRefeicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Refeicao_UnidadeOrganizacional_TipoRefeicao_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacionalTipoRefeicao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Refeicao_UnidadeOrganizacional_TipoRefeicao_FK1");

                entity.HasOne(d => d.IdUsuarioAlteracaoNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacionalTipoRefeicaoIdUsuarioAlteracaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAlteracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Refeicao_UnidadeOrganizacional_TipoRefeicao_FK2");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.RefeicaoUnidadeOrganizacionalTipoRefeicaoIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Refeicao_UnidadeOrganizacional_TipoRefeicao_FK1");
            });

            modelBuilder.Entity<RegistroEletronico>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronico)
                    .HasName("RegistroEletronico_PK");

                entity.HasIndex(e => e.IdAtendimento, "IX_RegistroEletronico_ID_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdClassificacaoSenha, "IX_RegistroEletronico_ID_CLASSIFICACAO_SENHA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdPessoa, "IX_RegistroEletronico_ID_PESSOA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdProcedimentoPrincipal, e.InAtivo, e.IdCheckinEnfermagem }, "IX_RegistroEletronico_ID_PROCEDIMENTO_PRINCIPAL_IN_ATIVO_ID_CHECKIN_ENFERMAGEM")
                    .HasFillFactor((byte)95);

                entity.HasIndex(e => new { e.IdRegistroEletronicoModelo, e.IdAtendimento }, "IX_RegistroEletronico_ID_REGISTRO_ELETRONICO_MODELO_ID_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdRegistroEletronicoModelo, e.IdClassificacaoSenha }, "IX_RegistroEletronico_ID_REGISTRO_ELETRONICO_MODELO_ID_CLASSIFICACAO_SENHA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdRegistroEletronicoModelo, e.IdPessoa }, "IX_RegistroEletronico_ID_REGISTRO_ELETRONICO_MODELO_ID_PESSOA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdRegistroEletronicoModelo, e.InAtivo, e.IdAtendimento }, "IX_RegistroEletronico_ID_REGISTRO_ELETRONICO_MODELO_IN_ATIVO_ID_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdServicoGuia, "IX_RegistroEletronico_ID_SERVICO_GUIA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InAtivo, "IX_RegistroEletronico_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtivo, e.IdAtendimento }, "IX_RegistroEletronico_IN_ATIVO_ID_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.InAtivo, e.IdCheckinEnfermagem, e.IdProcedimentoPrincipal }, "IX_RegistroEletronico_IN_ATIVO_ID_CHECKIN_ENFERMAGEM_ID_PROCEDIMENTO_PRINCIPAL")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao, "IX_RegistroEletronico_PK_2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdRegistroEletronico).HasColumnName("ID_REGISTRO_ELETRONICO");

                entity.Property(e => e.AdArquivoAssinado).HasColumnName("AD_ARQUIVO_ASSINADO");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdClassificacaoSenha).HasColumnName("ID_CLASSIFICACAO_SENHA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdProcedimentoPrincipal).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdStatusRegistroEletronico).HasColumnName("ID_STATUS_REGISTRO_ELETRONICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InIntegracaoHl7).HasColumnName("IN_INTEGRACAO_HL7");

                entity.Property(e => e.NrVersaoModelo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_VERSAO_MODELO");

                entity.Property(e => e.TxAssinaturaDigital)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_ASSINATURA_DIGITAL");

                entity.Property(e => e.TxRegistroDuplicadoSalvo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_REGISTRO_DUPLICADO_SALVO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdAtendimento)
                    .HasConstraintName("Atendimento_RegistroEletronico_FK1");

                entity.HasOne(d => d.IdClassificacaoSenhaNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdClassificacaoSenha)
                    .HasConstraintName("FK_RegistroEletronico_ClassificacaoSenha");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdPessoa)
                    .HasConstraintName("FK_RegistroEletronico_Pessoa");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronicoModelo_RegistroEletronico_FK1");

                entity.HasOne(d => d.IdServicoGuiaNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdServicoGuia)
                    .HasConstraintName("Servico_Guia_RegistroEletronico_FK1");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .HasConstraintName("Solicitacao_PD_EnfermagemHorarioAdministracao_RegistroEletronico_FK1");

                entity.HasOne(d => d.IdStatusRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdStatusRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronico_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RegistroEletronico)
                    .HasForeignKey(d => new { d.IdProcedimentoPrincipal, d.IdCheckinEnfermagem })
                    .HasConstraintName("FK_RegistroEletronico_Folhadesala");
            });

            modelBuilder.Entity<RegistroEletronicoAlerta>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoAlerta);

                entity.Property(e => e.IdRegistroEletronicoAlerta).HasColumnName("ID_REGISTRO_ELETRONICO_ALERTA");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdTipoAlerta).HasColumnName("ID_TIPO_ALERTA");

                entity.Property(e => e.TxCriterio)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_CRITERIO");

                entity.Property(e => e.TxMensagem)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MENSAGEM");

                entity.Property(e => e.TxValorFiltro)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_FILTRO");
            });

            modelBuilder.Entity<RegistroEletronicoArquivo>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoArquivo)
                    .HasName("PK__Registro__51300B0C3C53EBB0");

                entity.Property(e => e.IdRegistroEletronicoArquivo).HasColumnName("ID_REGISTRO_ELETRONICO_ARQUIVO");

                entity.Property(e => e.AdArquivo)
                    .HasMaxLength(100)
                    .HasColumnName("AD_ARQUIVO");

                entity.Property(e => e.DtArquivo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ARQUIVO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmArquivo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.RegistroEletronicoArquivo)
                    .HasForeignKey(d => d.IdAtendimento)
                    .HasConstraintName("FK__RegistroE__ID_AT__4118A0CD");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.RegistroEletronicoArquivo)
                    .HasForeignKey(d => d.IdPessoa)
                    .HasConstraintName("FK__RegistroE__ID_PE__40247C94");
            });

            modelBuilder.Entity<RegistroEletronicoDeclaracao>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoDeclaracao);

                entity.HasIndex(e => new { e.IdAtendimento, e.InAtivo }, "iX_DGA_ATEN_IN_ATIV")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdRegistroEletronicoDeclaracao).HasColumnName("ID_REGISTRO_ELETRONICO_DECLARACAO");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdStatus)
                    .HasColumnName("ID_STATUS")
                    .HasDefaultValueSql("((4990))");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxDeclaracao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DECLARACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.RegistroEletronicoDeclaracao)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoDeclaracao_Atendimento");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.RegistroEletronicoDeclaracao)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RegistroE__ID_ST__575DB2FE");
            });

            modelBuilder.Entity<RegistroEletronicoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronico, e.IdRegistroEletronicoHistorico })
                    .HasName("RegistroEletronicoHistorico_PK");

                entity.Property(e => e.IdRegistroEletronico).HasColumnName("ID_REGISTRO_ELETRONICO");

                entity.Property(e => e.IdRegistroEletronicoHistorico).HasColumnName("ID_REGISTRO_ELETRONICO_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdStatusRegistroEletronico).HasColumnName("ID_STATUS_REGISTRO_ELETRONICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tx_observacao");

                entity.HasOne(d => d.IdRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronicoHistorico)
                    .HasForeignKey(d => d.IdRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoHistorico_RegistroEletronico");

                entity.HasOne(d => d.IdStatusRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronicoHistorico)
                    .HasForeignKey(d => d.IdStatusRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RegistroEletronicoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoHistorico_Usuario");
            });

            modelBuilder.Entity<RegistroEletronicoImpressao>(entity =>
            {
                entity.HasKey(e => new { e.DtImpressao, e.IdUsuario, e.IdRegistroEletronico })
                    .HasName("RegistroEletronicoImpressao_PK");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdRegistroEletronico).HasColumnName("ID_REGISTRO_ELETRONICO");

                entity.HasOne(d => d.IdRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronicoImpressao)
                    .HasForeignKey(d => d.IdRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronico_RegistroEletronicoImpressao_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RegistroEletronicoImpressao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RegistroEletronicoImpressao_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoItem>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoItem)
                    .HasName("RegistroEletronicoItem_PK");

                entity.HasIndex(e => e.IdRegistroEletronico, "IX_RegistroEletronicoItem_ID_REGISTRO_ELETRONICO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdRegistroEletronicoItem).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdRegistroEletronico).HasColumnName("ID_REGISTRO_ELETRONICO");

                entity.Property(e => e.IdRegistroEletronicoItemModelo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxHtmlConteudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_CONTEUDO");

                entity.HasOne(d => d.IdRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronicoItem)
                    .HasForeignKey(d => d.IdRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronico_RegistroEletronicoItem_FK1");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoItem)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronicoItemModelo_RegistroEletronicoItem_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoItemAtributo>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoItemAtributo)
                    .HasName("RegistroEletronicoItem_Atributo_PK");

                entity.ToTable("RegistroEletronicoItem_Atributo");

                entity.HasIndex(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdRegistroEletronicoItem }, "IX_DGA_id_registro_item_")
                    .HasFilter("([id_registro_eletronico_item_modelo_atributo]=(48))")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdRegistroEletronicoItem, e.InAtivo }, "IX_RegistroEletronicoItem_Atributo_ID_REGISTRO_ELETRONICO_ITEM_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.InAtivo }, "IX_RegistroEletronicoItem_Atributo_ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdRegistroEletronicoItemAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_ATRIBUTO");

                entity.Property(e => e.DtAfericao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AFERICAO");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdRegistroEletronicoItem).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InVisivel)
                    .IsRequired()
                    .HasColumnName("IN_VISIVEL")
                    .HasDefaultValueSql("((1))")
                    .HasComment("se o campo não for visivel na tela");

                entity.Property(e => e.NrGrupo)
                    .HasColumnName("NR_GRUPO")
                    .HasComment("ordem dos grupos de itens inseridos em tela");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxObservacao)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxValorAtributo)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_ATRIBUTO");

                entity.HasOne(d => d.IdRegistroEletronicoItemNavigation)
                    .WithMany(p => p.RegistroEletronicoItemAtributo)
                    .HasForeignKey(d => d.IdRegistroEletronicoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronicoItem_RegistroEletronicoItem_Atributo_FK1");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemAtributo)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronicoItemModelo_Atributo_RegistroEletronicoItem_Atributo_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoItemAtributoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemAtributo, e.IdRegistroEletronicoItemAtributoHistorico })
                    .HasName("PK_RegistroEletronicoItem_AtributoHistorico2_temp");

                entity.ToTable("RegistroEletronicoItem_AtributoHistorico");

                entity.Property(e => e.IdRegistroEletronicoItemAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_ATRIBUTO");

                entity.Property(e => e.IdRegistroEletronicoItemAtributoHistorico).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_ATRIBUTO_HISTORICO");

                entity.Property(e => e.DtAfericao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AFERICAO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxObservacao)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxValorAtributo)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_ATRIBUTO");
            });

            modelBuilder.Entity<RegistroEletronicoItemHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItem, e.IdRegistroEletronicoItemHistorico })
                    .HasName("RegistroEletronicoItemHistorico_PK");

                entity.Property(e => e.IdRegistroEletronicoItem).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM");

                entity.Property(e => e.IdRegistroEletronicoItemHistorico).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxHtmlConteudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_CONTEUDO");

                entity.HasOne(d => d.IdRegistroEletronicoItemNavigation)
                    .WithMany(p => p.RegistroEletronicoItemHistorico)
                    .HasForeignKey(d => d.IdRegistroEletronicoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemHistorico_RegistroEletronicoItem");
            });

            modelBuilder.Entity<RegistroEletronicoItemModelo>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoItemModelo)
                    .HasName("RegistroEletronicoItemModelo_PK");

                entity.Property(e => e.IdRegistroEletronicoItemModelo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.IdTipoRegistroEletronicoItem).HasColumnName("ID_TIPO_REGISTRO_ELETRONICO_ITEM");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InEditavel).HasColumnName("IN_EDITAVEL");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.NmRegistroEletronicoItemModelo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_REGISTRO_ELETRONICO_ITEM_MODELO");

                entity.Property(e => e.NrVersao).HasColumnName("NR_VERSAO");

                entity.Property(e => e.TxHtmlConteudoModelo)
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_CONTEUDO_MODELO");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModelo)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronicoModelo_RegistroEletronicoItemModelo_FK1");

                entity.HasOne(d => d.IdTipoOcorrenciaNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloIdTipoOcorrenciaNavigation)
                    .HasForeignKey(d => d.IdTipoOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoItemModelo_FK1");

                entity.HasOne(d => d.IdTipoRegistroEletronicoItemNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloIdTipoRegistroEletronicoItemNavigation)
                    .HasForeignKey(d => d.IdTipoRegistroEletronicoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoItemModelo_FK2");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributo>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoItemModeloAtributo)
                    .HasName("RegistroEletronicoItemModelo_Atributo_PK");

                entity.ToTable("RegistroEletronicoItemModelo_Atributo");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdProtocoloClassificacao).HasColumnName("ID_PROTOCOLO_CLASSIFICACAO");

                entity.Property(e => e.IdRegistroEletronicoItemModelo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO");

                entity.Property(e => e.IdTabelaClassificacao).HasColumnName("ID_TABELA_CLASSIFICACAO");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InExibirDrop)
                    .HasColumnName("IN_EXIBIR_DROP")
                    .HasComment("somente para quando pegar de uma view, opção de morar em dropdowlist");

                entity.Property(e => e.InExibirNoReport)
                    .IsRequired()
                    .HasColumnName("IN_EXIBIR_NO_REPORT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.InPermiteCopia)
                    .IsRequired()
                    .HasColumnName("IN_PERMITE_COPIA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InPesquisaEmTela).HasColumnName("IN_PESQUISA_EM_TELA");

                entity.Property(e => e.InSomenteLeitura).HasColumnName("IN_SOMENTE_LEITURA");

                entity.Property(e => e.NmCampoApresentacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMPO_APRESENTACAO")
                    .HasComment("nome do campo que irá ser mostrado");

                entity.Property(e => e.NmCampoGravacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMPO_GRAVACAO")
                    .HasComment("nome do campo que será gravado");

                entity.Property(e => e.NmView)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_VIEW")
                    .HasComment("nome da view que o item vai listar");

                entity.Property(e => e.NrImagemHeight).HasColumnName("NR_IMAGEM_HEIGHT");

                entity.Property(e => e.NrImagemWidth).HasColumnName("NR_IMAGEM_WIDTH");

                entity.Property(e => e.NrOrdem)
                    .HasColumnName("NR_ORDEM")
                    .HasDefaultValueSql("((1))")
                    .HasComment("ordem dos campos na tela");

                entity.Property(e => e.NrVersao).HasColumnName("NR_VERSAO");

                entity.Property(e => e.TxDescricaoModelo)
                    .HasColumnType("text")
                    .HasColumnName("TX_DESCRICAO_MODELO");

                entity.Property(e => e.TxEnderecoUrl)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO_URL");

                entity.Property(e => e.TxFormula)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMULA");

                entity.Property(e => e.TxFormulaApresentacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_FORMULA_APRESENTACAO");

                entity.Property(e => e.TxObservacaoModelo)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACAO_MODELO");

                entity.Property(e => e.TxValorDefault)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_DEFAULT");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributo)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_RegistroEletronicoItemModelo_Atributo_FK1");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributo)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronicoItemModelo_RegistroEletronicoItemModelo_Atributo_FK1");

                entity.HasOne(d => d.IdTabelaClassificacaoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributo)
                    .HasForeignKey(d => d.IdTabelaClassificacao)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_TabelaClassificacao");

                entity.HasOne(d => d.IdTipoOcorrenciaNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributo)
                    .HasForeignKey(d => d.IdTipoOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoItemModelo_Atributo_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributoEspecialidade>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdEspecialidade });

                entity.ToTable("RegistroEletronicoItemModelo_Atributo_Especialidade");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoEspecialidade)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_Especialidade_TipoDiversos");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoEspecialidade)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_Especialidade_RegistroEletronicoItemModelo_Atributo");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributoGrupoFaixaEtaria>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdGrupoFaixaEtaria });

                entity.ToTable("RegistroEletronicoItemModelo_Atributo_GrupoFaixaEtaria");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdGrupoFaixaEtaria).HasColumnName("ID_GRUPO_FAIXA_ETARIA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdGrupoFaixaEtariaNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoGrupoFaixaEtaria)
                    .HasForeignKey(d => d.IdGrupoFaixaEtaria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_GrupoFaixaEtaria_GrupoFaixaEtaria");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoGrupoFaixaEtaria)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_GrupoFaixaEtaria_RegistroEletronicoItemModelo_Atributo");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdRegistroEletronicoItemModeloAtributoHistorico })
                    .HasName("RegistroEletronicoItemModelo_AtributoHistorico_PK");

                entity.ToTable("RegistroEletronicoItemModelo_AtributoHistorico");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributoHistorico).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.NrOrdem)
                    .HasColumnName("NR_ORDEM")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrVersao).HasColumnName("NR_VERSAO");

                entity.Property(e => e.TxDescricaoModelo)
                    .HasColumnType("text")
                    .HasColumnName("TX_DESCRICAO_MODELO");

                entity.Property(e => e.TxObservacaoModelo)
                    .HasColumnType("text")
                    .HasColumnName("TX_OBSERVACAO_MODELO");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoHistorico)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_RegistroEletronicoItemModelo_AtributoHistorico_FK1");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoHistorico)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_AtributoHistorico_RegistroEletronicoItemModelo_Atributo");

                entity.HasOne(d => d.IdTipoOcorrenciaNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoHistorico)
                    .HasForeignKey(d => d.IdTipoOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoItemModelo_AtributoHistorico_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributoPerfil>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdPerfil });

                entity.ToTable("RegistroEletronicoItemModelo_Atributo_Perfil");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoPerfil)
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_Perfil_RegistroEletronicoItemModelo_Atributo_Perfil");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoPerfil)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_Perfil_RegistroEletronicoItemModelo_Atributo");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributoPessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdPessoaEntidade });

                entity.ToTable("RegistroEletronicoItemModelo_Atributo_PessoaEntidade");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoPessoaEntidade)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_PessoaEntidade_PessoaEntidade");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoPessoaEntidade)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_PessoaEntidade_RegistroEletronicoItemModelo_Atributo");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributoSexo>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdSexo });

                entity.ToTable("RegistroEletronicoItemModelo_Atributo_Sexo");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdSexo).HasColumnName("ID_SEXO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoSexo)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_Sexo_RegistroEletronicoItemModelo_Atributo");

                entity.HasOne(d => d.IdSexoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoSexo)
                    .HasForeignKey(d => d.IdSexo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_Sexo_TipoDiversos");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloAtributoUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModeloAtributo, e.IdUnidadeOrganizacional });

                entity.ToTable("RegistroEletronicoItemModelo_Atributo_UnidadeOrganizacional");

                entity.Property(e => e.IdRegistroEletronicoItemModeloAtributo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_ATRIBUTO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloAtributoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModeloAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_UnidadeOrganizacional_RegistroEletronicoItemModelo_Atributo");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloAtributoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModelo_Atributo_UnidadeOrganizacional_UnidadeOrganizacional");
            });

            modelBuilder.Entity<RegistroEletronicoItemModeloHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoItemModelo, e.IdRegistroEletronicoItemModeloHistorico })
                    .HasName("RegistroEletronicoItemModeloHistorico_PK");

                entity.Property(e => e.IdRegistroEletronicoItemModelo).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO");

                entity.Property(e => e.IdRegistroEletronicoItemModeloHistorico).HasColumnName("ID_REGISTRO_ELETRONICO_ITEM_MODELO_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InEditavel).HasColumnName("IN_EDITAVEL");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.NmRegistroEletronicoItemModelo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_REGISTRO_ELETRONICO_ITEM_MODELO");

                entity.Property(e => e.NrVersao).HasColumnName("NR_VERSAO");

                entity.Property(e => e.TxHtmlConteudoModelo)
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_CONTEUDO_MODELO");

                entity.HasOne(d => d.IdRegistroEletronicoItemModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloHistorico)
                    .HasForeignKey(d => d.IdRegistroEletronicoItemModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoItemModeloHistorico_RegistroEletronicoItemModelo");

                entity.HasOne(d => d.IdTipoOcorrenciaNavigation)
                    .WithMany(p => p.RegistroEletronicoItemModeloHistorico)
                    .HasForeignKey(d => d.IdTipoOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoItemModeloHistorico_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoItemTipoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdRegistroEletronicoModelo })
                    .HasName("RegistroEletronicoItemTipo_Servico_PK");

                entity.ToTable("RegistroEletronicoItemTipo_Servico");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoItemTipoServico)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RegistroEletronicoModelo_RegistroEletronicoItemTipo_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RegistroEletronicoItemTipoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_RegistroEletronicoItemTipo_Servico_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoModelo>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoModelo)
                    .HasName("RegistroEletronicoModelo_PK");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.IdTipoRegistroEletronico).HasColumnName("ID_TIPO_REGISTRO_ELETRONICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCustomizavel).HasColumnName("IN_CUSTOMIZAVEL");

                entity.Property(e => e.InEditarOutrosProfissionais).HasColumnName("IN_EDITAR_OUTROS_PROFISSIONAIS");

                entity.Property(e => e.InFinalizaAutomatico).HasColumnName("IN_FINALIZA_AUTOMATICO");

                entity.Property(e => e.InImprimeFinalizado).HasColumnName("IN_IMPRIME_FINALIZADO");

                entity.Property(e => e.InMostrarAba).HasColumnName("IN_MOSTRAR_ABA");

                entity.Property(e => e.InMostrarRegistroClinicos)
                    .IsRequired()
                    .HasColumnName("IN_MOSTRAR_REGISTRO_CLINICOS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InNecessitaFinalizacao).HasColumnName("IN_NECESSITA_FINALIZACAO");

                entity.Property(e => e.InPadrao).HasColumnName("IN_PADRAO");

                entity.Property(e => e.InPermiteCopia)
                    .IsRequired()
                    .HasColumnName("IN_PERMITE_COPIA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InSomenteCriadorEdita).HasColumnName("IN_SOMENTE_CRIADOR_EDITA");

                entity.Property(e => e.NmAba)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ABA");

                entity.Property(e => e.NmArquivo)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO")
                    .HasComment("nome do arquivo do arquétipo");

                entity.Property(e => e.NmRegistroEletronicoModelo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.NrHorasAposObito).HasColumnName("NR_HORAS_APOS_OBITO");

                entity.Property(e => e.NrPrazoPreenchimento).HasColumnName("NR_PRAZO_PREENCHIMENTO");

                entity.Property(e => e.NrVersao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_VERSAO");

                entity.HasOne(d => d.IdTipoOcorrenciaNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloIdTipoOcorrenciaNavigation)
                    .HasForeignKey(d => d.IdTipoOcorrencia)
                    .HasConstraintName("TipoOcorrencia_RegistroEletronicoModelo_FK1");

                entity.HasOne(d => d.IdTipoRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloIdTipoRegistroEletronicoNavigation)
                    .HasForeignKey(d => d.IdTipoRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoModelo_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RegistroEletronicoModelo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RegistroEletronicoModelo_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoModeloDeclaracao>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoModeloDeclaracao);

                entity.Property(e => e.IdRegistroEletronicoModeloDeclaracao).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO_DECLARACAO");

                entity.Property(e => e.IdRegistroEletronicoModeloDeclaracaoReferencia).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO_DECLARACAO_REFERENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmModelo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_MODELO");

                entity.Property(e => e.TxModelo)
                    .IsUnicode(false)
                    .HasColumnName("TX_MODELO");

                entity.HasOne(d => d.IdRegistroEletronicoModeloDeclaracaoReferenciaNavigation)
                    .WithMany(p => p.InverseIdRegistroEletronicoModeloDeclaracaoReferenciaNavigation)
                    .HasForeignKey(d => d.IdRegistroEletronicoModeloDeclaracaoReferencia)
                    .HasConstraintName("FK__RegistroE__ID_RE__1BDCFA7D");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloDeclaracao)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_RegistroEletronicoModeloDeclaracao_Usuario");
            });

            modelBuilder.Entity<RegistroEletronicoModeloExigido>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoModelo, e.IdRegistroEletronicoModeloExigido, e.IdUnidadeOrganizacional });

                entity.ToTable("RegistroEletronicoModelo_Exigido");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdRegistroEletronicoModeloExigido).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO_EXIGIDO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloExigidoIdRegistroEletronicoModeloNavigation)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModelo_Exigido_RegistroEletronicoModelo");

                entity.HasOne(d => d.IdRegistroEletronicoModeloExigidoNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloExigidoIdRegistroEletronicoModeloExigidoNavigation)
                    .HasForeignKey(d => d.IdRegistroEletronicoModeloExigido)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModelo_Exigido_RegistroEletronicoModelo_Exigido");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloExigido)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModelo_Exigido_Unidade_Organizacional");
            });

            modelBuilder.Entity<RegistroEletronicoModeloHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoModelo, e.IdRegistroEletronicoModeloHistorico })
                    .HasName("RegistroEletronicoModeloHistorico_PK");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdRegistroEletronicoModeloHistorico).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO_HISTORICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.IdTipoRegistroEletronico).HasColumnName("ID_TIPO_REGISTRO_ELETRONICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InCustomizavel).HasColumnName("IN_CUSTOMIZAVEL");

                entity.Property(e => e.NmArquivo)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.NmRegistroEletronicoModelo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.NrVersao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_VERSAO");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloHistorico)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModeloHistorico_RegistroEletronicoModelo");

                entity.HasOne(d => d.IdTipoOcorrenciaNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloHistoricoIdTipoOcorrenciaNavigation)
                    .HasForeignKey(d => d.IdTipoOcorrencia)
                    .HasConstraintName("TipoOcorrencia_RegistroEletronicoModeloHistorico_FK1");

                entity.HasOne(d => d.IdTipoRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloHistoricoIdTipoRegistroEletronicoNavigation)
                    .HasForeignKey(d => d.IdTipoRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoModeloHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RegistroEletronicoModeloHistorico_FK1");
            });

            modelBuilder.Entity<RegistroEletronicoModeloPessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoModelo, e.IdPessoaEntidade });

                entity.ToTable("RegistroEletronicoModelo_PessoaEntidade");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloPessoaEntidade)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RegistroE__ID_PE__29F60FAA");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloPessoaEntidade)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RegistroE__ID_RE__2901EB71");
            });

            modelBuilder.Entity<RegistroEletronicoModeloServico>(entity =>
            {
                entity.HasKey(e => e.IdRegistroEletronicoModeloServico);

                entity.ToTable("RegistroEletronicoModelo_Servico");

                entity.Property(e => e.IdRegistroEletronicoModeloServico)
                    .HasColumnName("ID_REGISTRO_ELETRONICO_MODELO_SERVICO")
                    .HasComment("identificador único da tabela");

                entity.Property(e => e.IdOperadora)
                    .HasColumnName("ID_OPERADORA")
                    .HasComment("identificador da operadora que pode preencher este documento");

                entity.Property(e => e.IdRegistroEletronicoModelo)
                    .HasColumnName("ID_REGISTRO_ELETRONICO_MODELO")
                    .HasComment("identifica o documento de prontuário");

                entity.Property(e => e.IdServico)
                    .HasColumnName("ID_SERVICO")
                    .HasComment("identifica o serviço associado");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("exclusão lógica do registro");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloServico)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_RegistroEletronicoModelo_Servico_Pessoa");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloServico)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModelo_Servico_RegistroEletronicoModelo");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModelo_Servico_Servico");
            });

            modelBuilder.Entity<RegistroEletronicoModeloUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdRegistroEletronicoModelo, e.IdUnidadeOrganizacional });

                entity.ToTable("RegistroEletronicoModelo_UnidadeOrganizacional");

                entity.Property(e => e.IdRegistroEletronicoModelo).HasColumnName("ID_REGISTRO_ELETRONICO_MODELO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdRegistroEletronicoModeloNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdRegistroEletronicoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModelo_UnidadeOrganizacional_RegistroEletronicoModelo");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RegistroEletronicoModeloUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegistroEletronicoModelo_UnidadeOrganizacional_UnidadeOrganizacional");
            });

            modelBuilder.Entity<RegistroEletronicoTipoPessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoRegistroEletronico, e.IdPessoaEntidade })
                    .HasName("RegistroEletronicoTipo_PessoaEntidade_PK");

                entity.ToTable("RegistroEletronicoTipo_PessoaEntidade");

                entity.Property(e => e.IdTipoRegistroEletronico).HasColumnName("ID_TIPO_REGISTRO_ELETRONICO");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.RegistroEletronicoTipoPessoaEntidade)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_RegistroEletronicoTipo_PessoaEntidade_FK1");

                entity.HasOne(d => d.IdTipoRegistroEletronicoNavigation)
                    .WithMany(p => p.RegistroEletronicoTipoPessoaEntidade)
                    .HasForeignKey(d => d.IdTipoRegistroEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RegistroEletronicoTipo_PessoaEntidade_FK1");
            });

            modelBuilder.Entity<RegraAtributo>(entity =>
            {
                entity.HasKey(e => e.IdRegra)
                    .HasName("PK__RegraAtr__3F9C31780875204E");

                entity.Property(e => e.IdRegra).HasColumnName("ID_REGRA");

                entity.Property(e => e.DtRegra)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGRA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<RegraAtributoAssociacao>(entity =>
            {
                entity.HasKey(e => e.IdRegraatributoassociacao)
                    .HasName("PK__RegraAtr__9802562F0C45B132");

                entity.ToTable("RegraAtributo_Associacao");

                entity.Property(e => e.IdRegraatributoassociacao).HasColumnName("ID_REGRAATRIBUTOASSOCIACAO");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdRegra).HasColumnName("ID_REGRA");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.RegraAtributoAssociacao)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RegraAtri__ID_AT__0E2DF9A4");

                entity.HasOne(d => d.IdRegraNavigation)
                    .WithMany(p => p.RegraAtributoAssociacao)
                    .HasForeignKey(d => d.IdRegra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RegraAtri__ID_RE__0F221DDD");
            });

            modelBuilder.Entity<RelAtendimentoPs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Rel_AtendimentoPS");

                entity.Property(e => e.DataAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("Data Alta");

                entity.Property(e => e.DataAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("Data Atendimento");

                entity.Property(e => e.Especialidade)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Medico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Relacionamento>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaEntidade, e.IdPessoa })
                    .HasName("Relacionamento_PK");

                entity.HasIndex(e => new { e.IdPessoa, e.InAtivo }, "IX_Relacionamento_ID_PESSOA_IN_ATIVO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.InAtivo, "IX_Relacionamento_IN_ATIVO");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Relacionamento)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Relacionamento_FK1");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.Relacionamento)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_Relacionamento_FK1");
            });

            modelBuilder.Entity<RelacionamentoOcorrenciaTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaEntidade, e.IdPessoa, e.IdOcorrencia })
                    .HasName("Relacionamento_OcorrenciaTipo_PK");

                entity.ToTable("Relacionamento_OcorrenciaTipo");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdOcorrencia).HasColumnName("ID_OCORRENCIA");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxMotivo)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO");

                entity.HasOne(d => d.IdOcorrenciaNavigation)
                    .WithMany(p => p.RelacionamentoOcorrenciaTipo)
                    .HasForeignKey(d => d.IdOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Relacionamento_OcorrenciaTipo_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.RelacionamentoOcorrenciaTipo)
                    .HasForeignKey(d => new { d.IdPessoaEntidade, d.IdPessoa })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Relacionamento_Relacionamento_OcorrenciaTipo_FK1");
            });

            modelBuilder.Entity<RelacionamentoTipoOcorrencia>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaEntidade, e.IdPessoa, e.IdOcorrencia })
                    .HasName("Relacionamento_TipoOcorrencia_PK");

                entity.ToTable("Relacionamento_TipoOcorrencia");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdOcorrencia).HasColumnName("ID_OCORRENCIA");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxMotivo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO");

                entity.HasOne(d => d.IdOcorrenciaNavigation)
                    .WithMany(p => p.RelacionamentoTipoOcorrencia)
                    .HasForeignKey(d => d.IdOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Relacionamento_TipoOcorrencia_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.RelacionamentoTipoOcorrencia)
                    .HasForeignKey(d => new { d.IdPessoaEntidade, d.IdPessoa })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Relacionamento_Relacionamento_TipoOcorrencia_FK1");
            });

            modelBuilder.Entity<RelatorioGlosa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RelatorioGlosa");

                entity.Property(e => e.AnoMapa).HasColumnName("ANO_MAPA");

                entity.Property(e => e.Codjfi)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODJFI");

                entity.Property(e => e.Codjg)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODJG");

                entity.Property(e => e.Conta).HasColumnName("CONTA");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.JustFi)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("JUST_FI");

                entity.Property(e => e.JustGlosa)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("JUST_GLOSA");

                entity.Property(e => e.Lote).HasColumnName("LOTE");

                entity.Property(e => e.MesMapa).HasColumnName("MES_MAPA");

                entity.Property(e => e.Operadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPERADORA");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PACIENTE");

                entity.Property(e => e.Plano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PLANO");

                entity.Property(e => e.QnFi).HasColumnName("QN_FI");

                entity.Property(e => e.QnGlosada).HasColumnName("QN_GLOSADA");

                entity.Property(e => e.Quantidade).HasColumnName("QUANTIDADE");

                entity.Property(e => e.UnidFi)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("UNID_FI");

                entity.Property(e => e.UnidGlosa)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("UNID_GLOSA");

                entity.Property(e => e.Unidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE");

                entity.Property(e => e.UnidadeProdutiva)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_PRODUTIVA");

                entity.Property(e => e.ValorItem).HasColumnName("VALOR_ITEM");

                entity.Property(e => e.ValorUnitario).HasColumnName("VALOR_UNITARIO");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");
            });

            modelBuilder.Entity<RelatorioGlosaConciliada>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RelatorioGlosaConciliada");

                entity.Property(e => e.Codjfi).HasColumnName("CODJFI");

                entity.Property(e => e.Codjg).HasColumnName("CODJG");

                entity.Property(e => e.Conta).HasColumnName("CONTA");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.Item)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.JustFi)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JUST_FI");

                entity.Property(e => e.JustGlosa)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JUST_GLOSA");

                entity.Property(e => e.Lote).HasColumnName("LOTE");

                entity.Property(e => e.Operadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("OPERADORA");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PACIENTE");

                entity.Property(e => e.Plano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PLANO");

                entity.Property(e => e.QnFi).HasColumnName("QN_FI");

                entity.Property(e => e.QnGlosada).HasColumnName("QN_GLOSADA");

                entity.Property(e => e.Quantidade).HasColumnName("QUANTIDADE");

                entity.Property(e => e.UnidFi)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("UNID_FI");

                entity.Property(e => e.UnidGlosa)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("UNID_GLOSA");

                entity.Property(e => e.Unidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE");

                entity.Property(e => e.UnidadeProdutiva)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNIDADE_PRODUTIVA");

                entity.Property(e => e.ValorItem).HasColumnName("VALOR_ITEM");

                entity.Property(e => e.ValorUnitario).HasColumnName("VALOR_UNITARIO");

                entity.Property(e => e.VlFi).HasColumnName("VL_FI");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");
            });

            modelBuilder.Entity<RelatorioProfilatico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RelatorioProfilatico");

                entity.Property(e => e.Associada)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Checagem)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Checkin)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DataHoraAssociação)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Data / Hora Associação");

                entity.Property(e => e.EtiquetasUtilizadas)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Etiquetas Utilizadas");

                entity.Property(e => e.Internação)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Intervalo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.InícioProcedimento)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Início Procedimento");

                entity.Property(e => e.Medicamento)
                    .IsRequired()
                    .HasMaxLength(850)
                    .IsUnicode(false);

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Prescrição)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PrevisãoAplicação)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Previsão Aplicação");

                entity.Property(e => e.ProcedimentoS).HasColumnName("Procedimento(s)");

                entity.Property(e => e.Protocolo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDose)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo dose");
            });

            modelBuilder.Entity<RelatorioSetor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Relatorio_setor");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxLogin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<RemuneracaoServico>(entity =>
            {
                entity.HasKey(e => e.IdOperadora)
                    .HasName("RemuneracaoServico_PK");

                entity.Property(e => e.IdOperadora)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.HrVencimentoDiaria)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_VENCIMENTO_DIARIA")
                    .IsFixedLength(true);

                entity.Property(e => e.IdClassficacaoTaxaServico).HasColumnName("ID_CLASSFICACAO_TAXA_SERVICO");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InCalculaDiferencaDiaria).HasColumnName("IN_CALCULA_DIFERENCA_DIARIA");

                entity.Property(e => e.InDiariaAlta).HasColumnName("IN_DIARIA_ALTA");

                entity.Property(e => e.InDiariaAutomatica).HasColumnName("IN_DIARIA_AUTOMATICA");

                entity.Property(e => e.InDiariaHospitalDia).HasColumnName("IN_DIARIA_HOSPITAL_DIA");

                entity.Property(e => e.InTipoContaTaxaServico).HasColumnName("IN_TIPO_CONTA_TAXA_SERVICO");

                entity.Property(e => e.PrDemaisAuxiliares)
                    .HasColumnName("PR_DEMAIS_AUXILIARES")
                    .HasDefaultValueSql("((20.00))");

                entity.Property(e => e.PrDemaisAuxiliaresAnestesistas)
                    .HasColumnName("PR_DEMAIS_AUXILIARES_ANESTESISTAS")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrInstrumentador).HasColumnName("PR_INSTRUMENTADOR");

                entity.Property(e => e.PrPrimeiroAuxiliar)
                    .HasColumnName("PR_PRIMEIRO_AUXILIAR")
                    .HasDefaultValueSql("((30.00))");

                entity.Property(e => e.PrPrimeiroAuxiliarAnestesista)
                    .HasColumnName("PR_PRIMEIRO_AUXILIAR_ANESTESISTA")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrTaxaDemaisProcedimentos)
                    .HasColumnName("PR_TAXA_DEMAIS_PROCEDIMENTOS")
                    .HasDefaultValueSql("((50.00))");

                entity.Property(e => e.PrTaxaSalaInstrumental)
                    .HasColumnName("PR_TAXA_SALA_INSTRUMENTAL")
                    .HasDefaultValueSql("((50.00))");

                entity.Property(e => e.QnToleranciaEntrada).HasColumnName("QN_TOLERANCIA_ENTRADA");

                entity.Property(e => e.QnToleranciaSaida).HasColumnName("QN_TOLERANCIA_SAIDA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlChGeral).HasColumnName("VL_CH_GERAL");

                entity.Property(e => e.VlDescontoOperadora).HasColumnName("VL_DESCONTO_OPERADORA");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlLimite).HasColumnName("VL_LIMITE");

                entity.Property(e => e.VlLimiteGrupo).HasColumnName("VL_LIMITE_GRUPO");

                entity.Property(e => e.VlRedutorCustoOperacional).HasColumnName("VL_REDUTOR_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlRedutorHonorario).HasColumnName("VL_REDUTOR_HONORARIO");

                entity.Property(e => e.VlTaxaAcomodacaoSuperior)
                    .HasColumnName("VL_TAXA_ACOMODACAO_SUPERIOR")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.Property(e => e.VlTaxaComercializacao).HasColumnName("VL_TAXA_COMERCIALIZACAO");

                entity.Property(e => e.VlTaxaServico).HasColumnName("VL_TAXA_SERVICO");

                entity.Property(e => e.VlUnidadeCustoOperacional).HasColumnName("VL_UNIDADE_CUSTO_OPERACIONAL");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.RemuneracaoServico)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .HasConstraintName("TipoDiversos_RemuneracaoServico_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithOne(p => p.RemuneracaoServico)
                    .HasForeignKey<RemuneracaoServico>(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_RemuneracaoServico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RemuneracaoServico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("USUARIO_REMUNERACAOSERVICO_FK1");
            });

            modelBuilder.Entity<RemuneracaoServicoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRemuneracaoservicohistorico)
                    .HasName("RemuneracaoServicoHistorico_PK");

                entity.Property(e => e.IdRemuneracaoservicohistorico).HasColumnName("ID_REMUNERACAOSERVICOHISTORICO");

                entity.Property(e => e.DtFimVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.DtModificacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MODIFICACAO");

                entity.Property(e => e.HrVencimentoDiaria)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_VENCIMENTO_DIARIA")
                    .IsFixedLength(true);

                entity.Property(e => e.IdClassficacaoTaxaServico).HasColumnName("ID_CLASSFICACAO_TAXA_SERVICO");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InCalculaDiferencaDiaria).HasColumnName("IN_CALCULA_DIFERENCA_DIARIA");

                entity.Property(e => e.InDiariaAlta).HasColumnName("IN_DIARIA_ALTA");

                entity.Property(e => e.InDiariaAutomatica).HasColumnName("IN_DIARIA_AUTOMATICA");

                entity.Property(e => e.InDiariaHospitalDia).HasColumnName("IN_DIARIA_HOSPITAL_DIA");

                entity.Property(e => e.InInsercao).HasColumnName("IN_INSERCAO");

                entity.Property(e => e.InTipoContaTaxaServico).HasColumnName("IN_TIPO_CONTA_TAXA_SERVICO");

                entity.Property(e => e.PrDemaisAuxiliares).HasColumnName("PR_DEMAIS_AUXILIARES");

                entity.Property(e => e.PrDemaisAuxiliaresAnestesistas).HasColumnName("PR_DEMAIS_AUXILIARES_ANESTESISTAS");

                entity.Property(e => e.PrPrimeiroAuxiliar).HasColumnName("PR_PRIMEIRO_AUXILIAR");

                entity.Property(e => e.PrPrimeiroAuxiliarAnestesista).HasColumnName("PR_PRIMEIRO_AUXILIAR_ANESTESISTA");

                entity.Property(e => e.PrTaxaDemaisProcedimentos).HasColumnName("PR_TAXA_DEMAIS_PROCEDIMENTOS");

                entity.Property(e => e.PrTaxaSalaInstrumental).HasColumnName("PR_TAXA_SALA_INSTRUMENTAL");

                entity.Property(e => e.QnToleranciaEntrada).HasColumnName("QN_TOLERANCIA_ENTRADA");

                entity.Property(e => e.QnToleranciaSaida).HasColumnName("QN_TOLERANCIA_SAIDA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlChGeral).HasColumnName("VL_CH_GERAL");

                entity.Property(e => e.VlDescontoOperadora).HasColumnName("VL_DESCONTO_OPERADORA");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlLimite).HasColumnName("VL_LIMITE");

                entity.Property(e => e.VlLimiteGrupo).HasColumnName("VL_LIMITE_GRUPO");

                entity.Property(e => e.VlRedutorCustoOperacional).HasColumnName("VL_REDUTOR_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlRedutorHonorario).HasColumnName("VL_REDUTOR_HONORARIO");

                entity.Property(e => e.VlTaxaAcomodacaoSuperior).HasColumnName("VL_TAXA_ACOMODACAO_SUPERIOR");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.Property(e => e.VlTaxaServico).HasColumnName("VL_TAXA_SERVICO");

                entity.Property(e => e.VlUnidadeCustoOperacional).HasColumnName("VL_UNIDADE_CUSTO_OPERACIONAL");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.RemuneracaoServicoHistorico)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .HasConstraintName("TipoDiversos_RemuneracaoServicoHistorico_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.RemuneracaoServicoHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RemuneracaoServico_RemuneracaoServicoHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RemuneracaoServicoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RemuneracaoServicoHistorico_FK1");
            });

            modelBuilder.Entity<RemuneracaoServicoPlano>(entity =>
            {
                entity.HasKey(e => e.IdPlano)
                    .HasName("RemuneracaoServico_PlanoPK");

                entity.ToTable("RemuneracaoServico_Plano");

                entity.Property(e => e.IdPlano)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_PLANO");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.HrVencimentoDiaria)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_VENCIMENTO_DIARIA")
                    .IsFixedLength(true);

                entity.Property(e => e.IdClassficacaoTaxaServico).HasColumnName("ID_CLASSFICACAO_TAXA_SERVICO");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InCalculaDiferencaDiaria).HasColumnName("IN_CALCULA_DIFERENCA_DIARIA");

                entity.Property(e => e.InDiariaAlta).HasColumnName("IN_DIARIA_ALTA");

                entity.Property(e => e.InDiariaAutomatica).HasColumnName("IN_DIARIA_AUTOMATICA");

                entity.Property(e => e.InDiariaHospitalDia).HasColumnName("IN_DIARIA_HOSPITAL_DIA");

                entity.Property(e => e.InTipoContaTaxaServico).HasColumnName("IN_TIPO_CONTA_TAXA_SERVICO");

                entity.Property(e => e.PrDemaisAuxiliares).HasColumnName("PR_DEMAIS_AUXILIARES");

                entity.Property(e => e.PrDemaisAuxiliaresAnestesistas).HasColumnName("PR_DEMAIS_AUXILIARES_ANESTESISTAS");

                entity.Property(e => e.PrPrimeiroAuxiliar).HasColumnName("PR_PRIMEIRO_AUXILIAR");

                entity.Property(e => e.PrPrimeiroAuxiliarAnestesista).HasColumnName("PR_PRIMEIRO_AUXILIAR_ANESTESISTA");

                entity.Property(e => e.PrTaxaDemaisProcedimentos).HasColumnName("PR_TAXA_DEMAIS_PROCEDIMENTOS");

                entity.Property(e => e.PrTaxaSalaInstrumental).HasColumnName("PR_TAXA_SALA_INSTRUMENTAL");

                entity.Property(e => e.QnToleranciaEntrada).HasColumnName("QN_TOLERANCIA_ENTRADA");

                entity.Property(e => e.QnToleranciaSaida).HasColumnName("QN_TOLERANCIA_SAIDA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlChGeral).HasColumnName("VL_CH_GERAL");

                entity.Property(e => e.VlDescontoOperadora).HasColumnName("VL_DESCONTO_OPERADORA");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlLimite).HasColumnName("VL_LIMITE");

                entity.Property(e => e.VlLimiteGrupo).HasColumnName("VL_LIMITE_GRUPO");

                entity.Property(e => e.VlRedutorCustoOperacional).HasColumnName("VL_REDUTOR_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlRedutorHonorario).HasColumnName("VL_REDUTOR_HONORARIO");

                entity.Property(e => e.VlTaxaAcomodacaoSuperior).HasColumnName("VL_TAXA_ACOMODACAO_SUPERIOR");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.Property(e => e.VlTaxaServico).HasColumnName("VL_TAXA_SERVICO");

                entity.Property(e => e.VlUnidadeCustoOperacional).HasColumnName("VL_UNIDADE_CUSTO_OPERACIONAL");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.RemuneracaoServicoPlano)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .HasConstraintName("TipoDiversos_RemuneracaoServico_Plano_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithOne(p => p.RemuneracaoServicoPlano)
                    .HasForeignKey<RemuneracaoServicoPlano>(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_RemuneracaoServico_Plano_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RemuneracaoServicoPlano)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_RemuneracaoServico_PLANO_FK1");
            });

            modelBuilder.Entity<RemuneracaoServicoPlanoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRemuneracaoservicoPlanohistorico)
                    .HasName("RemuneracaoServicoHistorico_Plano_PK");

                entity.ToTable("RemuneracaoServico_PlanoHistorico");

                entity.Property(e => e.IdRemuneracaoservicoPlanohistorico).HasColumnName("ID_REMUNERACAOSERVICO_PLANOHISTORICO");

                entity.Property(e => e.DtFimVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.DtModificacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MODIFICACAO");

                entity.Property(e => e.HrVencimentoDiaria)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HR_VENCIMENTO_DIARIA")
                    .IsFixedLength(true);

                entity.Property(e => e.IdClassficacaoTaxaServico).HasColumnName("ID_CLASSFICACAO_TAXA_SERVICO");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InCalculaDiferencaDiaria).HasColumnName("IN_CALCULA_DIFERENCA_DIARIA");

                entity.Property(e => e.InDiariaAlta).HasColumnName("IN_DIARIA_ALTA");

                entity.Property(e => e.InDiariaAutomatica).HasColumnName("IN_DIARIA_AUTOMATICA");

                entity.Property(e => e.InDiariaHospitalDia).HasColumnName("IN_DIARIA_HOSPITAL_DIA");

                entity.Property(e => e.InInsercao).HasColumnName("IN_INSERCAO");

                entity.Property(e => e.InTipoContaTaxaServico).HasColumnName("IN_TIPO_CONTA_TAXA_SERVICO");

                entity.Property(e => e.PrDemaisAuxiliares).HasColumnName("PR_DEMAIS_AUXILIARES");

                entity.Property(e => e.PrDemaisAuxiliaresAnestesistas).HasColumnName("PR_DEMAIS_AUXILIARES_ANESTESISTAS");

                entity.Property(e => e.PrPrimeiroAuxiliar).HasColumnName("PR_PRIMEIRO_AUXILIAR");

                entity.Property(e => e.PrPrimeiroAuxiliarAnestesista).HasColumnName("PR_PRIMEIRO_AUXILIAR_ANESTESISTA");

                entity.Property(e => e.PrTaxaDemaisProcedimentos).HasColumnName("PR_TAXA_DEMAIS_PROCEDIMENTOS");

                entity.Property(e => e.PrTaxaSalaInstrumental).HasColumnName("PR_TAXA_SALA_INSTRUMENTAL");

                entity.Property(e => e.QnToleranciaEntrada).HasColumnName("QN_TOLERANCIA_ENTRADA");

                entity.Property(e => e.QnToleranciaSaida).HasColumnName("QN_TOLERANCIA_SAIDA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlChGeral).HasColumnName("VL_CH_GERAL");

                entity.Property(e => e.VlDescontoOperadora).HasColumnName("VL_DESCONTO_OPERADORA");

                entity.Property(e => e.VlFilme).HasColumnName("VL_FILME");

                entity.Property(e => e.VlLimite).HasColumnName("VL_LIMITE");

                entity.Property(e => e.VlLimiteGrupo).HasColumnName("VL_LIMITE_GRUPO");

                entity.Property(e => e.VlRedutorCustoOperacional).HasColumnName("VL_REDUTOR_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlRedutorHonorario).HasColumnName("VL_REDUTOR_HONORARIO");

                entity.Property(e => e.VlTaxaAcomodacaoSuperior).HasColumnName("VL_TAXA_ACOMODACAO_SUPERIOR");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.Property(e => e.VlTaxaServico).HasColumnName("VL_TAXA_SERVICO");

                entity.Property(e => e.VlUnidadeCustoOperacional).HasColumnName("VL_UNIDADE_CUSTO_OPERACIONAL");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.RemuneracaoServicoPlanoHistorico)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .HasConstraintName("TipoDiversos_RemuneracaoServico_PlanoHistorico_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.RemuneracaoServicoPlanoHistorico)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RemuneracaoServico_RemuneracaoServico_PlanoHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RemuneracaoServicoPlanoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RemuneracaoServico_PlanoHistorico_FK1");
            });

            modelBuilder.Entity<RepasseAuxilio>(entity =>
            {
                entity.HasKey(e => e.IdRepasseAuxilio);

                entity.ToTable("Repasse_Auxilio");

                entity.Property(e => e.IdRepasseAuxilio).HasColumnName("ID_REPASSE_AUXILIO");

                entity.Property(e => e.CdProcedimento)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_PROCEDIMENTO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.VlAnestesista).HasColumnName("VL_ANESTESISTA");

                entity.Property(e => e.VlHospital).HasColumnName("VL_HOSPITAL");

                entity.Property(e => e.VlProfissional).HasColumnName("VL_PROFISSIONAL");
            });

            modelBuilder.Entity<RepasseConvenio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RepasseConvenio");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NmNotaEmitidaSituacao)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_NOTA_EMITIDA_SITUACAO");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.NmUnidadeAbertura)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ABERTURA");

                entity.Property(e => e.NmUnidadeRepasse)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_REPASSE");

                entity.Property(e => e.NrNotaFiscal).HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.ServicoDependente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICO_DEPENDENTE");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");
            });

            modelBuilder.Entity<RepasseCustoOperacionalPacote>(entity =>
            {
                entity.HasKey(e => e.IdRepasseCustoOperacionalPacote)
                    .HasName("RepasseCustoOperacionalPacote_PK");

                entity.Property(e => e.IdRepasseCustoOperacionalPacote).HasColumnName("ID_REPASSE_CUSTO_OPERACIONAL_PACOTE");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrAnestesista).HasColumnName("PR_ANESTESISTA");

                entity.Property(e => e.PrCirurgiaoClinico).HasColumnName("PR_CIRURGIAO_CLINICO");

                entity.Property(e => e.PrPrimeiroAuxiliar).HasColumnName("PR_PRIMEIRO_AUXILIAR");

                entity.Property(e => e.PrSegundoAuxiliar).HasColumnName("PR_SEGUNDO_AUXILIAR");

                entity.Property(e => e.PrTerceiroAuxiliar).HasColumnName("PR_TERCEIRO_AUXILIAR");

                entity.Property(e => e.VlAnestesista).HasColumnName("VL_ANESTESISTA");

                entity.Property(e => e.VlCirurgiaoClinico).HasColumnName("VL_CIRURGIAO_CLINICO");

                entity.Property(e => e.VlPrimeiroAuxiliar).HasColumnName("VL_PRIMEIRO_AUXILIAR");

                entity.Property(e => e.VlSegundoAuxiliar).HasColumnName("VL_SEGUNDO_AUXILIAR");

                entity.Property(e => e.VlTerceiroAuxiliar).HasColumnName("VL_TERCEIRO_AUXILIAR");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.RepasseCustoOperacionalPacote)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_RepasseCustoOperacionalPacote_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.RepasseCustoOperacionalPacote)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_RepasseCustoOperacionalPacote_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RepasseCustoOperacionalPacote)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_RepasseCustoOperacionalPacote_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RepasseCustoOperacionalPacoteIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RepasseCustoOperacionalPacote_FK1");

                entity.HasOne(d => d.IdUsuarioDesativacaoNavigation)
                    .WithMany(p => p.RepasseCustoOperacionalPacoteIdUsuarioDesativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioDesativacao)
                    .HasConstraintName("Usuario1_RepasseCustoOperacionalPacote_FK1");
            });

            modelBuilder.Entity<RepasseDuplicadoteste>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");
            });

            modelBuilder.Entity<RepasseExcecao>(entity =>
            {
                entity.HasKey(e => e.IdRepasseExcecao)
                    .HasName("RepasseExcecao_PK");

                entity.HasIndex(e => new { e.IdOperadora, e.InAtivo }, "IX_RepasseExcecao_ID_OPERADORA_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServico, e.InCustoOperacional, e.InHonorario, e.IdOperadora, e.DtCadastro }, "IX_RepasseExcecao_K3_K6_K7_K2_K10_4_5_12")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdRepasseExcecao).HasColumnName("ID_REPASSE_EXCECAO");

                entity.Property(e => e.CdServicoGrupo)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_GRUPO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("('2011-01-01 00:00:00.000')");

                entity.Property(e => e.IdCaraterAtendimento).HasColumnName("ID_CARATER_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InCustoOperacional)
                    .IsRequired()
                    .HasColumnName("IN_CUSTO_OPERACIONAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InFilme)
                    .IsRequired()
                    .HasColumnName("IN_FILME")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InHonorario)
                    .IsRequired()
                    .HasColumnName("IN_HONORARIO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InSobrepoeValorFaturado).HasColumnName("IN_SOBREPOE_VALOR_FATURADO");

                entity.Property(e => e.InSobrepoeValorFaturadoZerado).HasColumnName("IN_SOBREPOE_VALOR_FATURADO_ZERADO");

                entity.Property(e => e.NrPercentualRepasse).HasColumnName("NR_PERCENTUAL_REPASSE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlRepasse).HasColumnName("VL_REPASSE");

                entity.HasOne(d => d.IdCaraterAtendimentoNavigation)
                    .WithMany(p => p.RepasseExcecaoIdCaraterAtendimentoNavigation)
                    .HasForeignKey(d => d.IdCaraterAtendimento)
                    .HasConstraintName("FK_RepasseExcecao_TipoDiversos_CaracterAtendimento");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.RepasseExcecaoIdEspecialidadeNavigation)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_RepasseExcecao_TipoDiversos");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.RepasseExcecao)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK_RepasseExcecao_Plano");
            });

            modelBuilder.Entity<RepasseExcecaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRepasseExcecaoHistorico)
                    .HasName("RepasseExcecaoHistorico_PK");

                entity.Property(e => e.IdRepasseExcecaoHistorico).HasColumnName("ID_REPASSE_EXCECAO_HISTORICO");

                entity.Property(e => e.CdServicoGrupo)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_GRUPO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("('2011-01-01 00:00:00.000')");

                entity.Property(e => e.IdCaraterAtendimento).HasColumnName("ID_CARATER_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdRepasseExcecao).HasColumnName("ID_REPASSE_EXCECAO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InCustoOperacional).HasColumnName("IN_CUSTO_OPERACIONAL");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InFilme).HasColumnName("IN_FILME");

                entity.Property(e => e.InHonorario).HasColumnName("IN_HONORARIO");

                entity.Property(e => e.InSobrepoeValorFaturado).HasColumnName("IN_SOBREPOE_VALOR_FATURADO");

                entity.Property(e => e.InSobrepoeValorFaturadoZerado).HasColumnName("IN_SOBREPOE_VALOR_FATURADO_ZERADO");

                entity.Property(e => e.NrPercentualRepasse).HasColumnName("NR_PERCENTUAL_REPASSE");

                entity.Property(e => e.VlRepasse).HasColumnName("VL_REPASSE");

                entity.HasOne(d => d.IdEspecialidadeNavigation)
                    .WithMany(p => p.RepasseExcecaoHistorico)
                    .HasForeignKey(d => d.IdEspecialidade)
                    .HasConstraintName("FK_RepasseExcecaoHistorico_TipoDiversos");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.RepasseExcecaoHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK__RepasseEx__ID_OP__1B25A00A");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.RepasseExcecaoHistorico)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK_RepasseExcecaoHistorico_Plano");

                entity.HasOne(d => d.IdRepasseExcecaoNavigation)
                    .WithMany(p => p.RepasseExcecaoHistorico)
                    .HasForeignKey(d => d.IdRepasseExcecao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RepasseEx__ID_RE__1C19C443");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RepasseExcecaoHistorico)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK__RepasseEx__ID_SE__1A317BD1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RepasseExcecaoHistorico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK__RepasseEx__ID_UN__1D0DE87C");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RepasseExcecaoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RepasseEx__ID_US__193D5798");
            });

            modelBuilder.Entity<RepasseExcecaoSus>(entity =>
            {
                entity.HasKey(e => e.IdRepasseExcecaoSus)
                    .HasName("PK__RepasseE__0E45E5E933FC3ACC");

                entity.Property(e => e.IdRepasseExcecaoSus).HasColumnName("ID_REPASSE_EXCECAO_SUS");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtFimVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VIGENCIA");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.PrServicoAmbulatorial)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("PR_SERVICO_AMBULATORIAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrServicoAnestesista)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("PR_SERVICO_ANESTESISTA")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrServicoHospitalar)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("PR_SERVICO_HOSPITALAR")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrServicoProfissional)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("PR_SERVICO_PROFISSIONAL")
                    .HasDefaultValueSql("((0.00))");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.RepasseExcecaoSus)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK_REPASSEEXCECAOSUS_PLANO");
            });

            modelBuilder.Entity<RepasseExcecaoUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdServico })
                    .HasName("RepasseExcecaoUnidadeOrganizacional_PK");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InRepasse).HasColumnName("IN_REPASSE");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RepasseExcecaoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_RepasseExcecaoUnidadeOrganizacional_FK2");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RepasseExcecaoUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_RepasseExcecaoUnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<RepasseMedico>(entity =>
            {
                entity.HasKey(e => e.IdRepasseMedico);

                entity.HasIndex(e => e.IdClinica, "IX_RepasseMedico_ID_CLINICA");

                entity.HasIndex(e => e.IdLote, "IX_RepasseMedico_ID_LOTE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLote, e.VlRepasse }, "IX_RepasseMedico_ID_LOTE_VL_REPASSE")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdLote, e.VlServico }, "IX_RepasseMedico_ID_LOTE_VL_SERVICO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdMedico, "IX_RepasseMedico_ID_MEDICO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdContaItemServico, e.IdConta, e.IdFechamentoItem, e.IdRepasseMedico }, "IX_RepasseMedico_K10_K6_K7_K1_2_19_22_23")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdCategoriaLancamentoTipo, e.IdConta, e.IdFechamentoItem, e.VlGlosaIndividual }, "IX_RepasseMedico_K29_K6_K7_K27_3_4_5_8_9_10_11_12_13_14_15_16_17_18_20_22_30")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdLote, "IX_RepasseMedico_K2_4");

                entity.HasIndex(e => new { e.IdLote, e.IdConta, e.IdMedico, e.IdClinica, e.NmUnidadeAbertura, e.DtExecucao }, "IX_RepasseMedico_K2_K6_K5_K3_K12_K13_7_8_11_14_19_20_21_22_23_24")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem }, "IX_RepasseMedico_K6_K7_9")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.IdContaItemServico, e.IdRepasseMedico, e.IdMedico }, "IX_RepasseMedico_K6_K7_K10_K1_K5_2_19_22_23")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.VlDespesa, "IX_RepasseMedico_VL_DESPESA")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdRepasseMedico).HasColumnName("ID_REPASSE_MEDICO");

                entity.Property(e => e.DtAcrescimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACRESCIMO");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.DtFi)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FI");

                entity.Property(e => e.DtGlosa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA");

                entity.Property(e => e.DtGlosaRevertida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA_REVERTIDA");

                entity.Property(e => e.IdCategoriaLancamentoTipo)
                    .HasColumnName("ID_CATEGORIA_LANCAMENTO_TIPO")
                    .HasDefaultValueSql("((45139))");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSituacaoConta)
                    .HasColumnName("ID_SITUACAO_CONTA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.Property(e => e.InParticular)
                    .HasColumnName("IN_PARTICULAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InPrevia).HasColumnName("IN_PREVIA");

                entity.Property(e => e.NmClassificacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmUnidadeAbertura)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ABERTURA");

                entity.Property(e => e.NrPercentual)
                    .HasColumnName("NR_PERCENTUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.QnServico)
                    .HasColumnName("QN_SERVICO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ServicoDependente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICO_DEPENDENTE");

                entity.Property(e => e.TxCompetencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcrescimoIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlDespesa)
                    .HasColumnName("VL_DESPESA")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlFiIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FI_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosaIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosaRevertida)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_REVERTIDA")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosado)
                    .HasColumnName("VL_GLOSADO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlRepasse)
                    .HasColumnName("VL_REPASSE")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlRepasseFixo).HasColumnName("VL_REPASSE_FIXO");

                entity.Property(e => e.VlServico)
                    .HasColumnName("VL_SERVICO")
                    .HasDefaultValueSql("((0.00))");

                entity.HasOne(d => d.IdCategoriaLancamentoTipoNavigation)
                    .WithMany(p => p.RepasseMedico)
                    .HasForeignKey(d => d.IdCategoriaLancamentoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepasseMedico_CategoriaLancamentoTipo");

                entity.HasOne(d => d.IdClinicaNavigation)
                    .WithMany(p => p.RepasseMedicoIdClinicaNavigation)
                    .HasForeignKey(d => d.IdClinica)
                    .HasConstraintName("FK_RepasseMedico_Clinica");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithMany(p => p.RepasseMedico)
                    .HasForeignKey(d => d.IdLote)
                    .HasConstraintName("FK_RepasseMedico_Lote");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.RepasseMedicoIdMedicoNavigation)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_RepasseMedico_ProfissionalSaude");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.RepasseMedico)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .HasConstraintName("FK_RepasseMedico_NotaEmitida");

                entity.HasOne(d => d.IdUnidadeRepasseNavigation)
                    .WithMany(p => p.RepasseMedico)
                    .HasForeignKey(d => d.IdUnidadeRepasse)
                    .HasConstraintName("FK_RepasseMedico_UnidadeOrganizacional");
            });

            modelBuilder.Entity<RepasseMedicoAlternativa>(entity =>
            {
                entity.HasKey(e => e.IdRepasseMedico);

                entity.Property(e => e.IdRepasseMedico).HasColumnName("ID_REPASSE_MEDICO");

                entity.Property(e => e.DtAcrescimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACRESCIMO");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.DtFi)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FI");

                entity.Property(e => e.DtGlosa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA");

                entity.Property(e => e.DtGlosaRevertida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA_REVERTIDA");

                entity.Property(e => e.IdCategoriaLancamentoTipo).HasColumnName("ID_CATEGORIA_LANCAMENTO_TIPO");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSituacaoConta).HasColumnName("ID_SITUACAO_CONTA");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.InPrevia).HasColumnName("IN_PREVIA");

                entity.Property(e => e.NmClassificacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmUnidadeAbertura)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ABERTURA");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.ServicoDependente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICO_DEPENDENTE");

                entity.Property(e => e.TxCompetencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcrescimoIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO_INDIVIDUAL");

                entity.Property(e => e.VlDespesa).HasColumnName("VL_DESPESA");

                entity.Property(e => e.VlFiIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FI_INDIVIDUAL");

                entity.Property(e => e.VlGlosaIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_INDIVIDUAL");

                entity.Property(e => e.VlGlosaRevertida)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_REVERTIDA");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlRepasse).HasColumnName("VL_REPASSE");

                entity.Property(e => e.VlRepasseFixo).HasColumnName("VL_REPASSE_FIXO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");
            });

            modelBuilder.Entity<RepasseMedicoCargaPacoteSemPercentual>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmOperadora)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrPercentual)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("NR_PERCENTUAL");
            });

            modelBuilder.Entity<RepasseMedicoCargaPercentualPacote>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmOperadora)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrPercentual)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("NR_PERCENTUAL");
            });

            modelBuilder.Entity<RepasseMedicoConvenio>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdConta, "IX_RepasseMedicoConvenio_ID_CONTA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.InProcessado, "IX_RepasseMedicoConvenio_IN_PROCESSADO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.IdContaItemServico, e.InProcessado }, "IX_RepasseMedicoConvenio_K4_K5_K8_K21_20")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdContaItemServico, "IX_RepassseMedicoConvenio_K8")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.DtAcrescimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACRESCIMO");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.DtFi)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FI");

                entity.Property(e => e.DtGlosa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA");

                entity.Property(e => e.DtGlosaRevertida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA_REVERTIDA");

                entity.Property(e => e.IdCategoriaLancamentoTipo)
                    .HasColumnName("ID_CATEGORIA_LANCAMENTO_TIPO")
                    .HasDefaultValueSql("((45139))");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSituacaoConta).HasColumnName("ID_SITUACAO_CONTA");

                entity.Property(e => e.IdTipoRepasse).HasColumnName("ID_TIPO_REPASSE");

                entity.Property(e => e.IdUnidadeAbertura).HasColumnName("ID_UNIDADE_ABERTURA");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.Property(e => e.InProcessado).HasColumnName("IN_PROCESSADO");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmUnidadeAbertura)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ABERTURA");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.ServicoDependente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICO_DEPENDENTE");

                entity.Property(e => e.TxCompetencia)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlAcrescimoIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlFiIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FI_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosaIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosaRevertida)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_REVERTIDA")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlRepasseFixo).HasColumnName("VL_REPASSE_FIXO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");
            });

            modelBuilder.Entity<RepasseMedicoExecutante>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdContaItemServico).HasColumnName("id_conta_item_servico");

                entity.Property(e => e.IdMedico).HasColumnName("id_medico");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("Id_unidade_organizacional");
            });

            modelBuilder.Entity<RepasseMedicoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRepasseMedicoHistorico);

                entity.HasIndex(e => e.IdClinica, "IX_RepasseMedicoHistorico_ID_CLINICA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdMedico, "IX_RepasseMedicoHistorico_ID_MEDICO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdRepasseMedicoHistorico).HasColumnName("ID_REPASSE_MEDICO_HISTORICO");

                entity.Property(e => e.DtAcrescimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACRESCIMO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.DtFi)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FI");

                entity.Property(e => e.DtGlosa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA");

                entity.Property(e => e.DtGlosaRevertida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA_REVERTIDA");

                entity.Property(e => e.IdCategoriaLancamentoTipo).HasColumnName("ID_CATEGORIA_LANCAMENTO_TIPO");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdRepasseMedico).HasColumnName("ID_REPASSE_MEDICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSituacaoConta).HasColumnName("ID_SITUACAO_CONTA");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAlteracao).HasColumnName("IN_ALTERACAO");

                entity.Property(e => e.InExclusao).HasColumnName("IN_EXCLUSAO");

                entity.Property(e => e.InInclusao).HasColumnName("IN_INCLUSAO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.NmClassificacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmUnidadeAbertura)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ABERTURA");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.ServicoDependente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICO_DEPENDENTE");

                entity.Property(e => e.TxCompetencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlAcrescimoIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO_INDIVIDUAL");

                entity.Property(e => e.VlDespesa).HasColumnName("VL_DESPESA");

                entity.Property(e => e.VlFiIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FI_INDIVIDUAL");

                entity.Property(e => e.VlGlosaIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_INDIVIDUAL");

                entity.Property(e => e.VlGlosaRevertida)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_REVERTIDA");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlRepasse).HasColumnName("VL_REPASSE");

                entity.Property(e => e.VlRepasseFixo).HasColumnName("VL_REPASSE_FIXO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdCategoriaLancamentoTipoNavigation)
                    .WithMany(p => p.RepasseMedicoHistorico)
                    .HasForeignKey(d => d.IdCategoriaLancamentoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepasseMedicoHistorico_CategoriaLancamentoTipo");

                entity.HasOne(d => d.IdClinicaNavigation)
                    .WithMany(p => p.RepasseMedicoHistoricoIdClinicaNavigation)
                    .HasForeignKey(d => d.IdClinica)
                    .HasConstraintName("FK_RepasseMedicoHistorico_Clinica");

                entity.HasOne(d => d.IdLoteNavigation)
                    .WithMany(p => p.RepasseMedicoHistorico)
                    .HasForeignKey(d => d.IdLote)
                    .HasConstraintName("FK_RepasseMedicoHistorico_Lote");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.RepasseMedicoHistoricoIdMedicoNavigation)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_RepasseMedicoHistorico_ProfissionalSaude");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.RepasseMedicoHistorico)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .HasConstraintName("FK_RepasseMedicoHistorico_NotaEmitida");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RepasseMedicoHistorico)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK_RepasseMedicoHistorico_Servico");

                entity.HasOne(d => d.IdUnidadeRepasseNavigation)
                    .WithMany(p => p.RepasseMedicoHistorico)
                    .HasForeignKey(d => d.IdUnidadeRepasse)
                    .HasConstraintName("FK_RepasseMedicoHistorico_UnidadeOrganizacional");
            });

            modelBuilder.Entity<RepasseMedicoLote>(entity =>
            {
                entity.HasKey(e => e.IdRepasseMedicoLote);

                entity.HasIndex(e => new { e.IdClinica, e.DtInicioProcessamento, e.DtFimProcessamento }, "IX_RepasseMedicoLote")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdRepasseMedicoLote).HasColumnName("ID_REPASSE_MEDICO_LOTE");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.DtFimProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_PROCESSAMENTO");

                entity.Property(e => e.DtFimProcessamentoConc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_PROCESSAMENTO_CONC");

                entity.Property(e => e.DtInicioProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PROCESSAMENTO");

                entity.Property(e => e.DtInicioProcessamentoConc)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PROCESSAMENTO_CONC");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrNotaFiscal)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_NOTA_FISCAL");

                entity.Property(e => e.VlPago).HasColumnName("VL_PAGO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RepasseMedicoLote)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepasseMedicoLote_Usuario");
            });

            modelBuilder.Entity<RepasseMedicoParticular>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.InProcessado, "IX_RepasseMedicoParticular_IN_PROCESSADO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItem, e.IdContaItemServico, e.InProcessado }, "IX_RepasseMedicoParticular_K4_K5_K8_K21_20")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdContaItemServico, "IX_RepasseMedicoParticular_K8")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.DtAcrescimo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACRESCIMO");

                entity.Property(e => e.DtConciliacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCILIACAO");

                entity.Property(e => e.DtExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.DtFi)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FI");

                entity.Property(e => e.DtGlosa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA");

                entity.Property(e => e.DtGlosaRevertida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GLOSA_REVERTIDA");

                entity.Property(e => e.IdCategoriaLancamentoTipo)
                    .HasColumnName("ID_CATEGORIA_LANCAMENTO_TIPO")
                    .HasDefaultValueSql("((45139))");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSituacaoConta).HasColumnName("ID_SITUACAO_CONTA");

                entity.Property(e => e.IdUnidadeAbertura).HasColumnName("ID_UNIDADE_ABERTURA");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.Property(e => e.InProcessado).HasColumnName("IN_PROCESSADO");

                entity.Property(e => e.NmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_CLASSIFICACAO");

                entity.Property(e => e.NmUnidadeAbertura)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ABERTURA");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.ServicoDependente)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SERVICO_DEPENDENTE");

                entity.Property(e => e.TxCompetencia)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlAcrescimoIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_ACRESCIMO_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlFiIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_FI_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosaIndividual)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_INDIVIDUAL")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosaRevertida)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_GLOSA_REVERTIDA")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlRepasseFixo).HasColumnName("VL_REPASSE_FIXO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");
            });

            modelBuilder.Entity<RepasseMedicoPrevia>(entity =>
            {
                entity.HasKey(e => e.IdRepasseMedicoPrevia);

                entity.Property(e => e.IdRepasseMedicoPrevia).HasColumnName("ID_REPASSE_MEDICO_PREVIA");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdLoteContaMapaNavigation)
                    .WithMany(p => p.RepasseMedicoPrevia)
                    .HasForeignKey(d => d.IdLoteContaMapa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepasseMedicoPrevia_LoteContaMapa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RepasseMedicoPrevia)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_RepasseMedicoPrevia_Usuario");
            });

            modelBuilder.Entity<RepasseMedicoPreviaLog>(entity =>
            {
                entity.HasKey(e => e.IdRepasseMedicoPreviaLog)
                    .HasName("RepasseMedicoPrevia_Log_PK");

                entity.ToTable("RepasseMedicoPrevia_Log");

                entity.Property(e => e.IdRepasseMedicoPreviaLog).HasColumnName("ID_REPASSE_MEDICO_PREVIA_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdRepasseMedicoPrevia).HasColumnName("ID_REPASSE_MEDICO_PREVIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.RepasseMedicoPreviaLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao);
            });

            modelBuilder.Entity<RepasseMedicoTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServicoFinal)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO_FINAL");

                entity.Property(e => e.CdServicoInicial)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO_INICIAL");

                entity.Property(e => e.PrRepasse).HasColumnName("PR_REPASSE");
            });

            modelBuilder.Entity<RepasseOperadoraUnidadeOrganizacionalServico>(entity =>
            {
                entity.HasKey(e => e.IdOperadoraUnidadeorganizacionalServico)
                    .HasName("Repasse_OperadoraUnidadeOrganizacionalServico_PK");

                entity.ToTable("Repasse_OperadoraUnidadeOrganizacionalServico");

                entity.HasIndex(e => new { e.InAtivo, e.IdServico, e.IdOperadora, e.IdUnidadeOrganizacional }, "IX_Repasse_OperadoraUnidadeOrganizacionalServico_K10_K4_K2_K3_5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdOperadora, "IX_Repasse_OperadoraUnidadeOrganizacionalServico_K2")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdOperadoraUnidadeorganizacionalServico).HasColumnName("ID_OPERADORA_UNIDADEORGANIZACIONAL_SERVICO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlRepasseFixo).HasColumnName("VL_REPASSE_FIXO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.RepasseOperadoraUnidadeOrganizacionalServico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Repasse_OperadoraUnidadeOrganizacionalServico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RepasseOperadoraUnidadeOrganizacionalServico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Repasse_OperadoraUnidadeOrganizacionalServico_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RepasseOperadoraUnidadeOrganizacionalServico)
                    .HasForeignKey(d => new { d.IdServico, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Servico_Repasse_OperadoraUnidadeOrganizacionalServico_FK1");
            });

            modelBuilder.Entity<RepassePorClinica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RepassePorClinica");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.VlRepasse)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_REPASSE");
            });

            modelBuilder.Entity<RepassePorClinicaUnidade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RepassePorClinicaUnidade");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.NmUnidade)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE");

                entity.Property(e => e.VlDespesa)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_DESPESA");

                entity.Property(e => e.VlLiquido)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_LIQUIDO");

                entity.Property(e => e.VlRepasse)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_REPASSE");

                entity.Property(e => e.VlServico)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_SERVICO");
            });

            modelBuilder.Entity<RepassePorMedicoClinicaUnidade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RepassePorMedicoClinicaUnidade");

                entity.Property(e => e.DtFimProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_PROCESSAMENTO");

                entity.Property(e => e.DtInicioProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_PROCESSAMENTO");

                entity.Property(e => e.IdClinica).HasColumnName("ID_CLINICA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmUnidade)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE");

                entity.Property(e => e.NrPercentualConvenio).HasColumnName("NR_PERCENTUAL_CONVENIO");

                entity.Property(e => e.NrPercentualParticular).HasColumnName("NR_PERCENTUAL_PARTICULAR");

                entity.Property(e => e.VlDespesaConvenio).HasColumnName("VL_DESPESA_CONVENIO");

                entity.Property(e => e.VlDespesaParticular).HasColumnName("VL_DESPESA_PARTICULAR");

                entity.Property(e => e.VlLiquidoConvenio).HasColumnName("VL_LIQUIDO_CONVENIO");

                entity.Property(e => e.VlLiquidoParticular).HasColumnName("VL_LIQUIDO_PARTICULAR");

                entity.Property(e => e.VlRepasseConvenio).HasColumnName("VL_REPASSE_CONVENIO");

                entity.Property(e => e.VlRepasseParticular).HasColumnName("VL_REPASSE_PARTICULAR");

                entity.Property(e => e.VlServicoConvenio).HasColumnName("VL_SERVICO_CONVENIO");

                entity.Property(e => e.VlServicoParticular).HasColumnName("VL_SERVICO_PARTICULAR");
            });

            modelBuilder.Entity<RepasseServicoUnidadeRepasse>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdUnidadeRepasse, e.DtLancamento })
                    .HasName("Repasse_ServicoUnidadeRepasse_PK");

                entity.ToTable("Repasse_ServicoUnidadeRepasse");

                entity.HasIndex(e => new { e.IdServico, e.InAtivo, e.IdUnidadeRepasse }, "IX_Repasse_ServicoUnidadeRepasse_K1_K8_K2_6");

                entity.HasIndex(e => new { e.InAtivo, e.InAtual, e.IdServico, e.IdUnidadeRepasse }, "IX_Repasse_ServicoUnidadeRepasse_K8_K4_K1_K2_6");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.InAutomatico)
                    .IsRequired()
                    .HasColumnName("IN_AUTOMATICO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InParticular)
                    .HasColumnName("IN_PARTICULAR")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlRepasseFixo).HasColumnName("VL_REPASSE_FIXO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RepasseServicoUnidadeRepasse)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Repasse_ServicoUnidadeRepasse_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RepasseServicoUnidadeRepasse)
                    .HasForeignKey(d => new { d.IdServico, d.IdUnidadeRepasse })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_UnidadeRepasse_Repasse_ServicoUnidadeRepasse_FK1");
            });

            modelBuilder.Entity<RepasseUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.DtLancamento })
                    .HasName("Repasse_UnidadeOrganizacional_PK");

                entity.ToTable("Repasse_UnidadeOrganizacional");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.NrPercentual).HasColumnName("NR_PERCENTUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.RepasseUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Repasse_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RepasseUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Repasse_UnidadeOrganizacional_FK1");
            });

            modelBuilder.Entity<ReservaHorarioSadt>(entity =>
            {
                entity.HasKey(e => e.IdReserva)
                    .HasName("ReservaHorarioSADT_PK");

                entity.ToTable("ReservaHorarioSADT");

                entity.Property(e => e.IdReserva).HasColumnName("ID_RESERVA");

                entity.Property(e => e.DtFinalReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_RESERVA");

                entity.Property(e => e.DtInicialReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIAL_RESERVA");

                entity.Property(e => e.HrFinalReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FINAL_RESERVA");

                entity.Property(e => e.HrInicialReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIAL_RESERVA");

                entity.Property(e => e.IdJustPadraoReservaAgendaSadt).HasColumnName("ID_JUST_PADRAO_RESERVA_AGENDA_SADT");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxJustificativa)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.HasOne(d => d.IdJustPadraoReservaAgendaSadtNavigation)
                    .WithMany(p => p.ReservaHorarioSadt)
                    .HasForeignKey(d => d.IdJustPadraoReservaAgendaSadt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ReservaHorarioSADT_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.ReservaHorarioSadt)
                    .HasForeignKey(d => d.IdPessoa)
                    .HasConstraintName("Pessoa_ReservaHorarioSADT_FK1");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.ReservaHorarioSadt)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("Recurso_ReservaHorarioSADT_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ReservaHorarioSadt)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_ReservaHorarioSADT_FK1");
            });

            modelBuilder.Entity<ReservaLeito>(entity =>
            {
                entity.HasKey(e => e.IdReserva)
                    .HasName("ReservaLeito_PK");

                entity.Property(e => e.IdReserva).HasColumnName("ID_RESERVA");

                entity.Property(e => e.DtFimReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_RESERVA");

                entity.Property(e => e.DtInicioReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_RESERVA");

                entity.Property(e => e.IdJustPadraoReservaleito).HasColumnName("ID_JUST_PADRAO_RESERVALEITO");

                entity.Property(e => e.IdLeito).HasColumnName("ID_LEITO");

                entity.Property(e => e.NmPaciente)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("NM_PACIENTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdJustPadraoReservaleitoNavigation)
                    .WithMany(p => p.ReservaLeito)
                    .HasForeignKey(d => d.IdJustPadraoReservaleito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ReservaLeito_FK1");

                entity.HasOne(d => d.IdLeitoNavigation)
                    .WithMany(p => p.ReservaLeito)
                    .HasForeignKey(d => d.IdLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Leito_ReservaLeito_FK1");
            });

            modelBuilder.Entity<RespostaAnaliseUnimed>(entity =>
            {
                entity.HasKey(e => e.IdRespostaAnalise);

                entity.ToTable("Resposta_Analise_Unimed");

                entity.Property(e => e.IdRespostaAnalise)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_RESPOSTA_ANALISE");

                entity.Property(e => e.TxRespostaAnalise)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESPOSTA_ANALISE");
            });

            modelBuilder.Entity<RestoIngestao>(entity =>
            {
                entity.HasKey(e => e.IdRestoingestao)
                    .HasName("RestoIngestao_PK");

                entity.Property(e => e.IdRestoingestao).HasColumnName("ID_RESTOINGESTAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdTipoJantar).HasColumnName("ID_TIPO_JANTAR");

                entity.Property(e => e.IdTipoRefeicao).HasColumnName("ID_TIPO_REFEICAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InBom).HasColumnName("IN_BOM");

                entity.Property(e => e.InOtimo).HasColumnName("IN_OTIMO");

                entity.Property(e => e.InRegular).HasColumnName("IN_REGULAR");

                entity.Property(e => e.InRuim).HasColumnName("IN_RUIM");

                entity.Property(e => e.InSemrefeicao).HasColumnName("IN_SEMREFEICAO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.RestoIngestao)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_RestoIngestao_FK1");

                entity.HasOne(d => d.IdTipoJantarNavigation)
                    .WithMany(p => p.RestoIngestaoIdTipoJantarNavigation)
                    .HasForeignKey(d => d.IdTipoJantar)
                    .HasConstraintName("TipoDiversos_RestoIngestao_FK1");

                entity.HasOne(d => d.IdTipoRefeicaoNavigation)
                    .WithMany(p => p.RestoIngestaoIdTipoRefeicaoNavigation)
                    .HasForeignKey(d => d.IdTipoRefeicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_RestoIngestao_FK2");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RestoIngestao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_RestoIngestao_FK1");
            });

            modelBuilder.Entity<RestricaoKit>(entity =>
            {
                entity.HasKey(e => new { e.IdAtributo, e.IdKit });

                entity.ToTable("Restricao_Kit");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.RestricaoKit)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Restricao_Kit_Atributo");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.RestricaoKit)
                    .HasForeignKey(d => d.IdKit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Restricao_Kit_Kit");

                entity.HasOne(d => d.IdOperadorNavigation)
                    .WithMany(p => p.RestricaoKit)
                    .HasForeignKey(d => d.IdOperador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Restricao_Kit_Operador");
            });

            modelBuilder.Entity<RestricaoKitValor>(entity =>
            {
                entity.HasKey(e => e.IdRestricaoKitValor);

                entity.ToTable("RestricaoKit_Valor");

                entity.Property(e => e.IdRestricaoKitValor).HasColumnName("ID_RESTRICAO_KIT_VALOR");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxValorRestricao)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_RESTRICAO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RestricaoKitValor)
                    .HasForeignKey(d => new { d.IdAtributo, d.IdKit })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RestricaoKit_Valor_Restricao_Kit");
            });

            modelBuilder.Entity<RestricaoPdvalor>(entity =>
            {
                entity.HasKey(e => e.IdRestricaoValor)
                    .HasName("RestricaoPDValor_PK");

                entity.ToTable("RestricaoPDValor");

                entity.Property(e => e.IdRestricaoValor).HasColumnName("ID_RESTRICAO_VALOR");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxValorRestricao)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_RESTRICAO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RestricaoPdvalor)
                    .HasForeignKey(d => new { d.IdProdutoDetalhe, d.IdAtributo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Restricao_ProdutoDetalhe_RestricaoPDValor_FK1");
            });

            modelBuilder.Entity<RestricaoProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdAtributo })
                    .HasName("Restricao_ProdutoDetalhe_PK");

                entity.ToTable("Restricao_ProdutoDetalhe");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.RestricaoProdutoDetalhe)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_Restricao_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.IdOperadorNavigation)
                    .WithMany(p => p.RestricaoProdutoDetalhe)
                    .HasForeignKey(d => d.IdOperador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Restricao_ProdutoDetalhe_Operador");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.RestricaoProdutoDetalhe)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Restricao_ProdutoDetalhe_FK1");
            });

            modelBuilder.Entity<RestricaoServico>(entity =>
            {
                entity.HasKey(e => e.IdRestricaoServico)
                    .HasName("Restricao_Servico_PK");

                entity.ToTable("Restricao_Servico");

                entity.Property(e => e.IdRestricaoServico).HasColumnName("ID_RESTRICAO_SERVICO");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdOperador).HasColumnName("ID_OPERADOR");

                entity.Property(e => e.IdOperadora)
                    .HasColumnName("ID_OPERADORA")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxRestricaoServicoValor)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_RESTRICAO_SERVICO_VALOR");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.RestricaoServico)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_Restricao_Servico_FK1");

                entity.HasOne(d => d.IdOperadorNavigation)
                    .WithMany(p => p.RestricaoServico)
                    .HasForeignKey(d => d.IdOperador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operador_Restricao_Servico_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.RestricaoServico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Restricao_Servico_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.RestricaoServico)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_Restricao_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.RestricaoServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Restricao_Servico_FK1");
            });

            modelBuilder.Entity<ResultadoCotacao>(entity =>
            {
                entity.HasKey(e => e.IdCotacaoFornecedorProdutodetalhe)
                    .HasName("ResultadoCotacao_PK");

                entity.Property(e => e.IdCotacaoFornecedorProdutodetalhe)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_COTACAO_FORNECEDOR_PRODUTODETALHE")
                    .HasComment("PK da Tabela. FK com Cotacao_Fornecedor_ProdutoDetalhe.");

                entity.Property(e => e.IdJustificativa)
                    .HasColumnName("ID_JUSTIFICATIVA")
                    .HasComment("No caso de alteração do vencedor, tem que informar uma justificativa de alteração. FK com TipoDiversos.\r\n");

                entity.Property(e => e.InOrdemCompraGerada)
                    .HasColumnName("IN_ORDEM_COMPRA_GERADA")
                    .HasComment("Flag que informa se ja teve ordem de compra gerada.\r\n");

                entity.Property(e => e.InVencedor)
                    .HasColumnName("IN_VENCEDOR")
                    .HasComment("Flag que informa quem foi o fornecedor ganhador da cotação.");

                entity.Property(e => e.NrClassifcacao)
                    .HasColumnName("NR_CLASSIFCACAO")
                    .HasComment("Foi criado para mostrar em qual classificação ficou a cotação do fornecedor.\r\n");

                entity.Property(e => e.TxJustificativa)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA")
                    .HasComment("Texto livre para informar o motivo que o o vencedor da cotação foi modificado.");

                entity.HasOne(d => d.IdCotacaoFornecedorProdutodetalheNavigation)
                    .WithOne(p => p.ResultadoCotacao)
                    .HasForeignKey<ResultadoCotacao>(d => d.IdCotacaoFornecedorProdutodetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ResultadoCotacao_Cotacao_Fornecedor_ProdutoDetalhe");
            });

            modelBuilder.Entity<Results>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Crm).HasColumnName("crm");

                entity.Property(e => e.EndereçoConsultorio)
                    .HasMaxLength(255)
                    .HasColumnName("Endereço Consultorio");

                entity.Property(e => e.PreçoParticular)
                    .HasMaxLength(50)
                    .HasColumnName("preço particular");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(255)
                    .HasColumnName("telefone");
            });

            modelBuilder.Entity<ResumoLogWebServices>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtExecucao)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DT_EXECUCAO");

                entity.Property(e => e.NmWebService)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_WEB_SERVICE");

                entity.Property(e => e.Quantidade).HasColumnName("QUANTIDADE");
            });

            modelBuilder.Entity<RetencaoTecnica>(entity =>
            {
                entity.HasKey(e => e.IdRetencaoTecnica);

                entity.Property(e => e.IdRetencaoTecnica).HasColumnName("ID_RETENCAO_TECNICA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdContaPagar).HasColumnName("ID_CONTA_PAGAR");

                entity.Property(e => e.IdTipoRetencao).HasColumnName("ID_TIPO_RETENCAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VlRetencao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_RETENCAO");

                entity.HasOne(d => d.IdContaPagarNavigation)
                    .WithMany(p => p.RetencaoTecnica)
                    .HasForeignKey(d => d.IdContaPagar)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetencaoTecnica_ContaPagar");

                entity.HasOne(d => d.IdTipoRetencaoNavigation)
                    .WithMany(p => p.RetencaoTecnica)
                    .HasForeignKey(d => d.IdTipoRetencao)
                    .HasConstraintName("FK_RetencaoTecnica_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RetencaoTecnica)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetencaoTecnica_Usuario");
            });

            modelBuilder.Entity<RetencaoTecnicaLiberacao>(entity =>
            {
                entity.HasKey(e => e.IdRetencaoTecnicaLiberacao);

                entity.Property(e => e.IdRetencaoTecnicaLiberacao).HasColumnName("ID_RETENCAO_TECNICA_LIBERACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdRetencaoTecnica).HasColumnName("ID_RETENCAO_TECNICA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxObservacoes)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlLiberado)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_LIBERADO");

                entity.HasOne(d => d.IdRetencaoTecnicaNavigation)
                    .WithMany(p => p.RetencaoTecnicaLiberacao)
                    .HasForeignKey(d => d.IdRetencaoTecnica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetencaoTecnicaLiberacao_RetencaoTecnica");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RetencaoTecnicaLiberacao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetencaoTecnicaLiberacao_Usuario");
            });

            modelBuilder.Entity<RetornoArquivo>(entity =>
            {
                entity.HasKey(e => e.IdRetornoArquivo);

                entity.Property(e => e.IdRetornoArquivo).HasColumnName("ID_RETORNO_ARQUIVO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtEmissao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EMISSAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InUsuarioAutorizouImportacaoHashInvalido).HasColumnName("IN_USUARIO_AUTORIZOU_IMPORTACAO_HASH_INVALIDO");

                entity.Property(e => e.NmArquivoXml)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_XML");

                entity.Property(e => e.TxHashArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_HASH_ARQUIVO");

                entity.Property(e => e.TxHashCalculado)
                    .IsUnicode(false)
                    .HasColumnName("TX_HASH_CALCULADO");

                entity.Property(e => e.TxVersaoPadraoXml)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_VERSAO_PADRAO_XML");

                entity.Property(e => e.TxXmlArquivo).HasColumnName("TX_XML_ARQUIVO");

                entity.Property(e => e.VlGlosado).HasColumnName("VL_GLOSADO");

                entity.Property(e => e.VlLiberado).HasColumnName("VL_LIBERADO");

                entity.Property(e => e.VlProcessado).HasColumnName("VL_PROCESSADO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.RetornoArquivo)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_RetornoArquivo_Pessoa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.RetornoArquivo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetornoArquivo_Usuario");
            });

            modelBuilder.Entity<RetornoArquivoGuia>(entity =>
            {
                entity.HasKey(e => e.IdRetornoArquivoGuia);

                entity.Property(e => e.IdRetornoArquivoGuia).HasColumnName("ID_RETORNO_ARQUIVO_GUIA");

                entity.Property(e => e.CodigoGlosaGuia)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO_GLOSA_GUIA");

                entity.Property(e => e.CodigoSituacaoGuia)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO_SITUACAO_GUIA");

                entity.Property(e => e.DtHrFimFaturamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HR_FIM_FATURAMENTO");

                entity.Property(e => e.DtHrInicioFaturamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HR_INICIO_FATURAMENTO");

                entity.Property(e => e.IdRetornoArquivoProtocolo).HasColumnName("ID_RETORNO_ARQUIVO_PROTOCOLO");

                entity.Property(e => e.NmBeneficiario)
                    .IsUnicode(false)
                    .HasColumnName("NM_BENEFICIARIO");

                entity.Property(e => e.NrCarteira)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTEIRA");

                entity.Property(e => e.NrGuiaAtribuidoPelaOperadora)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA_ATRIBUIDO_PELA_OPERADORA");

                entity.Property(e => e.NrGuiaPrestador)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA_PRESTADOR");

                entity.Property(e => e.Senha)
                    .IsUnicode(false)
                    .HasColumnName("SENHA");

                entity.Property(e => e.VlGlosaGuia)
                    .HasColumnType("money")
                    .HasColumnName("VL_GLOSA_GUIA");

                entity.Property(e => e.VlInformadoGuia)
                    .HasColumnType("money")
                    .HasColumnName("VL_INFORMADO_GUIA");

                entity.Property(e => e.VlLiberadoGuia)
                    .HasColumnType("money")
                    .HasColumnName("VL_LIBERADO_GUIA");

                entity.Property(e => e.VlProcessadoGuia)
                    .HasColumnType("money")
                    .HasColumnName("VL_PROCESSADO_GUIA");

                entity.HasOne(d => d.IdRetornoArquivoProtocoloNavigation)
                    .WithMany(p => p.RetornoArquivoGuia)
                    .HasForeignKey(d => d.IdRetornoArquivoProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetornoArquivoGuia_RetornoArquivoProtocolo");
            });

            modelBuilder.Entity<RetornoArquivoItemGuia>(entity =>
            {
                entity.HasKey(e => e.IdRetornoArquivoItemGuia);

                entity.Property(e => e.IdRetornoArquivoItemGuia).HasColumnName("ID_RETORNO_ARQUIVO_ITEM_GUIA");

                entity.Property(e => e.CodigoGlosa)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO_GLOSA");

                entity.Property(e => e.CodigoProcedimentoItemAssistencial)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO_PROCEDIMENTO_ITEM_ASSISTENCIAL");

                entity.Property(e => e.Descricao)
                    .IsUnicode(false)
                    .HasColumnName("DESCRICAO");

                entity.Property(e => e.DtRealizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZACAO");

                entity.Property(e => e.GrauParticipacao)
                    .IsUnicode(false)
                    .HasColumnName("GRAU_PARTICIPACAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdRetornoArquivoGuia).HasColumnName("ID_RETORNO_ARQUIVO_GUIA");

                entity.Property(e => e.InProcessado).HasColumnName("IN_PROCESSADO");

                entity.Property(e => e.InValorAcrescimoProcessado).HasColumnName("IN_VALOR_ACRESCIMO_PROCESSADO");

                entity.Property(e => e.InValorCreditoProcessado).HasColumnName("IN_VALOR_CREDITO_PROCESSADO");

                entity.Property(e => e.InValorEstornoProcessado).HasColumnName("IN_VALOR_ESTORNO_PROCESSADO");

                entity.Property(e => e.InValorGlosadoProcessado).HasColumnName("IN_VALOR_GLOSADO_PROCESSADO");

                entity.Property(e => e.InValorReversaoGlosaProcessado).HasColumnName("IN_VALOR_REVERSAO_GLOSA_PROCESSADO");

                entity.Property(e => e.InValorTotalGlosadoProcessado).HasColumnName("IN_VALOR_TOTAL_GLOSADO_PROCESSADO");

                entity.Property(e => e.QtExecutada)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("QT_EXECUTADA");

                entity.Property(e => e.Tabela)
                    .IsUnicode(false)
                    .HasColumnName("TABELA");

                entity.Property(e => e.VlGlosa)
                    .HasColumnType("money")
                    .HasColumnName("VL_GLOSA");

                entity.Property(e => e.VlInformado)
                    .HasColumnType("money")
                    .HasColumnName("VL_INFORMADO");

                entity.Property(e => e.VlLiberado)
                    .HasColumnType("money")
                    .HasColumnName("VL_LIBERADO");

                entity.Property(e => e.VlProcessado)
                    .HasColumnType("money")
                    .HasColumnName("VL_PROCESSADO");

                entity.HasOne(d => d.IdRetornoArquivoGuiaNavigation)
                    .WithMany(p => p.RetornoArquivoItemGuia)
                    .HasForeignKey(d => d.IdRetornoArquivoGuia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetornoArquivoItemGuia_RetornoArquivoGuia");
            });

            modelBuilder.Entity<RetornoArquivoProcessamento>(entity =>
            {
                entity.HasKey(e => e.IdRetornoArquivoProcessamento);

                entity.Property(e => e.IdRetornoArquivoProcessamento).HasColumnName("ID_RETORNO_ARQUIVO_PROCESSAMENTO");

                entity.Property(e => e.DtImportacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPORTACAO");

                entity.Property(e => e.DtIniProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INI_PROCESSAMENTO");

                entity.Property(e => e.DtProcessamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROCESSAMENTO");

                entity.Property(e => e.IdRetornoArquivo).HasColumnName("ID_RETORNO_ARQUIVO");

                entity.Property(e => e.IdUsuarioImportacao).HasColumnName("ID_USUARIO_IMPORTACAO");

                entity.Property(e => e.IdUsuarioProcessamento).HasColumnName("ID_USUARIO_PROCESSAMENTO");

                entity.Property(e => e.InErroProcessamento).HasColumnName("IN_ERRO_PROCESSAMENTO");

                entity.HasOne(d => d.IdRetornoArquivoNavigation)
                    .WithMany(p => p.RetornoArquivoProcessamento)
                    .HasForeignKey(d => d.IdRetornoArquivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetornoArquivoProcessamento_RetornoArquivo");

                entity.HasOne(d => d.IdUsuarioImportacaoNavigation)
                    .WithMany(p => p.RetornoArquivoProcessamentoIdUsuarioImportacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioImportacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetornoArquivoProcessamento_Usuario1");

                entity.HasOne(d => d.IdUsuarioProcessamentoNavigation)
                    .WithMany(p => p.RetornoArquivoProcessamentoIdUsuarioProcessamentoNavigation)
                    .HasForeignKey(d => d.IdUsuarioProcessamento)
                    .HasConstraintName("FK_RetornoArquivoProcessamento_Usuario2");
            });

            modelBuilder.Entity<RetornoArquivoProtocolo>(entity =>
            {
                entity.HasKey(e => e.IdRetornoArquivoProtocolo);

                entity.Property(e => e.IdRetornoArquivoProtocolo).HasColumnName("ID_RETORNO_ARQUIVO_PROTOCOLO");

                entity.Property(e => e.CodigoGlosaProtocolo)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO_GLOSA_PROTOCOLO");

                entity.Property(e => e.CodigoSituacaoProtocolo)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO_SITUACAO_PROTOCOLO");

                entity.Property(e => e.DtProtocolo)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PROTOCOLO");

                entity.Property(e => e.IdRetornoArquivoTotalGeral).HasColumnName("ID_RETORNO_ARQUIVO_TOTAL_GERAL");

                entity.Property(e => e.NrLote).HasColumnName("NR_LOTE");

                entity.Property(e => e.NrProtocolo)
                    .IsUnicode(false)
                    .HasColumnName("NR_PROTOCOLO");

                entity.Property(e => e.VlGlosaProtocolo)
                    .HasColumnType("money")
                    .HasColumnName("VL_GLOSA_PROTOCOLO");

                entity.Property(e => e.VlInformadoProtocolo)
                    .HasColumnType("money")
                    .HasColumnName("VL_INFORMADO_PROTOCOLO");

                entity.Property(e => e.VlLiberadoProtocolo)
                    .HasColumnType("money")
                    .HasColumnName("VL_LIBERADO_PROTOCOLO");

                entity.Property(e => e.VlProcessadoProtocolo)
                    .HasColumnType("money")
                    .HasColumnName("VL_PROCESSADO_PROTOCOLO");

                entity.HasOne(d => d.IdRetornoArquivoTotalGeralNavigation)
                    .WithMany(p => p.RetornoArquivoProtocolo)
                    .HasForeignKey(d => d.IdRetornoArquivoTotalGeral)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetornoArquivoProtocolo_RetornoArquivoTotalGeral");
            });

            modelBuilder.Entity<RetornoArquivoTotalGeral>(entity =>
            {
                entity.HasKey(e => e.IdRetornoArquivoTotalGeral);

                entity.Property(e => e.IdRetornoArquivoTotalGeral).HasColumnName("ID_RETORNO_ARQUIVO_TOTAL_GERAL");

                entity.Property(e => e.IdRetornoArquivoProcessamento).HasColumnName("ID_RETORNO_ARQUIVO_PROCESSAMENTO");

                entity.Property(e => e.VlGlosaGeral)
                    .HasColumnType("money")
                    .HasColumnName("VL_GLOSA_GERAL");

                entity.Property(e => e.VlInformadoGeral)
                    .HasColumnType("money")
                    .HasColumnName("VL_INFORMADO_GERAL");

                entity.Property(e => e.VlLiberadoGeral)
                    .HasColumnType("money")
                    .HasColumnName("VL_LIBERADO_GERAL");

                entity.Property(e => e.VlProcessadoGeral)
                    .HasColumnType("money")
                    .HasColumnName("VL_PROCESSADO_GERAL");

                entity.HasOne(d => d.IdRetornoArquivoProcessamentoNavigation)
                    .WithMany(p => p.RetornoArquivoTotalGeral)
                    .HasForeignKey(d => d.IdRetornoArquivoProcessamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RetornoArquivoTotalGeral_RetornoArquivoProcessamento");
            });

            modelBuilder.Entity<RetornoFnIdentificaFchItemUnimed>(entity =>
            {
                entity.HasKey(e => e.IdRetornoFuncao)
                    .HasName("RetornoFnIdentificaFchItemUnimed_PK");

                entity.HasIndex(e => new { e.IdConta, e.IdFechamentoItemRetornado }, "IX_RetornoFnIdentificaFchItemUnimed_ID_CONTA_ID_FECHAMENTO_ITEM_RETORNADO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdRetornoFuncao).HasColumnName("ID_RETORNO_FUNCAO");

                entity.Property(e => e.CdItem)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItemRetornado).HasColumnName("ID_FECHAMENTO_ITEM_RETORNADO");

                entity.Property(e => e.IdPrimeiroArquivoRetornoDaCompetencia).HasColumnName("ID_PRIMEIRO_ARQUIVO_RETORNO_DA_COMPETENCIA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.RetornoFnIdentificaFchItemUnimed)
                    .HasForeignKey(d => new { d.IdConta, d.IdFechamentoItemRetornado })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RetornoFnIdentificaFchItemUnimed_FechamentoItem_FK1");
            });

            modelBuilder.Entity<RetornoUnimedTxt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RetornoUnimedTXT");

                entity.Property(e => e.CdAdequacaoItem)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_ADEQUACAO_ITEM");

                entity.Property(e => e.CdItem)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM");

                entity.Property(e => e.CdItemAdequacao)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM_ADEQUACAO");

                entity.Property(e => e.CdItemCreditoestorno)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_ITEM_CREDITOESTORNO");

                entity.Property(e => e.CdPrestadorCobr)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_COBR");

                entity.Property(e => e.CdPrestadorCobrCreditoestorno)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_COBR_CREDITOESTORNO");

                entity.Property(e => e.CdPrestadorExec)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_EXEC");

                entity.Property(e => e.CdPrestadorExecCreditoestorno)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_EXEC_CREDITOESTORNO");

                entity.Property(e => e.ContaCompetencia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONTA_COMPETENCIA");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtLeitura)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LEITURA");

                entity.Property(e => e.DtRealizacaoCreditoestorno)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZACAO_CREDITOESTORNO");

                entity.Property(e => e.DtRealizacaoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZACAO_ITEM");

                entity.Property(e => e.IdArquivo).HasColumnName("ID_ARQUIVO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativaErroConta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA_ERRO_CONTA");

                entity.Property(e => e.IdJustificativaErroItem)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ID_JUSTIFICATIVA_ERRO_ITEM");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMotivoCreditoestorno)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ID_MOTIVO_CREDITOESTORNO");

                entity.Property(e => e.IdOperadorarecebimento).HasColumnName("ID_OPERADORARECEBIMENTO");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.IdTipoLinha)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_TIPO_LINHA");

                entity.Property(e => e.IdTipoReg).HasColumnName("ID_TIPO_REG");

                entity.Property(e => e.InAdequacaoCodigo)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IN_ADEQUACAO_CODIGO");

                entity.Property(e => e.InContaComErro)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IN_CONTA_COM_ERRO");

                entity.Property(e => e.InErroContaReapresentavel)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IN_ERRO_CONTA_REAPRESENTAVEL");

                entity.Property(e => e.InErroItemReapresentavel)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IN_ERRO_ITEM_REAPRESENTAVEL");

                entity.Property(e => e.InExisteComplementacaoPagto)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IN_EXISTE_COMPLEMENTACAO_PAGTO");

                entity.Property(e => e.MesAnoMapa)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("MES_ANO_MAPA");

                entity.Property(e => e.NmArquivoUnimed)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_UNIMED");

                entity.Property(e => e.NmOperadora)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPessoa)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NmPlano)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");

                entity.Property(e => e.NrOrdemLinha).HasColumnName("NR_ORDEM_LINHA");

                entity.Property(e => e.NrOrdemLinhaPai).HasColumnName("NR_ORDEM_LINHA_PAI");

                entity.Property(e => e.PrPagamentoAdequacao).HasColumnName("PR_PAGAMENTO_ADEQUACAO");

                entity.Property(e => e.PrPagamentoItem).HasColumnName("PR_PAGAMENTO_ITEM");

                entity.Property(e => e.QdCobradaItem)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_COBRADA_ITEM");

                entity.Property(e => e.QdFilmePagoItem)
                    .HasColumnType("decimal(7, 5)")
                    .HasColumnName("QD_FILME_PAGO_ITEM");

                entity.Property(e => e.QdPagaAdequacao)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_PAGA_ADEQUACAO");

                entity.Property(e => e.QdPagaItem)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_PAGA_ITEM");

                entity.Property(e => e.QdUtAdequacao)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_UT_ADEQUACAO");

                entity.Property(e => e.QdUtItem)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("QD_UT_ITEM");

                entity.Property(e => e.TipoItem)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TIPO_ITEM");

                entity.Property(e => e.TxComplementoCreditoestorno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO_CREDITOESTORNO");

                entity.Property(e => e.TxDescricaoItem)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_ITEM");

                entity.Property(e => e.TxDescricaoPagamento)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_PAGAMENTO");

                entity.Property(e => e.TxErroConta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_ERRO_CONTA");

                entity.Property(e => e.TxMesanoCompetenciaAdequacao)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_MESANO_COMPETENCIA_ADEQUACAO");

                entity.Property(e => e.TxMesanoCompetenciaItem)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_MESANO_COMPETENCIA_ITEM");

                entity.Property(e => e.TxMesanoPgAnteriorAdequacao)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("TX_MESANO_PG_ANTERIOR_ADEQUACAO");

                entity.Property(e => e.TxMotivoCreditoestorno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_CREDITOESTORNO");

                entity.Property(e => e.TxMsgAdequacaoItem)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ADEQUACAO_ITEM");

                entity.Property(e => e.TxMsgErroItem)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MSG_ERRO_ITEM");

                entity.Property(e => e.TxTipoCreditoestorno)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO_CREDITOESTORNO");

                entity.Property(e => e.TxUnidade)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_UNIDADE");

                entity.Property(e => e.VlCobradoItem)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlConsultasErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_CONSULTAS_ERRO_CONTA");

                entity.Property(e => e.VlCreditoestorno)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_CREDITOESTORNO");

                entity.Property(e => e.VlDiariasErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_DIARIAS_ERRO_CONTA");

                entity.Property(e => e.VlExamesErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_EXAMES_ERRO_CONTA");

                entity.Property(e => e.VlFilmePagoItem)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_FILME_PAGO_ITEM");

                entity.Property(e => e.VlGabaritosErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_GABARITOS_ERRO_CONTA");

                entity.Property(e => e.VlHonorariosErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_HONORARIOS_ERRO_CONTA");

                entity.Property(e => e.VlMateriaisErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_MATERIAIS_ERRO_CONTA");

                entity.Property(e => e.VlMedicamentosErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_MEDICAMENTOS_ERRO_CONTA");

                entity.Property(e => e.VlPagoAdequacao)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_PAGO_ADEQUACAO");

                entity.Property(e => e.VlPagoAnteriorAdequacao)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_PAGO_ANTERIOR_ADEQUACAO");

                entity.Property(e => e.VlPagoItem)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_PAGO_ITEM");

                entity.Property(e => e.VlSeriaPago)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_SERIA_PAGO");

                entity.Property(e => e.VlTaxasErroConta)
                    .HasColumnType("decimal(14, 2)")
                    .HasColumnName("VL_TAXAS_ERRO_CONTA");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");

                entity.Property(e => e.VlUtAdequacao)
                    .HasColumnType("decimal(5, 3)")
                    .HasColumnName("VL_UT_ADEQUACAO");

                entity.Property(e => e.VlUtItem)
                    .HasColumnType("decimal(5, 3)")
                    .HasColumnName("VL_UT_ITEM");
            });

            modelBuilder.Entity<ReversaoGlosa>(entity =>
            {
                entity.HasKey(e => new { e.IdFechamentoItem, e.IdConta })
                    .HasName("Reversao_Glosa_PK");

                entity.ToTable("Reversao_Glosa");

                entity.HasIndex(e => e.IdConta, "IX_Reversao_Glosa_ID_CONTA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.DataReversao)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_REVERSAO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPaga).HasColumnName("IN_PAGA");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.ReversaoGlosa)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .HasConstraintName("FK_Reversao_Glosa_NotaEmitida");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ReversaoGlosa)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Reversao_Glosa_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ReversaoGlosaGenerica>(entity =>
            {
                entity.HasKey(e => e.IdConta);

                entity.ToTable("Reversao_Glosa_Generica");

                entity.Property(e => e.IdConta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_CONTA");

                entity.Property(e => e.DtReversao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REVERSAO");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPaga).HasColumnName("IN_PAGA");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithOne(p => p.ReversaoGlosaGenerica)
                    .HasForeignKey<ReversaoGlosaGenerica>(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reversao_Glosa_Generica_Conta_Cobranca");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.ReversaoGlosaGenerica)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .HasConstraintName("FK_Reversao_Glosa_Generica_NotaEmitida");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ReversaoGlosaGenerica)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reversao_Glosa_Generica_Usuario");
            });

            modelBuilder.Entity<ReversaoGlosaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdReversaoGlosaHistorico)
                    .HasName("Reversao_Glosa_Historico_PK");

                entity.ToTable("Reversao_Glosa_Historico");

                entity.Property(e => e.IdReversaoGlosaHistorico).HasColumnName("ID_REVERSAO_GLOSA_HISTORICO");

                entity.Property(e => e.DataReversao)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_REVERSAO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdNotaEmitida).HasColumnName("ID_NOTA_EMITIDA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.InPaga).HasColumnName("IN_PAGA");

                entity.Property(e => e.VlRevertido).HasColumnName("VL_REVERTIDO");

                entity.HasOne(d => d.IdNotaEmitidaNavigation)
                    .WithMany(p => p.ReversaoGlosaHistorico)
                    .HasForeignKey(d => d.IdNotaEmitida)
                    .HasConstraintName("FK_Reversao_Glosa_Historico_NotaEmitida");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ReversaoGlosaHistorico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Reversao_Glosa_Historico_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ReversaoGlosaHistoricoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Reversao_Glosa_Historico_FK1");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ReversaoGlosaHistoricoIdUsuarioOperacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("Usuario_Reversao_Glosa_Historico_FK2");
            });

            modelBuilder.Entity<ReversaoGlosaParcial>(entity =>
            {
                entity.HasKey(e => e.IdReversaoGlosaParcial);

                entity.ToTable("Reversao_Glosa_Parcial");

                entity.Property(e => e.IdReversaoGlosaParcial).HasColumnName("ID_REVERSAO_GLOSA_PARCIAL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtReversao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REVERSAO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.VlRevertido)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_REVERTIDO");

                entity.HasOne(d => d.IdCartarecursoNavigation)
                    .WithMany(p => p.ReversaoGlosaParcial)
                    .HasForeignKey(d => d.IdCartarecurso)
                    .HasConstraintName("FK_Reversao_Glosa_Parcial_CartaRecurso");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ReversaoGlosaParcial)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Reversao_Glosa_Parcial_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ReversaoGlosaParcial)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reversao_Glosa_Parcial_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ReversaoGlosaParcial)
                    .HasForeignKey(d => new { d.IdFechamentoItem, d.IdConta })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reversao_Glosa_Parcial_Reversao_Glosa");
            });

            modelBuilder.Entity<ReversaoGlosaParcialLog>(entity =>
            {
                entity.HasKey(e => e.IdReversaoGlosaParcialLog);

                entity.ToTable("Reversao_Glosa_Parcial_Log");

                entity.Property(e => e.IdReversaoGlosaParcialLog).HasColumnName("ID_REVERSAO_GLOSA_PARCIAL_LOG");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtReversao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REVERSAO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdReversaoGlosaParcial).HasColumnName("ID_REVERSAO_GLOSA_PARCIAL");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.Property(e => e.VlRevertido)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_REVERTIDO");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.ReversaoGlosaParcialLog)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("FK_Reversao_Glosa_Parcial_Usuario_ID_USUARIO_OPERACAO");
            });

            modelBuilder.Entity<RmvCirurgia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RMV_Cirurgia");

                entity.Property(e => e.Asa).HasColumnName("ASA");

                entity.Property(e => e.Codcirurgia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODCIRURGIA");

                entity.Property(e => e.Codcoligada).HasColumnName("CODCOLIGADA");

                entity.Property(e => e.Codespecialidade)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CODESPECIALIDADE");

                entity.Property(e => e.Crmanestesista)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CRMANESTESISTA");

                entity.Property(e => e.Datahorainicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAHORAINICIO");

                entity.Property(e => e.DatahorainicioVarchar)
                    .HasMaxLength(16)
                    .HasColumnName("DATAHORAINICIO_VARCHAR");

                entity.Property(e => e.Datahoratermino)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAHORATERMINO");

                entity.Property(e => e.DatahoraterminoVarchar)
                    .HasMaxLength(16)
                    .HasColumnName("DATAHORATERMINO_VARCHAR");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PACIENTE");

                entity.Property(e => e.Prontuario)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");

                entity.Property(e => e.Tipoanestesia)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOANESTESIA");

                entity.Property(e => e.Tipocirurgia)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCIRURGIA");

                entity.Property(e => e.Tipoferida)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFERIDA");
            });

            modelBuilder.Entity<RmvCirurgioes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RMV_Cirurgioes");

                entity.Property(e => e.Codcirurgia).HasColumnName("CODCIRURGIA");

                entity.Property(e => e.Crm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CRM");

                entity.Property(e => e.Funcao)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FUNCAO");
            });

            modelBuilder.Entity<RmvInterAlta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RMV_InterAlta");

                entity.Property(e => e.Bairro)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.Cep)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.Cidade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Codclinica)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODCLINICA");

                entity.Property(e => e.Codconvenio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODCONVENIO");

                entity.Property(e => e.Codespecialidade)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODESPECIALIDADE");

                entity.Property(e => e.Codleito)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODLEITO");

                entity.Property(e => e.Coligada).HasColumnName("COLIGADA");

                entity.Property(e => e.Dataadmissao)
                    .HasColumnType("date")
                    .HasColumnName("DATAADMISSAO");

                entity.Property(e => e.Dataalta)
                    .HasColumnType("date")
                    .HasColumnName("DATAALTA");

                entity.Property(e => e.Datanascimento)
                    .HasColumnType("date")
                    .HasColumnName("DATANASCIMENTO");

                entity.Property(e => e.Email)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Endereco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENDERECO");

                entity.Property(e => e.Horaadmissao)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HORAADMISSAO");

                entity.Property(e => e.Horaalta)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("HORAALTA");

                entity.Property(e => e.Nomemae)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMEMAE");

                entity.Property(e => e.Nomepaciente)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEPACIENTE");

                entity.Property(e => e.Peso).HasColumnName("PESO");

                entity.Property(e => e.Prontuario)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");

                entity.Property(e => e.Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO");

                entity.Property(e => e.Telefone)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONE");

                entity.Property(e => e.Tipoalta)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOALTA");
            });

            modelBuilder.Entity<RmvMovimentacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RMV_Movimentacao");

                entity.Property(e => e.Codclinica)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODCLINICA");

                entity.Property(e => e.Codleito)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODLEITO");

                entity.Property(e => e.Coligada).HasColumnName("COLIGADA");

                entity.Property(e => e.Dataentrada)
                    .HasColumnType("date")
                    .HasColumnName("DATAENTRADA");

                entity.Property(e => e.Datasaida)
                    .HasColumnType("date")
                    .HasColumnName("DATASAIDA");

                entity.Property(e => e.Dtentrinternacao)
                    .HasColumnType("date")
                    .HasColumnName("DTENTRINTERNACAO");

                entity.Property(e => e.Horaentrada)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("HORAENTRADA");

                entity.Property(e => e.Horasaida)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("HORASAIDA");

                entity.Property(e => e.Hrentrinternacao)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("HRENTRINTERNACAO");

                entity.Property(e => e.Nomepaciente)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMEPACIENTE");

                entity.Property(e => e.Prontuario)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("PRONTUARIO");
            });

            modelBuilder.Entity<RmvProcedimentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RMV_Procedimentos");

                entity.Property(e => e.Codcirurgia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CODCIRURGIA");

                entity.Property(e => e.Codprocorigem)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CODPROCORIGEM");

                entity.Property(e => e.Codtabelaorigem)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("CODTABELAORIGEM");

                entity.Property(e => e.Descorigem)
                    .IsUnicode(false)
                    .HasColumnName("DESCORIGEM");

                entity.Property(e => e.Video)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIDEO");
            });

            modelBuilder.Entity<SacOcorrencia>(entity =>
            {
                entity.HasKey(e => e.IdOcorrencia)
                    .HasName("SAC_OCORRENCIA_PK");

                entity.HasIndex(e => e.IdPaciente, "IX_SacOcorrencia_K3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_SacOcorrencia_UnidadeOrganizacional")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUsuario, "IX_SacOcorrencia_Usuario")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdOcorrencia).HasColumnName("ID_OCORRENCIA");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.DtReclamacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECLAMACAO");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IdStatusOcorrencia).HasColumnName("ID_STATUS_OCORRENCIA");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.SacOcorrencia)
                    .HasForeignKey(d => d.IdPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SacOcorrencia_Pessoa");

                entity.HasOne(d => d.IdStatusOcorrenciaNavigation)
                    .WithMany(p => p.SacOcorrencia)
                    .HasForeignKey(d => d.IdStatusOcorrencia)
                    .HasConstraintName("FK_SacOcorrencia_TipoDiversos");

                entity.HasOne(d => d.IdTipoOcorrenciaNavigation)
                    .WithMany(p => p.SacOcorrencia)
                    .HasForeignKey(d => d.IdTipoOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SAC_TIPO_OCORRENCIA_SAC_OCORRENCIA_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.SacOcorrencia)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SacOcorrencia_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SacOcorrencia)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SacOcorrencia_Usuario");
            });

            modelBuilder.Entity<SacTipoOcorrencia>(entity =>
            {
                entity.HasKey(e => e.IdTipoOcorrencia)
                    .HasName("SAC_TIPO_OCORRENCIA_PK");

                entity.Property(e => e.IdTipoOcorrencia).HasColumnName("ID_TIPO_OCORRENCIA");

                entity.Property(e => e.InVisualizaAgendasadt).HasColumnName("IN_VISUALIZA_AGENDASADT");

                entity.Property(e => e.InVisualizaAtendimento).HasColumnName("IN_VISUALIZA_ATENDIMENTO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<Servico>(entity =>
            {
                entity.HasKey(e => e.IdServico)
                    .HasName("Servico_PK");

                entity.HasIndex(e => new { e.IdServicoCategoria, e.InExcecao }, "IX_Servico_ID_SERVICO_CATEGORIA_IN_EXCECAO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServico, "IX_Servico_K1_2_3_7")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CdServico, e.IdServicoCategoria, e.NrNivel, e.InAtivo }, "IX_Servico_K1_K7_K4_K2_K5_3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServicoCategoria, e.IdServico }, "IX_Servico_K4_K1_3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.InAtivo, e.CdServico }, "IX_Servico_K7_K1_K2_3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServicoCategoria, e.InAtivo }, "IX_Servico_K7_K1_K4_2_3_5")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.NrNivel, e.InAtivo }, "IX_Servico_NR_NIVEL_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InExcecao).HasColumnName("IN_EXCECAO");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.HasOne(d => d.IdServicoCategoriaNavigation)
                    .WithMany(p => p.Servico)
                    .HasForeignKey(d => d.IdServicoCategoria)
                    .HasConstraintName("ServicoProdutoCategoria_Servico_FK1");
            });

            modelBuilder.Entity<ServicoAcomodacaoTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdAcomodacaoTipo, e.IdServico })
                    .HasName("Servico_AcomodacaoTipo_PK");

                entity.ToTable("Servico_AcomodacaoTipo");

                entity.Property(e => e.IdAcomodacaoTipo).HasColumnName("ID_ACOMODACAO_TIPO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InHospitalDiaApartamento).HasColumnName("IN_HOSPITAL_DIA_APARTAMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAcomodacaoTipoNavigation)
                    .WithMany(p => p.ServicoAcomodacaoTipo)
                    .HasForeignKey(d => d.IdAcomodacaoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Servico_AcomodacaoTipo_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoAcomodacaoTipo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_AcomodacaoTipo_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ServicoAcomodacaoTipo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Servico_AcomodacaoTipo_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ServicoAgenda>(entity =>
            {
                entity.HasKey(e => e.IdServicoAgenda)
                    .HasName("ServicoAgenda_PK");

                entity.Property(e => e.IdServicoAgenda).HasColumnName("ID_SERVICO_AGENDA");

                entity.Property(e => e.DtAgendamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AGENDAMENTO");

                entity.Property(e => e.DtCadastramento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRAMENTO");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.DtExecucaoEtapa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_ETAPA");

                entity.Property(e => e.IdServicoAgendaEtapa).HasColumnName("ID_SERVICO_AGENDA_ETAPA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioCancelamento).HasColumnName("ID_USUARIO_CANCELAMENTO");

                entity.Property(e => e.TxParametro)
                    .IsUnicode(false)
                    .HasColumnName("TX_PARAMETRO");

                entity.HasOne(d => d.IdServicoAgendaEtapaNavigation)
                    .WithMany(p => p.ServicoAgenda)
                    .HasForeignKey(d => d.IdServicoAgendaEtapa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoAgendaEtapa_ServicoAgenda_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoAgendaIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_ServicoAgenda_FK1");

                entity.HasOne(d => d.IdUsuarioCancelamentoNavigation)
                    .WithMany(p => p.ServicoAgendaIdUsuarioCancelamentoNavigation)
                    .HasForeignKey(d => d.IdUsuarioCancelamento)
                    .HasConstraintName("Usuario_ServicoAgenda_FK2");
            });

            modelBuilder.Entity<ServicoAgendaEtapa>(entity =>
            {
                entity.HasKey(e => e.IdServicoAgendaEtapa)
                    .HasName("ServicoAgendaEtapa_PK");

                entity.HasIndex(e => e.TxDescricao, "VerificaUnicidade_Etapa")
                    .IsUnique();

                entity.HasIndex(e => e.SqServicoAgendaEtapa, "VerificaUnicidade_Sequencia")
                    .IsUnique();

                entity.Property(e => e.IdServicoAgendaEtapa).HasColumnName("ID_SERVICO_AGENDA_ETAPA");

                entity.Property(e => e.InObrigatorio).HasColumnName("IN_OBRIGATORIO");

                entity.Property(e => e.SqServicoAgendaEtapa).HasColumnName("SQ_SERVICO_AGENDA_ETAPA");

                entity.Property(e => e.TxControlador)
                    .IsUnicode(false)
                    .HasColumnName("TX_CONTROLADOR");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<ServicoAgendaLog>(entity =>
            {
                entity.HasKey(e => e.IdServicoAgendaLog)
                    .HasName("ServicoAgendaLog_PK");

                entity.HasIndex(e => new { e.IdServicoAgenda, e.InErro }, "IX_ServicoAgendaLog_ID_SERVICO_AGENDA_IN_ERRO");

                entity.Property(e => e.IdServicoAgendaLog).HasColumnName("ID_SERVICO_AGENDA_LOG");

                entity.Property(e => e.DtFinalExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_EXECUCAO");

                entity.Property(e => e.DtInicioExecucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_EXECUCAO");

                entity.Property(e => e.IdServicoAgenda).HasColumnName("ID_SERVICO_AGENDA");

                entity.Property(e => e.InErro).HasColumnName("IN_ERRO");

                entity.Property(e => e.TxOcorrencia)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_OCORRENCIA");
            });

            modelBuilder.Entity<ServicoAgrupamento>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdServicoDependente })
                    .HasName("ServicoAgrupamento_PK");

                entity.HasIndex(e => e.IdServicoDependente, "IX_ServicoAgrupamento_ID_SERVICO_DEPENDENTE")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoDependente).HasColumnName("ID_SERVICO_DEPENDENTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoAgrupamentoIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoAgrupamento_FK1");

                entity.HasOne(d => d.IdServicoDependenteNavigation)
                    .WithMany(p => p.ServicoAgrupamentoIdServicoDependenteNavigation)
                    .HasForeignKey(d => d.IdServicoDependente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoAgrupamento_FK2");
            });

            modelBuilder.Entity<ServicoAgrupamento1>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdServicoDependente })
                    .HasName("ServicoAgrupamento_1_PK");

                entity.ToTable("ServicoAgrupamento_1");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoDependente).HasColumnName("ID_SERVICO_DEPENDENTE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoAgrupamento1IdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoAgrupamento_1_FK1");

                entity.HasOne(d => d.IdServicoDependenteNavigation)
                    .WithMany(p => p.ServicoAgrupamento1IdServicoDependenteNavigation)
                    .HasForeignKey(d => d.IdServicoDependente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoAgrupamento_1_FK2");
            });

            modelBuilder.Entity<ServicoCaracteristicaSus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ServicoCaracteristicaSUS");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasMaxLength(255)
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico)
                    .HasMaxLength(255)
                    .HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCaracteristicaTipo)
                    .HasMaxLength(255)
                    .HasColumnName("ID_SERVICO_CARACTERISTICA_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .HasMaxLength(255)
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioAtivacao).HasColumnName("ID_USUARIO_ATIVACAO");

                entity.Property(e => e.IdUsuarioInativacao)
                    .HasMaxLength(255)
                    .HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxAbrevTipo)
                    .HasMaxLength(255)
                    .HasColumnName("TX_ABREV_TIPO");
            });

            modelBuilder.Entity<ServicoCargaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdServicoCargaHistorico);

                entity.Property(e => e.IdServicoCargaHistorico).HasColumnName("ID_SERVICO_CARGA_HISTORICO");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrEdicao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NR_EDICAO");

                entity.Property(e => e.QnRegistroImportado).HasColumnName("QN_REGISTRO_IMPORTADO");

                entity.Property(e => e.QnServicoAssociado).HasColumnName("QN_SERVICO_ASSOCIADO");

                entity.Property(e => e.QnServicoTraduzido).HasColumnName("QN_SERVICO_TRADUZIDO");

                entity.Property(e => e.QnServicoTratado).HasColumnName("QN_SERVICO_TRATADO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxNomeArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_ARQUIVO");
            });

            modelBuilder.Entity<ServicoCargaHistoricoTestelog>(entity =>
            {
                entity.HasKey(e => e.IdServicoCargaHistorico);

                entity.ToTable("ServicoCargaHistoricoTESTELOG");

                entity.Property(e => e.IdServicoCargaHistorico).HasColumnName("ID_SERVICO_CARGA_HISTORICO");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrEdicao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NR_EDICAO");

                entity.Property(e => e.QnRegistroImportado).HasColumnName("QN_REGISTRO_IMPORTADO");

                entity.Property(e => e.QnServicoAssociado).HasColumnName("QN_SERVICO_ASSOCIADO");

                entity.Property(e => e.QnServicoTraduzido).HasColumnName("QN_SERVICO_TRADUZIDO");

                entity.Property(e => e.QnServicoTratado).HasColumnName("QN_SERVICO_TRATADO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxNomeArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_ARQUIVO");
            });

            modelBuilder.Entity<ServicoCargaLog>(entity =>
            {
                entity.HasKey(e => e.IdServicoCargaLog);

                entity.Property(e => e.IdServicoCargaLog).HasColumnName("ID_SERVICO_CARGA_LOG");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.ExigeViaAcesso).HasColumnName("EXIGE_VIA_ACESSO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCargaHistorico).HasColumnName("ID_SERVICO_CARGA_HISTORICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrEdicao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NR_EDICAO");

                entity.Property(e => e.NrPorteAnestesico).HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte).HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares).HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme).HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia).HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.QtdAuxiliaresAnest).HasColumnName("QTD_AUXILIARES_ANEST");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoAtualizacao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_ATUALIZACAO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxMoeda).HasColumnName("TX_MOEDA");

                entity.Property(e => e.TxPorteProcedimento).HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxPrecoTipo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_PRECO_TIPO");

                entity.Property(e => e.TxUr).HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios).HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<ServicoCheckinEnfermagem>(entity =>
            {
                entity.HasKey(e => new { e.IdCheckinEnfermagem, e.IdServico });

                entity.ToTable("Servico_CheckinEnfermagem");

                entity.HasIndex(e => e.IdProcedimentoPedido, "IX_Servico_CheckinEnfermagem_ID_PROCEDIMENTO_PEDIDO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdServico, "IX_Servico_CheckinEnfermagem_ID_SERVICO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdServicoGuia, "IX_Servico_CheckinEnfermagem_K9")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdProcedimentoPedido).HasColumnName("ID_PROCEDIMENTO_PEDIDO");

                entity.Property(e => e.IdProcedimentoPedidoProcedimento).HasColumnName("ID_PROCEDIMENTO_PEDIDO_PROCEDIMENTO");

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.IdServicoRegiaoAplicacao).HasColumnName("ID_SERVICO_REGIAO_APLICACAO");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdTipoCobranca).HasColumnName("ID_TIPO_COBRANCA");

                entity.Property(e => e.IdUsuarioConcluiuDispensacao).HasColumnName("ID_USUARIO_CONCLUIU_DISPENSACAO");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.InDispensacaoConcluida).HasColumnName("IN_DISPENSACAO_CONCLUIDA");

                entity.Property(e => e.QnRealizado).HasColumnName("QN_REALIZADO");

                entity.HasOne(d => d.IdCheckinEnfermagemNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdCheckinEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_CheckinEnfermagem_CheckinEnfermagem");

                entity.HasOne(d => d.IdProcedimentoPedidoNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdProcedimentoPedido)
                    .HasConstraintName("FK_Servico_CheckinEnfermagem_ProcedimentoPedido");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_CheckinEnfermagem_Servico");

                entity.HasOne(d => d.IdServicoGuiaNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdServicoGuia)
                    .HasConstraintName("Servico_Guia_Servico_CheckinEnfermagem_FK1");

                entity.HasOne(d => d.IdServicoRegiaoAplicacaoNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdServicoRegiaoAplicacao)
                    .HasConstraintName("FK_Servico_CheckinEnfermagem_RegiaoAplicacao");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .HasConstraintName("Solicitacao_Servico_CheckinEnfermagem_FK1");

                entity.HasOne(d => d.IdTipoCobrancaNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdTipoCobranca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_CheckinEnfermagem_CobrancaTipoEnfermagem");

                entity.HasOne(d => d.IdUsuarioConcluiuDispensacaoNavigation)
                    .WithMany(p => p.ServicoCheckinEnfermagem)
                    .HasForeignKey(d => d.IdUsuarioConcluiuDispensacao)
                    .HasConstraintName("FK_Servico_CheckinEnfermagem_Usuario");
            });

            modelBuilder.Entity<ServicoCid>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdCid })
                    .HasName("Servico_Cid_PK");

                entity.ToTable("Servico_Cid");

                entity.Property(e => e.IdServico)
                    .HasColumnName("ID_SERVICO")
                    .HasComment("Identificador do Serviço médico");

                entity.Property(e => e.IdCid)
                    .HasColumnName("ID_CID")
                    .HasComment("Identificador do Cid (Classificação Internacional de Doenças)");

                entity.Property(e => e.DtCompetencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COMPETENCIA")
                    .HasComment("Informa da data de competência da linha");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Indica se a linha está ativa (Exclusão lógica)");

                entity.Property(e => e.InPrincipal)
                    .IsRequired()
                    .HasColumnName("IN_PRINCIPAL")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Indica se a linha deve ser considerada principal");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA")
                    .HasComment("Controla a versão da linha");

                entity.HasOne(d => d.IdC)
                    .WithMany(p => p.ServicoCid)
                    .HasForeignKey(d => d.IdCid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Cid_Cid_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoCid)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_Cid_FK1");
            });

            modelBuilder.Entity<ServicoClassificacaoHospitalSus>(entity =>
            {
                entity.HasKey(e => e.IdServicoclassificacaohospitalsus);

                entity.ToTable("ServicoClassificacaoHospitalSUS");

                entity.Property(e => e.IdServicoclassificacaohospitalsus)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_SERVICOCLASSIFICACAOHOSPITALSUS");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdServicoClassificacao).HasColumnName("ID_SERVICO_CLASSIFICACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InTerceiro).HasColumnName("IN_TERCEIRO");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.ServicoClassificacaoHospitalSus)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoClassificacaoHospitalSUS_Pessoa");

                entity.HasOne(d => d.IdServicoclassificacaohospitalsusNavigation)
                    .WithOne(p => p.ServicoClassificacaoHospitalSus)
                    .HasForeignKey<ServicoClassificacaoHospitalSus>(d => d.IdServicoclassificacaohospitalsus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoClassificacaoHospitalSUS_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoClassificacaoHospitalSus)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_ServicoClassificacaoHospitalSUS_Usuario");
            });

            modelBuilder.Entity<ServicoClassificacaoTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdTipoClassificacao });

                entity.ToTable("Servico_ClassificacaoTipo");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoClassificacao).HasColumnName("ID_TIPO_CLASSIFICACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InPadrao).HasColumnName("IN_PADRAO");

                entity.HasOne(d => d.IdTipoClassificacaoNavigation)
                    .WithMany(p => p.ServicoClassificacaoTipo)
                    .HasForeignKey(d => d.IdTipoClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_ClassificacaoTipo_TipoDiversos");
            });

            modelBuilder.Entity<ServicoCompativel>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoPrincipal, e.IdInstrRegistroPrinc, e.IdServicoCompativelTipo, e.IdInstrRegistroComp });

                entity.Property(e => e.IdServicoPrincipal).HasColumnName("ID_SERVICO_PRINCIPAL");

                entity.Property(e => e.IdInstrRegistroPrinc).HasColumnName("ID_INSTR_REGISTRO_PRINC");

                entity.Property(e => e.IdServicoCompativelTipo).HasColumnName("ID_SERVICO_COMPATIVEL_TIPO");

                entity.Property(e => e.IdInstrRegistroComp).HasColumnName("ID_INSTR_REGISTRO_COMP");

                entity.Property(e => e.IdCompatibilidadeTipo).HasColumnName("ID_COMPATIBILIDADE_TIPO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.QnPermitida).HasColumnName("QN_PERMITIDA");

                entity.HasOne(d => d.IdCompatibilidadeTipoNavigation)
                    .WithMany(p => p.ServicoCompativelIdCompatibilidadeTipoNavigation)
                    .HasForeignKey(d => d.IdCompatibilidadeTipo)
                    .HasConstraintName("FK_ServicoCompativel_TipoDiversos2");

                entity.HasOne(d => d.IdInstrRegistroCompNavigation)
                    .WithMany(p => p.ServicoCompativelIdInstrRegistroCompNavigation)
                    .HasForeignKey(d => d.IdInstrRegistroComp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoCompativel_TipoDiversos1");

                entity.HasOne(d => d.IdInstrRegistroPrincNavigation)
                    .WithMany(p => p.ServicoCompativelIdInstrRegistroPrincNavigation)
                    .HasForeignKey(d => d.IdInstrRegistroPrinc)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoCompativel_TipoDiversos");

                entity.HasOne(d => d.IdServicoCompativelTipoNavigation)
                    .WithMany(p => p.ServicoCompativelIdServicoCompativelTipoNavigation)
                    .HasForeignKey(d => d.IdServicoCompativelTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoCompativel_Servico1");

                entity.HasOne(d => d.IdServicoPrincipalNavigation)
                    .WithMany(p => p.ServicoCompativelIdServicoPrincipalNavigation)
                    .HasForeignKey(d => d.IdServicoPrincipal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoCompativel_Servico");
            });

            modelBuilder.Entity<ServicoDependente>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdServicoDependente })
                    .HasName("ServicoDependente_PK");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoDependente).HasColumnName("ID_SERVICO_DEPENDENTE");

                entity.Property(e => e.InRestricao).HasColumnName("IN_RESTRICAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoDependenteIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoDependente_FK1");

                entity.HasOne(d => d.IdServicoDependenteNavigation)
                    .WithMany(p => p.ServicoDependenteIdServicoDependenteNavigation)
                    .HasForeignKey(d => d.IdServicoDependente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoDependente_FK2");
            });

            modelBuilder.Entity<ServicoDiariaLeitoTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdLeitoTipo })
                    .HasName("ServicoDiaria_LeitoTipo_PK");

                entity.ToTable("ServicoDiaria_LeitoTipo");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdLeitoTipo).HasColumnName("ID_LEITO_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdLeitoTipoNavigation)
                    .WithMany(p => p.ServicoDiariaLeitoTipo)
                    .HasForeignKey(d => d.IdLeitoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ServicoDiaria_LeitoTipo_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoDiariaLeitoTipo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoDiaria_LeitoTipo_FK1");
            });

            modelBuilder.Entity<ServicoEspecialidade>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoDiversos, e.IdServico })
                    .HasName("Servico_Especialidade_PK");

                entity.ToTable("Servico_Especialidade");

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoEspecialidade)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_Especialidade_FK1");

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.ServicoEspecialidade)
                    .HasForeignKey(d => d.IdTipoDiversos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Servico_Especialidade_FK1");
            });

            modelBuilder.Entity<ServicoEspecialidadeTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdEspecialidadeTipo });

                entity.ToTable("Servico_EspecialidadeTipo");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdEspecialidadeTipo).HasColumnName("ID_ESPECIALIDADE_TIPO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdEspecialidadeTipoNavigation)
                    .WithMany(p => p.ServicoEspecialidadeTipo)
                    .HasForeignKey(d => d.IdEspecialidadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_EspecialidadeTipo_TipoDiversos");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoEspecialidadeTipo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_EspecialidadeTipo_Servico");
            });

            modelBuilder.Entity<ServicoExcecao>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdOperadora })
                    .HasName("ServicoExcecao_PK");

                entity.HasIndex(e => e.IdOperadora, "IX_ServicoExcecao_ID_OPERADORA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServico, "IX_ServicoExcecao_K1_2")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoExcecao)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoExcecao_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoExcecao)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoExcecao_FK1");
            });

            modelBuilder.Entity<ServicoExcecaoHistoricoCh>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdOperadora, e.DtVigencia })
                    .HasName("ServicoExcecao_HistoricoCH_PK");

                entity.ToTable("ServicoExcecao_HistoricoCH");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual)
                    .IsRequired()
                    .HasColumnName("IN_PRECO_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoExcecaoHistoricoCh)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ServicoExcecao_HistoricoCH_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoExcecaoHistoricoCh)
                    .HasForeignKey(d => new { d.IdServico, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoExcecao_ServicoExcecao_HistoricoCH_FK1");
            });

            modelBuilder.Entity<ServicoExcecaoHistoricoValor>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdOperadora, e.DtVigencia })
                    .HasName("ServicoExcecao_HistoricoValor_PK");

                entity.ToTable("ServicoExcecao_HistoricoValor");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual)
                    .IsRequired()
                    .HasColumnName("IN_PRECO_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoExcecaoHistoricoValor)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_ServicoExcecao_HistoricoValor_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoExcecaoHistoricoValor)
                    .HasForeignKey(d => new { d.IdServico, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoExcecao_ServicoExcecao_HistoricoValor_FK1");
            });

            modelBuilder.Entity<ServicoExcecaoPlano>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdPlano, e.IdOperadora })
                    .HasName("ServicoExcecao_Plano_PK");

                entity.ToTable("ServicoExcecao_Plano");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoExcecaoPlano)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoExcecao_Plano_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoExcecaoPlano)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_ServicoExcecao_Plano_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoExcecaoPlano)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoExcecao_Plano_FK1");
            });

            modelBuilder.Entity<ServicoExcecaoPlanoHistoricoCh>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.DtVigencia, e.IdPlano, e.IdOperadora })
                    .HasName("ServicoExcecao_Plano_HistoricoCH_PK");

                entity.ToTable("ServicoExcecao_Plano_HistoricoCH");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual)
                    .IsRequired()
                    .HasColumnName("IN_PRECO_ATUAL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoExcecaoPlanoHistoricoCh)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_ServicoExcecao_Plano_HistoricoCH_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoExcecaoPlanoHistoricoCh)
                    .HasForeignKey(d => new { d.IdServico, d.IdPlano, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoExcecao_Plano_ServicoExcecao_Plano_HistoricoCH_FK1");
            });

            modelBuilder.Entity<ServicoExcecaoPlanoHistoricoValor>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdPlano, e.IdOperadora, e.DtVigencia })
                    .HasName("ServicoExcecao_Plano_HistoricoValor_PK");

                entity.ToTable("ServicoExcecao_Plano_HistoricoValor");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual)
                    .IsRequired()
                    .HasColumnName("IN_PRECO_ATUAL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoExcecaoPlanoHistoricoValor)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_ServicoExcecao_Plano_HistoricoValor_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoExcecaoPlanoHistoricoValor)
                    .HasForeignKey(d => new { d.IdServico, d.IdPlano, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoExcecao_Plano_ServicoExcecao_Plano_HistoricoValor_FK1");
            });

            modelBuilder.Entity<ServicoExcecaoPlanoServicoIncidencia>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdServico, e.IdServicoIncidencia, e.IdPlano })
                    .HasName("ServicoExcecao_Plano_ServicoIncidencia_PK");

                entity.ToTable("ServicoExcecao_Plano_ServicoIncidencia");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");

                entity.HasOne(d => d.IdServicoIncidenciaNavigation)
                    .WithMany(p => p.ServicoExcecaoPlanoServicoIncidencia)
                    .HasForeignKey(d => d.IdServicoIncidencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_ServicoExcecao_Plano_ServicoIncidencia_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoExcecaoPlanoServicoIncidencia)
                    .HasForeignKey(d => new { d.IdServico, d.IdPlano, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoExcecao_Plano_ServicoExcecao_Plano_ServicoIncidencia_FK1");
            });

            modelBuilder.Entity<ServicoExcecaoServicoIncidencia>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdOperadora, e.IdAtributo })
                    .HasName("ServicoExcecao_ServicoIncidencia_PK");

                entity.ToTable("ServicoExcecao_ServicoIncidencia");

                entity.HasIndex(e => e.IdOperadora, "IX_ServicoExcecao_ServicoIncidencia_ID_OPERADORA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdServico, e.IdOperadora }, "IX_ServicoExcecao_ServicoIncidencia_K1_K2")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServico, e.IdAtributo, e.IdOperadora, e.VlIncidencia }, "IX_ServicoExcecao_ServicoIncidencia_K3_K2_K4_K1")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.ServicoExcecaoServicoIncidencia)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_ServicoExcecao_ServicoIncidencia_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoExcecaoServicoIncidencia)
                    .HasForeignKey(d => new { d.IdServico, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoExcecao_ServicoExcecao_ServicoIncidencia_FK1");
            });

            modelBuilder.Entity<ServicoFilmeIncidenciaAdicional>(entity =>
            {
                entity.HasKey(e => e.IdServicoFilmeIncidenciaAdicional)
                    .HasName("Servico_FilmeIncidenciaAdicional_PK");

                entity.ToTable("Servico_FilmeIncidenciaAdicional");

                entity.HasIndex(e => new { e.IdCheckinEnfermagem, e.IdServico }, "IX_Servico_FilmeIncidenciaAdicional_K1_K2")
                    .IsUnique()
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdContaItemServico, "IX_Servico_FilmeIncidenciaAdicional_K4")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServicoFilmeIncidenciaAdicional).HasColumnName("ID_SERVICO_FILME_INCIDENCIA_ADICIONAL");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFilme).HasColumnName("ID_FILME");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoFilho).HasColumnName("ID_SERVICO_FILHO");

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.QnIncidenciaAdicional).HasColumnName("QN_INCIDENCIA_ADICIONAL");

                entity.HasOne(d => d.IdContaItemServicoNavigation)
                    .WithMany(p => p.ServicoFilmeIncidenciaAdicional)
                    .HasForeignKey(d => d.IdContaItemServico)
                    .HasConstraintName("ContaItem_Servico_Servico_FilmeIncidenciaAdicional_FK1");

                entity.HasOne(d => d.IdFilmeNavigation)
                    .WithMany(p => p.ServicoFilmeIncidenciaAdicional)
                    .HasForeignKey(d => d.IdFilme)
                    .HasConstraintName("Filme_Servico_FilmeIncidenciaAdicional_FK1");

                entity.HasOne(d => d.IdServicoFilhoNavigation)
                    .WithMany(p => p.ServicoFilmeIncidenciaAdicional)
                    .HasForeignKey(d => d.IdServicoFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_FilmeIncidenciaAdicional_FK1");

                entity.HasOne(d => d.Id)
                    .WithOne(p => p.ServicoFilmeIncidenciaAdicional)
                    .HasForeignKey<ServicoFilmeIncidenciaAdicional>(d => new { d.IdCheckinEnfermagem, d.IdServico })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_CheckinEnfermagem_Servico_FilmeIncidenciaAdicional_FK1");
            });

            modelBuilder.Entity<ServicoGuia>(entity =>
            {
                entity.HasKey(e => e.IdServicoGuia);

                entity.ToTable("Servico_Guia");

                entity.HasIndex(e => e.IdMedicoExecutanteServico, "IX_Servico_Guia_ID_MEDICO_EXECUTANTE_SERVICO");

                entity.HasIndex(e => e.IdServico, "IX_Servico_Guia_ID_SERVICO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdGuia, e.IdServico }, "IX_Servico_Guia_K3_K2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.DtGravacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GRAVACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdMedicoExecutanteServico).HasColumnName("ID_MEDICO_EXECUTANTE_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoRegiaoAplicacao).HasColumnName("ID_SERVICO_REGIAO_APLICACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.InReimportado)
                    .HasColumnName("IN_REIMPORTADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnMinima).HasColumnName("QN_MINIMA");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.TxObsPreparo)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_PREPARO");

                entity.HasOne(d => d.IdGuiaNavigation)
                    .WithMany(p => p.ServicoGuia)
                    .HasForeignKey(d => d.IdGuia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_Guia_Guia");

                entity.HasOne(d => d.IdMedicoExecutanteServicoNavigation)
                    .WithMany(p => p.ServicoGuia)
                    .HasForeignKey(d => d.IdMedicoExecutanteServico)
                    .HasConstraintName("FK_Servico_Guia_Pessoa");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoGuia)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_Guia_Servico");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoGuia)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Servico_Guia_Usuario");

                entity.HasOne(d => d.IdServico1)
                    .WithMany(p => p.ServicoGuia)
                    .HasForeignKey(d => new { d.IdServicoRegiaoAplicacao, d.IdServico })
                    .HasConstraintName("FK_Servico_Guia_Servico_RegiaoAplicacao");
            });

            modelBuilder.Entity<ServicoGuiaArquivo>(entity =>
            {
                entity.HasKey(e => e.IdServicoguiaArquivo);

                entity.ToTable("ServicoGuia_Arquivo");

                entity.Property(e => e.IdServicoguiaArquivo).HasColumnName("ID_SERVICOGUIA_ARQUIVO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmArquivo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.TxArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_ARQUIVO");
            });

            modelBuilder.Entity<ServicoGuiaExcluido>(entity =>
            {
                entity.HasKey(e => e.IdServicoGuia)
                    .HasName("PK__Servico___256841264F87870C");

                entity.ToTable("Servico_Guia_Excluido");

                entity.Property(e => e.IdServicoGuia)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtGravacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GRAVACAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdMedicoExecutanteServico).HasColumnName("ID_MEDICO_EXECUTANTE_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoRegiaoAplicacao).HasColumnName("ID_SERVICO_REGIAO_APLICACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InParticular).HasColumnName("IN_PARTICULAR");

                entity.Property(e => e.QnMinima).HasColumnName("QN_MINIMA");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.TxObsPreparo)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBS_PREPARO");
            });

            modelBuilder.Entity<ServicoHabilitacaoSus>(entity =>
            {
                entity.HasKey(e => e.IdServicoHabilitacao)
                    .HasName("PK__Servico___DFF0A1DB56521E27");

                entity.ToTable("Servico_HabilitacaoSus");

                entity.Property(e => e.IdServicoHabilitacao).HasColumnName("ID_SERVICO_HABILITACAO");

                entity.Property(e => e.IdGrupoHabilitacao).HasColumnName("ID_GRUPO_HABILITACAO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoHabilitacao).HasColumnName("ID_TIPO_HABILITACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdGrupoHabilitacaoNavigation)
                    .WithMany(p => p.ServicoHabilitacaoSus)
                    .HasForeignKey(d => d.IdGrupoHabilitacao)
                    .HasConstraintName("FK_Grupo_HabilitacaoSus_Servico_HabilitacaoSus");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoHabilitacaoSus)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_Servico_HabilitacaoSus");

                entity.HasOne(d => d.IdTipoHabilitacaoNavigation)
                    .WithMany(p => p.ServicoHabilitacaoSus)
                    .HasForeignKey(d => d.IdTipoHabilitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoHabilitacaoSus_Servico_HabilitacaoSus");
            });

            modelBuilder.Entity<ServicoHabilitacaoSusHistorico>(entity =>
            {
                entity.HasKey(e => e.IdServicoHabilitacaoHistorico)
                    .HasName("PK__Servico___D64903D45DF33FEF");

                entity.ToTable("Servico_HabilitacaoSus_Historico");

                entity.Property(e => e.IdServicoHabilitacaoHistorico).HasColumnName("ID_SERVICO_HABILITACAO_HISTORICO");

                entity.Property(e => e.IdGrupoHabilitacao).HasColumnName("ID_GRUPO_HABILITACAO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdTipoHabilitacao).HasColumnName("ID_TIPO_HABILITACAO");

                entity.Property(e => e.TxCompetencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA");

                entity.HasOne(d => d.IdGrupoHabilitacaoNavigation)
                    .WithMany(p => p.ServicoHabilitacaoSusHistorico)
                    .HasForeignKey(d => d.IdGrupoHabilitacao)
                    .HasConstraintName("FK_Grupo_HabilitacaoSus_Servico_HabilitacaoSus_Historico");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoHabilitacaoSusHistorico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_Servico_HabilitacaoSus_Historico");

                entity.HasOne(d => d.IdTipoHabilitacaoNavigation)
                    .WithMany(p => p.ServicoHabilitacaoSusHistorico)
                    .HasForeignKey(d => d.IdTipoHabilitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoHabilitacaoSus_Servico_HabilitacaoSus_Historico");
            });

            modelBuilder.Entity<ServicoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.DtOcorrencia, e.IdUsuario })
                    .HasName("ServicoExcluido_PK");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.Competencia)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("COMPETENCIA");

                entity.Property(e => e.InExclusao).HasColumnName("IN_EXCLUSAO");

                entity.Property(e => e.InInclusao)
                    .IsRequired()
                    .HasColumnName("IN_INCLUSAO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxValorDeletado)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_DELETADO");

                entity.Property(e => e.TxValorInserido)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_INSERIDO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoHistorico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ServicoHistorico_FK1");
            });

            modelBuilder.Entity<ServicoIdentificadores>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoDiversos, e.IdServico })
                    .HasName("Servico_Identificadores_PK");

                entity.ToTable("Servico_Identificadores");

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoIdentificadores)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_Identificadores_FK1");

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.ServicoIdentificadores)
                    .HasForeignKey(d => d.IdTipoDiversos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Servico_Identificadores_FK1");
            });

            modelBuilder.Entity<ServicoImagem>(entity =>
            {
                entity.HasKey(e => e.IdServicoImagem);

                entity.Property(e => e.IdServicoImagem).HasColumnName("ID_SERVICO_IMAGEM");

                entity.Property(e => e.DtAssociacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ASSOCIACAO");

                entity.Property(e => e.IdImagem).HasColumnName("ID_IMAGEM");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdImagemNavigation)
                    .WithMany(p => p.ServicoImagem)
                    .HasForeignKey(d => d.IdImagem)
                    .HasConstraintName("FK_ServicoImagem_Imagem");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoImagem)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK_ServicoImagem_Servico");
            });

            modelBuilder.Entity<ServicoIncidencia>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdServico, e.IdServicoIncidencia })
                    .HasName("ServicoIncidencia_PK");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");
            });

            modelBuilder.Entity<ServicoIncidenciaCategoria>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoCategoria, e.IdServicoIncidencia })
                    .HasName("ServicoIncidencia_categoria_PK");

                entity.ToTable("ServicoIncidencia_Categoria");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.NrOrdemApresentacao).HasColumnName("NR_ORDEM_APRESENTACAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoCategoriaNavigation)
                    .WithMany(p => p.ServicoIncidenciaCategoria)
                    .HasForeignKey(d => d.IdServicoCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoCategoria_ServicoIncidencia_categoria_FK1");

                entity.HasOne(d => d.IdServicoIncidenciaNavigation)
                    .WithMany(p => p.ServicoIncidenciaCategoria)
                    .HasForeignKey(d => d.IdServicoIncidencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_ServicoIncidencia_categoria_FK1");
            });

            modelBuilder.Entity<ServicoKitTaxasGasesServico>(entity =>
            {
                entity.HasKey(e => e.IdServicoKit)
                    .HasName("Servico_KitTaxasGasesServico_PK");

                entity.ToTable("Servico_KitTaxasGasesServico");

                entity.Property(e => e.IdServicoKit).HasColumnName("ID_SERVICO_KIT");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InItemObrigatorio).HasColumnName("IN_ITEM_OBRIGATORIO");

                entity.Property(e => e.QnItem)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("QN_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.ServicoKitTaxasGasesServico)
                    .HasForeignKey(d => d.IdKit)
                    .HasConstraintName("Kit_KitTaxas_Servico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoKitTaxasGasesServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TaxasGases_Kit_Servico_FK1");
            });

            modelBuilder.Entity<ServicoModalidadeTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdModalidadeTipo });

                entity.ToTable("Servico_ModalidadeTipo");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdModalidadeTipo).HasColumnName("ID_MODALIDADE_TIPO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdModalidadeTipoNavigation)
                    .WithMany(p => p.ServicoModalidadeTipo)
                    .HasForeignKey(d => d.IdModalidadeTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_ModalidadeTipo_TipoDiversos");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoModalidadeTipo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_ModalidadeTipo_Servico");
            });

            modelBuilder.Entity<ServicoOperadora>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Servico_Operadora");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");
            });

            modelBuilder.Entity<ServicoOperadoraPlanoServicoCaracteristicaTipo>(entity =>
            {
                entity.HasKey(e => e.IdServicoOperadoraPlanoServicocaracteristicatipo)
                    .HasName("Servico_Operadora_Plano_ServicoCaracteristicaTipo_PK");

                entity.ToTable("Servico_Operadora_Plano_ServicoCaracteristicaTipo");

                entity.HasIndex(e => new { e.IdServico, e.IdPlano, e.IdServicoCaracteristicaTipo, e.InAtivo, e.DtVigencia, e.IdUnidadeOrganizacional }, "IX_Servico_Operadora_Plano_ServicoCaracteristicaTipo")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServicoOperadoraPlanoServicocaracteristicatipo).HasColumnName("ID_SERVICO_OPERADORA_PLANO_SERVICOCARACTERISTICATIPO");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCaracteristicaTipo).HasColumnName("ID_SERVICO_CARACTERISTICA_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioAtivacao).HasColumnName("ID_USUARIO_ATIVACAO");

                entity.Property(e => e.IdUsuarioInativacao).HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoOperadoraPlanoServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Servico_Operadora_Plano_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoOperadoraPlanoServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_Servico_Operadora_Plano_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoOperadoraPlanoServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_Operadora_Plano_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdServicoCaracteristicaTipoNavigation)
                    .WithMany(p => p.ServicoOperadoraPlanoServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdServicoCaracteristicaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Servico_Operadora_Plano_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ServicoOperadoraPlanoServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Servico_Operadora_Plano_ServicoCaracteristicaTipo_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioAtivacaoNavigation)
                    .WithMany(p => p.ServicoOperadoraPlanoServicoCaracteristicaTipoIdUsuarioAtivacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtivacao)
                    .HasConstraintName("FK_Servico_Operadora_Plano_ServicoCaracteristicaTipo_Usuario");

                entity.HasOne(d => d.IdUsuarioInativacaoNavigation)
                    .WithMany(p => p.ServicoOperadoraPlanoServicoCaracteristicaTipoIdUsuarioInativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioInativacao)
                    .HasConstraintName("FK_Servico_Operadora_Plano_ServicoCaracteristicaTipo_Usuario1");
            });

            modelBuilder.Entity<ServicoOperadoraServicoCaracteristicaTipo>(entity =>
            {
                entity.HasKey(e => e.IdServicoOperadoraServicocaracteristicatipo)
                    .HasName("Servico_Operadora_ServicoCaracteristicaTipo_PK");

                entity.ToTable("Servico_Operadora_ServicoCaracteristicaTipo");

                entity.HasIndex(e => e.IdServico, "IX_Servico_Operadora_ServicoCaracteristicaTipo_ID_SERVICO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdServico, e.IdOperadora, e.IdServicoCaracteristicaTipo, e.InAtivo, e.DtVigencia }, "IX_Servico_Operadora_ServicoCaracteristicaTipo_ID_SERVICO_ID_OPERADORA_ID_SERVICO_CARACTERISTICA_TIPO_IN_ATIVO_DT_VIGENCIA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdOperadora, e.IdServicoCaracteristicaTipo, e.InAtivo }, "IX_Servico_Operadora_ServicoCaracteristicaTipo_K2_K3_K5_1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdServicoCaracteristicaTipo, e.InAtivo }, "IX_Servico_Operadora_ServicoCaracteristicaTipo_K3_K5_1_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdServicoOperadoraServicocaracteristicatipo).HasColumnName("ID_SERVICO_OPERADORA_SERVICOCARACTERISTICATIPO");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCaracteristicaTipo).HasColumnName("ID_SERVICO_CARACTERISTICA_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioAtivacao)
                    .HasColumnName("ID_USUARIO_ATIVACAO")
                    .HasDefaultValueSql("((882))");

                entity.Property(e => e.IdUsuarioInativacao).HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Servico_Operadora_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_Operadora_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdServicoCaracteristicaTipoNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdServicoCaracteristicaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Servico_Operadora_ServicoCaracteristicaTipo_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoCaracteristicaTipo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Servico_Operadora_ServicoCaracteristicaTipo_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioAtivacaoNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoCaracteristicaTipoIdUsuarioAtivacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtivacao)
                    .HasConstraintName("FK_Servico_Operadora_ServicoCaracteristicaTipo_UsuarioAtivacao");

                entity.HasOne(d => d.IdUsuarioInativacaoNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoCaracteristicaTipoIdUsuarioInativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioInativacao)
                    .HasConstraintName("FK_Servico_Operadora_ServicoCaracteristicaTipo_UsuarioInativacao");
            });

            modelBuilder.Entity<ServicoOperadoraServicoProdutoTabela>(entity =>
            {
                entity.HasKey(e => e.IdServicoOperadoraServicoprodutotabela)
                    .HasName("Servico_Operadora_ServicoProdutoTabela_PK");

                entity.ToTable("Servico_Operadora_ServicoProdutoTabela");

                entity.HasIndex(e => e.IdOperadora, "IX_Servico_Operadora_ServicoProdutoTabela_Pessoa")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServico, "IX_Servico_Operadora_ServicoProdutoTabela_Servico_ServicoProdutoTabela")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServicoProdutoTabela, "IX_Servico_Operadora_ServicoProdutoTabela_Servico_ServicoProdutoTabela_ID_SERVICO_PRODUTO_TABELA")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServicoOperadoraServicoprodutotabela).HasColumnName("ID_SERVICO_OPERADORA_SERVICOPRODUTOTABELA");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabela)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Servico_Operadora_ServicoProdutoTabela_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabela)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK_Servico_Operadora_ServicoProdutoTabela_Plano");
            });

            modelBuilder.Entity<ServicoOperadoraServicoProdutoTabelaHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdServicoProdutoTabela, e.IdServico, e.DtVigencia })
                    .HasName("Servico_Operadora_ServicoProdutoTabela_Historico_PK");

                entity.ToTable("Servico_Operadora_ServicoProdutoTabela_Historico");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual).HasColumnName("IN_PRECO_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_Servico_Operadora_ServicoProdutoTabela_Historico_FK1");
            });

            modelBuilder.Entity<ServicoOperadoraServicoProdutoTabelaHistoricoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdServicoProdutoTabela, e.IdServico, e.DtVigencia })
                    .HasName("Servico_Operadora_ServicoProdutoTabela_HistoricoServico_PK");

                entity.ToTable("Servico_Operadora_ServicoProdutoTabela_HistoricoServico");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual).HasColumnName("IN_PRECO_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaHistoricoServico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_Servico_Operadora_ServicoProdutoTabela_HistoricoServico_FK1");
            });

            modelBuilder.Entity<ServicoOperadoraServicoProdutoTabelaPlano>(entity =>
            {
                entity.HasKey(e => new { e.IdPlano, e.IdOperadora, e.IdServico, e.IdServicoProdutoTabela })
                    .HasName("Servico_Operadora_ServicoProdutoTabela_Plano_PK");

                entity.ToTable("Servico_Operadora_ServicoProdutoTabela_Plano");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaPlano)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_Servico_Operadora_ServicoProdutoTabela_Plano_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaPlano)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_Servico_Operadora_ServicoProdutoTabela_Plano_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaPlano)
                    .HasForeignKey(d => new { d.IdServico, d.IdServicoProdutoTabela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoProdutoTabela_Servico_Operadora_ServicoProdutoTabela_Plano_FK1");
            });

            modelBuilder.Entity<ServicoOperadoraServicoProdutoTabelaPlanoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdPlano, e.IdServico, e.IdServicoProdutoTabela, e.DtVigencia })
                    .HasName("Servico_Operadora_ServicoProdutoTabela_Plano_Historico_PK");

                entity.ToTable("Servico_Operadora_ServicoProdutoTabela_Plano_Historico");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual).HasColumnName("IN_PRECO_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaPlanoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_Servico_Operadora_ServicoProdutoTabela_Plano_Historico_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaPlanoHistorico)
                    .HasForeignKey(d => new { d.IdPlano, d.IdOperadora, d.IdServico, d.IdServicoProdutoTabela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Operadora_ServicoProdutoTabela_Plano_Servico_Operadora_ServicoProdutoTabela_Plano_Historico_FK1");
            });

            modelBuilder.Entity<ServicoOperadoraServicoProdutoTabelaPlanoHistoricoServico>(entity =>
            {
                entity.HasKey(e => new { e.IdPlano, e.IdOperadora, e.IdServico, e.IdServicoProdutoTabela, e.DtVigencia })
                    .HasName("Servico_Operadora_ServicoProdutoTabela_Plano_HistoricoServico_PK");

                entity.ToTable("Servico_Operadora_ServicoProdutoTabela_Plano_HistoricoServico");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InPrecoAtual)
                    .IsRequired()
                    .HasColumnName("IN_PRECO_ATUAL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaPlanoHistoricoServico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Servico_Operadora_ServicoProdutoTabela_Plano_HistoricoServico_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoOperadoraServicoProdutoTabelaPlanoHistoricoServico)
                    .HasForeignKey(d => new { d.IdPlano, d.IdOperadora, d.IdServico, d.IdServicoProdutoTabela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Operadora_ServicoProdutoTabela_Plano_Servico_Operadora_ServicoProdutoTabela_Plano_HistoricoServico_FK1");
            });

            modelBuilder.Entity<ServicoOrdem>(entity =>
            {
                entity.HasKey(e => e.IdServicoOrdem)
                    .HasName("PK__Servico___95C2F97C12A7CAA7");

                entity.ToTable("Servico_Ordem");

                entity.Property(e => e.IdServicoOrdem).HasColumnName("ID_SERVICO_ORDEM");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItem).HasColumnName("ID_CONTA_ITEM");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.ServicoOrdem)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Conta_Servico_Ordem_FK");

                entity.HasOne(d => d.IdContaItemNavigation)
                    .WithMany(p => p.ServicoOrdem)
                    .HasForeignKey(d => d.IdContaItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ContaItem_Servico_Ordem_FK");
            });

            modelBuilder.Entity<ServicoPessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdPessoaEntidade })
                    .HasName("SERVICO_PESSOAENTIDADE_PK");

                entity.ToTable("Servico_PessoaEntidade");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.ServicoPessoaEntidade)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SERVICO_PESSOAENTIDADE_PESSOAENTIDADE_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoPessoaEntidade)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SERVICO_PESSOAENTIDADE_SERVICO_FK1");
            });

            modelBuilder.Entity<ServicoPlano>(entity =>
            {
                entity.HasKey(e => e.IdServicoPlano)
                    .HasName("Servico_Plano_PK");

                entity.ToTable("Servico_Plano");

                entity.Property(e => e.IdServicoPlano).HasColumnName("ID_SERVICO_PLANO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoPlano)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_Servico_Plano_FK1");
            });

            modelBuilder.Entity<ServicoPlanoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoPlano, e.DtVigencia })
                    .HasName("Servico_Plano_Historico_PK");

                entity.ToTable("Servico_Plano_Historico");

                entity.Property(e => e.IdServicoPlano).HasColumnName("ID_SERVICO_PLANO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtual).HasColumnName("IN_ATUAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.HasOne(d => d.IdServicoPlanoNavigation)
                    .WithMany(p => p.ServicoPlanoHistorico)
                    .HasForeignKey(d => d.IdServicoPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Plano_Servico_Plano_Historico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoPlanoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_Servico_Plano_Historico_FK1");
            });

            modelBuilder.Entity<ServicoPreco>(entity =>
            {
                entity.HasKey(e => e.IdServicoPreco)
                    .HasName("ServicoPreco_PK");

                entity.HasIndex(e => e.IdOperadora, "IX_ServicoPreco_ID_OPERADORA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdOperadora, e.IdServicoProdutoTabela, e.InAtivo, e.DtVigencia }, "IX_ServicoPreco_ID_OPERADORA_ID_SERVICO_PRODUTO_TABELA_IN_ATIVO_DT_VIGENCIA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdOperadora, e.IdServicoProdutoTabela, e.IdServico, e.DtVigencia, e.IdPlano }, "IX_ServicoPreco_K2_K4_K5_K7_K3")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdServico, e.IdOperadora, e.InAtivo, e.IdServicoPreco }, "IX_ServicoPreco_K5_K2_K15_K1_7")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.DtVigencia, e.IdServico, e.IdOperadora, e.InAtivo, e.IdServicoPreco }, "IX_ServicoPreco_K7_K5_K2_K15_K1_9_10_11_12_13_14")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdServicoPreco).HasColumnName("ID_SERVICO_PRECO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual)
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InValorGeral).HasColumnName("IN_VALOR_GERAL");

                entity.Property(e => e.InValorMonetario)
                    .HasColumnName("IN_VALOR_MONETARIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlCh).HasColumnName("VL_CH");

                entity.Property(e => e.VlChExterno).HasColumnName("VL_CH_EXTERNO");

                entity.Property(e => e.VlCustoOperacional).HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlCustoOperacionalApartamento).HasColumnName("VL_CUSTO_OPERACIONAL_APARTAMENTO");

                entity.Property(e => e.VlHonorario).HasColumnName("VL_HONORARIO");

                entity.Property(e => e.VlHonorarioApartamento).HasColumnName("VL_HONORARIO_APARTAMENTO");

                entity.Property(e => e.VlHonorariosApartamentoHospitalDia).HasColumnName("VL_HONORARIOS_APARTAMENTO_HOSPITAL_DIA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoPreco)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoPreco_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoPreco)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_ServicoPreco_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoPreco)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoPreco_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoPreco)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .HasConstraintName("ServicoProdutoTabela_ServicoPreco_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoPreco)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ServicoPreco_FK1");
            });

            modelBuilder.Entity<ServicoPrecoSus>(entity =>
            {
                entity.HasKey(e => e.IdServicoPrecoSus)
                    .HasName("PK__ServicoP__4503668D0CA341E0");

                entity.ToTable("ServicoPreco_Sus");

                entity.Property(e => e.IdServicoPrecoSus).HasColumnName("ID_SERVICO_PRECO_SUS");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtFimVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VlDiferencaAnestesista)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DIFERENCA_ANESTESISTA")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.VlDiferencaAuxiliar1)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DIFERENCA_AUXILIAR1")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.VlDiferencaAuxiliar2)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DIFERENCA_AUXILIAR2")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.VlDiferencaAuxiliar3)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DIFERENCA_AUXILIAR3")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.VlDiferencaCirurgiaoClinico)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DIFERENCA_CIRURGIAO_CLINICO")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.VlDiferencaPerfusionista)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_DIFERENCA_PERFUSIONISTA")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.VlProfissionalSus)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_PROFISSIONAL_SUS");

                entity.Property(e => e.VlSubstituidoProfissionalSus)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_SUBSTITUIDO_PROFISSIONAL_SUS");

                entity.Property(e => e.VlTotalDiferenca)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_TOTAL_DIFERENCA")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.VlTotalProcedimento)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("VL_TOTAL_PROCEDIMENTO")
                    .HasDefaultValueSql("((0.0000))");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoPrecoSus)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Operadora_ServicoPreco_SUS_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoPrecoSus)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoPreco_SUS_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoPrecoSus)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ServicoPreco_SUS_FK1");
            });

            modelBuilder.Entity<ServicoPreparo>(entity =>
            {
                entity.HasKey(e => e.IdServicoPreparo)
                    .HasName("Servico_Preparo_PK");

                entity.ToTable("Servico_Preparo");

                entity.HasIndex(e => e.IdServico, "IX_Servico_Preparo")
                    .IsUnique();

                entity.Property(e => e.IdServicoPreparo).HasColumnName("ID_SERVICO_PREPARO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.NrHoraAntecipacao).HasColumnName("NR_HORA_ANTECIPACAO");

                entity.Property(e => e.NrHoraDuracao).HasColumnName("NR_HORA_DURACAO");

                entity.Property(e => e.QdDiasprazoentrega).HasColumnName("QD_DIASPRAZOENTREGA");

                entity.Property(e => e.TxDescricaoPreparo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_PREPARO");

                entity.Property(e => e.TxObservacoesMarcacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES_MARCACAO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithOne(p => p.ServicoPreparo)
                    .HasForeignKey<ServicoPreparo>(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_Preparo_FK1");
            });

            modelBuilder.Entity<ServicoPrestado>(entity =>
            {
                entity.HasKey(e => e.IdServicoPrestado)
                    .HasName("ServicoPrestado_PK");

                entity.Property(e => e.IdServicoPrestado).HasColumnName("ID_SERVICO_PRESTADO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmServicoPrestado)
                    .IsRequired()
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRESTADO");

                entity.Property(e => e.TxServicoPrestado)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TX_SERVICO_PRESTADO");
            });

            modelBuilder.Entity<ServicoProdutoCategoria>(entity =>
            {
                entity.HasKey(e => e.IdServicoCategoria)
                    .HasName("ServicoProdutoCategoria_PK");

                entity.HasIndex(e => e.IdServicoProdutoTabelaTipo, "IX_ServicoProdutoCategoria_K2_1_3_5");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabelaTipo).HasColumnName("ID_SERVICO_PRODUTO_TABELA_TIPO");

                entity.Property(e => e.NmServicoCategoria)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoProdutoTabelaTipoNavigation)
                    .WithMany(p => p.ServicoProdutoCategoria)
                    .HasForeignKey(d => d.IdServicoProdutoTabelaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ServicoProdutoCategoria_FK1");
            });

            modelBuilder.Entity<ServicoProdutoCategoriaServicoProdutoCategoria>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoCategoriaPai, e.IdServicoCategoriaFilho })
                    .HasName("ServicoProdutoCategoria_ServicoProdutoCategoria_PK");

                entity.ToTable("ServicoProdutoCategoria_ServicoProdutoCategoria");

                entity.Property(e => e.IdServicoCategoriaPai).HasColumnName("ID_SERVICO_CATEGORIA_PAI");

                entity.Property(e => e.IdServicoCategoriaFilho).HasColumnName("ID_SERVICO_CATEGORIA_FILHO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoCategoriaFilhoNavigation)
                    .WithMany(p => p.ServicoProdutoCategoriaServicoProdutoCategoriaIdServicoCategoriaFilhoNavigation)
                    .HasForeignKey(d => d.IdServicoCategoriaFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoCategoria_ServicoProdutoCategoria_ServicoProdutoCategoria_FK2");

                entity.HasOne(d => d.IdServicoCategoriaPaiNavigation)
                    .WithMany(p => p.ServicoProdutoCategoriaServicoProdutoCategoriaIdServicoCategoriaPaiNavigation)
                    .HasForeignKey(d => d.IdServicoCategoriaPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoCategoria_ServicoProdutoCategoria_ServicoProdutoCategoria_FK1");
            });

            modelBuilder.Entity<ServicoProdutoTabela>(entity =>
            {
                entity.HasKey(e => e.IdServicoProdutoTabela)
                    .HasName("ServicoProdutoTabela_PK");

                entity.HasIndex(e => e.IdEmissorTabela, "IX_ServicoProdutoTabela_Pessoa")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServicoProdutoTabelaTipo, "IX_ServicoProdutoTabela_SERVICO_PRODUTO_TABELA_TIPO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtCopia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_COPIA");

                entity.Property(e => e.DtImportacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPORTACAO");

                entity.Property(e => e.IdEmissorTabela).HasColumnName("ID_EMISSOR_TABELA");

                entity.Property(e => e.IdServicoProdutoTabelaTipo).HasColumnName("ID_SERVICO_PRODUTO_TABELA_TIPO");

                entity.Property(e => e.IdServicoProdutoTabelaTipoEstrutura).HasColumnName("ID_SERVICO_PRODUTO_TABELA_TIPO_ESTRUTURA");

                entity.Property(e => e.IdTipoTabelaProduto).HasColumnName("ID_TIPO_TABELA_PRODUTO");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasDefaultValueSql("((882))");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InFracionado).HasColumnName("IN_FRACIONADO");

                entity.Property(e => e.InReal).HasColumnName("IN_REAL");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEmissorTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabela)
                    .HasForeignKey(d => d.IdEmissorTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaTipoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaIdServicoProdutoTabelaTipoNavigation)
                    .HasForeignKey(d => d.IdServicoProdutoTabelaTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ServicoProdutoTabela_FK1");

                entity.HasOne(d => d.IdTipoTabelaProdutoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaIdTipoTabelaProdutoNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaProduto)
                    .HasConstraintName("FK_ServicoProdutoTabela_TipoDiversos");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdOperadora })
                    .HasName("ServicoProdutoTabela_Operadora_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora");

                entity.HasIndex(e => new { e.IdOperadora, e.DtInicioVigencia }, "IX_ServicoProdutoTabela_Operadora_ID_OPERADORA_DT_INICIO_VIGENCIA");

                entity.HasIndex(e => e.IdUsuario, "IX_ServicoProdutoTabela_Operadora_Usuario");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasDefaultValueSql("((882))");

                entity.Property(e => e.InReferencia).HasColumnName("IN_REFERENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Operadora_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Operadora_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_ServicoProdutoTabela_Operadora_FK1");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraClassificacaoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdOperadora })
                    .HasName("ServicoProdutoTabela_Operadora_ClassificacaoProduto_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora_ClassificacaoProduto");

                entity.HasIndex(e => new { e.IdOperadora, e.IdClassificacao }, "IX_ServicoProdutoTabela_Operadora_ClassificacaoProduto_K3_K2")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdOperadora, e.IdClassificacao, e.InPrincipal, e.InAtivo }, "IX_ServicoProdutoTabela_Operadora_ClassificacaoProduto_K3_K2_K7_K9_1_8")
                    .HasFillFactor((byte)100);

                entity.HasIndex(e => e.IdUsuario, "IX_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Usuario_ID_USUARIO")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProduto)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Operadora_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProduto)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Operadora_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProduto)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Operadora_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProduto)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativa>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdOperadora })
                    .HasName("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa");

                entity.HasIndex(e => new { e.IdClassificacao, e.IdServicoProdutoTabela, e.NrPrioridade, e.IdOperadora }, "ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_PrioridadeOperadora")
                    .IsUnique();

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.NrPrioridade).HasColumnName("NR_PRIORIDADE");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdServicoprodutotabelaOperadoraClassificacaoprodutoAlternativaHistorico)
                    .HasName("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico");

                entity.Property(e => e.IdServicoprodutotabelaOperadoraClassificacaoprodutoAlternativaHistorico).HasColumnName("ID_SERVICOPRODUTOTABELA_OPERADORA_CLASSIFICACAOPRODUTO_ALTERNATIVA_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.NrPrioridade).HasColumnName("NR_PRIORIDADE");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistoricoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistoricoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistoricoIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistoricoIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Alternativa_Historico_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupo>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdOperadora })
                    .HasName("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdServicoprodutotabelaOperadoraClassificacaoprodutoGrupoHistorico)
                    .HasName("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico");

                entity.Property(e => e.IdServicoprodutotabelaOperadoraClassificacaoprodutoGrupoHistorico).HasColumnName("ID_SERVICOPRODUTOTABELA_OPERADORA_CLASSIFICACAOPRODUTO_GRUPO_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistoricoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistoricoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistoricoIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistoricoIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Grupo_Historico_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraClassificacaoProdutoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRemuneracaoServicoHistorico)
                    .HasName("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Historico");

                entity.Property(e => e.IdRemuneracaoServicoHistorico).HasColumnName("ID_REMUNERACAO_SERVICO_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMargem).HasColumnName("IN_MARGEM");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.PrValor)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_VALOR");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Historico_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoHistorico)
                    .HasForeignKey(d => new { d.IdServicoProdutoTabela, d.IdClassificacao, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_Operadora_ClassificacaoProduto_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Historico_FK1");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraClassificacaoProdutoMargens>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdOperadora, e.IdTipoOperador, e.DtVigencia });

                entity.ToTable("ServicoProdutoTabela_Operadora_ClassificacaoProduto_Margens");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipoOperador).HasColumnName("ID_TIPO_OPERADOR");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.PrMargem).HasColumnName("PR_MARGEM");

                entity.Property(e => e.VlMargem).HasColumnName("VL_MARGEM");

                entity.Property(e => e.VlMargemFinal).HasColumnName("VL_MARGEM_FINAL");

                entity.HasOne(d => d.IdTipoOperadorNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoMargens)
                    .HasForeignKey(d => d.IdTipoOperador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Margens_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoMargensIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Margens_Usuario");

                entity.HasOne(d => d.IdUsuarioDesativacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoMargensIdUsuarioDesativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioDesativacao)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Margens_Usuario1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraClassificacaoProdutoMargens)
                    .HasForeignKey(d => new { d.IdServicoProdutoTabela, d.IdClassificacao, d.IdOperadora })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Operadora_ClassificacaoProduto_Margens_ServicoProdutoTabela_Operadora_ClassificacaoProduto");
            });

            modelBuilder.Entity<ServicoProdutoTabelaOperadoraHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdOperadora, e.DtCadastro })
                    .HasName("ServicoProdutoTabela_Operadora_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Operadora_Historico");

                entity.HasIndex(e => new { e.InAtivo, e.IdOperadora, e.DtInicioVigencia, e.DtFinalVigencia }, "IX_ServicoProdutoTabela_Operadora_Historico_IN_ATIVO_ID_OPERADORA_DT_INICIO_VIGENCIA_DT_FINAL_VIGENCIA")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUsuario, "IX_ServicoProdutoTabela_Operadora_Historico_Usuario")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtFinalVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasDefaultValueSql("((882))");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraHistorico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Operadora_Historico_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraHistorico)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Operadora_Historico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaOperadoraHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ServicoProdutoTabela_Operadora_Historico_FK1");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlano>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdPlano })
                    .HasName("ServicoProdutoTabela_Plano_PK");

                entity.ToTable("ServicoProdutoTabela_Plano");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlano)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Plano_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlano)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Plano_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlano)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("Usuario_ServicoProdutoTabela_Plano_FK1");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoClassificacaoProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdPlano })
                    .HasName("ServicoProdutoTabela_Plano_ClassificacaoProduto_PK");

                entity.ToTable("ServicoProdutoTabela_Plano_ClassificacaoProduto");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProduto)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Plano_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProduto)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Plano_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProduto)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Plano_ClassificacaoProduto_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProduto)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativa>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdPlano })
                    .HasName("ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_PK");

                entity.ToTable("ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa");

                entity.HasIndex(e => new { e.IdClassificacao, e.IdServicoProdutoTabela, e.NrPrioridade, e.IdPlano }, "ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_PrioridadePlano")
                    .IsUnique();

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.NrPrioridade).HasColumnName("NR_PRIORIDADE");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Plano_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativa)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdServicoprodutotabelaPlanoClassificacaoprodutoAlternativaHistorico)
                    .HasName("ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico");

                entity.Property(e => e.IdServicoprodutotabelaPlanoClassificacaoprodutoAlternativaHistorico).HasColumnName("ID_SERVICOPRODUTOTABELA_PLANO_CLASSIFICACAOPRODUTO_ALTERNATIVA_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.NrPrioridade).HasColumnName("NR_PRIORIDADE");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistoricoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistoricoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistoricoIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistoricoIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoAlternativaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Alternativa_Historico_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoClassificacaoProdutoGrupo>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdPlano })
                    .HasName("ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_PK");

                entity.ToTable("ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdServicoprodutotabelaPlanoClassificacaoprodutoGrupoHistorico)
                    .HasName("ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico");

                entity.Property(e => e.IdServicoprodutotabelaPlanoClassificacaoprodutoGrupoHistorico).HasColumnName("ID_SERVICOPRODUTOTABELA_Plano_CLASSIFICACAOPRODUTO_GRUPO_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.DtVigenciaMargem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_MARGEM");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PrMargem)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistoricoIdAtributoPrecoBrasindiceNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindice)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_Atributo");

                entity.HasOne(d => d.IdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistoricoIdAtributoPrecoBrasindiceRestritoHospNavigation)
                    .HasForeignKey(d => d.IdAtributoPrecoBrasindiceRestritoHosp)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_Atributo1");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ClassificacaoProduto_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_FK1");

                entity.HasOne(d => d.IdTipoCodificacaoItemNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistoricoIdTipoCodificacaoItemNavigation)
                    .HasForeignKey(d => d.IdTipoCodificacaoItem)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_TipoDiverso6");

                entity.HasOne(d => d.IdTipoTabelaTissNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistoricoIdTipoTabelaTissNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaTiss)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_TipoDiverso7");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoGrupoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Grupo_Historico_Usuario");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoClassificacaoProdutoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdRemuneracaoServicoHistorico)
                    .HasName("ServicoProdutoTabela_Plano_ClassificacaoProduto_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Plano_ClassificacaoProduto_Historico");

                entity.Property(e => e.IdRemuneracaoServicoHistorico).HasColumnName("ID_REMUNERACAO_SERVICO_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.DtVigenciaDesconto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_DESCONTO");

                entity.Property(e => e.IdAtributoPrecoBrasindice).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE");

                entity.Property(e => e.IdAtributoPrecoBrasindiceRestritoHosp).HasColumnName("ID_ATRIBUTO_PRECO_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTipoCodificacaoItem).HasColumnName("ID_TIPO_CODIFICACAO_ITEM");

                entity.Property(e => e.IdTipoTabelaTiss).HasColumnName("ID_TIPO_TABELA_TISS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InControlaVigenciaProduto).HasColumnName("IN_CONTROLA_VIGENCIA_PRODUTO");

                entity.Property(e => e.InMargem).HasColumnName("IN_MARGEM");

                entity.Property(e => e.InMenorPreco).HasColumnName("IN_MENOR_PRECO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.PrDesconto)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrMargemBrasindiceRestritoHosp)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_MARGEM_BRASINDICE_RESTRITO_HOSP");

                entity.Property(e => e.PrValor)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_VALOR");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Historico_Usuario");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoHistorico)
                    .HasForeignKey(d => new { d.IdServicoProdutoTabela, d.IdClassificacao, d.IdPlano })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_Plano_ClassificacaoProduto_ServicoProdutoTabela_Plano_ClassificacaoProduto_Historico_FK1");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoClassificacaoProdutoMargens>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdClassificacao, e.IdPlano, e.IdTipoOperador, e.DtVigencia });

                entity.ToTable("ServicoProdutoTabela_Plano_ClassificacaoProduto_Margens");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdTipoOperador).HasColumnName("ID_TIPO_OPERADOR");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.PrMargem).HasColumnName("PR_MARGEM");

                entity.Property(e => e.VlMargem).HasColumnName("VL_MARGEM");

                entity.Property(e => e.VlMargemFinal).HasColumnName("VL_MARGEM_FINAL");

                entity.HasOne(d => d.IdTipoOperadorNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoMargens)
                    .HasForeignKey(d => d.IdTipoOperador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Margens_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoMargensIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Margens_Usuario");

                entity.HasOne(d => d.IdUsuarioDesativacaoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoMargensIdUsuarioDesativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioDesativacao)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Margens_Usuario1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoClassificacaoProdutoMargens)
                    .HasForeignKey(d => new { d.IdServicoProdutoTabela, d.IdClassificacao, d.IdPlano })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProdutoTabela_Plano_ClassificacaoProduto_Margens_ServicoProdutoTabela_Plano_ClassificacaoProduto");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPlanoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdPlano, e.DtCadastro })
                    .HasName("ServicoProdutoTabela_Plano_Historico_PK");

                entity.ToTable("ServicoProdutoTabela_Plano_Historico");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtFinalVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoHistorico)
                    .HasForeignKey(d => d.IdPlano)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoProdutoTabela_Plano_Historico_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoHistorico)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_Plano_Historico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPlanoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_ServicoProdutoTabela_Plano_Historico_FK1");
            });

            modelBuilder.Entity<ServicoProdutoTabelaPorteTabela>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdPorteTabela })
                    .HasName("ServicoProdutoTabela_PorteTabela_PK");

                entity.ToTable("ServicoProdutoTabela_PorteTabela");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdPorteTabela).HasColumnName("ID_PORTE_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPorteTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPorteTabela)
                    .HasForeignKey(d => d.IdPorteTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PorteTabela_ServicoProdutoTabela_PorteTabela_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoProdutoTabelaPorteTabela)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_ServicoProdutoTabela_PorteTabela_FK1");
            });

            modelBuilder.Entity<ServicoQuantidadeAutorizada>(entity =>
            {
                entity.HasKey(e => e.IdServicoQtdeAutorizada)
                    .HasName("ServicoQuantidadeAutorizada_PK");

                entity.Property(e => e.IdServicoQtdeAutorizada).HasColumnName("ID_SERVICO_QTDE_AUTORIZADA");

                entity.Property(e => e.DtFinal)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdFatorAplicacao).HasColumnName("ID_FATOR_APLICACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioDtFinal).HasColumnName("ID_USUARIO_DT_FINAL");

                entity.Property(e => e.IdUsuarioDtInicio).HasColumnName("ID_USUARIO_DT_INICIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InExcedenteNaoCobrado)
                    .HasColumnName("IN_EXCEDENTE_NAO_COBRADO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InLancarComplemento)
                    .HasColumnName("IN_LANCAR_COMPLEMENTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnPeriodo).HasColumnName("QN_PERIODO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFatorAplicacaoNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizadaIdFatorAplicacaoNavigation)
                    .HasForeignKey(d => d.IdFatorAplicacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ServicoQuantidadeAutorizada_FK1");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizada)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_ServicoQuantidadeAutorizada_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizada)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_ServicoQuantidadeAutorizada_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizada)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoQuantidadeAutorizada_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizadaIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_ServicoQuantidadeAutorizada_FK2");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizada)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_ServicoQuantidadeAutorizada_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioDtFinalNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizadaIdUsuarioDtFinalNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtFinal)
                    .HasConstraintName("Usuario_ServicoQuantidadeAutorizada_FK2");

                entity.HasOne(d => d.IdUsuarioDtInicioNavigation)
                    .WithMany(p => p.ServicoQuantidadeAutorizadaIdUsuarioDtInicioNavigation)
                    .HasForeignKey(d => d.IdUsuarioDtInicio)
                    .HasConstraintName("Usuario_ServicoQuantidadeAutorizada_FK1");
            });

            modelBuilder.Entity<ServicoReducaoAcrescimo>(entity =>
            {
                entity.HasKey(e => e.IdServicoReducaoAcrescimo)
                    .HasName("ServicoReducaoAcrescimo_PK");

                entity.Property(e => e.IdServicoReducaoAcrescimo).HasColumnName("ID_SERVICO_REDUCAO_ACRESCIMO");

                entity.Property(e => e.DtAtivacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATIVACAO");

                entity.Property(e => e.DtInativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INATIVACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioAtivacao).HasColumnName("ID_USUARIO_ATIVACAO");

                entity.Property(e => e.IdUsuarioInativacao).HasColumnName("ID_USUARIO_INATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.PrCustoOperacional).HasColumnName("PR_CUSTO_OPERACIONAL");

                entity.Property(e => e.PrHonorario).HasColumnName("PR_HONORARIO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoReducaoAcrescimo)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("Pessoa_ServicoReducaoAcrescimo_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoReducaoAcrescimo)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_ServicoReducaoAcrescimo_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoReducaoAcrescimo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoReducaoAcrescimo_Servico");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ServicoReducaoAcrescimo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_ServicoReducaoAcrescimo_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioAtivacaoNavigation)
                    .WithMany(p => p.ServicoReducaoAcrescimoIdUsuarioAtivacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtivacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoReducaoAcrescimo_UsuarioAtivacao");

                entity.HasOne(d => d.IdUsuarioInativacaoNavigation)
                    .WithMany(p => p.ServicoReducaoAcrescimoIdUsuarioInativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioInativacao)
                    .HasConstraintName("FK_ServicoReducaoAcrescimo_UsuarioInativacao");
            });

            modelBuilder.Entity<ServicoRegiaoAplicacao>(entity =>
            {
                entity.HasKey(e => new { e.IdRegiaoAplicacao, e.IdServico })
                    .HasName("Servico_RegiaoAplicacao_PK");

                entity.ToTable("Servico_RegiaoAplicacao");

                entity.Property(e => e.IdRegiaoAplicacao).HasColumnName("ID_REGIAO_APLICACAO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InAtivado)
                    .IsRequired()
                    .HasColumnName("IN_ATIVADO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdRegiaoAplicacaoNavigation)
                    .WithMany(p => p.ServicoRegiaoAplicacao)
                    .HasForeignKey(d => d.IdRegiaoAplicacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Servico_RegiaoAplicacao_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoRegiaoAplicacao)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_RegiaoAplicacao_FK1");
            });

            modelBuilder.Entity<ServicoRegistroTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdInstrumentoRegistro });

                entity.ToTable("Servico_RegistroTipo");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdInstrumentoRegistro).HasColumnName("ID_INSTRUMENTO_REGISTRO");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdInstrumentoRegistroNavigation)
                    .WithMany(p => p.ServicoRegistroTipo)
                    .HasForeignKey(d => d.IdInstrumentoRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_RegistroTipo_TipoDiversos");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoRegistroTipo)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_RegistroTipo_Servico");
            });

            modelBuilder.Entity<ServicoServicoProdutoTabela>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdServicoProdutoTabela })
                    .HasName("Servico_ServicoProdutoTabela_PK");

                entity.ToTable("Servico_ServicoProdutoTabela");

                entity.HasIndex(e => e.IdServicoProdutoTabela, "IX_Servico_ServicoProdutoTabela_ID_SERVICO_PRODUTO_TABELA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabela)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_Servico_ServicoProdutoTabela_FK1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabela)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ServicoProdutoTabela_Servico_ServicoProdutoTabela_FK1");
            });

            modelBuilder.Entity<ServicoServicoProdutoTabelaOperadora>(entity =>
            {
                entity.HasKey(e => e.IdServicoServicoprodutotabelaOperadora)
                    .HasName("Servico_ServicoProdutoTabela_Operadora_PK");

                entity.ToTable("Servico_ServicoProdutoTabela_Operadora");

                entity.Property(e => e.IdServicoServicoprodutotabelaOperadora).HasColumnName("ID_SERVICO_SERVICOPRODUTOTABELA_OPERADORA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA")
                    .HasDefaultValueSql("('2011-01-01 00:00:00.000')");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InIncideCustoOperacional)
                    .IsRequired()
                    .HasColumnName("IN_INCIDE_CUSTO_OPERACIONAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InIncideFilme).HasColumnName("IN_INCIDE_FILME");

                entity.Property(e => e.InIncideHonorario).HasColumnName("IN_INCIDE_HONORARIO");

                entity.Property(e => e.InRegraCustoOperacionalSimultaneos).HasColumnName("IN_REGRA_CUSTO_OPERACIONAL_SIMULTANEOS");

                entity.Property(e => e.InServicosIguais).HasColumnName("IN_SERVICOS_IGUAIS");

                entity.Property(e => e.PrDemaisServico).HasColumnName("PR_DEMAIS_SERVICO");

                entity.Property(e => e.PrSegundoServico).HasColumnName("PR_SEGUNDO_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("Pessoa_Servico_ServicoProdutoTabela_Operadora_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK_Servico_ServicoProdutoTabela_Operadora_Plano");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_Servico_ServicoProdutoTabela_Operadora_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Servico_ServicoProdutoTabela_Operadora_UnidadeOrganizacional");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ServicoServicoProdutoTabelaOperadora)
                    .HasForeignKey(d => new { d.IdServicoProdutoTabela, d.IdOperadora })
                    .HasConstraintName("ServicoProdutoTabela_Operadora_Servico_ServicoProdutoTabela_Operadora_FK1");
            });

            modelBuilder.Entity<ServicoServicoProdutoTabelaServicoIncidencia>(entity =>
            {
                entity.HasKey(e => new { e.IdServicoProdutoTabela, e.IdServico, e.IdServicoIncidencia })
                    .HasName("Servico_ServicoProdutoTabela_ServicoIncidencia_PK");

                entity.ToTable("Servico_ServicoProdutoTabela_ServicoIncidencia");

                entity.HasIndex(e => new { e.IdServicoProdutoTabela, e.IdServicoIncidencia }, "IX_Servico_ServicoProdutoTabela_ServicoIncidencia_ID_SERVICO_PRODUTO_TABELA_ID_SERVICO_INCIDENCIA");

                entity.HasIndex(e => new { e.IdServicoProdutoTabela, e.IdServico, e.IdServicoIncidencia, e.VlIncidencia }, "IX_Servico_ServicoProdutoTabela_ServicoIncidencia_K2_K3_K4_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdServicoProdutoTabela, e.IdServicoIncidencia, e.VlIncidencia }, "IX_Servico_ServicoProdutoTabela_ServicoIncidencia_K2_K4_K1")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdServico, e.IdServicoProdutoTabela }, "IX_Servico_ServicoProdutoTabela_ServicoIncidencia_K3_K2_4_1")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");

                entity.HasOne(d => d.IdServicoIncidenciaNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabelaServicoIncidencia)
                    .HasForeignKey(d => d.IdServicoIncidencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atributo_Servico_ServicoProdutoTabela_ServicoIncidencia_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoServicoProdutoTabelaServicoIncidencia)
                    .HasForeignKey(d => new { d.IdServico, d.IdServicoProdutoTabela })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoProdutoTabela_Servico_ServicoProdutoTabela_ServicoIncidencia_FK1");
            });

            modelBuilder.Entity<ServicoTraducao>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdServicoReferencia })
                    .HasName("ServicoTraducao_PK");

                entity.HasIndex(e => e.IdServicoReferencia, "IX_ServicoTraducao_K2")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoTraducaoIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoTraducao_FK1");

                entity.HasOne(d => d.IdServicoReferenciaNavigation)
                    .WithMany(p => p.ServicoTraducaoIdServicoReferenciaNavigation)
                    .HasForeignKey(d => d.IdServicoReferencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoTraducao_FK2");
            });

            modelBuilder.Entity<ServicoTraducaoAuxilio>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("ID_SERVICO_REFERENCIA");
            });

            modelBuilder.Entity<ServicoTraducaoBasica>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdCbhpm2).HasColumnName("CD_CBHPM2");

                entity.Property(e => e.CdCbhpm3).HasColumnName("CD_CBHPM3");

                entity.Property(e => e.CdCbhpm4).HasColumnName("CD_CBHPM4");

                entity.Property(e => e.CdLpm90).HasColumnName("CD_LPM90");

                entity.Property(e => e.CdLpm92).HasColumnName("CD_LPM92");

                entity.Property(e => e.CdLpm96).HasColumnName("CD_LPM96");

                entity.Property(e => e.CdLpm99).HasColumnName("CD_LPM99");

                entity.Property(e => e.Procedimento).IsRequired();
            });

            modelBuilder.Entity<ServicoTraducaoBasicaI>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdTab1)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB1");

                entity.Property(e => e.CdTab11)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB11");

                entity.Property(e => e.CdTab12)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB12");

                entity.Property(e => e.CdTab13)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB13");

                entity.Property(e => e.CdTab14)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB14");

                entity.Property(e => e.CdTab15)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB15");

                entity.Property(e => e.CdTab16)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB16");

                entity.Property(e => e.CdTab17)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB17");

                entity.Property(e => e.CdTab18)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB18");

                entity.Property(e => e.CdTab19)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB19");

                entity.Property(e => e.CdTab20)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB20");

                entity.Property(e => e.CdTab21)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB21");

                entity.Property(e => e.CdTab3)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB3");

                entity.Property(e => e.CdTab4)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB4");

                entity.Property(e => e.CdTab5)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB5");

                entity.Property(e => e.CdTab6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB6");

                entity.Property(e => e.CdTab7)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB7");

                entity.Property(e => e.CdTab8)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB8");

                entity.Property(e => e.CdTab9)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB9");
            });

            modelBuilder.Entity<ServicoTraducaoBasicaIi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ServicoTraducaoBasicaII");

                entity.Property(e => e.CdTab1)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB1");

                entity.Property(e => e.CdTab11)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB11");

                entity.Property(e => e.CdTab12)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB12");

                entity.Property(e => e.CdTab13)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB13");

                entity.Property(e => e.CdTab14)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB14");

                entity.Property(e => e.CdTab15)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB15");

                entity.Property(e => e.CdTab16)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB16");

                entity.Property(e => e.CdTab17)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB17");

                entity.Property(e => e.CdTab18)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB18");

                entity.Property(e => e.CdTab19)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB19");

                entity.Property(e => e.CdTab20)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB20");

                entity.Property(e => e.CdTab21)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB21");

                entity.Property(e => e.CdTab3)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB3");

                entity.Property(e => e.CdTab4)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB4");

                entity.Property(e => e.CdTab5)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB5");

                entity.Property(e => e.CdTab6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB6");

                entity.Property(e => e.CdTab7)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB7");

                entity.Property(e => e.CdTab8)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB8");

                entity.Property(e => e.CdTab9)
                    .IsUnicode(false)
                    .HasColumnName("CD_TAB9");
            });

            modelBuilder.Entity<ServicoTraducaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdServicoTraducaoHistorico)
                    .HasName("ServicoTraducaoHistorico_PK");

                entity.HasIndex(e => new { e.IdServico, e.IdServicoReferencia }, "IX_ServicoTraducaoHistorico_ID_SERVICO_ID_SERVICO_REFERENCIA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdServicoTraducaoHistorico).HasColumnName("ID_SERVICO_TRADUCAO_HISTORICO");

                entity.Property(e => e.DtFinalVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.IdUsuarioFinalVigencia).HasColumnName("ID_USUARIO_FINAL_VIGENCIA");

                entity.Property(e => e.IdUsuarioInicioVigencia).HasColumnName("ID_USUARIO_INICIO_VIGENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoTraducaoHistoricoIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoTraducaoHistorico_FK1");

                entity.HasOne(d => d.IdServicoReferenciaNavigation)
                    .WithMany(p => p.ServicoTraducaoHistoricoIdServicoReferenciaNavigation)
                    .HasForeignKey(d => d.IdServicoReferencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoTraducaoHistorico_FK2");
            });

            modelBuilder.Entity<ServicoTraducaoSusGenerico>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ServicoTraducao_SUS_Generico");

                entity.HasIndex(e => e.IdServico, "IX_ServicoTraducao_SUS_Generico_K1")
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdServico, "IX_ServicoTraducao_SUS_Generico_K1_2_3_4")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdEspecialidadeMedica, "IX_ServicoTraducao_SUS_Generico_K4_1_2_3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CdServicoSusGenerico)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("CD_SERVICO_SUS_GENERICO")
                    .IsFixedLength(true);

                entity.Property(e => e.IdEspecialidadeMedica).HasColumnName("ID_ESPECIALIDADE_MEDICA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.TxDescricaoSusGenerico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SUS_GENERICO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK_ServicoTraducao_SUS_Generico_ServicoTraducao_SUS_Generico");
            });

            modelBuilder.Entity<ServicoTraducaoSusGenericoCiha>(entity =>
            {
                entity.HasKey(e => e.IdServicotraducaoSusGenericoCiha);

                entity.ToTable("ServicoTraducao_SUS_Generico_CIHA");

                entity.Property(e => e.IdServicotraducaoSusGenericoCiha).HasColumnName("ID_SERVICOTRADUCAO_SUS_GENERICO_CIHA");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCiha).HasColumnName("ID_SERVICO_CIHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoTraducaoSusGenericoCihaIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("FK_ServicoTraducao_SUS_Generico_CIHA_Servico");

                entity.HasOne(d => d.IdServicoCihaNavigation)
                    .WithMany(p => p.ServicoTraducaoSusGenericoCihaIdServicoCihaNavigation)
                    .HasForeignKey(d => d.IdServicoCiha)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoTraducao_SUS_Generico_CIHA_Servico1");
            });

            modelBuilder.Entity<ServicoTraducaoVigencia>(entity =>
            {
                entity.HasKey(e => e.IdServicoTraducao);

                entity.HasIndex(e => new { e.InAtivo, e.IdServico, e.IdServicoProdutoTabela, e.IdServicoReferencia }, "_dta_index_ServicoTraducaoVigencia_114_1290240147__K13_K3_K6_K2")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdServicoTraducao).HasColumnName("ID_SERVICO_TRADUCAO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtDesativacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DESATIVACAO");

                entity.Property(e => e.DtFinalVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_VIGENCIA");

                entity.Property(e => e.DtInicioVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioDesativacao).HasColumnName("ID_USUARIO_DESATIVACAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.ServicoTraducaoVigencia)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_ServicoTraducaoVigencia_Pessoa");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.ServicoTraducaoVigencia)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("FK_ServicoTraducaoVigencia_Plano");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoTraducaoVigenciaIdServicoNavigation)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoTraducaoVigencia_Servico1");

                entity.HasOne(d => d.IdServicoProdutoTabelaNavigation)
                    .WithMany(p => p.ServicoTraducaoVigencia)
                    .HasForeignKey(d => d.IdServicoProdutoTabela)
                    .HasConstraintName("FK_ServicoTraducaoVigencia_ServicoProdutoTabela");

                entity.HasOne(d => d.IdServicoReferenciaNavigation)
                    .WithMany(p => p.ServicoTraducaoVigenciaIdServicoReferenciaNavigation)
                    .HasForeignKey(d => d.IdServicoReferencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoTraducaoVigencia_Servico");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.ServicoTraducaoVigenciaIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoTraducaoVigencia_Usuario");

                entity.HasOne(d => d.IdUsuarioDesativacaoNavigation)
                    .WithMany(p => p.ServicoTraducaoVigenciaIdUsuarioDesativacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioDesativacao)
                    .HasConstraintName("FK_ServicoTraducaoVigencia_Usuario1");
            });

            modelBuilder.Entity<ServicoTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.NrPorteAnestesico)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxMoeda)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOEDA");

                entity.Property(e => e.TxPorteProcedimento)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlCustoOperacionalApartamento)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL_APARTAMENTO");

                entity.Property(e => e.VlHonorarioApartamento)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIO_APARTAMENTO");

                entity.Property(e => e.VlHonorarios)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");

                entity.Property(e => e.VlHonorariosApartamentoHospitalDia)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS_APARTAMENTO_HOSPITAL_DIA");
            });

            modelBuilder.Entity<ServicoUnicoAtendimento>(entity =>
            {
                entity.HasKey(e => new { e.IdAtendimento, e.IdServico })
                    .HasName("ServicoUnicoAtendimento_PK");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.ServicoUnicoAtendimento)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atendimento_ServicoUnicoAtendimento_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoUnicoAtendimento)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_ServicoUnicoAtendimento_FK1");
            });

            modelBuilder.Entity<ServicoUnidadeRepasse>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdUnidadeRepasse });

                entity.ToTable("Servico_UnidadeRepasse");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeRepasse).HasColumnName("ID_UNIDADE_REPASSE");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoUnidadeRepasse)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_UnidadeRepasse_Servico");

                entity.HasOne(d => d.IdUnidadeRepasseNavigation)
                    .WithMany(p => p.ServicoUnidadeRepasse)
                    .HasForeignKey(d => d.IdUnidadeRepasse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_UnidadeRepasse_UnidadeOrganizacional");
            });

            modelBuilder.Entity<ServiçosPorUnidades>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Serviços por Unidades");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Sessao>(entity =>
            {
                entity.HasKey(e => e.IdSessao)
                    .HasName("Sessao_PK");

                entity.HasIndex(e => new { e.IdUsuario, e.TxUserSession, e.DtFimSessao }, "IX_SessaoUpdate")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdSessao).HasColumnName("ID_SESSAO");

                entity.Property(e => e.DtFimSessao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_SESSAO");

                entity.Property(e => e.DtInicioSessao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_SESSAO");

                entity.Property(e => e.DtUltimaAtividade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ULTIMA_ATIVIDADE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InSessaoAbortada).HasColumnName("IN_SESSAO_ABORTADA");

                entity.Property(e => e.NmBrowser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_BROWSER");

                entity.Property(e => e.NmMaquina)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_MAQUINA");

                entity.Property(e => e.TxIpCliente)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_IP_CLIENTE");

                entity.Property(e => e.TxUrl)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("TX_URL");

                entity.Property(e => e.TxUserSession)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("TX_USER_SESSION");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Sessao)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Sessao_FK1");
            });

            modelBuilder.Entity<SessaoOncologia>(entity =>
            {
                entity.HasKey(e => e.IdSessaoOncologia);

                entity.Property(e => e.IdSessaoOncologia).HasColumnName("ID_SESSAO_ONCOLOGIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtPlanejada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PLANEJADA");

                entity.Property(e => e.DtRealizada)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REALIZADA");

                entity.Property(e => e.IdPlanoTratamentoOncologiaProtocolo).HasColumnName("ID_PLANO_TRATAMENTO_ONCOLOGIA_PROTOCOLO");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdStatus)
                    .HasColumnName("ID_STATUS")
                    .HasDefaultValueSql("((9494))");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NrCiclo).HasColumnName("NR_CICLO");

                entity.Property(e => e.NrSessao).HasColumnName("NR_SESSAO");

                entity.Property(e => e.TxDiaAplicacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_DIA_APLICACAO");

                entity.Property(e => e.TxObservacaoEnfermagem)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_ENFERMAGEM");

                entity.Property(e => e.TxObservacaoMedica)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_MEDICA");

                entity.HasOne(d => d.IdPlanoTratamentoOncologiaProtocoloNavigation)
                    .WithMany(p => p.SessaoOncologia)
                    .HasForeignKey(d => d.IdPlanoTratamentoOncologiaProtocolo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_PlanoTratamentoOncologia_Protocolo");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.SessaoOncologia)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .HasConstraintName("FK_SessaoOncologia_Solicitacao");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.SessaoOncologia)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Status");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SessaoOncologia)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Usuario");
            });

            modelBuilder.Entity<SessaoOncologiaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdSessaoOncologiaHistorico);

                entity.ToTable("SessaoOncologia_Historico");

                entity.Property(e => e.IdSessaoOncologiaHistorico).HasColumnName("ID_SESSAO_ONCOLOGIA_HISTORICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdSessaoOncologia).HasColumnName("ID_SESSAO_ONCOLOGIA");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdSessaoOncologiaNavigation)
                    .WithMany(p => p.SessaoOncologiaHistorico)
                    .HasForeignKey(d => d.IdSessaoOncologia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Historico_SessaoOncologia");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.SessaoOncologiaHistorico)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Historico_Status");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SessaoOncologiaHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Historico_Usuario");
            });

            modelBuilder.Entity<SessaoOncologiaItem>(entity =>
            {
                entity.HasKey(e => e.IdSessaoOncologiaItem);

                entity.ToTable("SessaoOncologia_Item");

                entity.Property(e => e.IdSessaoOncologiaItem).HasColumnName("ID_SESSAO_ONCOLOGIA_ITEM");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdFaseInfusao).HasColumnName("ID_FASE_INFUSAO");

                entity.Property(e => e.IdInstrucaoEspecial).HasColumnName("ID_INSTRUCAO_ESPECIAL");

                entity.Property(e => e.IdOrdemInfusao).HasColumnName("ID_ORDEM_INFUSAO");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdSessaoOncologia).HasColumnName("ID_SESSAO_ONCOLOGIA");

                entity.Property(e => e.IdSessaoOncologiaItemPai).HasColumnName("ID_SESSAO_ONCOLOGIA_ITEM_PAI");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUnidadeMedidaPadrao).HasColumnName("ID_UNIDADE_MEDIDA_PADRAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdViaAdministracao).HasColumnName("ID_VIA_ADMINISTRACAO");

                entity.Property(e => e.NrAssociacao).HasColumnName("NR_ASSOCIACAO");

                entity.Property(e => e.QnDoseAjustada)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE_AJUSTADA");

                entity.Property(e => e.QnDoseCalculada)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE_CALCULADA");

                entity.Property(e => e.QnDosePadrao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_DOSE_PADRAO");

                entity.Property(e => e.QnTempoInfusao)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_TEMPO_INFUSAO");

                entity.Property(e => e.TxJustificativa)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.VlConcentracao).HasColumnName("VL_CONCENTRACAO");

                entity.HasOne(d => d.IdFaseInfusaoNavigation)
                    .WithMany(p => p.SessaoOncologiaItemIdFaseInfusaoNavigation)
                    .HasForeignKey(d => d.IdFaseInfusao)
                    .HasConstraintName("FK_SessaoOncologia_Item_FaseInfusao");

                entity.HasOne(d => d.IdInstrucaoEspecialNavigation)
                    .WithMany(p => p.SessaoOncologiaItemIdInstrucaoEspecialNavigation)
                    .HasForeignKey(d => d.IdInstrucaoEspecial)
                    .HasConstraintName("FK_SessaoOncologia_Item_InstrucaoEspecial");

                entity.HasOne(d => d.IdOrdemInfusaoNavigation)
                    .WithMany(p => p.SessaoOncologiaItemIdOrdemInfusaoNavigation)
                    .HasForeignKey(d => d.IdOrdemInfusao)
                    .HasConstraintName("FK_SessaoOncologia_Item_Ordem_Infusao");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.SessaoOncologiaItem)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Item_Produto");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.SessaoOncologiaItem)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_SessaoOncologia_Item_ProdutoDetalhe");

                entity.HasOne(d => d.IdSessaoOncologiaNavigation)
                    .WithMany(p => p.SessaoOncologiaItem)
                    .HasForeignKey(d => d.IdSessaoOncologia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Item_SessaoOncologia");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemNavigation)
                    .WithMany(p => p.SessaoOncologiaItem)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagem)
                    .HasConstraintName("FK_SessaoOncologia_Item_Solicitacao_PD_Enfermagem");

                entity.HasOne(d => d.IdTipoItemNavigation)
                    .WithMany(p => p.SessaoOncologiaItemIdTipoItemNavigation)
                    .HasForeignKey(d => d.IdTipoItem)
                    .HasConstraintName("FK_SessaoOncologia_Item_TipoItem");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.SessaoOncologiaItemIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_SessaoOncologia_Item_UnidadeMedida");

                entity.HasOne(d => d.IdUnidadeMedidaPadraoNavigation)
                    .WithMany(p => p.SessaoOncologiaItemIdUnidadeMedidaPadraoNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedidaPadrao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessaoOncologia_Item_UnidadeMedidaPadrao");

                entity.HasOne(d => d.IdViaAdministracaoNavigation)
                    .WithMany(p => p.SessaoOncologiaItemIdViaAdministracaoNavigation)
                    .HasForeignKey(d => d.IdViaAdministracao)
                    .HasConstraintName("FK_SessaoOncologia_Item_ViaAdministracao");
            });

            modelBuilder.Entity<SessaoPortal>(entity =>
            {
                entity.HasKey(e => e.IdSessaoPortal)
                    .HasName("PK__SessaoPo__15800B2B3666D387");

                entity.Property(e => e.IdSessaoPortal).HasColumnName("ID_SESSAO_PORTAL");

                entity.Property(e => e.DtAcesso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ACESSO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdPaciente).HasColumnName("ID_PACIENTE");

                entity.Property(e => e.IpCliente)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("IP_CLIENTE");

                entity.HasOne(d => d.IdPacienteNavigation)
                    .WithMany(p => p.SessaoPortal)
                    .HasForeignKey(d => d.IdPaciente)
                    .HasConstraintName("FK__SessaoPor__ID_PA__39434032");
            });

            modelBuilder.Entity<SimproTuss>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SIMPRO_TUSS");

                entity.Property(e => e.CdApresentacao).HasColumnName("CD_APRESENTACAO");

                entity.Property(e => e.CdBarras).HasColumnName("CD_BARRAS");

                entity.Property(e => e.CdFabricante).HasColumnName("CD_FABRICANTE");

                entity.Property(e => e.CdPrecoTipo)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRECO_TIPO");

                entity.Property(e => e.CdProduto)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRODUTO");

                entity.Property(e => e.CdTiss)
                    .IsUnicode(false)
                    .HasColumnName("CD_TISS");

                entity.Property(e => e.CdTuss)
                    .IsUnicode(false)
                    .HasColumnName("CD_TUSS");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InProdutoLista).HasColumnName("IN_PRODUTO_LISTA");

                entity.Property(e => e.NmApresentacao).HasColumnName("NM_APRESENTACAO");

                entity.Property(e => e.NmFabricante)
                    .IsUnicode(false)
                    .HasColumnName("NM_FABRICANTE");

                entity.Property(e => e.NmProduto)
                    .IsUnicode(false)
                    .HasColumnName("NM_PRODUTO");

                entity.Property(e => e.NrEdicao).HasColumnName("NR_EDICAO");

                entity.Property(e => e.NrEdicaoAlteracao).HasColumnName("NR_EDICAO_ALTERACAO");

                entity.Property(e => e.PrIpi).HasColumnName("PR_IPI");

                entity.Property(e => e.QnFracionamento).HasColumnName("QN_FRACIONAMENTO");

                entity.Property(e => e.VlProduto)
                    .HasColumnType("money")
                    .HasColumnName("VL_PRODUTO");

                entity.Property(e => e.VlProdutoFracionado)
                    .HasColumnType("money")
                    .HasColumnName("VL_PRODUTO_FRACIONADO");
            });

            modelBuilder.Entity<SismamaCargaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdSismamaCargaHistorico);

                entity.Property(e => e.IdSismamaCargaHistorico).HasColumnName("ID_SISMAMA_CARGA_HISTORICO");

                entity.Property(e => e.DtCarga)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CARGA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxNomeArquivo)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_ARQUIVO");
            });

            modelBuilder.Entity<SismamaCargaLog>(entity =>
            {
                entity.HasKey(e => e.IdSismamaCargaLog);

                entity.Property(e => e.IdSismamaCargaLog).HasColumnName("ID_SISMAMA_CARGA_LOG");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdSismamaCargaHistorico).HasColumnName("ID_SISMAMA_CARGA_HISTORICO");

                entity.Property(e => e.TxLinha)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA");

                entity.Property(e => e.TxObservacao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdSismamaCargaHistoricoNavigation)
                    .WithMany(p => p.SismamaCargaLog)
                    .HasForeignKey(d => d.IdSismamaCargaHistorico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SismamaCargaLog_SismamaCargaHistorico_FK1");
            });

            modelBuilder.Entity<SituacaoAprovacaoItemOpme>(entity =>
            {
                entity.HasKey(e => new { e.IdSituacaoAprovacaoItem, e.IdUnidadeOrganizacional })
                    .HasName("SituacaoAprovacaoItemOPME_PK");

                entity.ToTable("SituacaoAprovacaoItemOPME");

                entity.Property(e => e.IdSituacaoAprovacaoItem).HasColumnName("ID_SITUACAO_APROVACAO_ITEM");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxDescAprovacaoItem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_APROVACAO_ITEM");
            });

            modelBuilder.Entity<SituacaoConta>(entity =>
            {
                entity.HasKey(e => e.IdSituacaoConta)
                    .HasName("SituacaoConta_PK");

                entity.Property(e => e.IdSituacaoConta).HasColumnName("ID_SITUACAO_CONTA");

                entity.Property(e => e.InCobranca).HasColumnName("IN_COBRANCA");

                entity.Property(e => e.InLiberacontapararepasse).HasColumnName("IN_LIBERACONTAPARAREPASSE");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<SituacaoDaConta>(entity =>
            {
                entity.HasKey(e => new { e.IdConta, e.IdSituacaoConta, e.IdUnidadeOrganizacional })
                    .HasName("SituacaoDaConta_PK");

                entity.HasIndex(e => e.IdConta, "IX_SituacaoDaConta_Conta")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdSituacaoConta, "IX_SituacaoDaConta_ID_SITUACAO_CONTA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdConta, e.IdSituacaoConta, e.IdUnidadeOrganizacional, e.DtLancamento }, "IX_SituacaoDaConta_K2_K3_K4_K5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdSituacaoConta }, "IX_SituacaoDaConta_K4_K3_2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdSituacaoConta).HasColumnName("ID_SITUACAO_CONTA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.HasOne(d => d.IdSituacaoContaNavigation)
                    .WithMany(p => p.SituacaoDaConta)
                    .HasForeignKey(d => d.IdSituacaoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SituacaoConta_SituacaoDaConta_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.SituacaoDaConta)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_SituacaoDaConta_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SituacaoDaConta)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_SituacaoDaConta_Usuario");
            });

            modelBuilder.Entity<SituacaoDaContaHistorico>(entity =>
            {
                entity.HasKey(e => e.IdSituacaodacontaHistorico)
                    .HasName("SituacaoDaContaHistorico_PK");

                entity.HasIndex(e => e.IdConta, "IX_SituacaoDaContaHistorico_ID_CONTA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdSituacaodacontaHistorico).HasColumnName("ID_SITUACAODACONTA_HISTORICO");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdSituacaoConta).HasColumnName("ID_SITUACAO_CONTA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioOperacao).HasColumnName("ID_USUARIO_OPERACAO");

                entity.HasOne(d => d.IdSituacaoContaNavigation)
                    .WithMany(p => p.SituacaoDaContaHistorico)
                    .HasForeignKey(d => d.IdSituacaoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SituacaoConta_SituacaoDaContaHistorico_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.SituacaoDaContaHistorico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_SituacaoDaContaHistorico_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SituacaoDaContaHistoricoIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("SituacaoDaContaHistorico_Usuario_FK1");

                entity.HasOne(d => d.IdUsuarioOperacaoNavigation)
                    .WithMany(p => p.SituacaoDaContaHistoricoIdUsuarioOperacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioOperacao)
                    .HasConstraintName("SituacaoDaContaHistorico_Usuario_FK2");
            });

            modelBuilder.Entity<SituacaoLote>(entity =>
            {
                entity.HasKey(e => e.IdSituacaoLote)
                    .HasName("SituacaoLote_PK");

                entity.Property(e => e.IdSituacaoLote).HasColumnName("ID_SITUACAO_LOTE");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<Solicitacao>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacao)
                    .HasName("Solicitacao_PK");

                entity.HasIndex(e => e.IdAtendimento, "IX_Solicitacao_ID_ATENDIMENTO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatusSolicitacao, e.IdTipoSolicitacao, e.IdUnidadeSolicitante }, "IX_Solicitacao_ID_STATUS_SOLICITACAO_ID_TIPO_SOLICITACAO_ID_UNIDADE_SOLICITANTE")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdTipoSolicitacao, e.DtSolicitacao, e.IdStatusSolicitacao, e.DtValidade }, "IX_Solicitacao_ID_TIPO_SOLICITACAO_DT_SOLICITACAO_ID_STATUS_SOLICITACAO_DT_VALIDADE")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdTipoSolicitacao, e.IdAtendimento, e.IdStatusSolicitacao }, "IX_Solicitacao_ID_TIPO_SOLICITACAO_ID_ATENDIMENTO_ID_STATUS_SOLICITACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdTipoSolicitacao, e.IdStatusSolicitacao, e.IdUnidadeExecutora }, "IX_Solicitacao_ID_TIPO_SOLICITACAO_ID_STATUS_SOLICITACAO_ID_UNIDADE_EXECUTORA")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdTipoSolicitacao, e.IdUnidadeExecutora }, "IX_Solicitacao_ID_TIPO_SOLICITACAO_ID_UNIDADE_EXECUTORA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdTipoSolicitacao, e.IdUnidadeExecutora, e.IdStatusSolicitacao }, "IX_Solicitacao_ID_TIPO_SOLICITACAO_ID_UNIDADE_EXECUTORA_ID_STATUS_SOLICITACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeExecutora, e.IdUnidadeSolicitante, e.IdStatusSolicitacao, e.IdTipoSolicitacao }, "IX_Solicitacao_ID_UNIDADE_EXECUTORA_ID_UNIDADE_SOLICITANTE_ID_STATUS_SOLICITACAO_ID_TIPO_SOLICITACAO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdUnidadeExecutora, e.IdUnidadeSolicitante, e.IdTipoSolicitacao }, "IX_Solicitacao_ID_UNIDADE_EXECUTORA_ID_UNIDADE_SOLICITANTE_ID_TIPO_SOLICITACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeSolicitante, e.IdStatusSolicitacao, e.IdTipoSolicitacao }, "IX_Solicitacao_ID_UNIDADE_SOLICITANTE_ID_STATUS_SOLICITACAO_ID_TIPO_SOLICITACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeSolicitante, e.IdTipoSolicitacao }, "IX_Solicitacao_ID_UNIDADE_SOLICITANTE_ID_TIPO_SOLICITACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdAtendimento, "IX_Solicitacao_K11")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdMedico, "IX_Solicitacao_K12_1_11")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DtValidade, "IX_Solicitacao_K13")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.DtSolicitacao, "IX_Solicitacao_K3")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdUnidadeSolicitante, e.IdAtendimento }, "IX_Solicitacao_K5_K11")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdSolicitacao)
                    .HasColumnName("ID_SOLICITACAO")
                    .HasComment("PK da Tabela. Identificador unico.");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO")
                    .HasComment("Data em que a solicitação foi atendida.");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtCancelamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CANCELAMENTO");

                entity.Property(e => e.DtGeracaoPrescricao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO_PRESCRICAO");

                entity.Property(e => e.DtLiberacaoLeito)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIBERACAO_LEITO");

                entity.Property(e => e.DtNecessidadeAtendimento)
                    .HasColumnType("date")
                    .HasColumnName("DT_NECESSIDADE_ATENDIMENTO")
                    .HasComment("Data que o usuário necessita do produto entregue para orientar o setor de compra.");

                entity.Property(e => e.DtPrevistaAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_PREVISTA_ATENDIMENTO")
                    .HasComment("Data prevista de atendimento à solicitação.");

                entity.Property(e => e.DtRecebimentoSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RECEBIMENTO_SOLICITACAO");

                entity.Property(e => e.DtSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO")
                    .HasComment("Data de criação da solicitação.");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE")
                    .HasComment("Validade da solicitação. No caso de Prescrição.\r\n");

                entity.Property(e => e.IdAcomodacao).HasColumnName("ID_ACOMODACAO");

                entity.Property(e => e.IdAtendimento)
                    .HasColumnName("ID_ATENDIMENTO")
                    .HasComment("No caso de uma prescrição médica, relaciona o atendimento do paciente. FK com Atendimento.\r\n");

                entity.Property(e => e.IdClassificacao).HasColumnName("ID_CLASSIFICACAO");

                entity.Property(e => e.IdJustificativa)
                    .HasColumnName("ID_JUSTIFICATIVA")
                    .HasComment("No caso de prioridade Urgente e Emergencial, deve ser informado uma justificativa de solicitação. FK com TipoDiversos.");

                entity.Property(e => e.IdMedico)
                    .HasColumnName("ID_MEDICO")
                    .HasComment("No caso de uma prescrição médica, relaciona médico que solicitou. ");

                entity.Property(e => e.IdPrioridade)
                    .HasColumnName("ID_PRIORIDADE")
                    .HasComment("Grau de prioridade da solicitação. EX: Normal, Urgente. FK com TipoDiversos.\r\n");

                entity.Property(e => e.IdProjetoTipo).HasColumnName("ID_PROJETO_TIPO");

                entity.Property(e => e.IdStatusSolicitacao)
                    .HasColumnName("ID_STATUS_SOLICITACAO")
                    .HasComment("Status da solicitação. FK com TipoDiversos.\r\n");

                entity.Property(e => e.IdTipoSolicitacao)
                    .HasColumnName("ID_TIPO_SOLICITACAO")
                    .HasComment("Tipo de Solicitação. EX: Compras, Transferencia, Prescrição etc. FK com TipoDiversos.");

                entity.Property(e => e.IdUnidadeExecutora)
                    .HasColumnName("ID_UNIDADE_EXECUTORA")
                    .HasComment("Unidade que irá atenteder a solicitação. FK com UnidadeOrganizacional.");

                entity.Property(e => e.IdUnidadeSolicitante)
                    .HasColumnName("ID_UNIDADE_SOLICITANTE")
                    .HasComment("Unidade que está solicitando. FK com UnidadeOrganizacional.");

                entity.Property(e => e.IdUsuarioSolicitou)
                    .HasColumnName("ID_USUARIO_SOLICITOU")
                    .HasComment("Usuário que criou a solicitação. \r\n");

                entity.Property(e => e.InPrevistoOrcamento)
                    .HasColumnName("IN_PREVISTO_ORCAMENTO")
                    .HasComment("Informa se  a compra está ou não, prevista no orçamento.");

                entity.Property(e => e.InTermoVaga).HasColumnName("IN_TERMO_VAGA");

                entity.Property(e => e.TxJustificativa)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA")
                    .HasDefaultValueSql("('Não informada pela aplicação')")
                    .HasComment("Justificativa texto livre para uma solicitação de compra, se parâmetro de sistema estiver informando que este atributo é visível.");

                entity.Property(e => e.TxLeito)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_LEITO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO")
                    .HasComment("Texto livre.\r\n");

                entity.HasOne(d => d.IdAcomodacaoNavigation)
                    .WithMany(p => p.SolicitacaoIdAcomodacaoNavigation)
                    .HasForeignKey(d => d.IdAcomodacao)
                    .HasConstraintName("FK__Solicitac__ID_AC__73B9FA8A");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.Solicitacao)
                    .HasForeignKey(d => d.IdAtendimento)
                    .HasConstraintName("FK_Solicitacao_Atendimento");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.SolicitacaoIdClassificacaoNavigation)
                    .HasForeignKey(d => d.IdClassificacao)
                    .HasConstraintName("FK__Solicitac__ID_CL__72C5D651");

                entity.HasOne(d => d.IdJustificativaNavigation)
                    .WithMany(p => p.SolicitacaoIdJustificativaNavigation)
                    .HasForeignKey(d => d.IdJustificativa)
                    .HasConstraintName("FK_Solicitacao_TipoDiversos3");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.Solicitacao)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("FK_Solicitacao_Pessoa1");

                entity.HasOne(d => d.IdPrioridadeNavigation)
                    .WithMany(p => p.SolicitacaoIdPrioridadeNavigation)
                    .HasForeignKey(d => d.IdPrioridade)
                    .HasConstraintName("FK_Solicitacao_TipoDiversos2");

                entity.HasOne(d => d.IdProjetoTipoNavigation)
                    .WithMany(p => p.SolicitacaoIdProjetoTipoNavigation)
                    .HasForeignKey(d => d.IdProjetoTipo)
                    .HasConstraintName("FK_TipoProjeto");

                entity.HasOne(d => d.IdStatusSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoIdStatusSolicitacaoNavigation)
                    .HasForeignKey(d => d.IdStatusSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Solicitacao_TipoDiversos1");

                entity.HasOne(d => d.IdTipoSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoIdTipoSolicitacaoNavigation)
                    .HasForeignKey(d => d.IdTipoSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Solicitacao_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeExecutoraNavigation)
                    .WithMany(p => p.SolicitacaoIdUnidadeExecutoraNavigation)
                    .HasForeignKey(d => d.IdUnidadeExecutora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Solicitacao_FK1");

                entity.HasOne(d => d.IdUnidadeSolicitanteNavigation)
                    .WithMany(p => p.SolicitacaoIdUnidadeSolicitanteNavigation)
                    .HasForeignKey(d => d.IdUnidadeSolicitante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Solicitacao_FK2");

                entity.HasOne(d => d.IdUsuarioSolicitouNavigation)
                    .WithMany(p => p.Solicitacao)
                    .HasForeignKey(d => d.IdUsuarioSolicitou)
                    .HasConstraintName("FK_Solicitacao_Usuario");
            });

            modelBuilder.Entity<SolicitacaoEntidadeItem>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoaEntidade, e.IdTipoItemSolicitacao })
                    .HasName("SolicitacaoEntidadeItem_PK");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdTipoItemSolicitacao).HasColumnName("ID_TIPO_ITEM_SOLICITACAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.SolicitacaoEntidadeItem)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SolicitacaoEntidadeItem_PessoaEntidade_FK1");

                entity.HasOne(d => d.IdTipoItemSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoEntidadeItem)
                    .HasForeignKey(d => d.IdTipoItemSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SolicitacaoEntidadeItem_TipoDiversos_FK1");
            });

            modelBuilder.Entity<SolicitacaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoHistorico);

                entity.HasIndex(e => e.IdSolicitacao, "IX_SolicitacaoHistorico_ID_SOLICITACAO")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdSolicitacaoHistorico).HasColumnName("ID_SOLICITACAO_HISTORICO");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.IdAcaoExecutada).HasColumnName("ID_ACAO_EXECUTADA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxHistorico)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO");

                entity.HasOne(d => d.IdAcaoExecutadaNavigation)
                    .WithMany(p => p.SolicitacaoHistorico)
                    .HasForeignKey(d => d.IdAcaoExecutada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoHistorico_TipoDiversos");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.SolicitacaoHistorico)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_SolicitacaoHistorico_ProdutoDetalhe");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoHistorico)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoHistorico_SolicitacaoHistorico");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SolicitacaoHistorico)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoHistorico_Usuario");
            });

            modelBuilder.Entity<SolicitacaoImpressao>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoImpressao);

                entity.HasIndex(e => e.IdSolicitacao, "IX_SolicitacaoImpressao_ID_SOLICITACAO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdSolicitacaoImpressao).HasColumnName("ID_SOLICITACAO_IMPRESSAO");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoImpressao)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoImpressao_Solicitacao");
            });

            modelBuilder.Entity<SolicitacaoIntegracaoSistemaLegado>(entity =>
            {
                entity.HasKey(e => new { e.IdSolicitacao, e.IdSolicitacaoSistemaLegado });

                entity.HasIndex(e => e.IdSolicitacaoSistemaLegado, "IX_SolicitacaoIntegracaoSistemaLegado");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdSolicitacaoSistemaLegado).HasColumnName("ID_SOLICITACAO_SISTEMA_LEGADO");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoIntegracaoSistemaLegado)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoIntegracaoSistemaLegado_Solicitacao");
            });

            modelBuilder.Entity<SolicitacaoInternacaoHistorico>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoInternacaoHistorico);

                entity.Property(e => e.IdSolicitacaoInternacaoHistorico).HasColumnName("ID_SOLICITACAO_INTERNACAO_HISTORICO");

                entity.Property(e => e.DtHistorico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_HISTORICO");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagem>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoPdEnfermagem)
                    .HasName("Solicitacao_PD_Enfermagem_PK");

                entity.ToTable("Solicitacao_PD_Enfermagem");

                entity.HasIndex(e => new { e.IdSolicitacao, e.IdIntervaloAdministracao, e.IdTipoItemSolicitacao }, "IX_Solicitacao_PD_Enfermagem_7_277224388__K2_K1_K6_K5_19")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdSolicitacao, e.IdCondicao }, "IX_Solicitacao_PD_Enfermagem_7_277224388__K9_K2_19")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProdutoDetalhe, "IX_Solicitacao_PD_Enfermagem_ID_PRODUTO_DETALHE")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdServico, "IX_Solicitacao_PD_Enfermagem_ID_SERVICO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdSolicitacao, e.IdSituacao, e.NrAssociacao }, "IX_Solicitacao_PD_Enfermagem_ID_SOLICITACAO_ID_SITUACAO_NR_ASSOCIACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.NrAssociacao, "IX_Solicitacao_PD_Enfermagem_K18")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdSolicitacaoPdEnfermagem, e.NrAssociacao }, "Solicitacao_PD_Enfermagem_UC3")
                    .IsUnique();

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.ChecarVisivel).HasColumnName("CHECAR_VISIVEL");

                entity.Property(e => e.Horarios)
                    .IsUnicode(false)
                    .HasColumnName("HORARIOS");

                entity.Property(e => e.HrInicioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO_ADMINISTRACAO");

                entity.Property(e => e.IdCondicao).HasColumnName("ID_CONDICAO");

                entity.Property(e => e.IdInstrucaoEspecial).HasColumnName("ID_INSTRUCAO_ESPECIAL");

                entity.Property(e => e.IdIntervaloAdministracao).HasColumnName("ID_INTERVALO_ADMINISTRACAO");

                entity.Property(e => e.IdPrioridadeTipo).HasColumnName("ID_PRIORIDADE_TIPO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoOncologico).HasColumnName("ID_PRODUTO_ONCOLOGICO");

                entity.Property(e => e.IdRegiaoAplicacao).HasColumnName("ID_REGIAO_APLICACAO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSituacao).HasColumnName("ID_SITUACAO");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemUltimoHorarioGerado).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM_ULTIMO_HORARIO_GERADO");

                entity.Property(e => e.IdTipoItemSolicitacao).HasColumnName("ID_TIPO_ITEM_SOLICITACAO");

                entity.Property(e => e.IdUnidadeMedida).HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.IdUnidadeMedidaExibicao).HasColumnName("ID_UNIDADE_MEDIDA_EXIBICAO");

                entity.Property(e => e.IdViaAcesso).HasColumnName("ID_VIA_ACESSO");

                entity.Property(e => e.IdViaAdministracao).HasColumnName("ID_VIA_ADMINISTRACAO");

                entity.Property(e => e.InFracionado).HasColumnName("IN_FRACIONADO");

                entity.Property(e => e.InHorarioAtrasado).HasColumnName("IN_HORARIO_ATRASADO");

                entity.Property(e => e.InHorariopadrao).HasColumnName("IN_HORARIOPADRAO");

                entity.Property(e => e.InRealizaExameLocal).HasColumnName("IN_REALIZA_EXAME_LOCAL");

                entity.Property(e => e.InUltimoLote).HasColumnName("IN_ULTIMO_LOTE");

                entity.Property(e => e.NrAssociacao).HasColumnName("NR_ASSOCIACAO");

                entity.Property(e => e.Proximo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PROXIMO");

                entity.Property(e => e.QnDoses).HasColumnName("QN_DOSES");

                entity.Property(e => e.QnMinima)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_MINIMA");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.QnPrescritaExibicao)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA_EXIBICAO");

                entity.Property(e => e.QnTotal)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("QN_TOTAL");

                entity.Property(e => e.TxCriterioUtilizacao)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_CRITERIO_UTILIZACAO");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.TxObservacaoSistema)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_SISTEMA");

                entity.Property(e => e.Ultimo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ULTIMO");

                entity.Property(e => e.VlConcentracao).HasColumnName("VL_CONCENTRACAO");

                entity.Property(e => e.VlDoseHorario).HasColumnName("VL_DOSE_HORARIO");

                entity.Property(e => e.VlVelocidadeAdministracao).HasColumnName("VL_VELOCIDADE_ADMINISTRACAO");

                entity.HasOne(d => d.IdCondicaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdCondicaoNavigation)
                    .HasForeignKey(d => d.IdCondicao)
                    .HasConstraintName("TipoDiversos_Solicitacao_PD_Enfermagem_FK3");

                entity.HasOne(d => d.IdInstrucaoEspecialNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdInstrucaoEspecialNavigation)
                    .HasForeignKey(d => d.IdInstrucaoEspecial)
                    .HasConstraintName("TipoDiversos_Solicitacao_PD_Enfermagem_FK4");

                entity.HasOne(d => d.IdRegiaoAplicacaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdRegiaoAplicacaoNavigation)
                    .HasForeignKey(d => d.IdRegiaoAplicacao)
                    .HasConstraintName("FK__Solicitac__ID_RE__7480D435");

                entity.HasOne(d => d.IdSituacaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdSituacaoNavigation)
                    .HasForeignKey(d => d.IdSituacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Solicitacao_PD_Enfermagem_FK5");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagem)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_Solicitacao_PD_Enfermagem_FK1");

                entity.HasOne(d => d.IdTipoItemSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdTipoItemSolicitacaoNavigation)
                    .HasForeignKey(d => d.IdTipoItemSolicitacao)
                    .HasConstraintName("FK_Solicitacao_PD_Enfermagem_TipoItemSolicitacao");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_Solicitacao_PD_Enfermagem_UnidadeMedida");

                entity.HasOne(d => d.IdUnidadeMedidaExibicaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdUnidadeMedidaExibicaoNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedidaExibicao)
                    .HasConstraintName("FK_Solicitacao_PD_Enfermagem_UnidadeMedidaExibicao");

                entity.HasOne(d => d.IdViaAdministracaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemIdViaAdministracaoNavigation)
                    .HasForeignKey(d => d.IdViaAdministracao)
                    .HasConstraintName("FK_Solicitacao_PD_Enfermagem_ViaAdministracao");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracao>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .HasName("Solicitacao_PD_Enfermagem_HorarioAdministracao_PK");

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracao");

                entity.HasIndex(e => new { e.IdSolicitacaoPdEnfermagem, e.IdStatus, e.HrHorarioAdministracao }, "IX_DEADLOCK_FIX")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.CdCodigoPacote, "IX_SolicitacaoPdEnfermagemHorarioAdministracao_CdCodigoPacote")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.HrHorarioAdministracao, e.QnRequisitada }, "IX_Solicitacao_PD_EnfermagemHorarioAdministracao_HR_HORARIO_ADMINISTRACAO_QN_REQUISITADA")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdStatus }, "IX_Solicitacao_PD_EnfermagemHorarioAdministracao_ID_PRODUTO_DETALHE_ID_STATUS")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdStatus, e.HrHorarioAdministracao, e.DtRegistro }, "IX_Solicitacao_PD_EnfermagemHorarioAdministracao_ID_STATUS_HR_HORARIO_ADMINISTRACAO_DT_REGISTRO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdSolicitacaoPdEnfermagem, e.HrHorarioAdministracao, e.IdProdutoDetalhe }, "IX_Solicitacao_PD_EnfermagemHorario_7_797558225__K2_K6_K5_K1_K3")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.CdCodigoPacote).HasColumnName("CD_CODIGO_PACOTE");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.HrHorarioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORARIO_ADMINISTRACAO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoOncologico).HasColumnName("ID_PRODUTO_ONCOLOGICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioAdministrou).HasColumnName("ID_USUARIO_ADMINISTROU");

                entity.Property(e => e.IdUsuarioDuplaChecagem).HasColumnName("ID_USUARIO_DUPLA_CHECAGEM");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.QnRequisitada)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_REQUISITADA");

                entity.Property(e => e.TxJustificativaRecebimentoPacote)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_RECEBIMENTO_PACOTE");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdJustificativaCancelamentoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoIdJustificativaCancelamentoNavigation)
                    .HasForeignKey(d => d.IdJustificativaCancelamento)
                    .HasConstraintName("TipoDiversos_Solicitacao_PD_EnfermagemHorarioAdministracao_FK2");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracao)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_Solicitacao_PD_EnfermagemHorarioAdministracao_ProdutoDetalhe");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracao)
                    .HasForeignKey(d => d.IdServico)
                    .HasConstraintName("Servico_Solicitacao_PD_EnfermagemHorarioAdministracao_FK1");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracao)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_PD_Enfermagem_Solicitacao_PD_EnfermagemHorarioAdministracao_FK1");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoIdStatusNavigation)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Solicitacao_PD_EnfermagemHorarioAdministracao_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioAdministrouNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoIdUsuarioAdministrouNavigation)
                    .HasForeignKey(d => d.IdUsuarioAdministrou)
                    .HasConstraintName("Usuario_Solicitacao_PD_EnfermagemHorarioAdministracao_FK1");

                entity.HasOne(d => d.IdUsuarioDuplaChecagemNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoIdUsuarioDuplaChecagemNavigation)
                    .HasForeignKey(d => d.IdUsuarioDuplaChecagem)
                    .HasConstraintName("FK_Solicitacao_PD_EnfermagemHorarioAdministracao_Usuario");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracaoAjuste2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracao_Ajuste2020");

                entity.Property(e => e.CdCodigoPacote).HasColumnName("CD_CODIGO_PACOTE");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.HrHorarioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORARIO_ADMINISTRACAO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoOncologico).HasColumnName("ID_PRODUTO_ONCOLOGICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioAdministrou).HasColumnName("ID_USUARIO_ADMINISTROU");

                entity.Property(e => e.IdUsuarioDuplaChecagem).HasColumnName("ID_USUARIO_DUPLA_CHECAGEM");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.QnRequisitada)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_REQUISITADA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracaoAjuste20202>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracao_Ajuste2020_2");

                entity.Property(e => e.CdCodigoPacote).HasColumnName("CD_CODIGO_PACOTE");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.HrHorarioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORARIO_ADMINISTRACAO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoOncologico).HasColumnName("ID_PRODUTO_ONCOLOGICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioAdministrou).HasColumnName("ID_USUARIO_ADMINISTROU");

                entity.Property(e => e.IdUsuarioDuplaChecagem).HasColumnName("ID_USUARIO_DUPLA_CHECAGEM");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.QnRequisitada)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_REQUISITADA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracaoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdSolicitacaoPdEnfermagemhorarioadministracao, e.DtOcorrencia })
                    .HasName("Solicitacao_PD_Enfermagem_HorarioAdministracaoHistorico_PK");

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracaoHistorico");

                entity.HasIndex(e => new { e.IdStatus, e.DtOcorrencia }, "IX_Solicitacao_PD_EnfermagemHorarioAdministracaoHistorico_ID_STATUS_DT_OCORRENCIA")
                    .HasFilter("([ID_STATUS]=(3389))")
                    .HasFillFactor((byte)98);

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.CdCodigoPacote).HasColumnName("CD_CODIGO_PACOTE");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.HrHorarioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORARIO_ADMINISTRACAO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoOncologico).HasColumnName("ID_PRODUTO_ONCOLOGICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioAdministrou).HasColumnName("ID_USUARIO_ADMINISTROU");

                entity.Property(e => e.IdUsuarioDuplaChecagem).HasColumnName("ID_USUARIO_DUPLA_CHECAGEM");

                entity.Property(e => e.IdUsuarioOcorrencia).HasColumnName("ID_USUARIO_OCORRENCIA");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.QnRequisitada)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_REQUISITADA");

                entity.Property(e => e.TxJustificativaRecebimentoPacote)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA_RECEBIMENTO_PACOTE");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.IdUsuarioOcorrenciaNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoHistorico)
                    .HasForeignKey(d => d.IdUsuarioOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Solicitacao_PD_EnfermagemHorarioAdministracaoHistorico_FK1");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracaoHistoricoAjuste2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracaoHistorico_Ajuste2020");

                entity.Property(e => e.CdCodigoPacote).HasColumnName("CD_CODIGO_PACOTE");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.HrHorarioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORARIO_ADMINISTRACAO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoOncologico).HasColumnName("ID_PRODUTO_ONCOLOGICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioAdministrou).HasColumnName("ID_USUARIO_ADMINISTROU");

                entity.Property(e => e.IdUsuarioDuplaChecagem).HasColumnName("ID_USUARIO_DUPLA_CHECAGEM");

                entity.Property(e => e.IdUsuarioOcorrencia).HasColumnName("ID_USUARIO_OCORRENCIA");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.QnRequisitada)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_REQUISITADA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracaoHistoricoAjuste20202>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracaoHistorico_Ajuste2020_2");

                entity.Property(e => e.CdCodigoPacote).HasColumnName("CD_CODIGO_PACOTE");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.DtRegistro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO");

                entity.Property(e => e.HrHorarioAdministracao)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORARIO_ADMINISTRACAO");

                entity.Property(e => e.IdJustificativaCancelamento).HasColumnName("ID_JUSTIFICATIVA_CANCELAMENTO");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoOncologico).HasColumnName("ID_PRODUTO_ONCOLOGICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdSolicitacaoPdEnfermagem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioAdministrou).HasColumnName("ID_USUARIO_ADMINISTROU");

                entity.Property(e => e.IdUsuarioDuplaChecagem).HasColumnName("ID_USUARIO_DUPLA_CHECAGEM");

                entity.Property(e => e.IdUsuarioOcorrencia).HasColumnName("ID_USUARIO_OCORRENCIA");

                entity.Property(e => e.QnPrescrita)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_PRESCRITA");

                entity.Property(e => e.QnRequisitada)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("QN_REQUISITADA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItem>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem);

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem");

                entity.HasIndex(e => e.IdLoteProdutoItem, "IX_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdSolicitacaoPdEnfermagemhorarioadministracao, e.IdStatus }, "IX_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem_ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_ID_STATUS")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao, "IX_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem_PK10")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_LOTEPRODUTOITEM");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItem)
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .HasConstraintName("FK_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem_LoteProdutoItem");

                entity.HasOne(d => d.IdSolicitacaoPdEnfermagemhorarioadministracaoNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItem)
                    .HasForeignKey(d => d.IdSolicitacaoPdEnfermagemhorarioadministracao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_PD_EnfermagemHorarioAdministracao_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem_FK1");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItem)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItem_TipoDiversos");
            });

            modelBuilder.Entity<SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItemHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem, e.DtOcorrencia });

                entity.ToTable("Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItemHistorico");

                entity.HasIndex(e => new { e.IdLoteProdutoItem, e.IdStatus }, "IX_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItemHistorico_ID_LOTE_PRODUTO_ITEM_ID_STATUS")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao, "IX_Solicitacao_PD_EnfermagemHorario_K2")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracaoLoteprodutoitem).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO_LOTEPRODUTOITEM");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdFabricante).HasColumnName("ID_FABRICANTE");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdSolicitacaoPdEnfermagemhorarioadministracao).HasColumnName("ID_SOLICITACAO_PD_ENFERMAGEMHORARIOADMINISTRACAO");

                entity.Property(e => e.IdStatus).HasColumnName("ID_STATUS");

                entity.Property(e => e.IdUsuarioOcorrencia).HasColumnName("ID_USUARIO_OCORRENCIA");

                entity.HasOne(d => d.IdUsuarioOcorrenciaNavigation)
                    .WithMany(p => p.SolicitacaoPdEnfermagemHorarioAdministracaoLoteProdutoItemHistorico)
                    .HasForeignKey(d => d.IdUsuarioOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_Solicitacao_PD_EnfermagemHorarioAdministracao_LoteProdutoItemHistorico_FK1");
            });

            modelBuilder.Entity<SolicitacaoProdutoCota>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoProdutoCota)
                    .HasName("PK__Solicita__8E0381115D48D0E5");

                entity.ToTable("Solicitacao_Produto_Cota");

                entity.Property(e => e.IdSolicitacaoProdutoCota).HasColumnName("ID_SOLICITACAO_PRODUTO_COTA");

                entity.Property(e => e.DtCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CRIACAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.QnProduto).HasColumnName("QN_PRODUTO");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.SolicitacaoProdutoCota)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .HasConstraintName("FK_Solicitacao_Produto_Cota_ProdutoDetalhe");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.SolicitacaoProdutoCota)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("FK_Solicitacao_Produto_Cota_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SolicitacaoProdutoCota)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Solicitacao_Produto_Cota_Usuario");
            });

            modelBuilder.Entity<SolicitacaoProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => new { e.IdProdutoDetalhe, e.IdSolicitacao })
                    .HasName("Solicitacao_ProdutoDetalhe_PK");

                entity.ToTable("Solicitacao_ProdutoDetalhe");

                entity.HasIndex(e => e.IdSolicitacao, "ID_SOLICITACAO_IX")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdStatusSolicitacao }, "IX_Solicitacao_ProdutoDetalhe_ID_PRODUTO_DETALHE_ID_STATUS_SOLICITACAO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdStatusSolicitacao, "IX_Solicitacao_ProdutoDetalhe_id_status_solicitacao")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("PK da Tabela. FK com ProdutoDetalhe_Fabricante.");

                entity.Property(e => e.IdSolicitacao)
                    .HasColumnName("ID_SOLICITACAO")
                    .HasComment("PK da Tabela. FK com Solicitacao.\r\n");

                entity.Property(e => e.IdJustificativaEntregaPendente)
                    .HasColumnName("ID_JUSTIFICATIVA_ENTREGA_PENDENTE")
                    .HasComment("Justificativa sobre a requisição não entregue.\r\n");

                entity.Property(e => e.IdStatusSolicitacao)
                    .HasColumnName("ID_STATUS_SOLICITACAO")
                    .HasComment("Status da solicitação produto detalhe. FK com TipoDiversos.");

                entity.Property(e => e.IdUnidadeMedida)
                    .HasColumnName("ID_UNIDADE_MEDIDA")
                    .HasComment("Unidade de medida do Produto Detalhe. FK com TipoDiversos.\r\n");

                entity.Property(e => e.InConsignado)
                    .HasColumnName("IN_CONSIGNADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QnProdutoEntregue)
                    .HasColumnName("QN_PRODUTO_ENTREGUE")
                    .HasComment("Quantidade entregue do produto.\r\n");

                entity.Property(e => e.QnProdutoSolicitado)
                    .HasColumnName("QN_PRODUTO_SOLICITADO")
                    .HasComment("Quantidade solicitada do produto.");

                entity.HasOne(d => d.IdJustificativaEntregaPendenteNavigation)
                    .WithMany(p => p.SolicitacaoProdutoDetalheIdJustificativaEntregaPendenteNavigation)
                    .HasForeignKey(d => d.IdJustificativaEntregaPendente)
                    .HasConstraintName("FK_Solicitacao_ProdutoDetalhe_TipoDiversos1");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.SolicitacaoProdutoDetalhe)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ProdutoDetalhe_Solicitacao_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoProdutoDetalhe)
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_Solicitacao_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.IdStatusSolicitacaoNavigation)
                    .WithMany(p => p.SolicitacaoProdutoDetalheIdStatusSolicitacaoNavigation)
                    .HasForeignKey(d => d.IdStatusSolicitacao)
                    .HasConstraintName("TipoDiversos_Solicitacao_ProdutoDetalhe_FK1");

                entity.HasOne(d => d.IdUnidadeMedidaNavigation)
                    .WithMany(p => p.SolicitacaoProdutoDetalheIdUnidadeMedidaNavigation)
                    .HasForeignKey(d => d.IdUnidadeMedida)
                    .HasConstraintName("FK_Solicitacao_ProdutoDetalhe_TipoDiversos");
            });

            modelBuilder.Entity<SolicitacaoProdutoDetalheEntregue>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoProdutoEntregue);

                entity.ToTable("Solicitacao_ProdutoDetalhe_Entregue");

                entity.HasIndex(e => new { e.IdSolicitacao, e.IdProdutoDetalhe }, "IX_Solicitacao_ProdutoDetalhe_Entregue")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdProdutoDetalhe, e.IdFabricante }, "IX_Solicitacao_ProdutoDetalhe_Entregue_ID_PRODUTO_DETALHE_ID_FABRICANTE")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdSolicitacaoProdutoEntregue)
                    .HasColumnName("ID_SOLICITACAO_PRODUTO_ENTREGUE")
                    .HasComment("PK da Tabela. Identificador unico.");

                entity.Property(e => e.DtDevolucao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_DEVOLUCAO")
                    .HasComment("Data de devolução do produto caso tenha sido devolvido.\r\n");

                entity.Property(e => e.DtEntrega)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ENTREGA")
                    .HasComment("Data que foi entregue.\r\n");

                entity.Property(e => e.IdFabricante)
                    .HasColumnName("ID_FABRICANTE")
                    .HasComment("Id do Fabricante.\r\n");

                entity.Property(e => e.IdProdutoDetalhe)
                    .HasColumnName("ID_PRODUTO_DETALHE")
                    .HasComment("Id do Produto Detalhe.\r\n");

                entity.Property(e => e.IdSolicitacao)
                    .HasColumnName("ID_SOLICITACAO")
                    .HasComment("Id da Solicitação. FK com Solicitacao_ProdutoDetalhe.\r\n");

                entity.Property(e => e.IdUsuarioDevolveu)
                    .HasColumnName("ID_USUARIO_DEVOLVEU")
                    .HasComment("Usuário que devolveu os mat/med.\r\n");

                entity.Property(e => e.IdUsuarioDispensou)
                    .HasColumnName("ID_USUARIO_DISPENSOU")
                    .HasComment("Usuário que dispensou os mat/med.\r\n");

                entity.Property(e => e.IdUsuarioRecebeu)
                    .HasColumnName("ID_USUARIO_RECEBEU")
                    .HasComment("Usuário que recebeu os mat/med.\r\n");

                entity.Property(e => e.IdUsuarioRecebeuDevolucao)
                    .HasColumnName("ID_USUARIO_RECEBEU_DEVOLUCAO")
                    .HasComment("Usuário que recebeu os mat/med.\r\n");

                entity.Property(e => e.InConsignado).HasColumnName("IN_CONSIGNADO");

                entity.Property(e => e.QnQuantidadeDevolvida)
                    .HasColumnName("QN_QUANTIDADE_DEVOLVIDA")
                    .HasComment("Quantidade devolvida, caso tenha sido.\r\n");

                entity.Property(e => e.QnQuantidadeEntregue)
                    .HasColumnName("QN_QUANTIDADE_ENTREGUE")
                    .HasComment("Quantidade entregue do produto.");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.SolicitacaoProdutoDetalheEntregue)
                    .HasForeignKey(d => new { d.IdFabricante, d.IdProdutoDetalhe })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Solicitacao_ProdutoDetalhe_Entregue_ProdutoDetalhe_Fabricante");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SolicitacaoProdutoDetalheEntregue)
                    .HasForeignKey(d => new { d.IdProdutoDetalhe, d.IdSolicitacao })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Solicitacao_ProdutoDetalhe_Entregue_Solicitacao_ProdutoDetalhe");
            });

            modelBuilder.Entity<SolicitacaoProdutoDetalheEntregueLoteProdutoItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Solicitacao_ProdutoDetalheEntregue_LoteProdutoItem");

                entity.Property(e => e.IdLoteProdutoItem).HasColumnName("ID_LOTE_PRODUTO_ITEM");

                entity.Property(e => e.IdSolicitacao).HasColumnName("ID_SOLICITACAO");

                entity.Property(e => e.QnItem).HasColumnName("QN_ITEM");

                entity.HasOne(d => d.IdLoteProdutoItemNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdLoteProdutoItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LoteProdutoItem_SPELP_FK1");

                entity.HasOne(d => d.IdSolicitacaoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdSolicitacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Solicitacao_SPELP_FK2");
            });

            modelBuilder.Entity<SolicitacaoRefeicaoEspecial>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoRefeicaoEspecial);

                entity.Property(e => e.IdSolicitacaoRefeicaoEspecial).HasColumnName("ID_SOLICITACAO_REFEICAO_ESPECIAL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtFinalizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINALIZACAO");

                entity.Property(e => e.DtSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdTipoRefeicao).HasColumnName("ID_TIPO_REFEICAO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtual)
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxPreparacao)
                    .IsUnicode(false)
                    .HasColumnName("TX_PREPARACAO");

                entity.HasOne(d => d.IdAtendimentoNavigation)
                    .WithMany(p => p.SolicitacaoRefeicaoEspecial)
                    .HasForeignKey(d => d.IdAtendimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoRefeicaoEspecial_Atendimento");

                entity.HasOne(d => d.IdTipoRefeicaoNavigation)
                    .WithMany(p => p.SolicitacaoRefeicaoEspecial)
                    .HasForeignKey(d => d.IdTipoRefeicao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoRefeicaoEspecial_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SolicitacaoRefeicaoEspecial)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitacaoRefeicaoEspecial_Usuario");
            });

            modelBuilder.Entity<SolicitacaoVigencia>(entity =>
            {
                entity.HasKey(e => e.IdSolicitacaoVigencia);

                entity.ToTable("Solicitacao_Vigencia");

                entity.Property(e => e.IdSolicitacaoVigencia).HasColumnName("ID_SOLICITACAO_VIGENCIA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtFim)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdUnidadeSolicitante).HasColumnName("ID_UNIDADE_SOLICITANTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdUsuarioExcluiu).HasColumnName("ID_USUARIO_EXCLUIU");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.QnPermitido).HasColumnName("QN_PERMITIDO");

                entity.HasOne(d => d.IdUnidadeSolicitanteNavigation)
                    .WithMany(p => p.SolicitacaoVigencia)
                    .HasForeignKey(d => d.IdUnidadeSolicitante)
                    .HasConstraintName("FK_Solicitacao_Vigencia_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.SolicitacaoVigenciaIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Solicitacao_Vigencia_Usuario");

                entity.HasOne(d => d.IdUsuarioExcluiuNavigation)
                    .WithMany(p => p.SolicitacaoVigenciaIdUsuarioExcluiuNavigation)
                    .HasForeignKey(d => d.IdUsuarioExcluiu)
                    .HasConstraintName("FK_Solicitacao_Vigencia_Usuario1");
            });

            modelBuilder.Entity<SptAlteraDataHoraAlta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_ALTERA_DATA_HORA_ALTA");

                entity.Property(e => e.DtAlta)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA");

                entity.Property(e => e.DtAltaMedica)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA_MEDICA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");
            });

            modelBuilder.Entity<SptAlteraPrecoIncidencias>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_ALTERA_PRECO_INCIDENCIAS");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NmAtributo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");
            });

            modelBuilder.Entity<SptCartaRemessaLoteConta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_CartaRemessa_Lote_Conta");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.IdMedicoPrincipal).HasColumnName("ID_MEDICO_PRINCIPAL");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrCartaRemessa).HasColumnName("NR_CARTA_REMESSA");

                entity.Property(e => e.NrCartaoIdentificacao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTAO_IDENTIFICACAO");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.Valido)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SptConfiguraCaracteristicas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_CONFIGURA_CARACTERISTICAS");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCaracteristicaTipo).HasColumnName("ID_SERVICO_CARACTERISTICA_TIPO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxDescTipo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TIPO");
            });

            modelBuilder.Entity<SptConsultaRemessa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_CONSULTA_REMESSA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdLoteContaMapa).HasColumnName("ID_LOTE_CONTA_MAPA");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");

                entity.Property(e => e.NrCartaRemessa).HasColumnName("NR_CARTA_REMESSA");

                entity.Property(e => e.NrCartaoIdentificacao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_CARTAO_IDENTIFICACAO");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.Validacartão)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VALIDACARTÃO");

                entity.Property(e => e.Validamatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VALIDAMATRICULA");
            });

            modelBuilder.Entity<SptContaitemhistorico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_CONTAITEMHISTORICO");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.TxDescTipo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TIPO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxJustificativa)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_JUSTIFICATIVA");

                entity.Property(e => e.TxLogin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN");
            });

            modelBuilder.Entity<SptExameEtapaLaboratorio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_EXAME_ETAPA_LABORATORIO");

                entity.Property(e => e.DtFim)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.DtLimite)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LIMITE");

                entity.Property(e => e.IdEtapaTipo).HasColumnName("ID_ETAPA_TIPO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdFluxo).HasColumnName("ID_FLUXO");

                entity.Property(e => e.IdFuncResponsavel).HasColumnName("ID_FUNC_RESPONSAVEL");

                entity.Property(e => e.IdMaterialTipo).HasColumnName("ID_MATERIAL_TIPO");

                entity.Property(e => e.IdOrdemServico).HasColumnName("ID_ORDEM_SERVICO");

                entity.Property(e => e.IdPrestador).HasColumnName("ID_PRESTADOR");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtraso).HasColumnName("IN_ATRASO");

                entity.Property(e => e.InPendencia).HasColumnName("IN_PENDENCIA");

                entity.Property(e => e.NrEtapa).HasColumnName("NR_ETAPA");

                entity.Property(e => e.NrOrdem).HasColumnName("NR_ORDEM");
            });

            modelBuilder.Entity<SptLabExameReferencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_LAB_EXAME_REFERENCIA");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdExame).HasColumnName("ID_EXAME");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.NmExame)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_EXAME");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<SptRetornoAlta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_RETORNO_ALTA");

                entity.Property(e => e.DtAltaMedica)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTA_MEDICA");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdStatusAtendimento).HasColumnName("ID_STATUS_ATENDIMENTO");

                entity.Property(e => e.InSemOnus).HasColumnName("IN_SEM_ONUS");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA");
            });

            modelBuilder.Entity<SptServico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_SERVICO");

                entity.Property(e => e.CdAgrupamento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_AGRUPAMENTO");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdTraducao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_TRADUCAO");

                entity.Property(e => e.IdAgrupamento).HasColumnName("ID_AGRUPAMENTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdTraducao).HasColumnName("ID_TRADUCAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InExcecao).HasColumnName("IN_EXCECAO");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.TxAgrupamento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_AGRUPAMENTO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxRotulo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_ROTULO");

                entity.Property(e => e.TxTraducao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_TRADUCAO");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");
            });

            modelBuilder.Entity<SptTabela>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_TABELA");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<SptTaxasSemReferencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_TAXAS_SEM_REFERENCIA");

                entity.Property(e => e.CdConvenio)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cd_convenio");

                entity.Property(e => e.CdTraducao)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cd_traducao");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.NmConvenio)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nm_convenio");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NmTraducao)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nm_traducao");
            });

            modelBuilder.Entity<SptTemporaria>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_Temporaria");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");
            });

            modelBuilder.Entity<SptTrocaTabela>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_TROCA_TABELA");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");
            });

            modelBuilder.Entity<SptValorExcecao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SPT_VALOR_EXCECAO");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoIncidencia).HasColumnName("ID_SERVICO_INCIDENCIA");

                entity.Property(e => e.NmAtributo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA");
            });

            modelBuilder.Entity<StatusEsperaCc>(entity =>
            {
                entity.HasKey(e => new { e.IdStatusEsperaCc, e.IdUnidadeOrganizacional })
                    .HasName("PK__StatusEsperaCC__37B4F77E");

                entity.ToTable("StatusEsperaCC");

                entity.Property(e => e.IdStatusEsperaCc).HasColumnName("ID_STATUS_ESPERA_CC");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.CorB).HasColumnName("COR_B");

                entity.Property(e => e.CorG).HasColumnName("COR_G");

                entity.Property(e => e.CorR).HasColumnName("COR_R");

                entity.Property(e => e.IdTipoEsperaCc).HasColumnName("ID_TIPO_ESPERA_CC");

                entity.Property(e => e.TxDescStatusEspera)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_STATUS_ESPERA");
            });

            modelBuilder.Entity<StatusInventario>(entity =>
            {
                entity.HasKey(e => e.IdStatusInventario);

                entity.Property(e => e.IdStatusInventario).HasColumnName("ID_STATUS_INVENTARIO");

                entity.Property(e => e.NmStatusInventario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_STATUS_INVENTARIO");
            });

            modelBuilder.Entity<StatusInventarioProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdStatusContagemProdutoDetalhe);

                entity.Property(e => e.IdStatusContagemProdutoDetalhe).HasColumnName("ID_STATUS_CONTAGEM_PRODUTO_DETALHE");

                entity.Property(e => e.NmStatusContagemProdutoDetalhe)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_STATUS_CONTAGEM_PRODUTO_DETALHE");
            });

            modelBuilder.Entity<StatusLeitoEvento>(entity =>
            {
                entity.HasKey(e => new { e.IdStatusLeito, e.IdEvento });

                entity.ToTable("StatusLeito_Evento");

                entity.Property(e => e.IdStatusLeito).HasColumnName("ID_STATUS_LEITO");

                entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

                entity.HasOne(d => d.IdEventoNavigation)
                    .WithMany(p => p.StatusLeitoEvento)
                    .HasForeignKey(d => d.IdEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StatusLeito_Evento_EventoLeito");

                entity.HasOne(d => d.IdStatusLeitoNavigation)
                    .WithMany(p => p.StatusLeitoEvento)
                    .HasForeignKey(d => d.IdStatusLeito)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StatusLeito_Evento_TipoDiversos");
            });

            modelBuilder.Entity<SubEspecialidadeMedica>(entity =>
            {
                entity.HasKey(e => e.CdServico);

                entity.Property(e => e.CdServico)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxDescricao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<SuprimentosMovimentacao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SuprimentosMovimentacao");

                entity.Property(e => e.DtSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO");

                entity.Property(e => e.IdCentroCustosPrestador).HasColumnName("ID_CENTRO_CUSTOS_PRESTADOR");

                entity.Property(e => e.IdCentroCustosReceptor).HasColumnName("ID_CENTRO_CUSTOS_RECEPTOR");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.InDevolucao).HasColumnName("IN_DEVOLUCAO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.VlMedioUnitario)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("VL_MEDIO_UNITARIO");
            });

            modelBuilder.Entity<SuprimentosMovimentacaoPerda>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SuprimentosMovimentacaoPerda");

                entity.Property(e => e.DtSolicitacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SOLICITACAO");

                entity.Property(e => e.IdCentroCustosPrestador).HasColumnName("ID_CENTRO_CUSTOS_PRESTADOR");

                entity.Property(e => e.IdCentroCustosReceptor).HasColumnName("ID_CENTRO_CUSTOS_RECEPTOR");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.VlMedioUnitario)
                    .HasColumnType("decimal(16, 8)")
                    .HasColumnName("VL_MEDIO_UNITARIO");
            });

            modelBuilder.Entity<SusArquivoGerado>(entity =>
            {
                entity.HasKey(e => e.IdArquivoGerado)
                    .HasName("PK__SusArqui__91299E6609294D65");

                entity.Property(e => e.IdArquivoGerado).HasColumnName("ID_ARQUIVO_GERADO");

                entity.Property(e => e.DtGeracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.TxLinhaArquivo)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_LINHA_ARQUIVO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.SusArquivoGerado)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ArquivoSus_Conta_FK");
            });

            modelBuilder.Entity<TabelaCargaProcedimentoMedico>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdCompexidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_COMPEXIDADE");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdSubtipoFinanciamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_SUBTIPO_FINANCIAMENTO");

                entity.Property(e => e.CdTipoFinanciamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_TIPO_FINANCIAMENTO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InSexo).HasColumnName("IN_SEXO");

                entity.Property(e => e.InValorMonetario).HasColumnName("IN_VALOR_MONETARIO");

                entity.Property(e => e.NrIdadeMaxima).HasColumnName("NR_IDADE_MAXIMA");

                entity.Property(e => e.NrIdadeMinima).HasColumnName("NR_IDADE_MINIMA");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.QnMaximaExecucao).HasColumnName("QN_MAXIMA_EXECUCAO");

                entity.Property(e => e.QnMediaPermanencia).HasColumnName("QN_MEDIA_PERMANENCIA");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxInstrumentoRegistro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_INSTRUMENTO_REGISTRO");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");

                entity.Property(e => e.VlServicoAmbulatorial).HasColumnName("VL_SERVICO_AMBULATORIAL");

                entity.Property(e => e.VlServicoHospitalar).HasColumnName("VL_SERVICO_HOSPITALAR");

                entity.Property(e => e.VlServicoProfissional).HasColumnName("VL_SERVICO_PROFISSIONAL");
            });

            modelBuilder.Entity<TabelaClassificacao>(entity =>
            {
                entity.HasKey(e => e.IdTabelaClassificacao);

                entity.Property(e => e.IdTabelaClassificacao).HasColumnName("ID_TABELA_CLASSIFICACAO");

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmTabelaClassificacao)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NM_TABELA_CLASSIFICACAO");

                entity.HasOne(d => d.IdTipoTabelaNavigation)
                    .WithMany(p => p.TabelaClassificacao)
                    .HasForeignKey(d => d.IdTipoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TabelaClassificacao_TipoTabela");
            });

            modelBuilder.Entity<TabelaExcecao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TABELA_EXCECAO");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Expr1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Expr2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<TabelaProcedimentoMedicoAgrupamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TabelaProcedimentoMedicoAgrupamento");

                entity.Property(e => e.CdCompexidade)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CD_COMPEXIDADE");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdSubtipoFinanciamento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CD_SUBTIPO_FINANCIAMENTO");

                entity.Property(e => e.CdTipoFinanciamento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CD_TIPO_FINANCIAMENTO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoPai).HasColumnName("ID_SERVICO_PAI");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InSexo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("IN_SEXO");

                entity.Property(e => e.InValorMonetario)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("IN_VALOR_MONETARIO");

                entity.Property(e => e.NmServicoCategoria)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NrIdadeMaxima)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_IDADE_MAXIMA");

                entity.Property(e => e.NrIdadeMinima)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_IDADE_MINIMA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.QnMaximaExecucao)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_MAXIMA_EXECUCAO");

                entity.Property(e => e.QnMediaPermanencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_MEDIA_PERMANENCIA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxInstrumentoRegistro)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_INSTRUMENTO_REGISTRO");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");

                entity.Property(e => e.VlServicoAmbulatorial)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_SERVICO_AMBULATORIAL");

                entity.Property(e => e.VlServicoHospitalar)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_SERVICO_HOSPITALAR");

                entity.Property(e => e.VlServicoProfissional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_SERVICO_PROFISSIONAL");
            });

            modelBuilder.Entity<TabelaProcedimentoMedicoBasica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TabelaProcedimentoMedicoBasica");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES");

                entity.Property(e => e.QnFilme)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS");
            });

            modelBuilder.Entity<TabelaReferencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TABELA_REFERENCIA");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.PrIndicePorte)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("PR_INDICE_PORTE")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnFilme)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxPorteProcedimento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_PORTE_PROCEDIMENTO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxUr)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TX_UR")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.VlCustoOperacionAl)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIOnAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<TabelaSul>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TABELA_SUL");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnAuxiliares)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_AUXILIARES")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnFilme)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_FILME")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.QnIncidencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_INCIDENCIA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.VlCustoOperacional)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_CUSTO_OPERACIONAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.VlHonorarios)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_HONORARIOS")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<TabelaTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TABELA_TESTE");

                entity.Property(e => e.Codigo).HasColumnName("CODIGO");
            });

            modelBuilder.Entity<TarifacaoTelefone>(entity =>
            {
                entity.HasKey(e => new { e.NrRamal, e.DtUtilizacao, e.NrTronco, e.NrDiscado, e.HrDuracao, e.MnDuracao, e.SgDuracao })
                    .HasName("PK_TarifacaoTelefone_1");

                entity.Property(e => e.NrRamal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_RAMAL");

                entity.Property(e => e.DtUtilizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_UTILIZACAO");

                entity.Property(e => e.NrTronco).HasColumnName("NR_TRONCO");

                entity.Property(e => e.NrDiscado)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("NR_DISCADO");

                entity.Property(e => e.HrDuracao)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("HR_DURACAO");

                entity.Property(e => e.MnDuracao)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("MN_DURACAO");

                entity.Property(e => e.SgDuracao)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_DURACAO");

                entity.Property(e => e.InCobrado).HasColumnName("IN_COBRADO");

                entity.Property(e => e.NmCentroCusto)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NM_CENTRO_CUSTO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.TxLocalidade)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOCALIDADE");

                entity.Property(e => e.TxTipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_TIPO");

                entity.Property(e => e.TxUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TX_UF");

                entity.Property(e => e.VlBasico)
                    .HasColumnType("decimal(13, 2)")
                    .HasColumnName("VL_BASICO");

                entity.Property(e => e.VlCobrado)
                    .HasColumnType("decimal(13, 2)")
                    .HasColumnName("VL_COBRADO");
            });

            modelBuilder.Entity<TarifacaoTelefoneTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TxLinha)
                    .IsRequired()
                    .HasMaxLength(167)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA");
            });

            modelBuilder.Entity<TaxaAcrescimoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdUnidadeOrganizacional, e.DtVigenciaTaxa })
                    .HasName("TaxaAcrescimo_Historico_PK");

                entity.ToTable("TaxaAcrescimo_Historico");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.DtVigenciaTaxa)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA_TAXA");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.VlTaxaAcrescimoServico).HasColumnName("VL_TAXA_ACRESCIMO_SERVICO");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.TaxaAcrescimoHistorico)
                    .HasForeignKey(d => new { d.IdOperadora, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxaAcrescimo_Historico_Operadora_UnidadeOrganizacional_Credenciada");
            });

            modelBuilder.Entity<TaxaDiaria>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TaxaDiaria");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoPai).HasColumnName("ID_SERVICO_PAI");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeMedida)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InGases)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("IN_GASES");

                entity.Property(e => e.NmServicoCategoria)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NrCadencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CADENCIA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.QnMinimaCobrar)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_MINIMA_COBRAR");

                entity.Property(e => e.QnUnidadeReferencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_UNIDADE_REFERENCIA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlTaxaDiaria)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_TAXA_DIARIA");
            });

            modelBuilder.Entity<TaxaDiariaAgrupamento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TaxaDiariaAgrupamento");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoPai).HasColumnName("ID_SERVICO_PAI");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeMedida)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InExcecao).HasColumnName("IN_EXCECAO");

                entity.Property(e => e.InGases)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("IN_GASES");

                entity.Property(e => e.NmServicoCategoria)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_CATEGORIA");

                entity.Property(e => e.NrCadencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CADENCIA");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.NrPorteAnestesico)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_PORTE_ANESTESICO");

                entity.Property(e => e.QnMinimaCobrar)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_MINIMA_COBRAR");

                entity.Property(e => e.QnUnidadeReferencia)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("QN_UNIDADE_REFERENCIA");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlTaxaDiaria)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_TAXA_DIARIA");
            });

            modelBuilder.Entity<TaxaDiariaImportacao>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CdReferencia).HasColumnName("CD_REFERENCIA");

                entity.Property(e => e.CdServico).HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxUnidadeMedida)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_UNIDADE_MEDIDA");

                entity.Property(e => e.VlTaxaDiaria)
                    .HasColumnType("numeric(16, 2)")
                    .HasColumnName("VL_TAXA_DIARIA");
            });

            modelBuilder.Entity<TaxaEnfermagemUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => e.IdTaxaEnfermagemUnidadeOrganizacional);

                entity.ToTable("TaxaEnfermagem_UnidadeOrganizacional");

                entity.Property(e => e.IdTaxaEnfermagemUnidadeOrganizacional).HasColumnName("ID_TAXA_ENFERMAGEM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InHorarioFim).HasColumnName("IN_HORARIO_FIM");

                entity.Property(e => e.InHorarioInicio).HasColumnName("IN_HORARIO_INICIO");

                entity.Property(e => e.InQuantidade).HasColumnName("IN_QUANTIDADE");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.TaxaEnfermagemUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxaEnfermagem_UnidadeOrganizacional_Servico");
            });

            modelBuilder.Entity<TaxaFolhaDeSala>(entity =>
            {
                entity.HasKey(e => e.IdTaxaFolhaDeSala);

                entity.HasIndex(e => e.IdCheckinEnfermagem, "IX_TaxaFolhaDeSala_CheckinEnfermagem")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdProcedimentoPrincipal, "IX_TaxaFolhaDeSala_ProcedimentoPrincipal")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdTaxaFolhaDeSala).HasColumnName("ID_TAXA_FOLHA_DE_SALA");

                entity.Property(e => e.DtFim)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM");

                entity.Property(e => e.DtInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO");

                entity.Property(e => e.IdCheckinEnfermagem).HasColumnName("ID_CHECKIN_ENFERMAGEM");

                entity.Property(e => e.IdKit).HasColumnName("ID_KIT");

                entity.Property(e => e.IdProcedimentoPrincipal).HasColumnName("ID_PROCEDIMENTO_PRINCIPAL");

                entity.Property(e => e.IdTaxa).HasColumnName("ID_TAXA");

                entity.Property(e => e.QnUtilizado).HasColumnName("QN_UTILIZADO");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.TaxaFolhaDeSala)
                    .HasForeignKey(d => d.IdKit)
                    .HasConstraintName("TaxaFolhaDeSala_KitTaxasGases_FK1");

                entity.HasOne(d => d.IdTaxaNavigation)
                    .WithMany(p => p.TaxaFolhaDeSala)
                    .HasForeignKey(d => d.IdTaxa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxaFolhaDeSala_Servico");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.TaxaFolhaDeSala)
                    .HasForeignKey(d => new { d.IdProcedimentoPrincipal, d.IdCheckinEnfermagem })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxaFolhaDeSala_Folhadesala");
            });

            modelBuilder.Entity<TecnicoEnfermagem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TecnicoEnfermagem");

                entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("id_pessoa_entidade");

                entity.Property(e => e.IdUfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("id_uf_conselho");

                entity.Property(e => e.InMedicoCadastroCompleto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("in_medico_cadastro_completo");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nm_pessoa");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nr_conselho");
            });

            modelBuilder.Entity<Telefone>(entity =>
            {
                entity.HasKey(e => e.IdTelefone)
                    .HasName("Telefone_PK");

                entity.HasIndex(e => new { e.IdTelefoneTipo, e.NrTelefone }, "IX_Telefone_ID_TELEFONE_TIPO_NR_TELEFONE")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdTelefone).HasColumnName("ID_TELEFONE");

                entity.Property(e => e.CdArea)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CD_AREA");

                entity.Property(e => e.CdPais)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CD_PAIS");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdFiscad).HasColumnName("ID_FISCAD");

                entity.Property(e => e.IdOrigemCadastroTipo).HasColumnName("ID_ORIGEM_CADASTRO_TIPO");

                entity.Property(e => e.IdTelefoneTipo).HasColumnName("ID_TELEFONE_TIPO");

                entity.Property(e => e.NmNomePessoa)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_NOME_PESSOA");

                entity.Property(e => e.NrTelefone)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("NR_TELEFONE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEnderecoNavigation)
                    .WithMany(p => p.Telefone)
                    .HasForeignKey(d => d.IdEndereco)
                    .HasConstraintName("Endereco_Telefone_FK1");

                entity.HasOne(d => d.IdOrigemCadastroTipoNavigation)
                    .WithMany(p => p.TelefoneIdOrigemCadastroTipoNavigation)
                    .HasForeignKey(d => d.IdOrigemCadastroTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Telefone_FK1");

                entity.HasOne(d => d.IdTelefoneTipoNavigation)
                    .WithMany(p => p.TelefoneIdTelefoneTipoNavigation)
                    .HasForeignKey(d => d.IdTelefoneTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Telefone_FK2");
            });

            modelBuilder.Entity<TelefoneGeral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TelefoneGeral");

                entity.Property(e => e.CdArea)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CD_AREA");

                entity.Property(e => e.CdPais)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CD_PAIS");

                entity.Property(e => e.Celular)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Comercial)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Favor)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.NmContato)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTATO");

                entity.Property(e => e.Residencial)
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TelefonePessoaRelatorio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Telefone_Pessoa_Relatorio");

                entity.Property(e => e.CdArea)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CD_AREA");

                entity.Property(e => e.CdPais)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CD_PAIS");

                entity.Property(e => e.IdPessoa).HasColumnName("id_pessoa");

                entity.Property(e => e.NrRamal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_RAMAL");

                entity.Property(e => e.NrTelefone)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("NR_TELEFONE");
            });

            modelBuilder.Entity<TempoMedioAtendimentoDiarioReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tempo_Medio_Atendimento_Diario_Report");

                entity.Property(e => e.DataDiaAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DATA_DIA_ATENDIMENTO");

                entity.Property(e => e.TempoMedioAtendimento).HasColumnName("TEMPO_MEDIO_ATENDIMENTO");
            });

            modelBuilder.Entity<TempoReposicao>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("Dt_vigencia");
            });

            modelBuilder.Entity<TextoModeloLaudoSadt>(entity =>
            {
                entity.HasKey(e => e.IdTextoModeloLaudoSadt);

                entity.ToTable("TextoModeloLaudoSADT");

                entity.Property(e => e.IdTextoModeloLaudoSadt).HasColumnName("ID_TEXTO_MODELO_LAUDO_SADT");

                entity.Property(e => e.TxDescricaoTextoModeloLaudo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_TEXTO_MODELO_LAUDO");

                entity.Property(e => e.TxHtmlTextoLaudo)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_TEXTO_LAUDO");
            });

            modelBuilder.Entity<TextoModeloLaudoSadthistorico>(entity =>
            {
                entity.HasKey(e => e.IdTextoModeloLaudoSadtHistorico);

                entity.ToTable("TextoModeloLaudoSADTHistorico");

                entity.Property(e => e.IdTextoModeloLaudoSadtHistorico).HasColumnName("ID_TEXTO_MODELO_LAUDO_SADT_HISTORICO");

                entity.Property(e => e.DtVersaoTexto)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VERSAO_TEXTO");

                entity.Property(e => e.IdTextoModeloLaudoSadt).HasColumnName("ID_TEXTO_MODELO_LAUDO_SADT");

                entity.Property(e => e.IdUsuarioVersao).HasColumnName("ID_USUARIO_VERSAO");

                entity.Property(e => e.TxDescricaoTextoModeloLaudo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_TEXTO_MODELO_LAUDO");

                entity.Property(e => e.TxHtmlTextoLaudo)
                    .HasColumnType("text")
                    .HasColumnName("TX_HTML_TEXTO_LAUDO");
            });

            modelBuilder.Entity<TextoPadrao>(entity =>
            {
                entity.HasKey(e => e.IdTextoPadrao)
                    .HasName("TextoPadrao_PK");

                entity.Property(e => e.IdTextoPadrao).HasColumnName("ID_TEXTO_PADRAO");

                entity.Property(e => e.IdTipoTexto).HasColumnName("ID_TIPO_TEXTO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmTextoPadrao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TEXTO_PADRAO");

                entity.Property(e => e.TxAbreviacao)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABREVIACAO");

                entity.Property(e => e.TxTextoPadrao)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("TX_TEXTO_PADRAO");

                entity.HasOne(d => d.IdTipoTextoNavigation)
                    .WithMany(p => p.TextoPadrao)
                    .HasForeignKey(d => d.IdTipoTexto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_TextoPadrao_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.TextoPadrao)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .HasConstraintName("UnidadeOrganizacional_TextoPadrao_FK1");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TextoPadrao)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_TextoPadrao_Usuario");
            });

            modelBuilder.Entity<TextoPadraoPrescricaoItemTipo>(entity =>
            {
                entity.HasKey(e => e.IdTextoPadraoPrescricaoItemTipo)
                    .HasName("TextoPadrao_PrescricaoItemTipo_PK");

                entity.ToTable("TextoPadrao_PrescricaoItemTipo");

                entity.Property(e => e.IdTextoPadraoPrescricaoItemTipo).HasColumnName("ID_TEXTO_PADRAO_PRESCRICAO_ITEM_TIPO");

                entity.Property(e => e.IdPrescricaoItemTipo).HasColumnName("ID_PRESCRICAO_ITEM_TIPO");

                entity.Property(e => e.IdTextoPadrao).HasColumnName("ID_TEXTO_PADRAO");

                entity.HasOne(d => d.IdPrescricaoItemTipoNavigation)
                    .WithMany(p => p.TextoPadraoPrescricaoItemTipo)
                    .HasForeignKey(d => d.IdPrescricaoItemTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_TextoPadrao_TipoItemPrescricao_FK1");

                entity.HasOne(d => d.IdTextoPadraoNavigation)
                    .WithMany(p => p.TextoPadraoPrescricaoItemTipo)
                    .HasForeignKey(d => d.IdTextoPadrao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TextoPadrao_TipoItemPrescricao_TextoPadrao");
            });

            modelBuilder.Entity<TextoPadraoProdutoDetalhe>(entity =>
            {
                entity.HasKey(e => e.IdTextoPadraoProdutoDetalhe)
                    .HasName("TextoPadrao_ProdutoDetalhe_PK");

                entity.ToTable("TextoPadrao_ProdutoDetalhe");

                entity.Property(e => e.IdTextoPadraoProdutoDetalhe).HasColumnName("ID_TEXTO_PADRAO_PRODUTO_DETALHE");

                entity.Property(e => e.IdProdutoDetalhe).HasColumnName("ID_PRODUTO_DETALHE");

                entity.Property(e => e.IdTextoPadrao).HasColumnName("ID_TEXTO_PADRAO");

                entity.HasOne(d => d.IdProdutoDetalheNavigation)
                    .WithMany(p => p.TextoPadraoProdutoDetalhe)
                    .HasForeignKey(d => d.IdProdutoDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProdutoDetalhe_TextoPadrao_ProdutoDetalhe");

                entity.HasOne(d => d.IdTextoPadraoNavigation)
                    .WithMany(p => p.TextoPadraoProdutoDetalhe)
                    .HasForeignKey(d => d.IdTextoPadrao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TextoPadrao_ProdutoDetalhe_TextoPadrao");
            });

            modelBuilder.Entity<TipoAlta>(entity =>
            {
                entity.HasKey(e => e.IdTipoAlta);

                entity.Property(e => e.IdTipoAlta)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_TIPO_ALTA");

                entity.Property(e => e.CdTipoAltaSus).HasColumnName("CD_TIPO_ALTA_SUS");

                entity.Property(e => e.DtFinalUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_USO");

                entity.Property(e => e.DtInicioUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_USO");

                entity.Property(e => e.InAltaTiss)
                    .HasColumnName("IN_ALTA_TISS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmTipoAlta)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_ALTA");
            });

            modelBuilder.Entity<TipoAltaSus>(entity =>
            {
                entity.HasKey(e => e.IdAlta);

                entity.ToTable("TipoAltaSUS");

                entity.Property(e => e.IdAlta)
                    .HasColumnName("ID_ALTA")
                    .HasComment("Idenficador do motivo de saída de um paciente SUS");

                entity.Property(e => e.CdAlta)
                    .HasColumnName("CD_ALTA")
                    .HasComment("Código do motivo de saída de um paciente SUS");

                entity.Property(e => e.DtFinalUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_USO")
                    .HasComment("Data final do motivo de saída de uma paciente SUS");

                entity.Property(e => e.DtInicialUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIAL_USO")
                    .HasComment("Data de inicial do uso do Motivo de saída de um paciente SUS");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Indica se a linha está ativa ou desativada para uso do sistema");

                entity.Property(e => e.TxMotivoAlta)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO_ALTA")
                    .HasComment("Texto informativo do motivo da saída de um paciente SUS");
            });

            modelBuilder.Entity<TipoAltaSusTipoAltaSusdetalhe>(entity =>
            {
                entity.HasKey(e => new { e.IdAlta, e.IdDetalhe })
                    .HasName("TipoAltaSUS_TipoAltaSUSDetalhe_PK");

                entity.ToTable("TipoAltaSUS_TipoAltaSUSDetalhe");

                entity.Property(e => e.IdAlta)
                    .HasColumnName("ID_ALTA")
                    .HasComment("identificador do motivo da saída de um paciente SUS");

                entity.Property(e => e.IdDetalhe)
                    .HasColumnName("ID_DETALHE")
                    .HasComment("Identificador do detalhe do motivo de saída de uma paciente SUS");

                entity.Property(e => e.TxCompetenciaFinal)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA_FINAL")
                    .HasComment("Informa a competência final do relacionamento do motivo da saída com seu detalhe");

                entity.Property(e => e.TxCompetenciaInicial)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPETENCIA_INICIAL")
                    .HasComment("Informa a competência inicial do relacionamento do motivo da saída com seu detalhe");

                entity.Property(e => e.TxDocumento)
                    .IsUnicode(false)
                    .HasColumnName("TX_DOCUMENTO")
                    .HasComment("Informa o documento que determina a utilização da relação motivo detalhe");

                entity.HasOne(d => d.IdAltaNavigation)
                    .WithMany(p => p.TipoAltaSusTipoAltaSusdetalhe)
                    .HasForeignKey(d => d.IdAlta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoAltaSUS_TipoAltaSUS_TipoAltaSUSDetalhe_FK1");

                entity.HasOne(d => d.IdDetalheNavigation)
                    .WithMany(p => p.TipoAltaSusTipoAltaSusdetalhe)
                    .HasForeignKey(d => d.IdDetalhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoAltaSUSDetalhe_TipoAltaSUS_TipoAltaSUSDetalhe");
            });

            modelBuilder.Entity<TipoAltaSusdetalhe>(entity =>
            {
                entity.HasKey(e => e.IdDetalhe);

                entity.ToTable("TipoAltaSUSDetalhe");

                entity.Property(e => e.IdDetalhe)
                    .HasColumnName("ID_DETALHE")
                    .HasComment("Identificação do detalhe");

                entity.Property(e => e.CdDetalhe)
                    .HasColumnName("CD_DETALHE")
                    .HasComment("Código do detalhe no SUS");

                entity.Property(e => e.DtFinalUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FINAL_USO")
                    .HasComment("Data final do uso");

                entity.Property(e => e.DtInicialUso)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIAL_USO")
                    .HasComment("Data de inicial do uso");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Indica se a linha esta ativa ou desativada para uso do sistema");

                entity.Property(e => e.TxDescricaoDetalhe)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_DETALHE")
                    .HasComment("Descrição do detalhe");
            });

            modelBuilder.Entity<TipoContaReceberImposto>(entity =>
            {
                entity.HasKey(e => e.IdTipoContaReceberImposto);

                entity.ToTable("TipoContaReceber_Imposto");

                entity.Property(e => e.IdTipoContaReceberImposto).HasColumnName("ID_TIPO_CONTA_RECEBER_IMPOSTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdImposto).HasColumnName("ID_IMPOSTO");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InPessoaFisica)
                    .IsRequired()
                    .HasColumnName("IN_PESSOA_FISICA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InPessoaJuridica)
                    .IsRequired()
                    .HasColumnName("IN_PESSOA_JURIDICA")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdImpostoNavigation)
                    .WithMany(p => p.TipoContaReceberImposto)
                    .HasForeignKey(d => d.IdImposto)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoContaNavigation)
                    .WithMany(p => p.TipoContaReceberImposto)
                    .HasForeignKey(d => d.IdTipoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TipoContaReceberImposto)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TipoContaReceberPerfil>(entity =>
            {
                entity.HasKey(e => e.IdTipocontareceberPerfil);

                entity.ToTable("TipoContaReceber_Perfil");

                entity.Property(e => e.IdTipocontareceberPerfil).HasColumnName("ID_TIPOCONTARECEBER_PERFIL");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdPerfil).HasColumnName("ID_PERFIL");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdPerfilNavigation)
                    .WithMany(p => p.TipoContaReceberPerfil)
                    .HasForeignKey(d => d.IdPerfil)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoContaNavigation)
                    .WithMany(p => p.TipoContaReceberPerfil)
                    .HasForeignKey(d => d.IdTipoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TipoContaReceberPerfil)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TipoDiversos>(entity =>
            {
                entity.HasKey(e => e.IdTipoDiversos);

                entity.HasIndex(e => e.TxDescTipo, "IX_TipoDiversos")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdTipoDiversos, "IX_TipoDiversos_7_595689370__K1_K2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdTipoTabela, e.InAtivo }, "IX_TipoDiversos_ID_TIPO_TABELA_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.InAtivo, "IX_TipoDiversos_IN_ATIVO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.TxDescTipo, "IX_TipoDiversos_K2_1")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdTipoTabela, "IX_TipoDiversos_K3_1_6")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.InAtivo, "IX_TipoDiversos_K6_1_2")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.TxAbrevTipo, "IX_TipoDiversos_TX_ABREV_TIPO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdTipoTabela, "_dta_index_TipoDiversos_7_595689370__K3_1_2_4_5_6")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InVisivel)
                    .IsRequired()
                    .HasColumnName("IN_VISIVEL")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxAbrevTipo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABREV_TIPO");

                entity.Property(e => e.TxDescTipo)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TIPO");

                entity.HasOne(d => d.IdTipoTabelaNavigation)
                    .WithMany(p => p.TipoDiversos)
                    .HasForeignKey(d => d.IdTipoTabela)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoTabela_TipoDiversos_FK1");
            });

            modelBuilder.Entity<TipoDiversosCaracteristica>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoDiversos, e.IdAtributo });

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.IdAtributo).HasColumnName("ID_ATRIBUTO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxValorAtributo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_ATRIBUTO");

                entity.HasOne(d => d.IdAtributoNavigation)
                    .WithMany(p => p.TipoDiversosCaracteristica)
                    .HasForeignKey(d => d.IdAtributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoDiversosCaracteristica_AtributoTipoDiversos");

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.TipoDiversosCaracteristica)
                    .HasForeignKey(d => d.IdTipoDiversos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoDiversosCaracteristica_TipoDiversos");
            });

            modelBuilder.Entity<TipoDiversosConversao>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoDiversosPai, e.IdTipoDiversos });

                entity.Property(e => e.IdTipoDiversosPai).HasColumnName("ID_TIPO_DIVERSOS_PAI");

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.DtAlteracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ALTERACAO");

                entity.Property(e => e.IdUsuarioAlterou).HasColumnName("ID_USUARIO_ALTEROU");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Valor).HasColumnName("VALOR");

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.TipoDiversosConversaoIdTipoDiversosNavigation)
                    .HasForeignKey(d => d.IdTipoDiversos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoDiversosConversao_TipoDiversos");

                entity.HasOne(d => d.IdTipoDiversosPaiNavigation)
                    .WithMany(p => p.TipoDiversosConversaoIdTipoDiversosPaiNavigation)
                    .HasForeignKey(d => d.IdTipoDiversosPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoDiversosConversao_TipoDiversos1");

                entity.HasOne(d => d.IdUsuarioAlterouNavigation)
                    .WithMany(p => p.TipoDiversosConversao)
                    .HasForeignKey(d => d.IdUsuarioAlterou)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoDiversosConversao_Usuario");
            });

            modelBuilder.Entity<TipoDiversosTipoDiversos>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoDiversosPai, e.IdTipoDiversosFilho });

                entity.ToTable("TipoDiversos_TipoDiversos");

                entity.Property(e => e.IdTipoDiversosPai).HasColumnName("ID_TIPO_DIVERSOS_PAI");

                entity.Property(e => e.IdTipoDiversosFilho).HasColumnName("ID_TIPO_DIVERSOS_FILHO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdTipoDiversosFilhoNavigation)
                    .WithMany(p => p.TipoDiversosTipoDiversosIdTipoDiversosFilhoNavigation)
                    .HasForeignKey(d => d.IdTipoDiversosFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_TipoDiversos_TipoDiversos_FK2");

                entity.HasOne(d => d.IdTipoDiversosPaiNavigation)
                    .WithMany(p => p.TipoDiversosTipoDiversosIdTipoDiversosPaiNavigation)
                    .HasForeignKey(d => d.IdTipoDiversosPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_TipoDiversos_TipoDiversos_FK1");
            });

            modelBuilder.Entity<TipoDocumento>(entity =>
            {
                entity.HasKey(e => e.IdTipoDocumento)
                    .HasName("TipoDocumento_PK");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.NmTipoDocumento)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_DOCUMENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<TipoDocumentoPessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoDocumento, e.IdPessoaEntidade })
                    .HasName("TipoDocumento_PessoaEntidade_PK");

                entity.ToTable("TipoDocumento_PessoaEntidade");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.TipoDocumentoPessoaEntidade)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_TipoDocumento_PessoaEntidade_FK1");

                entity.HasOne(d => d.IdTipoDocumentoNavigation)
                    .WithMany(p => p.TipoDocumentoPessoaEntidade)
                    .HasForeignKey(d => d.IdTipoDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDocumento_TipoDocumento_PessoaEntidade_FK1");
            });

            modelBuilder.Entity<TipoEsperaCc>(entity =>
            {
                entity.HasKey(e => e.IdTipoEsperaCc)
                    .HasName("PK__TipoEsperaCC__399D3FF0");

                entity.ToTable("TipoEsperaCC");

                entity.Property(e => e.IdTipoEsperaCc).HasColumnName("ID_TIPO_ESPERA_CC");

                entity.Property(e => e.TxDescTipoEspera)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TIPO_ESPERA");
            });

            modelBuilder.Entity<TipoInventario>(entity =>
            {
                entity.HasKey(e => e.IdTipoInventario);

                entity.Property(e => e.IdTipoInventario).HasColumnName("ID_TIPO_INVENTARIO");

                entity.Property(e => e.NmTipoInventario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_INVENTARIO");
            });

            modelBuilder.Entity<TipoLancamentoBancario>(entity =>
            {
                entity.HasKey(e => e.IdTipoLancamentoBancario)
                    .HasName("TipoLancamentoBancario_PK");

                entity.Property(e => e.IdTipoLancamentoBancario).HasColumnName("ID_TIPO_LANCAMENTO_BANCARIO");

                entity.Property(e => e.IdTipoDiversosRestricao).HasColumnName("ID_TIPO_DIVERSOS_RESTRICAO");

                entity.Property(e => e.InCredito).HasColumnName("IN_CREDITO");

                entity.Property(e => e.InExibe).HasColumnName("IN_EXIBE");

                entity.Property(e => e.InPermiteLancamentoPrevisto).HasColumnName("IN_PERMITE_LANCAMENTO_PREVISTO");

                entity.Property(e => e.InRestrito).HasColumnName("IN_RESTRITO");

                entity.Property(e => e.InUsoInterno).HasColumnName("IN_USO_INTERNO");

                entity.Property(e => e.NmTipoLancamentoBancario)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_LANCAMENTO_BANCARIO");

                entity.Property(e => e.NrTipoLancamento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_TIPO_LANCAMENTO");

                entity.Property(e => e.TxHistoricoPadrao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_HISTORICO_PADRAO");

                entity.HasOne(d => d.IdTipoDiversosRestricaoNavigation)
                    .WithMany(p => p.TipoLancamentoBancario)
                    .HasForeignKey(d => d.IdTipoDiversosRestricao)
                    .HasConstraintName("TipoLancamentoBancario_TipoDiversos_FK1");
            });

            modelBuilder.Entity<TipoLogradouroSus>(entity =>
            {
                entity.HasKey(e => e.IdTipoLogradouro)
                    .HasName("PK__TipoLogr__525FB0212C11CB98");

                entity.Property(e => e.IdTipoLogradouro)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_TIPO_LOGRADOURO");

                entity.Property(e => e.TxAbreviatura)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABREVIATURA");

                entity.Property(e => e.TxLogradouro)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGRADOURO");
            });

            modelBuilder.Entity<TipoNovoControle>(entity =>
            {
                entity.HasKey(e => e.IdTipoNovoControle);

                entity.ToTable("Tipo_Novo_Controle");

                entity.Property(e => e.IdTipoNovoControle)
                    .HasColumnName("ID_TIPO_NOVO_CONTROLE")
                    .HasComment("Identificador da tabela Tipo_Novo_Controle");

                entity.Property(e => e.InAtivo)
                    .HasColumnName("IN_ATIVO")
                    .HasComment("Indica se o campo está ativo ou não.");

                entity.Property(e => e.TxDescTipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESC_TIPO")
                    .HasComment("Descrição do campo");
            });

            modelBuilder.Entity<TipoParametro>(entity =>
            {
                entity.HasKey(e => e.IdTipoParametro);

                entity.HasIndex(e => e.TxDescricao, "VerificaUnicidade_TX_DESCRICAO")
                    .IsUnique();

                entity.Property(e => e.IdTipoParametro).HasColumnName("ID_TIPO_PARAMETRO");

                entity.Property(e => e.InAtributoTabela).HasColumnName("IN_ATRIBUTO_TABELA");

                entity.Property(e => e.NmAtributoApresentacao)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO_APRESENTACAO");

                entity.Property(e => e.NmAtributoGravacao)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO_GRAVACAO");

                entity.Property(e => e.NmAtributoTipo)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("NM_ATRIBUTO_TIPO");

                entity.Property(e => e.NmTabelaAtributo)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("NM_TABELA_ATRIBUTO");

                entity.Property(e => e.NrAtributoTamanho).HasColumnName("NR_ATRIBUTO_TAMANHO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<TipoPendencia>(entity =>
            {
                entity.HasKey(e => e.IdTipoPendencia)
                    .HasName("PK_TIPO_PENDENCIA");

                entity.ToTable("Tipo_Pendencia");

                entity.Property(e => e.IdTipoPendencia).HasColumnName("ID_TIPO_PENDENCIA");

                entity.Property(e => e.IdCorreioEletronico).HasColumnName("ID_CORREIO_ELETRONICO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoPendenciaPai).HasColumnName("ID_TIPO_PENDENCIA_PAI");

                entity.Property(e => e.InEnviaEmail).HasColumnName("IN_ENVIA_EMAIL");

                entity.Property(e => e.NmCampoRelacionado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMPO_RELACIONADO");

                entity.Property(e => e.NmTabela)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_TABELA");

                entity.Property(e => e.NmTipoPendencia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_PENDENCIA");

                entity.Property(e => e.QnMaximoEmails).HasColumnName("QN_MAXIMO_EMAILS");

                entity.HasOne(d => d.IdTipoPendenciaPaiNavigation)
                    .WithMany(p => p.InverseIdTipoPendenciaPaiNavigation)
                    .HasForeignKey(d => d.IdTipoPendenciaPai)
                    .HasConstraintName("FK_TIPO_PENDENCIA_TIPO_PENDENCIA");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.TipoPendencia)
                    .HasForeignKey(d => new { d.IdCorreioEletronico, d.IdPessoa })
                    .HasConstraintName("FK_Pessoa_CorreioEletronico_Tipo_Pendencia");
            });

            modelBuilder.Entity<TipoTabela>(entity =>
            {
                entity.HasKey(e => e.IdTipoTabela);

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NmTipoTabela)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO_TABELA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<TipoTabelaTipoTabela>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoTabelaPai, e.IdTipoTabelaFilho });

                entity.ToTable("TipoTabela_TipoTabela");

                entity.Property(e => e.IdTipoTabelaPai).HasColumnName("ID_TIPO_TABELA_PAI");

                entity.Property(e => e.IdTipoTabelaFilho).HasColumnName("ID_TIPO_TABELA_FILHO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdTipoTabelaFilhoNavigation)
                    .WithMany(p => p.TipoTabelaTipoTabelaIdTipoTabelaFilhoNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoTabela_TipoTabela_TipoTabela_FK2");

                entity.HasOne(d => d.IdTipoTabelaPaiNavigation)
                    .WithMany(p => p.TipoTabelaTipoTabelaIdTipoTabelaPaiNavigation)
                    .HasForeignKey(d => d.IdTipoTabelaPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoTabela_TipoTabela_TipoTabela_FK1");
            });

            modelBuilder.Entity<TissOutrasDespesas>(entity =>
            {
                entity.HasKey(e => e.IdOutraDespesa);

                entity.ToTable("TISS_OutrasDespesas");

                entity.HasIndex(e => e.IdConta, "IX_TISS_OutrasDespesas_ID_CONTA")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdOutraDespesa).HasColumnName("ID_OUTRA_DESPESA");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTipoLancamento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeMedida)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.TissOutrasDespesas)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISS_OutrasDespesas_Conta");

                entity.HasOne(d => d.IdGuiaNavigation)
                    .WithMany(p => p.TissOutrasDespesas)
                    .HasForeignKey(d => d.IdGuia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISS_OutrasDespesas_Guia");
            });

            modelBuilder.Entity<TissProcedimentosExecutados>(entity =>
            {
                entity.HasKey(e => e.IdProcedimentoExecutado);

                entity.ToTable("TISS_ProcedimentosExecutados");

                entity.Property(e => e.IdProcedimentoExecutado).HasColumnName("ID_PROCEDIMENTO_EXECUTADO");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm).HasColumnName("NR_CRM");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfCrm).HasColumnName("UF_CRM");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.TissProcedimentosExecutados)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISS_ProcedimentosExecutados_Conta");

                entity.HasOne(d => d.IdGuiaNavigation)
                    .WithMany(p => p.TissProcedimentosExecutados)
                    .HasForeignKey(d => d.IdGuia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISS_ProcedimentosExecutados_Guia");
            });

            modelBuilder.Entity<TissProcedimentosExecutadosUnimedBh>(entity =>
            {
                entity.HasKey(e => e.IdProcedimentoExecutadoUnimedbh);

                entity.ToTable("TISS_ProcedimentosExecutadosUnimedBH");

                entity.Property(e => e.IdProcedimentoExecutadoUnimedbh).HasColumnName("ID_PROCEDIMENTO_EXECUTADO_UNIMEDBH");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InMatmed).HasColumnName("IN_MATMED");

                entity.Property(e => e.InTaxa).HasColumnName("IN_TAXA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONSELHO");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");

                entity.HasOne(d => d.IdContaNavigation)
                    .WithMany(p => p.TissProcedimentosExecutadosUnimedBh)
                    .HasForeignKey(d => d.IdConta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISS_ProcedimentosExecutadosUnimedBH_Conta");

                entity.HasOne(d => d.IdGuiaNavigation)
                    .WithMany(p => p.TissProcedimentosExecutadosUnimedBh)
                    .HasForeignKey(d => d.IdGuia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISS_ProcedimentosExecutadosUnimedBH_Guia");
            });

            modelBuilder.Entity<TissTipoDiversos>(entity =>
            {
                entity.HasKey(e => e.IdTiss);

                entity.ToTable("Tiss_TipoDiversos");

                entity.Property(e => e.IdTiss).HasColumnName("ID_TISS");

                entity.Property(e => e.CdTiss)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_TISS");

                entity.Property(e => e.DescTiss)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESC_TISS");

                entity.Property(e => e.IdTipoDiversos).HasColumnName("ID_TIPO_DIVERSOS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdTipoDiversosNavigation)
                    .WithMany(p => p.TissTipoDiversos)
                    .HasForeignKey(d => d.IdTipoDiversos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tiss_TipoDiversos_TipoDiversos");
            });

            modelBuilder.Entity<TissarquivoGerado>(entity =>
            {
                entity.HasKey(e => e.IdArquivoGerado)
                    .HasName("TISSArquivoGerado_PK");

                entity.ToTable("TISSArquivoGerado");

                entity.HasIndex(e => e.DtGeracao, "IX_TISSArquivoGerado_DT_GERACAO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.IdLote, "IX_TISSArquivoGerado_ID_LOTE")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdArquivoGerado).HasColumnName("ID_ARQUIVO_GERADO");

                entity.Property(e => e.DtGeracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO");

                entity.Property(e => e.IdFinalidade).HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmArquivoGerado)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_GERADO");

                entity.Property(e => e.NrSequencialEspecifico)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_SEQUENCIAL_ESPECIFICO");

                entity.Property(e => e.NrSequencialGeral).HasColumnName("NR_SEQUENCIAL_GERAL");

                entity.Property(e => e.XmArquivo)
                    .HasColumnType("text")
                    .HasColumnName("XM_ARQUIVO");

                entity.HasOne(d => d.IdFinalidadeNavigation)
                    .WithMany(p => p.TissarquivoGerado)
                    .HasForeignKey(d => d.IdFinalidade)
                    .HasConstraintName("FK_TISSArquivoGerado_TISSFinalidade");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TissarquivoGerado)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_TISSArquivoGerado_Usuario");
            });

            modelBuilder.Entity<TissarquivoGeradoRecurso>(entity =>
            {
                entity.HasKey(e => e.IdArquivoGerado)
                    .HasName("TISSArquivoGeradoRecurso_PK");

                entity.ToTable("TISSArquivoGeradoRecurso");

                entity.Property(e => e.IdArquivoGerado).HasColumnName("ID_ARQUIVO_GERADO");

                entity.Property(e => e.DtGeracao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GERACAO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdFinalidade).HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmArquivoGerado)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO_GERADO");

                entity.Property(e => e.NrSequencialEspecifico)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_SEQUENCIAL_ESPECIFICO");

                entity.Property(e => e.NrSequencialGeral).HasColumnName("NR_SEQUENCIAL_GERAL");

                entity.Property(e => e.XmArquivo)
                    .HasColumnType("text")
                    .HasColumnName("XM_ARQUIVO");

                entity.HasOne(d => d.IdFinalidadeNavigation)
                    .WithMany(p => p.TissarquivoGeradoRecurso)
                    .HasForeignKey(d => d.IdFinalidade)
                    .HasConstraintName("FK_TISSArquivoGeradoRecurso_TISSFinalidade");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TissarquivoGeradoRecurso)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_TISSArquivoGeradoRecurso_Usuario");
            });

            modelBuilder.Entity<TisscabecalhoCarta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSCabecalhoCarta");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdCnpjOperadora)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ_OPERADORA");

                entity.Property(e => e.CdPrestadorOperadora)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DtRegistroTransacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO_TRANSACAO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");
            });

            modelBuilder.Entity<TisscabecalhoLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSCabecalhoLote");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdCnpjOperadora)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ_OPERADORA");

                entity.Property(e => e.CdPrestadorOperadora)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DtRegistroTransacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO_TRANSACAO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");
            });

            modelBuilder.Entity<TisscabecalhoLote3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSCabecalhoLote3");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdCnpjOperadora)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ_OPERADORA");

                entity.Property(e => e.CdPrestadorOperadora)
                    .HasMaxLength(165)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DtRegistroTransacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO_TRANSACAO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");
            });

            modelBuilder.Entity<TisscabecalhoLote3MedicinaNuclear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSCabecalhoLote3MedicinaNuclear");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdCnpjOperadora)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ_OPERADORA");

                entity.Property(e => e.CdPrestadorOperadora)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DtRegistroTransacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_REGISTRO_TRANSACAO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");
            });

            modelBuilder.Entity<Tisscarta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSCarta");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdHospitalOperadora)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_HOSPITAL_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DtImpressao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_IMPRESSAO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.NmHospital)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_HOSPITAL");

                entity.Property(e => e.NmOperadora)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NrGuiaRecOperadora).HasColumnName("NR_GUIA_REC_OPERADORA");

                entity.Property(e => e.NrLote).HasColumnName("NR_LOTE");

                entity.Property(e => e.NrProtocolo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NR_PROTOCOLO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.VlTotalRecursado).HasColumnName("VL_TOTAL_RECURSADO");
            });

            modelBuilder.Entity<TisscartaItens>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSCartaItens");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.DtLancamentoInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_INICIO");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdJustificativaGlosaFi).HasColumnName("ID_JUSTIFICATIVA_GLOSA_FI");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");

                entity.Property(e => e.VlRecursado).HasColumnName("VL_RECURSADO");

                entity.Property(e => e.VlRecursadoTotal).HasColumnName("VL_RECURSADO_TOTAL");
            });

            modelBuilder.Entity<TissdePara>(entity =>
            {
                entity.HasKey(e => e.IdDePara)
                    .HasName("TISSDePara_PK");

                entity.ToTable("TISSDePara");

                entity.HasIndex(e => new { e.IdTipo, e.TxValorHospitale, e.IdDePara }, "IX_TISSDePara_K2_K5_K1_3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdTipo, e.TxValorHospitale }, "TISSDePara_K2_K5_3_4")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdDePara).HasColumnName("ID_DE_PARA");

                entity.Property(e => e.DtGravacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GRAVACAO");

                entity.Property(e => e.IdTipo).HasColumnName("ID_TIPO");

                entity.Property(e => e.TxDescricaoTiss)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_TISS");

                entity.Property(e => e.TxValorHospitale)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_HOSPITALE");

                entity.Property(e => e.TxValorTiss)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_TISS");

                entity.HasOne(d => d.IdTipoNavigation)
                    .WithMany(p => p.TissdePara)
                    .HasForeignKey(d => d.IdTipo)
                    .HasConstraintName("TISSTipo_TISSDePara_FK1");
            });

            modelBuilder.Entity<TissdiferencasomatorioitensXmlConta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSDIFERENCASOMATORIOITENS_XML_CONTA");

                entity.Property(e => e.Comparativo).HasColumnName("COMPARATIVO");

                entity.Property(e => e.Comparativo2).HasColumnName("COMPARATIVO2");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.NrGuia)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.Somatorioconta).HasColumnName("SOMATORIOCONTA");

                entity.Property(e => e.Somatorioitens).HasColumnName("SOMATORIOITENS");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.VlTotalDiarias).HasColumnName("VL_TOTAL_DIARIAS");

                entity.Property(e => e.VlTotalGeral).HasColumnName("VL_TOTAL_GERAL");

                entity.Property(e => e.VlTotalMateriais).HasColumnName("VL_TOTAL_MATERIAIS");

                entity.Property(e => e.VlTotalMedicamentos).HasColumnName("VL_TOTAL_MEDICAMENTOS");

                entity.Property(e => e.VlTotalServicos).HasColumnName("VL_TOTAL_SERVICOS");

                entity.Property(e => e.VlTotalTaxas).HasColumnName("VL_TOTAL_TAXAS");
            });

            modelBuilder.Entity<TissdiferencasomatoriototalXmlConta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSDIFERENCASOMATORIOTOTAL_XML_CONTA");

                entity.Property(e => e.DiferencaXmlParaConta).HasColumnName("DIFERENCA_XML_PARA_CONTA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.SomatorioTotalConta).HasColumnName("SOMATORIO_TOTAL_CONTA");

                entity.Property(e => e.SomatorioTotalItensXml).HasColumnName("SOMATORIO_TOTAL_ITENS_XML");
            });

            modelBuilder.Entity<TissequipeResponsavel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSEquipeResponsavel");

                entity.Property(e => e.CdCbos)
                    .IsUnicode(false)
                    .HasColumnName("CD_CBOS");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdGrauParticipacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CD_GRAU_PARTICIPACAO");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgUf)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);

                entity.Property(e => e.UfCrm).HasColumnName("UF_CRM");
            });

            modelBuilder.Entity<TissequipeResponsavel3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSEquipeResponsavel3");

                entity.Property(e => e.CdCbo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_CBO");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm).HasColumnName("NR_CRM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.UfCrm).HasColumnName("UF_CRM");
            });

            modelBuilder.Entity<Tissesquema>(entity =>
            {
                entity.HasKey(e => e.IdEsquema)
                    .HasName("PK_TISSXsd");

                entity.ToTable("TISSEsquema");

                entity.Property(e => e.IdEsquema).HasColumnName("ID_ESQUEMA");

                entity.Property(e => e.IdVersao).HasColumnName("ID_VERSAO");

                entity.Property(e => e.NmArquivo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_ARQUIVO");

                entity.Property(e => e.TxArquivo)
                    .HasColumnType("text")
                    .HasColumnName("TX_ARQUIVO");
            });

            modelBuilder.Entity<Tissfinalidade>(entity =>
            {
                entity.HasKey(e => e.IdFinalidade)
                    .HasName("TISSFinalidade_PK");

                entity.ToTable("TISSFinalidade");

                entity.Property(e => e.IdFinalidade).HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipoMensagem)
                    .HasColumnName("ID_TIPO_MENSAGEM")
                    .HasDefaultValueSql("((8520))");

                entity.Property(e => e.IdVersao).HasColumnName("ID_VERSAO");

                entity.Property(e => e.InExterno).HasColumnName("IN_EXTERNO");

                entity.Property(e => e.InPadrao).HasColumnName("IN_PADRAO");

                entity.Property(e => e.TxArquivo)
                    .HasColumnType("text")
                    .HasColumnName("TX_ARQUIVO");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.Tissfinalidade)
                    .HasForeignKey(d => d.IdOperadora)
                    .HasConstraintName("FK_TISSFinalidade_Pessoa");

                entity.HasOne(d => d.IdVersaoNavigation)
                    .WithMany(p => p.Tissfinalidade)
                    .HasForeignKey(d => d.IdVersao)
                    .HasConstraintName("TISSVersao_TISSFinalidade_FK1");
            });

            modelBuilder.Entity<TissfinalidadeCampoValor>(entity =>
            {
                entity.HasKey(e => e.IdFinalidadeCampoValor)
                    .HasName("TISSFinalidadeCampoValor_PK");

                entity.ToTable("TISSFinalidadeCampoValor");

                entity.HasIndex(e => new { e.IdFinalidade, e.IdOperadora }, "IX_TISSFinalidadeCampoValor_K2_K8")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdFinalidadeCampoValor).HasColumnName("ID_FINALIDADE_CAMPO_VALOR");

                entity.Property(e => e.DtGravacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GRAVACAO");

                entity.Property(e => e.IdFinalidade).HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.IdFonteDados).HasColumnName("ID_FONTE_DADOS");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.NmCampo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMPO");

                entity.Property(e => e.TxNomeCampo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_NOME_CAMPO");

                entity.Property(e => e.TxValorCampo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_CAMPO");

                entity.Property(e => e.TxXpathCampo)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("TX_XPATH_CAMPO");

                entity.HasOne(d => d.IdFinalidadeNavigation)
                    .WithMany(p => p.TissfinalidadeCampoValor)
                    .HasForeignKey(d => d.IdFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TISSFinalidade_TISSFinalidadeCampoValor_FK1");

                entity.HasOne(d => d.IdFonteDadosNavigation)
                    .WithMany(p => p.TissfinalidadeCampoValor)
                    .HasForeignKey(d => d.IdFonteDados)
                    .HasConstraintName("TISSFonteDados_TISSFinalidadeCampoValor_FK1");
            });

            modelBuilder.Entity<TissfinalidadeOperadora>(entity =>
            {
                entity.HasKey(e => e.IdFinalidadeOperadora);

                entity.ToTable("TISSFinalidade_Operadora");

                entity.Property(e => e.IdFinalidadeOperadora).HasColumnName("ID_FINALIDADE_OPERADORA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO");

                entity.Property(e => e.IdFinalidade).HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.HasOne(d => d.IdFinalidadeNavigation)
                    .WithMany(p => p.TissfinalidadeOperadora)
                    .HasForeignKey(d => d.IdFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSFinalidade_Operadora_TISSFinalidade");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.TissfinalidadeOperadora)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSFinalidade_Operadora_Pessoa");
            });

            modelBuilder.Entity<TissfonteDados>(entity =>
            {
                entity.HasKey(e => e.IdFonteDados)
                    .HasName("TISSFonteDados_PK");

                entity.ToTable("TISSFonteDados");

                entity.Property(e => e.IdFonteDados).HasColumnName("ID_FONTE_DADOS");

                entity.Property(e => e.InRaiz).HasColumnName("IN_RAIZ");

                entity.Property(e => e.NmFonteDados)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_FONTE_DADOS");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(750)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");
            });

            modelBuilder.Entity<TissfonteDadosRelacionamento>(entity =>
            {
                entity.HasKey(e => e.IdFonteDadosRelacionamento)
                    .HasName("TISSFonteDadosRelacionamento_PK");

                entity.ToTable("TISSFonteDadosRelacionamento");

                entity.Property(e => e.IdFonteDadosRelacionamento).HasColumnName("ID_FONTE_DADOS_RELACIONAMENTO");

                entity.Property(e => e.IdFonteDadosFilho).HasColumnName("ID_FONTE_DADOS_FILHO");

                entity.Property(e => e.IdFonteDadosPai).HasColumnName("ID_FONTE_DADOS_PAI");

                entity.Property(e => e.InFiltraFonteDados)
                    .IsRequired()
                    .HasColumnName("IN_FILTRA_FONTE_DADOS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TxParametroFilho)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_PARAMETRO_FILHO");

                entity.Property(e => e.TxValorParametroPai)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_PARAMETRO_PAI");

                entity.HasOne(d => d.IdFonteDadosFilhoNavigation)
                    .WithMany(p => p.TissfonteDadosRelacionamentoIdFonteDadosFilhoNavigation)
                    .HasForeignKey(d => d.IdFonteDadosFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TISSFonteDados_TISSFonteDadosRelacionamento_FK2");

                entity.HasOne(d => d.IdFonteDadosPaiNavigation)
                    .WithMany(p => p.TissfonteDadosRelacionamentoIdFonteDadosPaiNavigation)
                    .HasForeignKey(d => d.IdFonteDadosPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TISSFonteDados_TISSFonteDadosRelacionamento_FK1");
            });

            modelBuilder.Entity<TissguiasCarta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasCarta");

                entity.Property(e => e.IdCartarecurso).HasColumnName("ID_CARTARECURSO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdJustificativaGlosaFi).HasColumnName("ID_JUSTIFICATIVA_GLOSA_FI");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrGuia)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacoes)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACOES");
            });

            modelBuilder.Entity<TissguiasLote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLote");

                entity.Property(e => e.Aborto).HasColumnName("ABORTO");

                entity.Property(e => e.AtendimentoRnSalaParto).HasColumnName("ATENDIMENTO_RN_SALA_PARTO");

                entity.Property(e => e.CdCid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID");

                entity.Property(e => e.CdCidAtendimento)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_ATENDIMENTO");

                entity.Property(e => e.CdCidSaida)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_SAIDA");

                entity.Property(e => e.CdCidSaidaObito)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_SAIDA_OBITO");

                entity.Property(e => e.CdMedicoExecutanteOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_MEDICO_EXECUTANTE_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.CdTabelaCid)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID");

                entity.Property(e => e.CdTabelaCidAtendimento)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID_ATENDIMENTO");

                entity.Property(e => e.CdTabelaCidSaida)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID_SAIDA");

                entity.Property(e => e.CdTabelaCidSaidaObito)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID_SAIDA_OBITO");

                entity.Property(e => e.ComplicacaoNeonatal).HasColumnName("COMPLICACAO_NEONATAL");

                entity.Property(e => e.ComplicacaoPeriodoPuerperio).HasColumnName("COMPLICACAO_PERIODO_PUERPERIO");

                entity.Property(e => e.CpfMedicoExecutante)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CPF_MEDICO_EXECUTANTE");

                entity.Property(e => e.CrmExecutante)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CRM_EXECUTANTE");

                entity.Property(e => e.CrmMedicoExecutante)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CRM_MEDICO_EXECUTANTE");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.DtValidadeCartao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_CARTAO");

                entity.Property(e => e.EmGestacao).HasColumnName("EM_GESTACAO");

                entity.Property(e => e.IdAcomodacaoAutorizada).HasColumnName("ID_ACOMODACAO_AUTORIZADA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdRegimeInternacao).HasColumnName("ID_REGIME_INTERNACAO");

                entity.Property(e => e.IdTipoAlta).HasColumnName("ID_TIPO_ALTA");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoCaraterSolicitacao).HasColumnName("ID_TIPO_CARATER_SOLICITACAO");

                entity.Property(e => e.IdUnidadeTempoDoenca).HasColumnName("ID_UNIDADE_TEMPO_DOENCA");

                entity.Property(e => e.InBaixoPeso).HasColumnName("IN_BAIXO_PESO");

                entity.Property(e => e.InTipoFaturamento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_TIPO_FATURAMENTO");

                entity.Property(e => e.NmMedicoExecutante)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO_EXECUTANTE");

                entity.Property(e => e.NmPlano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");

                entity.Property(e => e.NmTitular)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrDeclaracaoObito).HasColumnName("NR_DECLARACAO_OBITO");

                entity.Property(e => e.NrDnvDo)
                    .IsUnicode(false)
                    .HasColumnName("NR_DNV_DO");

                entity.Property(e => e.NrGuia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.NrPrestador)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRESTADOR");

                entity.Property(e => e.PartoCesareo).HasColumnName("PARTO_CESAREO");

                entity.Property(e => e.PartoNormal).HasColumnName("PARTO_NORMAL");

                entity.Property(e => e.QdTempoDoenca).HasColumnName("QD_TEMPO_DOENCA");

                entity.Property(e => e.QtNascidoMorto).HasColumnName("QT_NASCIDO_MORTO");

                entity.Property(e => e.QtNascidoVivoPrematuro).HasColumnName("QT_NASCIDO_VIVO_PREMATURO");

                entity.Property(e => e.QtNascidoVivoTermo).HasColumnName("QT_NASCIDO_VIVO_TERMO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TranstornoMaternoRelGravidez).HasColumnName("TRANSTORNO_MATERNO_REL_GRAVIDEZ");

                entity.Property(e => e.TxDescricao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxDescricaoCidAtendimento)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_CID_ATENDIMENTO");

                entity.Property(e => e.TxDescricaoCidSaida)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_CID_SAIDA");

                entity.Property(e => e.TxDescricaoCidSaidaObito)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_CID_SAIDA_OBITO");

                entity.Property(e => e.TxObservacaoUnimed)
                    .HasMaxLength(303)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_UNIMED");

                entity.Property(e => e.TxObservacaoUnimedMedicinaNuclear)
                    .HasMaxLength(303)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_UNIMED_MEDICINA_NUCLEAR");

                entity.Property(e => e.UfMedicoExecutante)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_MEDICO_EXECUTANTE");

                entity.Property(e => e.VlTotalDiarias)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS");

                entity.Property(e => e.VlTotalDiariasMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_MN");

                entity.Property(e => e.VlTotalDiariasUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_UNIMED");

                entity.Property(e => e.VlTotalGases)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GASES");

                entity.Property(e => e.VlTotalGasesMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GASES_MN");

                entity.Property(e => e.VlTotalGasesUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GASES_UNIMED");

                entity.Property(e => e.VlTotalGeral)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GERAL");

                entity.Property(e => e.VlTotalGeralMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GERAL_MN");

                entity.Property(e => e.VlTotalGeralUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GERAL_UNIMED");

                entity.Property(e => e.VlTotalMateriais)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS");

                entity.Property(e => e.VlTotalMateriaisMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_MN");

                entity.Property(e => e.VlTotalMateriaisUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_UNIMED");

                entity.Property(e => e.VlTotalMedicamentos)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS");

                entity.Property(e => e.VlTotalMedicamentosMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_MN");

                entity.Property(e => e.VlTotalMedicamentosUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_UNIMED");

                entity.Property(e => e.VlTotalServicos)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_SERVICOS");

                entity.Property(e => e.VlTotalServicosMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_SERVICOS_MN");

                entity.Property(e => e.VlTotalServicosUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_SERVICOS_UNIMED");

                entity.Property(e => e.VlTotalTaxas)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS");

                entity.Property(e => e.VlTotalTaxasMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_MN");

                entity.Property(e => e.VlTotalTaxasUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_UNIMED");
            });

            modelBuilder.Entity<TissguiasLote3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLote3");

                entity.Property(e => e.AtendimentoRn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATENDIMENTO_RN");

                entity.Property(e => e.CdCid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID");

                entity.Property(e => e.CdCidObito)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_OBITO");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DeclaracaoNascido)
                    .IsUnicode(false)
                    .HasColumnName("DECLARACAO_NASCIDO");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.DtValidadeSenha)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_SENHA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdIndicadorAcidente).HasColumnName("ID_INDICADOR_ACIDENTE");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdRegimeInternacao).HasColumnName("ID_REGIME_INTERNACAO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoCaraterSolicitacao).HasColumnName("ID_TIPO_CARATER_SOLICITACAO");

                entity.Property(e => e.InRetornoAmbulatorio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_RETORNO_AMBULATORIO");

                entity.Property(e => e.InTipoFaturamento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_TIPO_FATURAMENTO");

                entity.Property(e => e.IndicadorObito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDICADOR_OBITO");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrDeclaracaoObito).HasColumnName("NR_DECLARACAO_OBITO");

                entity.Property(e => e.NrGuia)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrGuiaConta)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA_CONTA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.NrPrestador)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRESTADOR");

                entity.Property(e => e.QtNascidoMorto).HasColumnName("QT_NASCIDO_MORTO");

                entity.Property(e => e.QtNascidoVivoPrematuro).HasColumnName("QT_NASCIDO_VIVO_PREMATURO");

                entity.Property(e => e.QtNascidoVivoTermo).HasColumnName("QT_NASCIDO_VIVO_TERMO");

                entity.Property(e => e.RvVersaoLinha)
                    .HasColumnType("datetime")
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.Property(e => e.VlServicoMn).HasColumnName("VL_SERVICO_MN");

                entity.Property(e => e.VlTotalDiarias).HasColumnName("VL_TOTAL_DIARIAS");

                entity.Property(e => e.VlTotalDiariasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_MN");

                entity.Property(e => e.VlTotalGases).HasColumnName("VL_TOTAL_GASES");

                entity.Property(e => e.VlTotalGasesMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_GASES_MN");

                entity.Property(e => e.VlTotalGeral).HasColumnName("VL_TOTAL_GERAL");

                entity.Property(e => e.VlTotalGeralMn).HasColumnName("VL_TOTAL_GERAL_MN");

                entity.Property(e => e.VlTotalMateriais).HasColumnName("VL_TOTAL_MATERIAIS");

                entity.Property(e => e.VlTotalMateriaisMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_MN");

                entity.Property(e => e.VlTotalMedicamentos).HasColumnName("VL_TOTAL_MEDICAMENTOS");

                entity.Property(e => e.VlTotalMedicamentosMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_MN");

                entity.Property(e => e.VlTotalOpme).HasColumnName("VL_TOTAL_OPME");

                entity.Property(e => e.VlTotalOpmeMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_OPME_MN");

                entity.Property(e => e.VlTotalTaxas).HasColumnName("VL_TOTAL_TAXAS");

                entity.Property(e => e.VlTotalTaxasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_MN");
            });

            modelBuilder.Entity<TissguiasLote3Guia>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLote3_Guia");

                entity.Property(e => e.AtendimentoRn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATENDIMENTO_RN");

                entity.Property(e => e.CdCid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID");

                entity.Property(e => e.CdCidObito)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_OBITO");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DeclaracaoNascido)
                    .IsUnicode(false)
                    .HasColumnName("DECLARACAO_NASCIDO");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.DtValidadeSenha)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_SENHA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdIndicadorAcidente).HasColumnName("ID_INDICADOR_ACIDENTE");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdRegimeInternacao).HasColumnName("ID_REGIME_INTERNACAO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoCaraterSolicitacao).HasColumnName("ID_TIPO_CARATER_SOLICITACAO");

                entity.Property(e => e.InTipoFaturamento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_TIPO_FATURAMENTO");

                entity.Property(e => e.IndicadorObito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDICADOR_OBITO");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrDeclaracaoObito).HasColumnName("NR_DECLARACAO_OBITO");

                entity.Property(e => e.NrGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.Property(e => e.VlServicoMn).HasColumnName("VL_SERVICO_MN");

                entity.Property(e => e.VlTotalDiarias).HasColumnName("VL_TOTAL_DIARIAS");

                entity.Property(e => e.VlTotalDiariasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_MN");

                entity.Property(e => e.VlTotalGases).HasColumnName("VL_TOTAL_GASES");

                entity.Property(e => e.VlTotalGasesMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_GASES_MN");

                entity.Property(e => e.VlTotalGeral).HasColumnName("VL_TOTAL_GERAL");

                entity.Property(e => e.VlTotalGeralMn).HasColumnName("VL_TOTAL_GERAL_MN");

                entity.Property(e => e.VlTotalMateriais).HasColumnName("VL_TOTAL_MATERIAIS");

                entity.Property(e => e.VlTotalMateriaisMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_MN");

                entity.Property(e => e.VlTotalMedicamentos).HasColumnName("VL_TOTAL_MEDICAMENTOS");

                entity.Property(e => e.VlTotalMedicamentosMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_MN");

                entity.Property(e => e.VlTotalOpme).HasColumnName("VL_TOTAL_OPME");

                entity.Property(e => e.VlTotalOpmeMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_OPME_MN");

                entity.Property(e => e.VlTotalTaxas).HasColumnName("VL_TOTAL_TAXAS");

                entity.Property(e => e.VlTotalTaxasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_MN");
            });

            modelBuilder.Entity<TissguiasLote3Teste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLote3Teste");

                entity.Property(e => e.AtendimentoRn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATENDIMENTO_RN");

                entity.Property(e => e.CdCid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID");

                entity.Property(e => e.CdCidObito)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_OBITO");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DeclaracaoNascido)
                    .IsUnicode(false)
                    .HasColumnName("DECLARACAO_NASCIDO");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.DtValidadeSenha)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_SENHA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdIndicadorAcidente).HasColumnName("ID_INDICADOR_ACIDENTE");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdRegimeInternacao).HasColumnName("ID_REGIME_INTERNACAO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoCaraterSolicitacao).HasColumnName("ID_TIPO_CARATER_SOLICITACAO");

                entity.Property(e => e.InRetornoAmbulatorio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_RETORNO_AMBULATORIO");

                entity.Property(e => e.InTipoFaturamento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_TIPO_FATURAMENTO");

                entity.Property(e => e.IndicadorObito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDICADOR_OBITO");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrDeclaracaoObito).HasColumnName("NR_DECLARACAO_OBITO");

                entity.Property(e => e.NrGuia)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrGuiaConta)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA_CONTA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.NrPrestador)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRESTADOR");

                entity.Property(e => e.RvVersaoLinha)
                    .HasColumnType("datetime")
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.Property(e => e.VlServicoMn).HasColumnName("VL_SERVICO_MN");

                entity.Property(e => e.VlTotalDiarias).HasColumnName("VL_TOTAL_DIARIAS");

                entity.Property(e => e.VlTotalDiariasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_MN");

                entity.Property(e => e.VlTotalGases).HasColumnName("VL_TOTAL_GASES");

                entity.Property(e => e.VlTotalGasesMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_GASES_MN");

                entity.Property(e => e.VlTotalGeral).HasColumnName("VL_TOTAL_GERAL");

                entity.Property(e => e.VlTotalGeralMn).HasColumnName("VL_TOTAL_GERAL_MN");

                entity.Property(e => e.VlTotalMateriais).HasColumnName("VL_TOTAL_MATERIAIS");

                entity.Property(e => e.VlTotalMateriaisMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_MN");

                entity.Property(e => e.VlTotalMedicamentos).HasColumnName("VL_TOTAL_MEDICAMENTOS");

                entity.Property(e => e.VlTotalMedicamentosMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_MN");

                entity.Property(e => e.VlTotalOpme).HasColumnName("VL_TOTAL_OPME");

                entity.Property(e => e.VlTotalOpmeMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_OPME_MN");

                entity.Property(e => e.VlTotalTaxas).HasColumnName("VL_TOTAL_TAXAS");

                entity.Property(e => e.VlTotalTaxasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_MN");
            });

            modelBuilder.Entity<TissguiasLote3Tk98834>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLote3TK98834");

                entity.Property(e => e.AtendimentoRn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATENDIMENTO_RN");

                entity.Property(e => e.CdCid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID");

                entity.Property(e => e.CdCidObito)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_OBITO");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DeclaracaoNascido)
                    .IsUnicode(false)
                    .HasColumnName("DECLARACAO_NASCIDO");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtAutorizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_AUTORIZACAO");

                entity.Property(e => e.DtFechamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FECHAMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.DtValidadeSenha)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_SENHA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdIndicadorAcidente).HasColumnName("ID_INDICADOR_ACIDENTE");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdRegimeInternacao).HasColumnName("ID_REGIME_INTERNACAO");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoCaraterSolicitacao).HasColumnName("ID_TIPO_CARATER_SOLICITACAO");

                entity.Property(e => e.InRetornoAmbulatorio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_RETORNO_AMBULATORIO");

                entity.Property(e => e.InTipoFaturamento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_TIPO_FATURAMENTO");

                entity.Property(e => e.IndicadorObito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDICADOR_OBITO");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrDeclaracaoObito).HasColumnName("NR_DECLARACAO_OBITO");

                entity.Property(e => e.NrGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrGuiaConta)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA_CONTA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlServico).HasColumnName("VL_SERVICO");

                entity.Property(e => e.VlServicoMn).HasColumnName("VL_SERVICO_MN");

                entity.Property(e => e.VlTotalDiarias).HasColumnName("VL_TOTAL_DIARIAS");

                entity.Property(e => e.VlTotalDiariasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_MN");

                entity.Property(e => e.VlTotalGases).HasColumnName("VL_TOTAL_GASES");

                entity.Property(e => e.VlTotalGasesMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_GASES_MN");

                entity.Property(e => e.VlTotalGeral).HasColumnName("VL_TOTAL_GERAL");

                entity.Property(e => e.VlTotalGeralMn).HasColumnName("VL_TOTAL_GERAL_MN");

                entity.Property(e => e.VlTotalMateriais).HasColumnName("VL_TOTAL_MATERIAIS");

                entity.Property(e => e.VlTotalMateriaisMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_MN");

                entity.Property(e => e.VlTotalMedicamentos).HasColumnName("VL_TOTAL_MEDICAMENTOS");

                entity.Property(e => e.VlTotalMedicamentosMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_MN");

                entity.Property(e => e.VlTotalOpme).HasColumnName("VL_TOTAL_OPME");

                entity.Property(e => e.VlTotalOpmeMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_OPME_MN");

                entity.Property(e => e.VlTotalTaxas).HasColumnName("VL_TOTAL_TAXAS");

                entity.Property(e => e.VlTotalTaxasMn)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_MN");
            });

            modelBuilder.Entity<TissguiasLoteConsulta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLoteConsulta");

                entity.Property(e => e.Aborto).HasColumnName("ABORTO");

                entity.Property(e => e.AtendimentoRnSalaParto).HasColumnName("ATENDIMENTO_RN_SALA_PARTO");

                entity.Property(e => e.CdCid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID");

                entity.Property(e => e.CdCidAtendimento)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_ATENDIMENTO");

                entity.Property(e => e.CdCidSaida)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_SAIDA");

                entity.Property(e => e.CdCidSaidaObito)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CID_SAIDA_OBITO");

                entity.Property(e => e.CdMedicoExecutanteOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_MEDICO_EXECUTANTE_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.CdTabelaCid)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID");

                entity.Property(e => e.CdTabelaCidAtendimento)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID_ATENDIMENTO");

                entity.Property(e => e.CdTabelaCidSaida)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID_SAIDA");

                entity.Property(e => e.CdTabelaCidSaidaObito)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA_CID_SAIDA_OBITO");

                entity.Property(e => e.ComplicacaoNeonatal).HasColumnName("COMPLICACAO_NEONATAL");

                entity.Property(e => e.ComplicacaoPeriodoPuerperio).HasColumnName("COMPLICACAO_PERIODO_PUERPERIO");

                entity.Property(e => e.CpfMedicoExecutante)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CPF_MEDICO_EXECUTANTE");

                entity.Property(e => e.CrmExecutante)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CRM_EXECUTANTE");

                entity.Property(e => e.CrmMedicoExecutante)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CRM_MEDICO_EXECUTANTE");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.DtValidadeCartao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE_CARTAO");

                entity.Property(e => e.EmGestacao).HasColumnName("EM_GESTACAO");

                entity.Property(e => e.IdAcomodacaoAutorizada).HasColumnName("ID_ACOMODACAO_AUTORIZADA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMotivoSaida).HasColumnName("ID_MOTIVO_SAIDA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdRegimeInternacao).HasColumnName("ID_REGIME_INTERNACAO");

                entity.Property(e => e.IdTipoAlta).HasColumnName("ID_TIPO_ALTA");

                entity.Property(e => e.IdTipoAtendimento).HasColumnName("ID_TIPO_ATENDIMENTO");

                entity.Property(e => e.IdTipoCaraterSolicitacao).HasColumnName("ID_TIPO_CARATER_SOLICITACAO");

                entity.Property(e => e.IdUnidadeTempoDoenca).HasColumnName("ID_UNIDADE_TEMPO_DOENCA");

                entity.Property(e => e.InBaixoPeso).HasColumnName("IN_BAIXO_PESO");

                entity.Property(e => e.InTipoFaturamento)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_TIPO_FATURAMENTO");

                entity.Property(e => e.NmMedicoExecutante)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO_EXECUTANTE");

                entity.Property(e => e.NmPlano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");

                entity.Property(e => e.NmTitular)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrDeclaracaoObito).HasColumnName("NR_DECLARACAO_OBITO");

                entity.Property(e => e.NrDnvDo)
                    .IsUnicode(false)
                    .HasColumnName("NR_DNV_DO");

                entity.Property(e => e.NrGuia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.NrPrestador)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRESTADOR");

                entity.Property(e => e.PartoCesareo).HasColumnName("PARTO_CESAREO");

                entity.Property(e => e.PartoNormal).HasColumnName("PARTO_NORMAL");

                entity.Property(e => e.QdTempoDoenca).HasColumnName("QD_TEMPO_DOENCA");

                entity.Property(e => e.QtNascidoMorto).HasColumnName("QT_NASCIDO_MORTO");

                entity.Property(e => e.QtNascidoVivoPrematuro).HasColumnName("QT_NASCIDO_VIVO_PREMATURO");

                entity.Property(e => e.QtNascidoVivoTermo).HasColumnName("QT_NASCIDO_VIVO_TERMO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TranstornoMaternoRelGravidez).HasColumnName("TRANSTORNO_MATERNO_REL_GRAVIDEZ");

                entity.Property(e => e.TxDescricao)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxDescricaoCidAtendimento)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_CID_ATENDIMENTO");

                entity.Property(e => e.TxDescricaoCidSaida)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_CID_SAIDA");

                entity.Property(e => e.TxDescricaoCidSaidaObito)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_CID_SAIDA_OBITO");

                entity.Property(e => e.TxObservacaoUnimed)
                    .HasMaxLength(303)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_UNIMED");

                entity.Property(e => e.TxObservacaoUnimedMedicinaNuclear)
                    .HasMaxLength(303)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO_UNIMED_MEDICINA_NUCLEAR");

                entity.Property(e => e.UfMedicoExecutante)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_MEDICO_EXECUTANTE");

                entity.Property(e => e.VlTotalDiarias)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS");

                entity.Property(e => e.VlTotalDiariasMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_MN");

                entity.Property(e => e.VlTotalDiariasUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_DIARIAS_UNIMED");

                entity.Property(e => e.VlTotalGases)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GASES");

                entity.Property(e => e.VlTotalGasesMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GASES_MN");

                entity.Property(e => e.VlTotalGasesUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GASES_UNIMED");

                entity.Property(e => e.VlTotalGeral)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GERAL");

                entity.Property(e => e.VlTotalGeralMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GERAL_MN");

                entity.Property(e => e.VlTotalGeralUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_GERAL_UNIMED");

                entity.Property(e => e.VlTotalMateriais)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS");

                entity.Property(e => e.VlTotalMateriaisMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_MN");

                entity.Property(e => e.VlTotalMateriaisUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MATERIAIS_UNIMED");

                entity.Property(e => e.VlTotalMedicamentos)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS");

                entity.Property(e => e.VlTotalMedicamentosMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_MN");

                entity.Property(e => e.VlTotalMedicamentosUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_MEDICAMENTOS_UNIMED");

                entity.Property(e => e.VlTotalServicos)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_SERVICOS");

                entity.Property(e => e.VlTotalServicosMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_SERVICOS_MN");

                entity.Property(e => e.VlTotalServicosUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_SERVICOS_UNIMED");

                entity.Property(e => e.VlTotalTaxas)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS");

                entity.Property(e => e.VlTotalTaxasMn)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_MN");

                entity.Property(e => e.VlTotalTaxasUnimed)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_TOTAL_TAXAS_UNIMED");
            });

            modelBuilder.Entity<TissguiasLoteConsulta3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLoteConsulta3");

                entity.Property(e => e.AtendimentoRn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATENDIMENTO_RN");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdIndicadorAcidente).HasColumnName("ID_INDICADOR_ACIDENTE");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.InRetornoAmbulatorio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IN_RETORNO_AMBULATORIO");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NmTitular)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.NrGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");
            });

            modelBuilder.Entity<TissguiasLoteHonorarioCooperado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSGuiasLoteHonorarioCooperado");

                entity.Property(e => e.CdCnes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNES");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdPrestadorOperadora)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_OPERADORA");

                entity.Property(e => e.CdRegistroAns)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_REGISTRO_ANS");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtGuia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_GUIA");

                entity.Property(e => e.DtSaida)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_SAIDA");

                entity.Property(e => e.IdAcomodacaoAutorizada).HasColumnName("ID_ACOMODACAO_AUTORIZADA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.NmHospital)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_HOSPITAL");

                entity.Property(e => e.NmOperadora)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_OPERADORA");

                entity.Property(e => e.NmPlano)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO");

                entity.Property(e => e.NmProfissionalSaude)
                    .IsUnicode(false)
                    .HasColumnName("NM_PROFISSIONAL_SAUDE");

                entity.Property(e => e.NmTitular)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_TITULAR");

                entity.Property(e => e.NrAutorizacao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_AUTORIZACAO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.NrGuia)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_GUIA");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.NrPrestador)
                    .IsUnicode(false)
                    .HasColumnName("NR_PRESTADOR");

                entity.Property(e => e.RvVersaoLinha)
                    .IsUnicode(false)
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");
            });

            modelBuilder.Entity<Tisshospital>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSHospital");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdHospitalUnimed)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CD_HOSPITAL_UNIMED");

                entity.Property(e => e.CdHospitalUnimedDraViviane)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CD_HOSPITAL_UNIMED_DRA_VIVIANE");

                entity.Property(e => e.CdPrestadorOperadora)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_OPERADORA");

                entity.Property(e => e.Cep)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.IdLogradouroTipo).HasColumnName("ID_LOGRADOURO_TIPO");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.Municipio)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("MUNICIPIO");

                entity.Property(e => e.NmHospital)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_HOSPITAL");

                entity.Property(e => e.NrNumero)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.TxEndereco)
                    .HasMaxLength(301)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");
            });

            modelBuilder.Entity<Tisshospital3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSHospital3");

                entity.Property(e => e.CdCnes)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNES");

                entity.Property(e => e.CdCnpj)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CNPJ");

                entity.Property(e => e.CdPrestadorOperadora)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_OPERADORA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.NmHospital)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_HOSPITAL");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");
            });

            modelBuilder.Entity<Tisslog>(entity =>
            {
                entity.HasKey(e => e.IdTissLog);

                entity.ToTable("TISSLog");

                entity.Property(e => e.IdTissLog).HasColumnName("ID_TISS_LOG");

                entity.Property(e => e.DtLog)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LOG")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoLog).HasColumnName("ID_TIPO_LOG");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.NmBeneficiario)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("NM_BENEFICIARIO");

                entity.Property(e => e.NrMatricula)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_MATRICULA");

                entity.Property(e => e.TxRequest).HasColumnName("TX_REQUEST");

                entity.Property(e => e.TxResponse).HasColumnName("TX_RESPONSE");

                entity.Property(e => e.TxRetornoTratado)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_RETORNO_TRATADO");

                entity.HasOne(d => d.IdTipoLogNavigation)
                    .WithMany(p => p.Tisslog)
                    .HasForeignKey(d => d.IdTipoLog)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSLog_TipoLog");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Tisslog)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSLog_Usuario");
            });

            modelBuilder.Entity<Tisslote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSLote");

                entity.Property(e => e.IdLote)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_LOTE");
            });

            modelBuilder.Entity<Tisslote3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSLote3");

                entity.Property(e => e.IdLote)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_LOTE");
            });

            modelBuilder.Entity<Tissmensagem>(entity =>
            {
                entity.HasKey(e => new { e.IdOperadora, e.IdTipoMensagem });

                entity.ToTable("TISSMensagem");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdTipoMensagem).HasColumnName("ID_TIPO_MENSAGEM");

                entity.Property(e => e.CdPrestadorWebService)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_PRESTADOR_WEB_SERVICE");

                entity.Property(e => e.IdVersao).HasColumnName("ID_VERSAO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.TxEndereco)
                    .IsUnicode(false)
                    .HasColumnName("TX_ENDERECO");

                entity.Property(e => e.TxLogin)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN");

                entity.Property(e => e.TxSenha)
                    .IsUnicode(false)
                    .HasColumnName("TX_SENHA");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.Tissmensagem)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSMensagem_Pessoa");

                entity.HasOne(d => d.IdTipoMensagemNavigation)
                    .WithMany(p => p.Tissmensagem)
                    .HasForeignKey(d => d.IdTipoMensagem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSMensagem_TipoDiversos");

                entity.HasOne(d => d.IdVersaoNavigation)
                    .WithMany(p => p.Tissmensagem)
                    .HasForeignKey(d => d.IdVersao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSMensagem_TISSVersao");
            });

            modelBuilder.Entity<Tissopm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOPM");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.TxDescricaoServicoExecutadoUnimed)
                    .HasMaxLength(33)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO_UNIMED");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<Tissopmcore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOPMCore");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela).HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.TxDescricaoServicoExecutadoUnimed)
                    .HasMaxLength(33)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO_UNIMED");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissopmmedicinaNuclear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOPMMedicinaNuclear");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.TxDescricaoServicoExecutadoUnimed)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO_UNIMED");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesas1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesas");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesas3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesas3");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTipoLancamento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeMedida)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.NrRegistroAnvisa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_REGISTRO_ANVISA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesas3MedicinaNuclear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesas3MedicinaNuclear");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTipoLancamento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeMedida)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesas3Teste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesas3Teste");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTipoLancamento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeMedida)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.NrRegistroAnvisa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_REGISTRO_ANVISA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesas3Tk98834>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesas3TK98834");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTipoLancamento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeMedida)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_UNIDADE_MEDIDA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrCodigoBarras)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NR_CODIGO_BARRAS");

                entity.Property(e => e.NrDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NR_DOCUMENTO");

                entity.Property(e => e.NrRegistroAnvisa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_REGISTRO_ANVISA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesasCore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesasCore");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela).HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesasUnimed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesasUnimed");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(33)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.V).HasColumnName("v");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesasUnimedCore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesasUnimedCore");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela).HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesasUnimedMedicinaNuclear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesasUnimedMedicinaNuclear");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTabela)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CD_TABELA");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.V).HasColumnName("v");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissoutrasDespesasUnimedMedicinaNuclearCore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSOutrasDespesasUnimedMedicinaNuclearCore");

                entity.Property(e => e.CdServicoExecutado)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_EXECUTADO");

                entity.Property(e => e.CdTipoLancamento).HasColumnName("CD_TIPO_LANCAMENTO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnSolicitada).HasColumnName("QN_SOLICITADA");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServicoExecutado)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_EXECUTADO");

                entity.Property(e => e.VlFechamentoItem)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<Tissprocedimentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentos");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxDescricaoServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_REFERENCIA");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<Tissprocedimentos3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentos3");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.PrReducaoAcrescimo).HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<Tissprocedimentos3Teste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentos3Teste");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.PrReducaoAcrescimo).HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<Tissprocedimentos3Tk98834>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentos3TK98834");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.PrReducaoAcrescimo).HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<TissprocedimentosComEquipe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosComEquipe");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxDescricaoServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_REFERENCIA");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissprocedimentosComEquipe3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosComEquipe3");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm).HasColumnName("NR_CRM");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.PrDesconto).HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrReducaoAcrescimo).HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfCrm).HasColumnName("UF_CRM");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotal).HasColumnName("VL_TOTAL");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<TissprocedimentosComEquipe3MedicinaNuclear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosComEquipe3MedicinaNuclear");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissprocedimentosComEquipe3Teste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosComEquipe3Teste");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm).HasColumnName("NR_CRM");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.PrDesconto).HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrReducaoAcrescimo).HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfCrm).HasColumnName("UF_CRM");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotal).HasColumnName("VL_TOTAL");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<TissprocedimentosComEquipeGuia3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosComEquipeGuia3");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm).HasColumnName("NR_CRM");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.PrDesconto).HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrReducaoAcrescimo).HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfCrm).HasColumnName("UF_CRM");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotal).HasColumnName("VL_TOTAL");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<TissprocedimentosComEquipeGuia3Tk98834>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosComEquipeGuia3TK98834");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_OPERADORA");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm).HasColumnName("NR_CRM");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.PrDesconto).HasColumnName("PR_DESCONTO");

                entity.Property(e => e.PrReducaoAcrescimo).HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfCrm).HasColumnName("UF_CRM");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlTotal).HasColumnName("VL_TOTAL");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");
            });

            modelBuilder.Entity<TissprocedimentosMedicoCooperado>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosMedicoCooperado");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.DtLancamento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NmMedico)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrReducaoAcrescimo)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("NR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QdItem).HasColumnName("QD_ITEM");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlFechamentoItem).HasColumnName("VL_FECHAMENTO_ITEM");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissprocedimentosUnimed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimed");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.Erfuncao).HasColumnName("ERFUNCAO");

                entity.Property(e => e.FiNmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FI_NM_CLASSIFICACAO");

                entity.Property(e => e.FiTxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("FI_TX_DESCRICAO");

                entity.Property(e => e.Fierfuncao).HasColumnName("FIERFUNCAO");

                entity.Property(e => e.Fifuncao).HasColumnName("FIFUNCAO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoaUnidade).HasColumnName("ID_PESSOA_UNIDADE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.NrGp)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("NR_GP");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxDescricaoServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_REFERENCIA");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlGp).HasColumnName("VL_GP");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlTotalGp).HasColumnName("VL_TOTAL_GP");

                entity.Property(e => e.VlTotalServico)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_SERVICO");
            });

            modelBuilder.Entity<TissprocedimentosUnimed3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimed3");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InMatmed).HasColumnName("IN_MATMED");

                entity.Property(e => e.InTaxa).HasColumnName("IN_TAXA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissprocedimentosUnimed3MedicinaNuclear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimed3MedicinaNuclear");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdUnimed)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora2).HasColumnName("ID_OPERADORA2");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.NrTotalEquipe).HasColumnName("NR_TOTAL_EQUIPE");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissprocedimentosUnimed3Socor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimed3_Socor");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InMatmed).HasColumnName("IN_MATMED");

                entity.Property(e => e.InTaxa).HasColumnName("IN_TAXA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONSELHO");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissprocedimentosUnimed3Teste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimed3Teste");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.InMatmed).HasColumnName("IN_MATMED");

                entity.Property(e => e.InTaxa).HasColumnName("IN_TAXA");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlUnitario).HasColumnName("VL_UNITARIO");
            });

            modelBuilder.Entity<TissprocedimentosUnimedMedicinaNuclear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimedMedicinaNuclear");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.Erfuncao).HasColumnName("erfuncao");

                entity.Property(e => e.Fierfuncao).HasColumnName("fierfuncao");

                entity.Property(e => e.Fifuncao).HasColumnName("fifuncao");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONSELHO");

                entity.Property(e => e.Q).HasColumnName("q");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(66)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxDescricaoServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_REFERENCIA");

                entity.Property(e => e.UfConselho)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlGp).HasColumnName("VL_GP");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlTotalGp).HasColumnName("VL_TOTAL_GP");
            });

            modelBuilder.Entity<TissprocedimentosUnimedSocor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimed_Socor");

                entity.Property(e => e.CdCpf)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.Erfuncao).HasColumnName("ERFUNCAO");

                entity.Property(e => e.ExecutanteGp11).HasColumnName("EXECUTANTE_GP_11");

                entity.Property(e => e.FiNmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FI_NM_CLASSIFICACAO");

                entity.Property(e => e.FiTxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("FI_TX_DESCRICAO");

                entity.Property(e => e.Fierfuncao).HasColumnName("FIERFUNCAO");

                entity.Property(e => e.Fifuncao).HasColumnName("FIFUNCAO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho)
                    .IsUnicode(false)
                    .HasColumnName("NR_CONSELHO");

                entity.Property(e => e.NrGp)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("NR_GP");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxDescricaoServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_REFERENCIA");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlGp).HasColumnName("VL_GP");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlTotalGp).HasColumnName("VL_TOTAL_GP");
            });

            modelBuilder.Entity<TissprocedimentosUnimedTeste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProcedimentosUnimedTeste");

                entity.Property(e => e.CdCpf)
                    .IsUnicode(false)
                    .HasColumnName("CD_CPF");

                entity.Property(e => e.CdServico)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.CdServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_REFERENCIA");

                entity.Property(e => e.CdUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");

                entity.Property(e => e.DtAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATENDIMENTO");

                entity.Property(e => e.DtExecucaoServico)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXECUCAO_SERVICO");

                entity.Property(e => e.DtLancamentoItem)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_LANCAMENTO_ITEM");

                entity.Property(e => e.Erfuncao).HasColumnName("ERFUNCAO");

                entity.Property(e => e.FiNmClassificacao)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FI_NM_CLASSIFICACAO");

                entity.Property(e => e.FiTxDescricao)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("FI_TX_DESCRICAO");

                entity.Property(e => e.Fierfuncao).HasColumnName("FIERFUNCAO");

                entity.Property(e => e.Fifuncao).HasColumnName("FIFUNCAO");

                entity.Property(e => e.HrFim)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FIM");

                entity.Property(e => e.HrInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIO");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdContaItemServico).HasColumnName("ID_CONTA_ITEM_SERVICO");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.IdFuncao).HasColumnName("ID_FUNCAO");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoaUnidade).HasColumnName("ID_PESSOA_UNIDADE");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoCategoria).HasColumnName("ID_SERVICO_CATEGORIA");

                entity.Property(e => e.IdServicoProdutoTabela).HasColumnName("ID_SERVICO_PRODUTO_TABELA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InTecnicaUtilizada).HasColumnName("IN_TECNICA_UTILIZADA");

                entity.Property(e => e.NmMedico)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrConselho).HasColumnName("NR_CONSELHO");

                entity.Property(e => e.NrGp)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("NR_GP");

                entity.Property(e => e.PrReducaoAcrescimo)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("PR_REDUCAO_ACRESCIMO");

                entity.Property(e => e.QnServico).HasColumnName("QN_SERVICO");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgConselho)
                    .IsUnicode(false)
                    .HasColumnName("SG_CONSELHO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxDescricaoServicoReferencia)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO_REFERENCIA");

                entity.Property(e => e.UfConselho).HasColumnName("UF_CONSELHO");

                entity.Property(e => e.ViaAcesso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("VIA_ACESSO");

                entity.Property(e => e.VlCobradoItem).HasColumnName("VL_COBRADO_ITEM");

                entity.Property(e => e.VlDesconto).HasColumnName("VL_DESCONTO");

                entity.Property(e => e.VlGp).HasColumnName("VL_GP");

                entity.Property(e => e.VlTotalDesconto).HasColumnName("VL_TOTAL_DESCONTO");

                entity.Property(e => e.VlTotalGp).HasColumnName("VL_TOTAL_GP");

                entity.Property(e => e.VlTotalServico)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("VL_TOTAL_SERVICO");
            });

            modelBuilder.Entity<TissprofissionalSolicitante>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProfissionalSolicitante");

                entity.Property(e => e.CdConvenio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CD_CONVENIO");

                entity.Property(e => e.CdSolicitanteOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_SOLICITANTE_OPERADORA");

                entity.Property(e => e.CdSolicitanteUnimed)
                    .IsUnicode(false)
                    .HasColumnName("CD_SOLICITANTE_UNIMED");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEntidadeConselho).HasColumnName("ID_ENTIDADE_CONSELHO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NmMedicoExec)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO_EXEC");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.NrCrmExec)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM_EXEC");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.UfCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CRM");

                entity.Property(e => e.UfCrmExec)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CRM_EXEC");
            });

            modelBuilder.Entity<TissprofissionalSolicitante3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSProfissionalSolicitante3");

                entity.Property(e => e.CdSolicitanteOperadora)
                    .IsUnicode(false)
                    .HasColumnName("CD_SOLICITANTE_OPERADORA");

                entity.Property(e => e.IdAtendimento).HasColumnName("ID_ATENDIMENTO");

                entity.Property(e => e.IdEspecialidade).HasColumnName("ID_ESPECIALIDADE");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.NmMedico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_MEDICO");

                entity.Property(e => e.NrCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NR_CRM");

                entity.Property(e => e.RvVersaoLinha).HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.UfCrm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UF_CRM");
            });

            modelBuilder.Entity<Tisstipo>(entity =>
            {
                entity.HasKey(e => e.IdTipo)
                    .HasName("TISSTipo_PK");

                entity.ToTable("TISSTipo");

                entity.Property(e => e.IdTipo).HasColumnName("ID_TIPO");

                entity.Property(e => e.IdTipoTabela).HasColumnName("ID_TIPO_TABELA");

                entity.Property(e => e.IdVersao).HasColumnName("ID_VERSAO");

                entity.Property(e => e.InConfigura).HasColumnName("IN_CONFIGURA");

                entity.Property(e => e.InTabelaProdutoServico).HasColumnName("IN_TABELA_PRODUTO_SERVICO");

                entity.Property(e => e.InTipoDiversos).HasColumnName("IN_TIPO_DIVERSOS");

                entity.Property(e => e.NmCampoChave)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_CAMPO_CHAVE");

                entity.Property(e => e.NmTabela)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_TABELA");

                entity.Property(e => e.NmTipo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NM_TIPO");

                entity.Property(e => e.TxDescricao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.Property(e => e.TxDescricaoCampoChave)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_CAMPO_CHAVE");

                entity.HasOne(d => d.IdTipoTabelaNavigation)
                    .WithMany(p => p.Tisstipo)
                    .HasForeignKey(d => d.IdTipoTabela)
                    .HasConstraintName("FK_TISSTipo_TipoTabela");

                entity.HasOne(d => d.IdVersaoNavigation)
                    .WithMany(p => p.Tisstipo)
                    .HasForeignKey(d => d.IdVersao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TISSVersao_TISSTipo_FK1");
            });

            modelBuilder.Entity<TisstipoItem>(entity =>
            {
                entity.HasKey(e => e.IdTipoItem);

                entity.ToTable("TISSTipoItem");

                entity.Property(e => e.IdTipoItem).HasColumnName("ID_TIPO_ITEM");

                entity.Property(e => e.IdTipo).HasColumnName("ID_TIPO");

                entity.Property(e => e.TxDescricaoTiss)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_TISS");

                entity.Property(e => e.TxValorTiss)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_VALOR_TISS");

                entity.HasOne(d => d.IdTipoNavigation)
                    .WithMany(p => p.TisstipoItem)
                    .HasForeignKey(d => d.IdTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TISSTipoItem_TISSTipo");
            });

            modelBuilder.Entity<TisstotalDiarias>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalDiarias");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<TisstotalGases>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalGases");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<TisstotalGeral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalGeral");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<TisstotalMateriais>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalMateriais");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<TisstotalMedicamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalMedicamentos");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<TisstotalOutrasDespesas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalOutrasDespesas");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<TisstotalServicosExecutados>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalServicosExecutados");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<TisstotalTaxas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TISSTotalTaxas");

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdGuia).HasColumnName("ID_GUIA");

                entity.Property(e => e.Total).HasColumnName("TOTAL");
            });

            modelBuilder.Entity<Tissversao>(entity =>
            {
                entity.HasKey(e => e.IdVersao)
                    .HasName("TISSVersao_PK");

                entity.ToTable("TISSVersao");

                entity.Property(e => e.IdVersao).HasColumnName("ID_VERSAO");

                entity.Property(e => e.IdArquivoRemessaLayout).HasColumnName("ID_ARQUIVO_REMESSA_LAYOUT");

                entity.Property(e => e.TxDescricao)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO");

                entity.HasOne(d => d.IdArquivoRemessaLayoutNavigation)
                    .WithMany(p => p.Tissversao)
                    .HasForeignKey(d => d.IdArquivoRemessaLayout)
                    .HasConstraintName("FK_TISSVersao_ArquivoRemessaLayout");
            });

            modelBuilder.Entity<TodosPlanos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TodosPlanos");

                entity.Property(e => e.CdPlanoExterno)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CD_PLANO_EXTERNO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdProdutoNaoCoberto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRODUTO_NAO_COBERTO");

                entity.Property(e => e.NmPlano)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NM_PLANO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<TradLaboratorio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TRAD_LABORATORIO");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Expr1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Expr2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdServicoReferencia).HasColumnName("ID_SERVICO_REFERENCIA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmServicoProdutoTabela)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NM_SERVICO_PRODUTO_TABELA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<TraducaoPm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TraducaoPM");

                entity.Property(e => e.CódigoIpsm).HasColumnName("CÓDIGO IPSM");

                entity.Property(e => e.F10).HasMaxLength(255);

                entity.Property(e => e.F11).HasMaxLength(255);

                entity.Property(e => e.F12).HasMaxLength(255);

                entity.Property(e => e.F13).HasMaxLength(255);

                entity.Property(e => e.F14).HasMaxLength(255);

                entity.Property(e => e.F15).HasMaxLength(255);

                entity.Property(e => e.F16).HasMaxLength(255);

                entity.Property(e => e.F17).HasMaxLength(255);

                entity.Property(e => e.F18).HasMaxLength(255);

                entity.Property(e => e.F19).HasMaxLength(255);

                entity.Property(e => e.F20).HasMaxLength(255);

                entity.Property(e => e.F21).HasMaxLength(255);

                entity.Property(e => e.F22).HasMaxLength(255);

                entity.Property(e => e.F23).HasMaxLength(255);

                entity.Property(e => e.F24).HasMaxLength(255);

                entity.Property(e => e.F25).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);

                entity.Property(e => e.F4).HasMaxLength(255);

                entity.Property(e => e.F5).HasMaxLength(255);

                entity.Property(e => e.F6).HasMaxLength(255);

                entity.Property(e => e.F7).HasMaxLength(255);

                entity.Property(e => e.F8).HasMaxLength(255);

                entity.Property(e => e.F9).HasMaxLength(255);
            });

            modelBuilder.Entity<TraducaoSus>(entity =>
            {
                entity.HasKey(e => new { e.CdReferencia, e.CdSus });

                entity.ToTable("TraducaoSUS");

                entity.Property(e => e.CdReferencia)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_REFERENCIA");

                entity.Property(e => e.CdSus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_SUS");
            });

            modelBuilder.Entity<TraducaoUnimed>(entity =>
            {
                entity.HasKey(e => new { e.CdReferencia, e.CdUnimed });

                entity.Property(e => e.CdReferencia)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_REFERENCIA");

                entity.Property(e => e.CdUnimed)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CD_UNIMED");
            });

            modelBuilder.Entity<TransferenciaFisica>(entity =>
            {
                entity.HasKey(e => e.IdTransferenciaFisica);

                entity.Property(e => e.IdTransferenciaFisica).HasColumnName("ID_TRANSFERENCIA_FISICA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtConclusaoTransferencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CONCLUSAO_TRANSFERENCIA");

                entity.Property(e => e.DtInicioTransferencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_TRANSFERENCIA");

                entity.Property(e => e.IdContaDestino).HasColumnName("ID_CONTA_DESTINO");

                entity.Property(e => e.IdContaOrigem).HasColumnName("ID_CONTA_ORIGEM");

                entity.Property(e => e.IdUsuarioDestino).HasColumnName("ID_USUARIO_DESTINO");

                entity.Property(e => e.IdUsuarioOrigem).HasColumnName("ID_USUARIO_ORIGEM");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.Property(e => e.NrItens).HasColumnName("NR_ITENS");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.Property(e => e.VlTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VL_TOTAL");

                entity.HasOne(d => d.IdContaDestinoNavigation)
                    .WithMany(p => p.TransferenciaFisicaIdContaDestinoNavigation)
                    .HasForeignKey(d => d.IdContaDestino)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferenciaFisica_ContaBancaria1");

                entity.HasOne(d => d.IdContaOrigemNavigation)
                    .WithMany(p => p.TransferenciaFisicaIdContaOrigemNavigation)
                    .HasForeignKey(d => d.IdContaOrigem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferenciaFisica_ContaBancaria");
            });

            modelBuilder.Entity<TransferenciaFisicaItem>(entity =>
            {
                entity.HasKey(e => e.IdTransferenciaFisicaItem);

                entity.Property(e => e.IdTransferenciaFisicaItem).HasColumnName("ID_TRANSFERENCIA_FISICA_ITEM");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdLancamentoBancarioDestino).HasColumnName("ID_LANCAMENTO_BANCARIO_DESTINO");

                entity.Property(e => e.IdLancamentoBancarioOrigem).HasColumnName("ID_LANCAMENTO_BANCARIO_ORIGEM");

                entity.Property(e => e.IdTransferenciaFisica).HasColumnName("ID_TRANSFERENCIA_FISICA");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InCancelado).HasColumnName("IN_CANCELADO");

                entity.HasOne(d => d.IdLancamentoBancarioDestinoNavigation)
                    .WithMany(p => p.TransferenciaFisicaItemIdLancamentoBancarioDestinoNavigation)
                    .HasForeignKey(d => d.IdLancamentoBancarioDestino)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferenciaFisicaItem_LancamentoBancario1");

                entity.HasOne(d => d.IdLancamentoBancarioOrigemNavigation)
                    .WithMany(p => p.TransferenciaFisicaItemIdLancamentoBancarioOrigemNavigation)
                    .HasForeignKey(d => d.IdLancamentoBancarioOrigem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferenciaFisicaItem_LancamentoBancario");

                entity.HasOne(d => d.IdTransferenciaFisicaNavigation)
                    .WithMany(p => p.TransferenciaFisicaItem)
                    .HasForeignKey(d => d.IdTransferenciaFisica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferenciaFisicaItem_TransferenciaFisica");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TransferenciaFisicaItem)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferenciaFisicaItem_Usuario");
            });

            modelBuilder.Entity<Transportadora>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Transportadora");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.NmPessoa)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NM_PESSOA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Tributo>(entity =>
            {
                entity.HasKey(e => e.IdTributo);

                entity.Property(e => e.IdTributo).HasColumnName("ID_TRIBUTO");

                entity.Property(e => e.CdRecolhimento)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_RECOLHIMENTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdTipoDocumento).HasColumnName("ID_TIPO_DOCUMENTO");

                entity.Property(e => e.IdTipoRegimeRecolhimento)
                    .HasColumnName("ID_TIPO_REGIME_RECOLHIMENTO")
                    .HasDefaultValueSql("((9603))");

                entity.Property(e => e.IdTipoTributo).HasColumnName("ID_TIPO_TRIBUTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Tributo)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tributo_Pessoa");

                entity.HasOne(d => d.IdTipoDocumentoNavigation)
                    .WithMany(p => p.Tributo)
                    .HasForeignKey(d => d.IdTipoDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tributo_TipoDocumento");

                entity.HasOne(d => d.IdTipoRegimeRecolhimentoNavigation)
                    .WithMany(p => p.TributoIdTipoRegimeRecolhimentoNavigation)
                    .HasForeignKey(d => d.IdTipoRegimeRecolhimento)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdTipoTributoNavigation)
                    .WithMany(p => p.TributoIdTipoTributoNavigation)
                    .HasForeignKey(d => d.IdTipoTributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tributo_TipoDiversos");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Tributo)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tributo_Usuario");
            });

            modelBuilder.Entity<TributoAliquota>(entity =>
            {
                entity.HasKey(e => e.IdTributoAliquota);

                entity.Property(e => e.IdTributoAliquota).HasColumnName("ID_TRIBUTO_ALIQUOTA");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdTipoRecolhimento).HasColumnName("ID_TIPO_RECOLHIMENTO");

                entity.Property(e => e.IdTributo).HasColumnName("ID_TRIBUTO");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.VlAliquota)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("VL_ALIQUOTA");

                entity.HasOne(d => d.IdTipoRecolhimentoNavigation)
                    .WithMany(p => p.TributoAliquota)
                    .HasForeignKey(d => d.IdTipoRecolhimento);

                entity.HasOne(d => d.IdTributoNavigation)
                    .WithMany(p => p.TributoAliquota)
                    .HasForeignKey(d => d.IdTributo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TributoAliquota_Tributo");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.TributoAliquota)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TributoAliquota_Usuario");
            });

            modelBuilder.Entity<TussAllianz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_ALLIANZ");

                entity.Property(e => e.CdServicoAmb)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_AMB");

                entity.Property(e => e.CdServicoTuss)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_TUSS");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussCapitulo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_Capitulo");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussCbhpm3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_CBHPM3");

                entity.Property(e => e.CdServicoAmb)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_AMB");

                entity.Property(e => e.CdServicoTuss)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_TUSS");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussEspecialidade>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_Especialidade");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussGolden>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_GOLDEN");

                entity.Property(e => e.CdServicoAmb)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_AMB");

                entity.Property(e => e.CdServicoTuss)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_TUSS");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussProcedimento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_Procedimento");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussSosaude>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_SOSAUDE");

                entity.Property(e => e.CdServicoAmb)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_AMB");

                entity.Property(e => e.CdServicoTuss)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_TUSS");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussSubEspecialidade>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_SubEspecialidade");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussSulamerica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_SULAMERICA");

                entity.Property(e => e.CdServicoAmb)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_AMB");

                entity.Property(e => e.CdServicoTuss)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO_TUSS");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussUnimed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSS_UNIMED");

                entity.Property(e => e.CdServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO");
            });

            modelBuilder.Entity<TussdiariasTaxasReferencia>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSSDiariasTaxasReferencia");

                entity.Property(e => e.CdPai)
                    .HasMaxLength(255)
                    .HasColumnName("CD_PAI");

                entity.Property(e => e.CdTuss)
                    .HasMaxLength(255)
                    .HasColumnName("CD_TUSS");

                entity.Property(e => e.TxTuss)
                    .HasMaxLength(255)
                    .HasColumnName("TX_TUSS");
            });

            modelBuilder.Entity<Tussdtsunimed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSSDTSUnimed");

                entity.Property(e => e.CdTuss)
                    .HasMaxLength(255)
                    .HasColumnName("CD_TUSS");

                entity.Property(e => e.CdUnimed)
                    .HasMaxLength(255)
                    .HasColumnName("CD_UNIMED");
            });

            modelBuilder.Entity<TussmatMedUnimed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSSMatMedUnimed");

                entity.Property(e => e.CdTuss)
                    .HasMaxLength(255)
                    .HasColumnName("CD_TUSS");

                entity.Property(e => e.CdUnimed)
                    .HasMaxLength(255)
                    .HasColumnName("CD_UNIMED");
            });

            modelBuilder.Entity<Tussmateriais>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSSMateriais");

                entity.Property(e => e.CdAnvisa)
                    .HasMaxLength(255)
                    .HasColumnName("CD_ANVISA");

                entity.Property(e => e.CdReferencia)
                    .HasMaxLength(255)
                    .HasColumnName("CD_REFERENCIA");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxFabricante)
                    .HasMaxLength(255)
                    .HasColumnName("TX_FABRICANTE");
            });

            modelBuilder.Entity<TussmateriaisAnvisa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSSMateriaisANVISA");

                entity.Property(e => e.CdAnvisa)
                    .HasMaxLength(255)
                    .HasColumnName("CD_ANVISA");

                entity.Property(e => e.CdTuss)
                    .HasMaxLength(255)
                    .HasColumnName("CD_TUSS");
            });

            modelBuilder.Entity<Tussmedicamentos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSSMedicamentos");

                entity.Property(e => e.CdReferencia)
                    .HasMaxLength(255)
                    .HasColumnName("CD_REFERENCIA");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(255)
                    .HasColumnName("CD_SERVICO");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .HasColumnName("TX_DESCRICAO_SERVICO");

                entity.Property(e => e.TxFabricante)
                    .HasMaxLength(255)
                    .HasColumnName("TX_FABRICANTE");
            });

            modelBuilder.Entity<TussmedicamentosAnvisa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TUSSMedicamentosANVISA");

                entity.Property(e => e.CdAnvisa)
                    .HasMaxLength(255)
                    .HasColumnName("CD_ANVISA");

                entity.Property(e => e.CdTuss)
                    .HasMaxLength(255)
                    .HasColumnName("CD_TUSS");
            });

            modelBuilder.Entity<TxUr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TX_UR");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.VlIncidencia)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("VL_INCIDENCIA")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Uf>(entity =>
            {
                entity.HasKey(e => e.IdUf)
                    .HasName("UF_PK");

                entity.ToTable("UF");

                entity.HasIndex(e => e.IdPais, "IX_UF_Pais");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.CdIbge)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_IBGE");

                entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmUf)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_UF");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.SgUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.Uf)
                    .HasForeignKey(d => d.IdPais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pais_UF_FK1");
            });

            modelBuilder.Entity<Uniarqre>(entity =>
            {
                entity.HasKey(e => e.UarSeqImp)
                    .HasName("PK__UNIARQRE__24DD5622");

                entity.ToTable("UNIARQRE");

                entity.Property(e => e.UarSeqImp).ValueGeneratedNever();

                entity.Property(e => e.UarAlerta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UarDatCad).HasColumnType("datetime");

                entity.Property(e => e.UarDatHor).HasColumnType("datetime");

                entity.Property(e => e.UarDatPag).HasColumnType("datetime");

                entity.Property(e => e.UarNomArq)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UarRetReap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UarStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UarUsuCad)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Uniconer>(entity =>
            {
                entity.HasKey(e => new { e.UarSeqImp, e.UctConNum, e.UceSeqNum })
                    .HasName("PK__UNICONER__25D17A5B");

                entity.ToTable("UNICONER");

                entity.Property(e => e.UctConNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UceCodGlo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UceDesGlo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UceIdcReap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UceVlrCon).HasColumnType("money");

                entity.Property(e => e.UceVlrDia).HasColumnType("money");

                entity.Property(e => e.UceVlrExa).HasColumnType("money");

                entity.Property(e => e.UceVlrGab).HasColumnType("money");

                entity.Property(e => e.UceVlrHon).HasColumnType("money");

                entity.Property(e => e.UceVlrMat).HasColumnType("money");

                entity.Property(e => e.UceVlrMed).HasColumnType("money");

                entity.Property(e => e.UceVlrTaxa).HasColumnType("money");
            });

            modelBuilder.Entity<Uniconit>(entity =>
            {
                entity.HasKey(e => new { e.UarSeqImp, e.UctConNum, e.UciSeqNum })
                    .HasName("PK__UNICONIT__26C59E94");

                entity.ToTable("UNICONIT");

                entity.Property(e => e.UctConNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdFechamentoItem).HasColumnName("ID_FECHAMENTO_ITEM");

                entity.Property(e => e.UciAdeAgr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciCodAde)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciComPag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciDatRea).HasColumnType("datetime");

                entity.Property(e => e.UciDesAde)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciIteNum)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciIteTip)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciPreCob)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciPreExe)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UciQtdCob).HasColumnType("smallmoney");

                entity.Property(e => e.UciQtdFilP).HasColumnType("decimal(7, 5)");

                entity.Property(e => e.UciQtdPag).HasColumnType("smallmoney");

                entity.Property(e => e.UciQtdUt).HasColumnName("UciQtdUT");

                entity.Property(e => e.UciVlrCob).HasColumnType("money");

                entity.Property(e => e.UciVlrFilP).HasColumnType("money");

                entity.Property(e => e.UciVlrPag).HasColumnType("money");

                entity.Property(e => e.UciVlrUt)
                    .HasColumnType("smallmoney")
                    .HasColumnName("UciVlrUT");
            });

            modelBuilder.Entity<Uniconta>(entity =>
            {
                entity.HasKey(e => new { e.UarSeqImp, e.UctConNum })
                    .HasName("PK__UNICONTA__27B9C2CD");

                entity.ToTable("UNICONTA");

                entity.Property(e => e.UctConNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdConta).HasColumnName("ID_CONTA");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.UctCodHos).HasColumnType("decimal(11, 0)");

                entity.Property(e => e.UctNumMat)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UctSenGui).HasColumnType("decimal(11, 0)");
            });

            modelBuilder.Entity<UnidadeFisica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UnidadeFisica");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("nm_unidade_organizacional");
            });

            modelBuilder.Entity<UnidadeFisicaAtendimento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UnidadeFisicaAtendimento");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");
            });

            modelBuilder.Entity<UnidadeLogica>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UnidadeLogica");

                entity.Property(e => e.IdUnidadeOrganizacional)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_unidade_organizacional");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("nm_unidade_organizacional");
            });

            modelBuilder.Entity<UnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => e.IdUnidadeOrganizacional)
                    .HasName("UnidadeOrganizacional_PK")
                    .IsClustered(false);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_UnidadeOrganizacional")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.NmUnidadeOrganizacional }, "IX_UnidadeOrganizacional_7_263828152__K2_K5")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_UnidadeOrganizacional_K2_5")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.InAtivo }, "IX_UnidadeOrganizacional_K2_K7_5")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUnidadeOrganizacionalCategoriaTipo, "IX_UnidadeOrganizacional_TipoDiversos")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.IdUnidadeOrganizacionalTipo, "IX_UnidadeOrganizacional_TipoDiversos_ID_UNIDADE_ORGANIZACIONAL_TIPO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.HrTempoAtendimento).HasColumnName("HR_TEMPO_ATENDIMENTO");

                entity.Property(e => e.IdAgendaBase).HasColumnName("ID_AGENDA_BASE");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdProfissionalReferencia)
                    .HasColumnName("ID_PROFISSIONAL_REFERENCIA")
                    .HasComment("profissional de saúde responsável pela unidade, para lançar no checkin");

                entity.Property(e => e.IdServicoGuia).HasColumnName("ID_SERVICO_GUIA");

                entity.Property(e => e.IdUnidadeOrganizacionalCategoriaTipo).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_CATEGORIA_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacionalPai).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_PAI");

                entity.Property(e => e.IdUnidadeOrganizacionalTipo).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_TIPO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.InEstruturaLeito).HasColumnName("IN_ESTRUTURA_LEITO");

                entity.Property(e => e.InExibeMedicoAgenda).HasColumnName("IN_EXIBE_MEDICO_AGENDA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.QnAreaFisica)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("QN_AREA_FISICA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxAbreviatura)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABREVIATURA");

                entity.Property(e => e.TxDefinicaoNegocio)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DEFINICAO_NEGOCIO");

                entity.Property(e => e.TxMensagemAgendaOnline)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TX_MENSAGEM_AGENDA_ONLINE");

                entity.HasOne(d => d.IdAgendaBaseNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalIdAgendaBaseNavigation)
                    .HasForeignKey(d => d.IdAgendaBase)
                    .HasConstraintName("FK_UnidadeOrganizacional_TipoDiversos3");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalIdGrupoHorarioNavigation)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .HasConstraintName("FK_UnidadeOrganizacional_TipoDiversos2");

                entity.HasOne(d => d.IdProfissionalReferenciaNavigation)
                    .WithMany(p => p.UnidadeOrganizacional)
                    .HasForeignKey(d => d.IdProfissionalReferencia)
                    .HasConstraintName("FK_UnidadeOrganizacional_Pessoa");

                entity.HasOne(d => d.IdUnidadeOrganizacionalCategoriaTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalIdUnidadeOrganizacionalCategoriaTipoNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalCategoriaTipo)
                    .HasConstraintName("FK_UnidadeOrganizacional_TipoDiversos1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalPaiNavigation)
                    .WithMany(p => p.InverseIdUnidadeOrganizacionalPaiNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalPai)
                    .HasConstraintName("FK__UnidadeOr__ID_UN__4BB6F628");

                entity.HasOne(d => d.IdUnidadeOrganizacionalTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalIdUnidadeOrganizacionalTipoNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalTipo)
                    .HasConstraintName("FK_UnidadeOrganizacional_TipoDiversos");
            });

            modelBuilder.Entity<UnidadeOrganizacionalAgrupamentoDocumentos>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacionalPai, e.IdUnidadeOrganizacionalFilho });

                entity.Property(e => e.IdUnidadeOrganizacionalPai).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_PAI");

                entity.Property(e => e.IdUnidadeOrganizacionalFilho).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_FILHO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdUnidadeOrganizacionalFilhoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalAgrupamentoDocumentosIdUnidadeOrganizacionalFilhoNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalFilho)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacionalAgrupamentoDocumentos_UnidadeOrganizacional1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalPaiNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalAgrupamentoDocumentosIdUnidadeOrganizacionalPaiNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalPai)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacionalAgrupamentoDocumentos_UnidadeOrganizacional");
            });

            modelBuilder.Entity<UnidadeOrganizacionalAtividade>(entity =>
            {
                entity.HasKey(e => new { e.IdAtividade, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Atividade_PK");

                entity.ToTable("UnidadeOrganizacional_Atividade");

                entity.Property(e => e.IdAtividade).HasColumnName("ID_ATIVIDADE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdAtividadeNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalAtividade)
                    .HasForeignKey(d => d.IdAtividade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Atividades_UnidadeOrganizacional_Atividade_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalAtividade)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Atividade_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalBem>(entity =>
            {
                entity.HasKey(e => new { e.IdBemTipo, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Bem_PK");

                entity.ToTable("UnidadeOrganizacional_Bem");

                entity.Property(e => e.IdBemTipo).HasColumnName("ID_BEM_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdBemTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalBem)
                    .HasForeignKey(d => d.IdBemTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_Bem_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalBem)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Bem_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalCentroCusto>(entity =>
            {
                entity.HasKey(e => e.IdUnidadeorganizacionalCentrocusto);

                entity.ToTable("UnidadeOrganizacional_CentroCusto");

                entity.Property(e => e.IdUnidadeorganizacionalCentrocusto).HasColumnName("ID_UNIDADEORGANIZACIONAL_CENTROCUSTO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCentroCusto).HasColumnName("ID_CENTRO_CUSTO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrCentroCusto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_CENTRO_CUSTO");

                entity.HasOne(d => d.IdCentroCustoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalCentroCusto)
                    .HasForeignKey(d => d.IdCentroCusto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_CentroCusto_CentroCusto");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalCentroCusto)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UOCC_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalCentroCusto)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_UnidadeOrganizacional_CentroCusto_ID_USUARIO");
            });

            modelBuilder.Entity<UnidadeOrganizacionalColaborador>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Colaborador_PK");

                entity.ToTable("UnidadeOrganizacional_Colaborador");

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.InAtivo }, "IX_UnidadeOrganizacional_Colaborador_ID_UNIDADE_ORGANIZACIONAL_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.HrTempoAtendimento).HasColumnName("HR_TEMPO_ATENDIMENTO");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.InAgenda).HasColumnName("IN_AGENDA");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InPrincipal).HasColumnName("IN_PRINCIPAL");

                entity.Property(e => e.InSupervisor).HasColumnName("IN_SUPERVISOR");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalColaborador)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_Colaborador_FK1");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalColaborador)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_UnidadeOrganizacional_Colaborador_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalColaborador)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Colaborador_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalColaboradorHorario>(entity =>
            {
                entity.HasKey(e => new { e.IdHorarioDiaSemana, e.IdPessoa, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Colaborador_Horario_PK");

                entity.ToTable("UnidadeOrganizacional_Colaborador_Horario");

                entity.Property(e => e.IdHorarioDiaSemana).HasColumnName("ID_HORARIO_DIA_SEMANA");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InPlantao).HasColumnName("IN_PLANTAO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdHorarioDiaSemanaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalColaboradorHorario)
                    .HasForeignKey(d => d.IdHorarioDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("HorarioDiaSemana_UnidadeOrganizacional_Colaborador_Horario_FK1");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.UnidadeOrganizacionalColaboradorHorario)
                    .HasForeignKey(d => new { d.IdPessoa, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Colaborador_UnidadeOrganizacional_Colaborador_Horario_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalColaboradorTurno>(entity =>
            {
                entity.HasKey(e => new { e.IdPessoa, e.IdUnidadeOrganizacional, e.IdDiaSemana })
                    .HasName("UnidadeOrganizacional_Colaborador_Turno_PK");

                entity.ToTable("UnidadeOrganizacional_Colaborador_Turno");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdDiaSemana).HasColumnName("ID_DIA_SEMANA");

                entity.Property(e => e.IdTurno).HasColumnName("ID_TURNO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdDiaSemanaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalColaboradorTurnoIdDiaSemanaNavigation)
                    .HasForeignKey(d => d.IdDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_Colaborador_Turno_FK1");

                entity.HasOne(d => d.IdTurnoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalColaboradorTurnoIdTurnoNavigation)
                    .HasForeignKey(d => d.IdTurno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_Colaborador_Turno_FK2");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.UnidadeOrganizacionalColaboradorTurno)
                    .HasForeignKey(d => new { d.IdPessoa, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_Colaborador_UnidadeOrganizacional_Colaborador_Turno_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalCorreioEletronico>(entity =>
            {
                entity.HasKey(e => new { e.IdCorreioEletronico, e.IdUnidadeOrganizacional });

                entity.ToTable("UnidadeOrganizacional_CorreioEletronico");

                entity.Property(e => e.IdCorreioEletronico).HasColumnName("ID_CORREIO_ELETRONICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InPreferencial).HasColumnName("IN_PREFERENCIAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdCorreioEletronicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalCorreioEletronico)
                    .HasForeignKey(d => d.IdCorreioEletronico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_CorreioEletronico_CorreioEletronico");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalCorreioEletronico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_CorreioEletronico_UnidadeOrganizacional");
            });

            modelBuilder.Entity<UnidadeOrganizacionalEndereco>(entity =>
            {
                entity.HasKey(e => new { e.IdEndereco, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Endereco_PK");

                entity.ToTable("UnidadeOrganizacional_Endereco");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.BaiNu).HasColumnName("BAI_NU");

                entity.Property(e => e.CdCep)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CD_CEP");

                entity.Property(e => e.IdEnderecoCategoriaTipo).HasColumnName("ID_ENDERECO_CATEGORIA_TIPO");

                entity.Property(e => e.IdEnderecoTipo).HasColumnName("ID_ENDERECO_TIPO");

                entity.Property(e => e.IdImovelTipo).HasColumnName("ID_IMOVEL_TIPO");

                entity.Property(e => e.IdJustEndeDesaTipo).HasColumnName("ID_JUST_ENDE_DESA_TIPO");

                entity.Property(e => e.InEnderecoAtivo).HasColumnName("IN_ENDERECO_ATIVO");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.NrNumero)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");

                entity.Property(e => e.TxLogradouro)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGRADOURO");

                entity.Property(e => e.TxObservacao)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TX_OBSERVACAO");

                entity.HasOne(d => d.BaiNuNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEndereco)
                    .HasForeignKey(d => d.BaiNu)
                    .HasConstraintName("FK__UnidadeOr__BAI_N__750E1176");

                entity.HasOne(d => d.IdEnderecoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEndereco)
                    .HasForeignKey(d => d.IdEndereco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Endereco_UnidadeOrganizacional_Endereco_FK1");

                entity.HasOne(d => d.IdEnderecoCategoriaTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnderecoIdEnderecoCategoriaTipoNavigation)
                    .HasForeignKey(d => d.IdEnderecoCategoriaTipo)
                    .HasConstraintName("FK__UnidadeOr__ID_EN__77EA7E21");

                entity.HasOne(d => d.IdEnderecoTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnderecoIdEnderecoTipoNavigation)
                    .HasForeignKey(d => d.IdEnderecoTipo)
                    .HasConstraintName("FK__UnidadeOr__ID_EN__760235AF");

                entity.HasOne(d => d.IdImovelTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnderecoIdImovelTipoNavigation)
                    .HasForeignKey(d => d.IdImovelTipo)
                    .HasConstraintName("FK__UnidadeOr__ID_IM__76F659E8");

                entity.HasOne(d => d.IdJustEndeDesaTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnderecoIdJustEndeDesaTipoNavigation)
                    .HasForeignKey(d => d.IdJustEndeDesaTipo)
                    .HasConstraintName("FK_UnidadeOrganizacional_Endereco_TipoDiversos");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEndereco)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Endereco_FK1");

                entity.HasOne(d => d.LocNuNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEndereco)
                    .HasForeignKey(d => d.LocNu)
                    .HasConstraintName("FK__UnidadeOr__LOC_N__7419ED3D");
            });

            modelBuilder.Entity<UnidadeOrganizacionalEnderecoFinalidade>(entity =>
            {
                entity.HasKey(e => new { e.IdEndereco, e.IdUnidadeOrganizacional, e.IdFinalidade });

                entity.ToTable("UnidadeOrganizacional_Endereco_Finalidade");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdFinalidade).HasColumnName("ID_FINALIDADE");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFinalidadeNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnderecoFinalidade)
                    .HasForeignKey(d => d.IdFinalidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_Endereco_Finalidade_TipoDiversos");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.UnidadeOrganizacionalEnderecoFinalidade)
                    .HasForeignKey(d => new { d.IdEndereco, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_Endereco_Finalidade_UnidadeOrganizacional_Endereco");
            });

            modelBuilder.Entity<UnidadeOrganizacionalEnderecoRelatorio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UnidadeOrganizacional_Endereco_Relatorio");

                entity.Property(e => e.Bairro)
                    .HasMaxLength(145)
                    .IsUnicode(false)
                    .HasColumnName("BAIRRO");

                entity.Property(e => e.CdBacen)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CD_BACEN")
                    .IsFixedLength(true);

                entity.Property(e => e.CdIbge)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CD_IBGE");

                entity.Property(e => e.Cep)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("CEP");

                entity.Property(e => e.CepCidade)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("CEP_CIDADE");

                entity.Property(e => e.Cidade)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CIDADE");

                entity.Property(e => e.Endereco)
                    .HasMaxLength(567)
                    .IsUnicode(false)
                    .HasColumnName("ENDERECO");

                entity.Property(e => e.IdEndereco).HasColumnName("ID_ENDERECO");

                entity.Property(e => e.IdUf).HasColumnName("ID_UF");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.LocNu).HasColumnName("LOC_NU");

                entity.Property(e => e.LogNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LOG_NO");

                entity.Property(e => e.NmPais)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("NM_PAIS");

                entity.Property(e => e.NrNumero)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_NUMERO");

                entity.Property(e => e.SgUf)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("SG_UF")
                    .IsFixedLength(true);

                entity.Property(e => e.TxComplemento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TX_COMPLEMENTO");
            });

            modelBuilder.Entity<UnidadeOrganizacionalEnviaRecebe>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacionalEnvia, e.IdUnidadeOrganizacionalRecebe, e.IdBemTipo })
                    .HasName("UnidadeOrganizacionalEnviaRecebe_PK");

                entity.Property(e => e.IdUnidadeOrganizacionalEnvia).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_ENVIA");

                entity.Property(e => e.IdUnidadeOrganizacionalRecebe).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_RECEBE");

                entity.Property(e => e.IdBemTipo).HasColumnName("ID_BEM_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdBemTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnviaRecebe)
                    .HasForeignKey(d => d.IdBemTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacionalEnviaRecebe_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalEnviaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnviaRecebeIdUnidadeOrganizacionalEnviaNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalEnvia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacionalEnviaRecebe_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalRecebeNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEnviaRecebeIdUnidadeOrganizacionalRecebeNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalRecebe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacionalEnviaRecebe_FK2");
            });

            modelBuilder.Entity<UnidadeOrganizacionalEventoLeito>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdEvento })
                    .HasName("UnidadeOrganizacional_EventoLeito_PK");

                entity.ToTable("UnidadeOrganizacional_EventoLeito");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdEventoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEventoLeito)
                    .HasForeignKey(d => d.IdEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("EventoLeito_UnidadeOrganizacional_EventoLeito_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalEventoLeito)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_EventoLeito_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalHorario>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdHorarioDiaSemana })
                    .HasName("UnidadeOrganizacionalHorario_PK");

                entity.ToTable("UnidadeOrganizacional_Horario");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdHorarioDiaSemana).HasColumnName("ID_HORARIO_DIA_SEMANA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdHorarioDiaSemanaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorario)
                    .HasForeignKey(d => d.IdHorarioDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("HorarioDiaSemana_UnidadeOrganizacionalHorario_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorario)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacionalHorario_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalHorarioAgenda>(entity =>
            {
                entity.HasKey(e => e.IdHorarioAgenda)
                    .HasName("UnidadeOrganizacional_HorarioAgenda_PK");

                entity.ToTable("UnidadeOrganizacional_HorarioAgenda");

                entity.Property(e => e.IdHorarioAgenda).HasColumnName("ID_HORARIO_AGENDA");

                entity.Property(e => e.HrHoraAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_HORA_ATENDIMENTO");

                entity.Property(e => e.IdDiaSemana).HasColumnName("ID_DIA_SEMANA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.NrMaximoMarcacao).HasColumnName("NR_MAXIMO_MARCACAO");

                entity.HasOne(d => d.IdDiaSemanaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgenda)
                    .HasForeignKey(d => d.IdDiaSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_HorarioAgenda_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgenda)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_HorarioAgenda_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalHorarioAgendaBaseAgenda>(entity =>
            {
                entity.HasKey(e => e.IdHorarioAgendaBase)
                    .HasName("UnidadeOrganizacional_HorarioAgenda_BaseAgenda_PK");

                entity.ToTable("UnidadeOrganizacional_HorarioAgenda_BaseAgenda");

                entity.Property(e => e.IdHorarioAgendaBase).HasColumnName("ID_HORARIO_AGENDA_BASE");

                entity.Property(e => e.IdHorarioAgenda).HasColumnName("ID_HORARIO_AGENDA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.HasOne(d => d.IdHorarioAgendaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaBaseAgenda)
                    .HasForeignKey(d => d.IdHorarioAgenda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_HorarioAgenda_UnidadeOrganizacional_HorarioAgenda_BaseAgenda_FK1");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaBaseAgenda)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("Pessoa_UnidadeOrganizacional_HorarioAgenda_BaseAgenda_FK1");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaBaseAgenda)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("Recurso_UnidadeOrganizacional_HorarioAgenda_BaseAgenda_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalHorarioAgendaMarcacao>(entity =>
            {
                entity.HasKey(e => e.IdHorarioMarcacaoBase)
                    .HasName("UnidadeOrganizacional_HorarioAgenda_Marcacao_PK");

                entity.ToTable("UnidadeOrganizacional_HorarioAgenda_Marcacao");

                entity.Property(e => e.IdHorarioMarcacaoBase).HasColumnName("ID_HORARIO_MARCACAO_BASE");

                entity.Property(e => e.DtMarcacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MARCACAO");

                entity.Property(e => e.IdHorarioAgenda).HasColumnName("ID_HORARIO_AGENDA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.HasOne(d => d.IdHorarioAgendaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaMarcacao)
                    .HasForeignKey(d => d.IdHorarioAgenda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_HorarioAgenda_UnidadeOrganizacional_HorarioAgenda_Marcacao_FK1");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaMarcacao)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("Pessoa_UnidadeOrganizacional_HorarioAgenda_Marcacao_FK1");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaMarcacao)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("Recurso_UnidadeOrganizacional_HorarioAgenda_Marcacao_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalHorarioAgendaReserva>(entity =>
            {
                entity.HasKey(e => e.IdHorarioReservaBase)
                    .HasName("UnidadeOrganizacional_HorarioAgenda_Reserva_PK");

                entity.ToTable("UnidadeOrganizacional_HorarioAgenda_Reserva");

                entity.Property(e => e.IdHorarioReservaBase).HasColumnName("ID_HORARIO_RESERVA_BASE");

                entity.Property(e => e.DtMarcacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_MARCACAO");

                entity.Property(e => e.DtReserva)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_RESERVA");

                entity.Property(e => e.IdHorarioAgenda).HasColumnName("ID_HORARIO_AGENDA");

                entity.Property(e => e.IdMedico).HasColumnName("ID_MEDICO");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.HasOne(d => d.IdHorarioAgendaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaReserva)
                    .HasForeignKey(d => d.IdHorarioAgenda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_HorarioAgenda_UnidadeOrganizacional_HorarioAgenda_Reserva_FK1");

                entity.HasOne(d => d.IdMedicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaReserva)
                    .HasForeignKey(d => d.IdMedico)
                    .HasConstraintName("Pessoa_UnidadeOrganizacional_HorarioAgenda_Reserva_FK1");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalHorarioAgendaReserva)
                    .HasForeignKey(d => d.IdRecurso)
                    .HasConstraintName("Recurso_UnidadeOrganizacional_HorarioAgenda_Reserva_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalLeitoTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdLeitoTipo })
                    .HasName("UnidadeOrganizacional_LeitoTipo_PK");

                entity.ToTable("UnidadeOrganizacional_LeitoTipo");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdLeitoTipo).HasColumnName("ID_LEITO_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdLeitoTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalLeitoTipo)
                    .HasForeignKey(d => d.IdLeitoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_LeitoTipo_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalLeitoTipo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_LeitoTipo_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalOperadoraPlanoServicoAutomatico>(entity =>
            {
                entity.HasKey(e => e.IdServicoAutomatico);

                entity.ToTable("UnidadeOrganizacional_Operadora_Plano_Servico_Automatico");

                entity.Property(e => e.IdServicoAutomatico).HasColumnName("ID_SERVICO_AUTOMATICO");

                entity.Property(e => e.DtCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_CADASTRO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtExclusao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_EXCLUSAO");

                entity.Property(e => e.DtVigencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VIGENCIA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.IdPlano).HasColumnName("ID_PLANO");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUsuarioCadastro).HasColumnName("ID_USUARIO_CADASTRO");

                entity.Property(e => e.IdUsuarioExclusao).HasColumnName("ID_USUARIO_EXCLUSAO");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InAtual)
                    .IsRequired()
                    .HasColumnName("IN_ATUAL")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalOperadoraPlanoServicoAutomatico)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Pessoa_UnidadeOrganizacional_Operadora_Plano_Servico_Automatico_FK1");

                entity.HasOne(d => d.IdPlanoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalOperadoraPlanoServicoAutomatico)
                    .HasForeignKey(d => d.IdPlano)
                    .HasConstraintName("Plano_UnidadeOrganizacional_Operadora_Plano_Servico_Automatico_FK1");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalOperadoraPlanoServicoAutomatico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_UnidadeOrganizacional_Operadora_Plano_Servico_Automatico_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalOperadoraPlanoServicoAutomatico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Operadora_Plano_Servico_Automatico_FK1");

                entity.HasOne(d => d.IdUsuarioCadastroNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalOperadoraPlanoServicoAutomaticoIdUsuarioCadastroNavigation)
                    .HasForeignKey(d => d.IdUsuarioCadastro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Usuario_UnidadeOrganizacional_Operadora_Plano_Servico_Automatico_FK1");

                entity.HasOne(d => d.IdUsuarioExclusaoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalOperadoraPlanoServicoAutomaticoIdUsuarioExclusaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioExclusao)
                    .HasConstraintName("Usuario_UnidadeOrganizacional_Operadora_Plano_Servico_Automatico_FK2");
            });

            modelBuilder.Entity<UnidadeOrganizacionalParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdParametro, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Parametro_PK");

                entity.ToTable("UnidadeOrganizacional_Parametro");

                entity.HasIndex(e => e.IdParametro, "IX_UnidadeOrganizacional_Parametro_K1")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdUnidadeOrganizacional, "IX_UnidadeOrganizacional_Parametro_K2")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdParametro).HasColumnName("ID_PARAMETRO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdParametroNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalParametro)
                    .HasForeignKey(d => d.IdParametro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_Parametro_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalParametro)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_Parametro_UnidadeOrganizacional");
            });

            modelBuilder.Entity<UnidadeOrganizacionalPessoaEntidade>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdPessoaEntidade })
                    .HasName("UnidadeOrganizacional_PessoaEntidade_PK");

                entity.ToTable("UnidadeOrganizacional_PessoaEntidade");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdPessoaEntidade).HasColumnName("ID_PESSOA_ENTIDADE");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdPessoaEntidadeNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalPessoaEntidade)
                    .HasForeignKey(d => d.IdPessoaEntidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PessoaEntidade_UnidadeOrganizacional_PessoaEntidade_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalPessoaEntidade)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_PessoaEntidade_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalProduto>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdProduto });

                entity.ToTable("UnidadeOrganizacional_Produto");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdProduto).HasColumnName("ID_PRODUTO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalProduto)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_Produto_Produto");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalProduto)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_Produto_UnidadeOrganizacional");
            });

            modelBuilder.Entity<UnidadeOrganizacionalRecurso>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdRecurso })
                    .HasName("UnidadeOrganizacional_Recurso_PK");

                entity.ToTable("UnidadeOrganizacional_Recurso");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdRecurso).HasColumnName("ID_RECURSO");

                entity.Property(e => e.HrFinalAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_FINAL_ATENDIMENTO");

                entity.Property(e => e.HrInicialAtendimento)
                    .HasColumnType("datetime")
                    .HasColumnName("HR_INICIAL_ATENDIMENTO");

                entity.Property(e => e.HrTempoAtendimento).HasColumnName("HR_TEMPO_ATENDIMENTO");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.InAgenda).HasColumnName("IN_AGENDA");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdGrupoHorarioNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalRecurso)
                    .HasForeignKey(d => d.IdGrupoHorario)
                    .HasConstraintName("FK_UnidadeOrganizacional_Recurso_TipoDiversos");

                entity.HasOne(d => d.IdRecursoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalRecurso)
                    .HasForeignKey(d => d.IdRecurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Recurso_UnidadeOrganizacional_Recurso_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalRecurso)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Recurso_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalServico>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Servico_PK");

                entity.ToTable("UnidadeOrganizacional_Servico");

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.IdServico }, "IX_UnidadeOrganizacional_Servico_ID_UNIDADE_ORGANIZACIONAL_ID_SERVICO")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.InAtivo, "IX_UnidadeOrganizacional_Servico_IN_ATIVO")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.IdUnidadeOrganizacional, e.InAtivo }, "IX_UnidadeOrganizacional_Servico_K2_K3")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalServico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_UnidadeOrganizacional_Servico_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalServico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Servico_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalServicoAutomatico>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdServico })
                    .HasName("UnidadeOrganizacional_ServicoAutomatico_PK");

                entity.ToTable("UnidadeOrganizacional_ServicoAutomatico");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalServicoAutomatico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_UnidadeOrganizacional_ServicoAutomatico_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalServicoClinico>(entity =>
            {
                entity.HasKey(e => new { e.IdServico, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Servico_Clinico_PK");

                entity.ToTable("UnidadeOrganizacional_Servico_Clinico");

                entity.Property(e => e.IdServico).HasColumnName("ID_SERVICO");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalServicoClinico)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Servico_UnidadeOrganizacional_Servico_Clinico_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalServicoClinico)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Servico_Clinico_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalTelefone>(entity =>
            {
                entity.HasKey(e => new { e.IdTelefone, e.IdUnidadeOrganizacional })
                    .HasName("UnidadeOrganizacional_Telefone_PK");

                entity.ToTable("UnidadeOrganizacional_Telefone");

                entity.Property(e => e.IdTelefone).HasColumnName("ID_TELEFONE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdTelefoneTipo).HasColumnName("ID_TELEFONE_TIPO");

                entity.Property(e => e.NmContato)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NM_CONTATO");

                entity.Property(e => e.NrRamal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NR_RAMAL");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdTelefoneNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalTelefone)
                    .HasForeignKey(d => d.IdTelefone)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Telefone_UnidadeOrganizacional_Telefone_FK1");

                entity.HasOne(d => d.IdTelefoneTipoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalTelefone)
                    .HasForeignKey(d => d.IdTelefoneTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_Telefone_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalTelefone)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_Telefone_FK1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalTelefoneHorario>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdTelefone, e.IdHorario });

                entity.ToTable("UnidadeOrganizacional_Telefone_Horario");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdTelefone).HasColumnName("ID_TELEFONE");

                entity.Property(e => e.IdHorario).HasColumnName("ID_HORARIO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdHorarioNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalTelefoneHorario)
                    .HasForeignKey(d => d.IdHorario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_Telefone_Horario_TipoDiversos");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.UnidadeOrganizacionalTelefoneHorario)
                    .HasForeignKey(d => new { d.IdTelefone, d.IdUnidadeOrganizacional })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_Telefone_Horario_UnidadeOrganizacional_Telefone");
            });

            modelBuilder.Entity<UnidadeOrganizacionalUnidadeFisica>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeFisica, e.IdUnidadeOrganizacional });

                entity.ToTable("UnidadeOrganizacional_UnidadeFisica");

                entity.Property(e => e.IdUnidadeFisica).HasColumnName("ID_UNIDADE_FISICA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.HasOne(d => d.IdUnidadeFisicaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalUnidadeFisicaIdUnidadeFisicaNavigation)
                    .HasForeignKey(d => d.IdUnidadeFisica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_UnidadeFisica_UnidadeOrganizacional");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalUnidadeFisicaIdUnidadeOrganizacionalNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_UnidadeFisica_UnidadeOrganizacional1");
            });

            modelBuilder.Entity<UnidadeOrganizacionalUnidadeOrganizacional>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacionalDependente, e.IdUnidadeOrganizacional, e.IdClassificacao })
                    .HasName("UnidadeOrganizacional_UnidadeOrganizacional_PK");

                entity.ToTable("UnidadeOrganizacional_UnidadeOrganizacional");

                entity.Property(e => e.IdUnidadeOrganizacionalDependente).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_DEPENDENTE");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdClassificacao)
                    .HasColumnName("ID_CLASSIFICACAO")
                    .HasDefaultValueSql("(3167)");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdClassificacaoNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalUnidadeOrganizacional)
                    .HasForeignKey(d => d.IdClassificacao)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_UnidadeOrganizacional_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalUnidadeOrganizacionalIdUnidadeOrganizacionalNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_UnidadeOrganizacional_UnidadeOrganizacional1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalDependenteNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalUnidadeOrganizacionalIdUnidadeOrganizacionalDependenteNavigation)
                    .HasForeignKey(d => d.IdUnidadeOrganizacionalDependente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UnidadeOrganizacional_UnidadeOrganizacional_UnidadeOrganizacional");
            });

            modelBuilder.Entity<UnidadeOrganizacionalUnidadeOrganizacionalOcorrenciaTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdOcorrencia })
                    .HasName("UnidadeOrganizacional_UnidadeOrganizacionalOcorrenciaTipo_PK");

                entity.ToTable("UnidadeOrganizacional_UnidadeOrganizacionalOcorrenciaTipo");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdOcorrencia).HasColumnName("ID_OCORRENCIA");

                entity.Property(e => e.DtOcorrencia)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_OCORRENCIA");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxMotivo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TX_MOTIVO");

                entity.HasOne(d => d.IdOcorrenciaNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalUnidadeOrganizacionalOcorrenciaTipo)
                    .HasForeignKey(d => d.IdOcorrencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_UnidadeOrganizacional_UnidadeOrganizacionalOcorrenciaTipo_FK1");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeOrganizacionalUnidadeOrganizacionalOcorrenciaTipo)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UnidadeOrganizacional_UnidadeOrganizacional_UnidadeOrganizacionalOcorrenciaTipo_FK1");
            });

            modelBuilder.Entity<UnidadeorganizacionalLeitotipoVisitantes>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadeOrganizacional, e.IdLeitoTipo, e.IdTipoVisitante })
                    .HasName("UNIDADEORGANIZACIONAL_LEITOTIPO_VISITANTES_PK");

                entity.ToTable("UNIDADEORGANIZACIONAL_LEITOTIPO_VISITANTES");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdLeitoTipo).HasColumnName("ID_LEITO_TIPO");

                entity.Property(e => e.IdTipoVisitante).HasColumnName("ID_TIPO_VISITANTE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NrVisitantes).HasColumnName("NR_VISITANTES");

                entity.HasOne(d => d.IdLeitoTipoNavigation)
                    .WithMany(p => p.UnidadeorganizacionalLeitotipoVisitantesIdLeitoTipoNavigation)
                    .HasForeignKey(d => d.IdLeitoTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TIPODIVERSOS_UNIDADEORGANIZACIONAL_LEITOTIPO_VISITANTES_FK1");

                entity.HasOne(d => d.IdTipoVisitanteNavigation)
                    .WithMany(p => p.UnidadeorganizacionalLeitotipoVisitantesIdTipoVisitanteNavigation)
                    .HasForeignKey(d => d.IdTipoVisitante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TIPODIVERSOS_UNIDADEORGANIZACIONAL_LEITOTIPO_VISITANTES_FK2");

                entity.HasOne(d => d.IdUnidadeOrganizacionalNavigation)
                    .WithMany(p => p.UnidadeorganizacionalLeitotipoVisitantes)
                    .HasForeignKey(d => d.IdUnidadeOrganizacional)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UNIDADEORGANIZACIONAL_UNIDADEORGANIZACIONAL_LEITOTIPO_VISITANTES_FK1");
            });

            modelBuilder.Entity<UnidadesRepasse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UnidadesRepasse");

                entity.Property(e => e.HrTempoAtendimento).HasColumnName("HR_TEMPO_ATENDIMENTO");

                entity.Property(e => e.IdAgendaBase).HasColumnName("ID_AGENDA_BASE");

                entity.Property(e => e.IdGrupoHorario).HasColumnName("ID_GRUPO_HORARIO");

                entity.Property(e => e.IdPessoa).HasColumnName("ID_PESSOA");

                entity.Property(e => e.IdUnidadeOrganizacional).HasColumnName("ID_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.IdUnidadeOrganizacionalCategoriaTipo).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_CATEGORIA_TIPO");

                entity.Property(e => e.IdUnidadeOrganizacionalTipo).HasColumnName("ID_UNIDADE_ORGANIZACIONAL_TIPO");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.InEstruturaLeito).HasColumnName("IN_ESTRUTURA_LEITO");

                entity.Property(e => e.InExibeMedicoAgenda).HasColumnName("IN_EXIBE_MEDICO_AGENDA");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL");

                entity.Property(e => e.NrNivel).HasColumnName("NR_NIVEL");

                entity.Property(e => e.QnAreaFisica)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("QN_AREA_FISICA");

                entity.Property(e => e.TxAbreviatura)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TX_ABREVIATURA");

                entity.Property(e => e.TxDefinicaoNegocio)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("TX_DEFINICAO_NEGOCIO");
            });

            modelBuilder.Entity<UnidadesServiços>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Unidades_Serviços");

                entity.Property(e => e.CdServico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CD_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.InAtivo).HasColumnName("IN_ATIVO");

                entity.Property(e => e.NmUnidadeOrganizacional)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("NM_UNIDADE_ORGANIZACIONAL")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TxDescricaoServico)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_DESCRICAO_SERVICO")
                    .HasComment("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<Uniitead>(entity =>
            {
                entity.HasKey(e => new { e.UarSeqImp, e.UctConNum, e.UciSeqNum, e.UiaSeqNum })
                    .HasName("PK__UNIITEAD__2A962F78");

                entity.ToTable("UNIITEAD");

                entity.Property(e => e.UctConNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UiaQtdPag).HasColumnType("smallmoney");

                entity.Property(e => e.UiaQtdUt).HasColumnName("UiaQtdUT");

                entity.Property(e => e.UiaVlrAnt).HasColumnType("money");

                entity.Property(e => e.UiaVlrCalc).HasColumnType("money");

                entity.Property(e => e.UiaVlrPag).HasColumnType("money");

                entity.Property(e => e.UiaVlrUt)
                    .HasColumnType("smallmoney")
                    .HasColumnName("UiaVlrUT");
            });

            modelBuilder.Entity<Uniitece>(entity =>
            {
                entity.HasKey(e => new { e.UarSeqImp, e.UctConNum, e.UciSeqNum, e.UicSeqNum });

                entity.ToTable("UNIITECE");

                entity.Property(e => e.UctConNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicCompl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicCreEst)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicDatRea).HasColumnType("datetime");

                entity.Property(e => e.UicIteTip)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicMotDes)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicMotivo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicPreExe)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicPreRec)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UicVal).HasColumnType("money");
            });

            modelBuilder.Entity<Uniiteer>(entity =>
            {
                entity.HasKey(e => new { e.UarSeqImp, e.UctConNum, e.UciSeqNum, e.UieSeqNum })
                    .HasName("PK__UNIITEER__2B8A53B1");

                entity.ToTable("UNIITEER");

                entity.Property(e => e.UctConNum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UieCodGlo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UieDesGlo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UieIdcReap)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UieVlrGlo).HasColumnType("money");
            });

            modelBuilder.Entity<UnimedPc>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("UnimedPC");

                entity.Property(e => e.Codigo).ValueGeneratedNever();
            });

            modelBuilder.Entity<UnimedTransporte>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TxLinha)
                    .HasMaxLength(364)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA");
            });

            modelBuilder.Entity<UnimedTransporteArquivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UnimedTransporte_Arquivo");

                entity.HasIndex(e => e.IdArquivo, "IX_UnimedTransporte_Arquivo_ID_ARQUIVO");

                entity.Property(e => e.IdArquivo).HasColumnName("ID_ARQUIVO");

                entity.Property(e => e.NrOrdemInsercao)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("NR_ORDEM_INSERCAO");

                entity.Property(e => e.TxLinha)
                    .HasMaxLength(364)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA");
            });

            modelBuilder.Entity<UnimedTransporteDiretorioArquivo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TxLinha)
                    .HasMaxLength(364)
                    .IsUnicode(false)
                    .HasColumnName("TX_LINHA");
            });

            modelBuilder.Entity<UnimedsConserto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UNIMEDS_CONSERTO");

                entity.Property(e => e.IdArquivoUnimed).HasColumnName("id_arquivo_unimed");

                entity.Property(e => e.IdContaUnimed).HasColumnName("id_conta_unimed");

                entity.Property(e => e.NumConta).HasColumnName("NUM_CONTA");

                entity.Property(e => e.NumItem)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("num_item");

                entity.Property(e => e.NumMatricula)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("num_matricula");

                entity.Property(e => e.NumeroContaHospitale).HasColumnName("numero_conta_hospitale");

                entity.Property(e => e.NumeroContaPHospitalte).HasColumnName("numero_conta_p_hospitalte");

                entity.Property(e => e.NumeroDaGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("numero_da_guia");

                entity.Property(e => e.OperadoraSistemaLegado).HasColumnName("operadora_sistema_legado");

                entity.Property(e => e.SenhaGuia)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("senha_guia");
            });

            modelBuilder.Entity<Url>(entity =>
            {
                entity.HasKey(e => e.IdUrl)
                    .HasName("URL_PK");

                entity.ToTable("URL");

                entity.Property(e => e.IdUrl).HasColumnName("ID_URL");

                entity.Property(e => e.IdUrlTipo).HasColumnName("ID_URL_TIPO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.TxUrl)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("TX_URL");

                entity.HasOne(d => d.IdUrlTipoNavigation)
                    .WithMany(p => p.Url)
                    .HasForeignKey(d => d.IdUrlTipo)
                    .HasConstraintName("TipoDiversos_URL_FK1");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario)
                    .HasName("Usuario_PK");

                entity.HasIndex(e => e.IdPessoa, "IX_USUARIO_IDPESSOA")
                    .IsUnique()
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.TxLogin, "IX_USUARIO_TXLOGIN")
                    .IsUnique()
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdPessoa, e.IdCorreioEletronico }, "IX_Usuario_ID_PESSOA_ID_CORREIO_ELETRONICO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdStatusUsuario, "IX_Usuario_ID_STATUS_USUARIO")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => new { e.IdUsuario, e.TxLogin }, "IX_Usuario_K1_K3")
                    .HasFillFactor((byte)85);

                entity.HasIndex(e => e.IdStatusUsuario, "IX_Usuario_TipoDiversos")
                    .HasFillFactor((byte)85);

                entity.Property(e => e.IdUsuario)
                    .HasColumnName("ID_USUARIO")
                    .HasComment("identificado único do usuário");

                entity.Property(e => e.BiAssinatura)
                    .HasColumnType("image")
                    .HasColumnName("BI_ASSINATURA")
                    .HasComment("a imagem da assinatura digitalizada do usuário");

                entity.Property(e => e.DtFimInatividade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_FIM_INATIVIDADE")
                    .HasComment("data final de bloqueio do usuário");

                entity.Property(e => e.DtInicioInatividade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_INICIO_INATIVIDADE")
                    .HasComment("data do início de bloqueio do usuário");

                entity.Property(e => e.DtTrocaSenha)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_TROCA_SENHA")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("data da última troca de senha");

                entity.Property(e => e.IdCorreioEletronico)
                    .HasColumnName("ID_CORREIO_ELETRONICO")
                    .HasComment("identificador de referencia do e-mail");

                entity.Property(e => e.IdPessoa)
                    .HasColumnName("ID_PESSOA")
                    .HasComment("identificador da pessoa que se refere");

                entity.Property(e => e.IdStatusUsuario)
                    .HasColumnName("ID_STATUS_USUARIO")
                    .HasComment("identificador do status do usuário. Tipo Tabela 88.");

                entity.Property(e => e.InSenhaExpirada)
                    .HasColumnName("IN_SENHA_EXPIRADA")
                    .HasComment("caso já tenha expirado a senha, fica como TRUE.");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.Property(e => e.Salt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SALT");

                entity.Property(e => e.TxAssinatura)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TX_ASSINATURA")
                    .HasComment("um texto da assinatura do usuário");

                entity.Property(e => e.TxLogin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TX_LOGIN")
                    .HasComment("login do usuario para entrar no sistema");

                entity.Property(e => e.TxSenha)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TX_SENHA")
                    .HasComment("senha criptografada do usuário para entrar no sistema. caso a senha esteja vazia o usuário é do AD");

                entity.HasOne(d => d.IdStatusUsuarioNavigation)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.IdStatusUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("TipoDiversos_Usuario_FK1");
            });

            modelBuilder.Entity<UsuarioOperadora>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdOperadora });

                entity.ToTable("Usuario_Operadora");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdOperadora).HasColumnName("ID_OPERADORA");

                entity.Property(e => e.DtValidade)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_VALIDADE");

                entity.Property(e => e.InAtivo)
                    .IsRequired()
                    .HasColumnName("IN_ATIVO")
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdOperadoraNavigation)
                    .WithMany(p => p.UsuarioOperadora)
                    .HasForeignKey(d => d.IdOperadora)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Operadora_Pessoa");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.UsuarioOperadora)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Operadora_Usuario");
            });

            modelBuilder.Entity<UsuarioTipoContaReceber>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdTipoConta })
                    .HasName("Usuario_TipoContaReceber_PK");

                entity.ToTable("Usuario_TipoContaReceber");

                entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

                entity.Property(e => e.IdTipoConta).HasColumnName("ID_TIPO_CONTA");

                entity.Property(e => e.DtAtualizacao)
                    .HasColumnType("datetime")
                    .HasColumnName("DT_ATUALIZACAO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuarioAtualizacao).HasColumnName("ID_USUARIO_ATUALIZACAO");

                entity.HasOne(d => d.IdTipoContaNavigation)
                    .WithMany(p => p.UsuarioTipoContaReceber)
                    .HasForeignKey(d => d.IdTipoConta)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.UsuarioTipoContaReceberIdUsuarioNavigation)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.IdUsuarioAtualizacaoNavigation)
                    .WithMany(p => p.UsuarioTipoContaReceberIdUsuarioAtualizacaoNavigation)
                    .HasForeignKey(d => d.IdUsuarioAtualizacao)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ValorFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Valor_final");

                entity.Property(e => e.Co).HasColumnName("CO");

                entity.Property(e => e.Codigo).HasMaxLength(255);

                entity.Property(e => e.CustoRedutor)
                    .HasColumnType("money")
                    .HasColumnName("Custo_redutor");

                entity.Property(e => e.M2Filme).HasColumnName("M2_Filme");

                entity.Property(e => e.Pa)
                    .HasMaxLength(255)
                    .HasColumnName("PA");

                entity.Property(e => e.Porte).HasMaxLength(255);

                entity.Property(e => e.QuantidadeValorUco).HasColumnName("Quantidade_valor_UCO");

                entity.Property(e => e.ReducaoUco).HasColumnName("Reducao_UCO");

                entity.Property(e => e.RedutorPorte)
                    .HasColumnType("money")
                    .HasColumnName("Redutor_porte");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.TotalFilme)
                    .HasColumnType("money")
                    .HasColumnName("Total_filme");

                entity.Property(e => e.Ur).HasColumnName("UR");

                entity.Property(e => e.ValorEx)
                    .HasColumnType("money")
                    .HasColumnName("Valor_ex");

                entity.Property(e => e.ValorFilme)
                    .HasColumnType("money")
                    .HasColumnName("Valor_filme");

                entity.Property(e => e.ValorFinal1)
                    .HasColumnType("money")
                    .HasColumnName("Valor_final");
            });

            modelBuilder.Entity<ValorReferencia>(entity =>
            {
                entity.HasKey(e => e.IdValorReferencia)
                    .HasName("ValorReferencia_PK");

                entity.Property(e => e.IdValorReferencia).HasColumnName("ID_VALOR_REFERENCIA");

                entity.Property(e => e.IdExameMaterialMeioMetodo).HasColumnName("ID_EXAME_MATERIAL_MEIO_METODO");

                entity.Property(e => e.IdFaixaEtaria).HasColumnName("ID_FAIXA_ETARIA");

                entity.Property(e => e.IdItemExame).HasColumnName("ID_ITEM_EXAME");

                entity.Property(e => e.IdSexoTipo).HasColumnName("ID_SEXO_TIPO");

                entity.Property(e => e.IdUnidadeTipo).HasColumnName("ID_UNIDADE_TIPO");

                entity.Property(e => e.NrValorMaximo).HasColumnName("NR_VALOR_MAXIMO");

                entity.Property(e => e.NrValorMinimo).HasColumnName("NR_VALOR_MINIMO");

                entity.Property(e => e.RvVersaoLinha)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("RV_VERSAO_LINHA");

                entity.HasOne(d => d.IdFaixaEtariaNavigation)
                    .WithMany(p => p.ValorReferencia)
                    .HasForeignKey(d => d.IdFaixaEtaria)
                    .HasConstraintName("FaixaEtaria_ValorReferencia_FK1");

                entity.HasOne(d => d.IdSexoTipoNavigation)
                    .WithMany(p => p.ValorReferenciaIdSexoTipoNavigation)
                    .HasForeignKey(d => d.IdSexoTipo)
                    .HasConstraintName("TipoDiversos_ValorReferencia_FK1");

                entity.HasOne(d => d.IdUnidadeTipoNavigation)
                    .WithMany(p => p.ValorReferenciaIdUnidadeTipoNavigation)
                    .HasForeignKey(d => d.IdUnidadeTipo)
                    .HasConstraintName("TipoDiversos_ValorReferencia_FK2");

                entity.HasOne(d => d.Id)
                    .WithMany(p => p.ValorReferencia)
                    .HasForeignKey(d => new { d.IdExameMaterialMeioMetodo, d.IdItemExame })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ValorReferencia_Exame_ItemExame");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}